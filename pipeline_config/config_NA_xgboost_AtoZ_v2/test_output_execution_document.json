{
  "PIPELINE_STEP_CONFIGS": {
    "CradleDataLoading-Training": {
      "STEP_CONFIG": {
        "dataSources": {
          "dataSources": [
            {
              "dataSourceName": "RAW_MDS",
              "dataSourceType": "MDS",
              "mdsDataSourceProperties": {
                "serviceName": "MDS_DATA_SET_NAME_IN_STRING",
                "orgId": "MDS_ORG_UNIT_IN_STRING",
                "region": "MDS_REGION/NA/EU/FE",
                "useHourlyEdxDataSet": false,
                "outputSchema": [
                  {
                    "fieldName": "OUTPUT_FIELD_NAME",
                    "fieldType": "STRING"
                  },
                  {
                    "fieldName": "orderId",
                    "fieldType": "STRING"
                  }
                ]
              }
            },
            {
              "dataSourceName": "TAGS",
              "dataSourceType": "ANDES",
              "andesDataSourceProperties": {
                "provider": "26b27bde-3847-49c6-a07c-0289c17d9c33",
                "tableName": "fraud-tags-na"
              }
            }
          ],
          "startDate": "2021-09-01T11:00:00",
          "endDate": "2021-09-02T11:00:00"
        },
        "transformSpecification": {
          "transformSQL": "\n        select RAW_MDS.*, IS_FRD from RAW_MDS left join TAGS on RAW_MDS.objectId=TAGS.ORDER_ID  \n        AND TAGS.ORDER_DAY_TIMESTAMP >= TO_TIMESTAMP('${startDate}', 'yyyy-MM-dd')  \n        AND TAGS.ORDER_DAY_TIMESTAMP <= TO_TIMESTAMP('${endDate}', 'yyyy-MM-dd')\n        ",
          "jobSplitOptions": {
            "splitJob": false,
            "daysPerSplit": 1,
            "mergeSql": "\n                select * from INPUT\n            "
          }
        },
        "outputSpecification": {
          "outputSchema": [
            "OUTPUT_FIELD_NAME",
            "orderId",
            "IS_FRD"
          ],
          "outputPath": "s3://sandboxuserdependency-miaoqi-personals3bucket-6e6w5i9g07xu/mds_download_output/6c34b329-5178-43a0-82c9-a4d42e850ac6",
          "outputFormat": "PARQUET",
          "outputSaveMode": "ERRORIFEXISTS",
          "outputFileCount": 0,
          "keepDotInOutputSchema": true
        },
        "cradleJobSpecification": {
          "clusterType": "LARGE",
          "cradleAccount": "CMLS-RED",
          "extraSparkJobArguments": "",
          "jobRetryCount": 0
        }
      },
      "STEP_TYPE": [
        "WORKFLOW_INPUT",
        "CradleDataLoadingStep"
      ]
    },
    "CradleDataLoading-Calibration": {
      "STEP_CONFIG": {
        "dataSources": {
          "dataSources": [
            {
              "dataSourceName": "RAW_MDS",
              "dataSourceType": "MDS",
              "mdsDataSourceProperties": {
                "serviceName": "MDS_DATA_SET_NAME_IN_STRING",
                "orgId": "MDS_ORG_UNIT_IN_STRING",
                "region": "MDS_REGION/NA/EU/FE",
                "useHourlyEdxDataSet": false,
                "outputSchema": [
                  {
                    "fieldName": "OUTPUT_FIELD_NAME",
                    "fieldType": "STRING"
                  },
                  {
                    "fieldName": "orderId",
                    "fieldType": "STRING"
                  }
                ]
              }
            },
            {
              "dataSourceName": "TAGS",
              "dataSourceType": "ANDES",
              "andesDataSourceProperties": {
                "provider": "26b27bde-3847-49c6-a07c-0289c17d9c33",
                "tableName": "fraud-tags-na"
              }
            }
          ],
          "startDate": "2021-09-01T11:00:00",
          "endDate": "2021-09-02T11:00:00"
        },
        "transformSpecification": {
          "transformSQL": "\n        select RAW_MDS.*, IS_FRD from RAW_MDS left join TAGS on RAW_MDS.objectId=TAGS.ORDER_ID  \n        AND TAGS.ORDER_DAY_TIMESTAMP >= TO_TIMESTAMP('${startDate}', 'yyyy-MM-dd')  \n        AND TAGS.ORDER_DAY_TIMESTAMP <= TO_TIMESTAMP('${endDate}', 'yyyy-MM-dd')\n        ",
          "jobSplitOptions": {
            "splitJob": false,
            "daysPerSplit": 1,
            "mergeSql": "\n                select * from INPUT\n            "
          }
        },
        "outputSpecification": {
          "outputSchema": [
            "OUTPUT_FIELD_NAME",
            "orderId",
            "IS_FRD"
          ],
          "outputPath": "s3://sandboxuserdependency-miaoqi-personals3bucket-6e6w5i9g07xu/mds_download_output/6c34b329-5178-43a0-82c9-a4d42e850ac6",
          "outputFormat": "PARQUET",
          "outputSaveMode": "ERRORIFEXISTS",
          "outputFileCount": 0,
          "keepDotInOutputSchema": true
        },
        "cradleJobSpecification": {
          "clusterType": "LARGE",
          "cradleAccount": "CMLS-RED",
          "extraSparkJobArguments": "",
          "jobRetryCount": 0
        }
      },
      "STEP_TYPE": [
        "WORKFLOW_INPUT",
        "CradleDataLoadingStep"
      ]
    },
    "XGBoostTraining": {
      "STEP_CONFIG": {},
      "STEP_TYPE": "TRAINING_STEP"
    },
    "Registration-NA": {
      "STEP_CONFIG": {
        "model_domain": "The domain to register your model in (this is where you will find your model on DAWS)",
        "model_objective": "The objective to register your model in (this is where you will find your model on DAWS)",
        "source_model_inference_content_types": "Provide a list of types (application/json and text/csv are currently supported) for the content. Ex) ['text/csv']",
        "source_model_inference_response_types": "Provide a list of types (application/json and text/csv are currently supported) for the response. Ex) ['application/json']",
        "source_model_inference_input_variable_list": "Provide a dictionary mapping the variable name to the variable type (variable types supported are 'TEXT' and 'NUMERIC') for both input and output vars. Ex) {'INVAR': 'TEXT'}",
        "source_model_inference_output_variable_list": "Provide a dictionary mapping the variable name to the variable type (variable types supported are 'TEXT' and 'NUMERIC') for both input and output vars. Ex) {'OUTVAR': 'NUMERIC'}",
        "model_registration_region": "The region that your SageMaker model will be registered in, valid values are NA/EU/FE",
        "model_owner": "The team id of the team that owns this model. This can be found at https://permissions.amazon.com/ by searching for your team name to get the team id.",
        "source_model_inference_image_arn": "The image arn for your trained model to be registered. This can be found by calling model.image_uri on a created model or estimator.model_uri/estimator.image_uri on an Estimator object.",
        "source_model_region": "Optional: The region your model was trained in and the model artifacts are located in. Default is 'us-east-1'",
        "source_model_environment_variable_map": "Optional: You can provide a dictionary of environment variables to be associated with your model. Ex) {'SAGEMAKER_CONTAINER_LOG_LEVEL': '20'}",
        "load_testing_info_map": "Optional: You can provide a dictionary of load testing parameters. All the parameters listed are required if providing the load testing map. Ex) {'samplePayloadS3Bucket': 'mods-personal-bucket', 'samplePayloadS3Key': 'sample_payload.csv', 'expectedTPS': '2000', 'maxLatencyInMillisecond': '50', 'instanceTypeList': ['ml.m5.xlarge', 'ml.m5d.2xlarge']}"
      },
      "STEP_TYPE": [
        "PROCESSING_STEP",
        "MimsModelRegistrationProcessingStep"
      ]
    }
  },
  "PIPELINE_ADDITIONAL_PARAMS": {}
}