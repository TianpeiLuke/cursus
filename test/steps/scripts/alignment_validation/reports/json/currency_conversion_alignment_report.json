{
  "summary": {
    "total_tests": 1,
    "passed_tests": 1,
    "failed_tests": 0,
    "pass_rate": 100.0,
    "total_issues": 2,
    "critical_issues": 0,
    "error_issues": 0,
    "warning_issues": 1,
    "info_issues": 1,
    "highest_severity": "WARNING",
    "validation_timestamp": "2025-09-28T11:13:56.946833",
    "is_passing": true
  },
  "scoring": {
    "overall_score": 100.0,
    "quality_rating": "Excellent",
    "level_scores": {
      "level1_script_contract": 100.0,
      "level2_contract_spec": 100.0,
      "level3_spec_dependencies": 100.0,
      "level4_builder_config": 100.0
    },
    "scoring_report": {
      "overall": {
        "score": 100.0,
        "rating": "Excellent",
        "passed": 4,
        "total": 4,
        "pass_rate": 100.0
      },
      "levels": {
        "level1_script_contract": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level2_contract_spec": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level3_spec_dependencies": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level4_builder_config": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        }
      },
      "failed_tests": [],
      "metadata": {
        "scoring_system": "alignment_validation",
        "level_weights": {
          "level1_script_contract": 1.0,
          "level2_contract_spec": 1.5,
          "level3_spec_dependencies": 2.0,
          "level4_builder_config": 2.5
        },
        "test_importance": {
          "script_contract_path_alignment": 1.5,
          "contract_spec_logical_names": 1.4,
          "spec_dependency_resolution": 1.3,
          "builder_config_environment_vars": 1.2,
          "script_contract_environment_vars": 1.2,
          "contract_spec_dependency_mapping": 1.3,
          "spec_dependency_property_paths": 1.4,
          "builder_config_specification_alignment": 1.5
        }
      }
    }
  },
  "level1_results": {
    "currency_conversion": {
      "test_name": "script_contract_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.926354",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "currency_conversion",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_env_access",
          "message": "Helper functions use direct environment access - consider parameter passing",
          "details": {
            "script": "currency_conversion",
            "helper_accesses": [
              {
                "function": null,
                "variable": "TRAIN_RATIO",
                "line_number": 303
              },
              {
                "function": null,
                "variable": "TEST_VAL_RATIO",
                "line_number": 308
              },
              {
                "function": null,
                "variable": "CURRENCY_CONVERSION_VARS",
                "line_number": 331
              },
              {
                "function": null,
                "variable": "CURRENCY_CONVERSION_DICT",
                "line_number": 334
              },
              {
                "function": null,
                "variable": "MARKETPLACE_INFO",
                "line_number": 337
              },
              {
                "function": null,
                "variable": "LABEL_FIELD",
                "line_number": 338
              },
              {
                "function": null,
                "variable": "TRAIN_RATIO",
                "line_number": 339
              },
              {
                "function": null,
                "variable": "TEST_VAL_RATIO",
                "line_number": 340
              }
            ]
          },
          "recommendation": "Pass environment variables as parameters to helper functions instead of direct access",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "currency_conversion"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.job_type",
            "line_number": 164
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.mode",
            "line_number": 165
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 168
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 169
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 170
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for input_paths",
          "details": {
            "script": "currency_conversion",
            "parameter": "input_paths",
            "current_pattern": "input_paths.get",
            "line_number": 173
          },
          "recommendation": "Use input_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for output_paths",
          "details": {
            "script": "currency_conversion",
            "parameter": "output_paths",
            "current_pattern": "output_paths.get",
            "line_number": 174
          },
          "recommendation": "Use output_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.enable_conversion",
            "line_number": 180
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.marketplace_id_col",
            "line_number": 183
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.currency_col",
            "line_number": 187
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.default_currency",
            "line_number": 188
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.skip_invalid_currencies",
            "line_number": 189
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.n_workers",
            "line_number": 190
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 208
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.train_ratio",
            "line_number": 211
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.test_val_ratio",
            "line_number": 217
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "currency_conversion"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_helper_functions",
          "message": "Helper function 'None' accesses environment directly",
          "details": {
            "script": "currency_conversion",
            "function": null,
            "env_variables": [
              "TRAIN_RATIO",
              "TEST_VAL_RATIO",
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD",
              "TRAIN_RATIO",
              "TEST_VAL_RATIO"
            ],
            "line_numbers": [
              303,
              308,
              331,
              334,
              337,
              338,
              339,
              340
            ]
          },
          "recommendation": "Refactor 'None' to accept environment variables as parameters",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "framework_detected",
          "message": "Processing script uses sklearn framework",
          "details": {
            "script": "currency_conversion",
            "step_type": "Processing",
            "framework": "sklearn"
          },
          "recommendation": "Ensure sklearn dependencies are properly specified",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "currency_conversion",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_env_access",
            "message": "Helper functions use direct environment access - consider parameter passing",
            "details": {
              "script": "currency_conversion",
              "helper_accesses": [
                {
                  "function": null,
                  "variable": "TRAIN_RATIO",
                  "line_number": 303
                },
                {
                  "function": null,
                  "variable": "TEST_VAL_RATIO",
                  "line_number": 308
                },
                {
                  "function": null,
                  "variable": "CURRENCY_CONVERSION_VARS",
                  "line_number": 331
                },
                {
                  "function": null,
                  "variable": "CURRENCY_CONVERSION_DICT",
                  "line_number": 334
                },
                {
                  "function": null,
                  "variable": "MARKETPLACE_INFO",
                  "line_number": 337
                },
                {
                  "function": null,
                  "variable": "LABEL_FIELD",
                  "line_number": 338
                },
                {
                  "function": null,
                  "variable": "TRAIN_RATIO",
                  "line_number": 339
                },
                {
                  "function": null,
                  "variable": "TEST_VAL_RATIO",
                  "line_number": 340
                }
              ]
            },
            "recommendation": "Pass environment variables as parameters to helper functions instead of direct access"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "currency_conversion"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.job_type",
              "line_number": 164
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.mode",
              "line_number": 165
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 168
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 169
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 170
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for input_paths",
            "details": {
              "script": "currency_conversion",
              "parameter": "input_paths",
              "current_pattern": "input_paths.get",
              "line_number": 173
            },
            "recommendation": "Use input_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for output_paths",
            "details": {
              "script": "currency_conversion",
              "parameter": "output_paths",
              "current_pattern": "output_paths.get",
              "line_number": 174
            },
            "recommendation": "Use output_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.enable_conversion",
              "line_number": 180
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.marketplace_id_col",
              "line_number": 183
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.currency_col",
              "line_number": 187
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.default_currency",
              "line_number": 188
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.skip_invalid_currencies",
              "line_number": 189
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.n_workers",
              "line_number": 190
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 208
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.train_ratio",
              "line_number": 211
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.test_val_ratio",
              "line_number": 217
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "currency_conversion"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "severity": "WARNING",
            "category": "testability_helper_functions",
            "message": "Helper function 'None' accesses environment directly",
            "details": {
              "script": "currency_conversion",
              "function": null,
              "env_variables": [
                "TRAIN_RATIO",
                "TEST_VAL_RATIO",
                "CURRENCY_CONVERSION_VARS",
                "CURRENCY_CONVERSION_DICT",
                "MARKETPLACE_INFO",
                "LABEL_FIELD",
                "TRAIN_RATIO",
                "TEST_VAL_RATIO"
              ],
              "line_numbers": [
                303,
                308,
                331,
                334,
                337,
                338,
                339,
                340
              ]
            },
            "recommendation": "Refactor 'None' to accept environment variables as parameters"
          },
          {
            "severity": "INFO",
            "category": "framework_detected",
            "message": "Processing script uses sklearn framework",
            "details": {
              "script": "currency_conversion",
              "step_type": "Processing",
              "framework": "sklearn"
            },
            "recommendation": "Ensure sklearn dependencies are properly specified"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for currency_conversion",
            "recommendation": "Create processing specification file for currency_conversion",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_spec_path": "cursus/steps/specs/currency_conversion_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for currency_conversion",
            "recommendation": "Create processing builder file for currency_conversion",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_builder_path": "cursus/steps/builders/builder_currency_conversion_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/currency_conversion.py",
          "path_references": [
            "path='Get currency code for a given marketplace ID.' line_number=25 context='    default_currency: str,\\n) -> str:\\n>>>     \"\"\"Get currency code for a given marketplace ID.\"\"\"\\n    try:\\n        if pd.isna(marketplace_id) or str(int(marketplace_id)) not in marketplace_info:' is_hardcoded=True construction_method=None",
            "path='Combine currency codes from marketplace ID and existing currency column.' line_number=42 context='    skip_invalid_currencies: bool,\\n) -> Tuple[pd.DataFrame, str]:\\n>>>     \"\"\"Combine currency codes from marketplace ID and existing currency column.\"\"\"\\n    df[\"currency_code_from_marketplace_id\"] = df[marketplace_id_col].apply(\\n        lambda x: get_currency_code(x, marketplace_info, default_currency)' is_hardcoded=True construction_method=None",
            "path=\"Convert single variable's currency values.\" line_number=68 context='    args: Tuple[pd.DataFrame, str, pd.Series]\\n) -> pd.Series:\\n>>>     \"\"\"Convert single variable\\'s currency values.\"\"\"\\n    df, variable, exchange_rate_series = args\\n    return df[variable] / exchange_rate_series.values' is_hardcoded=True construction_method=None",
            "path='Perform parallel currency conversion on multiple variables.' line_number=80 context='    n_workers: int = 50,\\n) -> pd.DataFrame:\\n>>>     \"\"\"Perform parallel currency conversion on multiple variables.\"\"\"\\n    exchange_rate_series = df[currency_col].apply(\\n        lambda x: currency_conversion_dict.get(x, 1.0)' is_hardcoded=True construction_method=None",
            "path='Process currency conversion.' line_number=110 context='    n_workers: int = 50,\\n) -> pd.DataFrame:\\n>>>     \"\"\"Process currency conversion.\"\"\"\\n    # Drop rows with missing marketplace IDs\\n    df = df.dropna(subset=[marketplace_id_col]).reset_index(drop=True)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/data' line_number=173 context='\\n    # Extract paths from parameters\\n>>>     input_base = Path(input_paths.get(\"data_input\", \"/opt/ml/processing/input/data\"))\\n    output_base = Path(output_paths.get(\"data_output\", \"/opt/ml/processing/output\"))\\n    output_base.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=174 context='    # Extract paths from parameters\\n    input_base = Path(input_paths.get(\"data_input\", \"/opt/ml/processing/input/data\"))\\n>>>     output_base = Path(output_paths.get(\"data_output\", \"/opt/ml/processing/output\"))\\n    output_base.mkdir(parents=True, exist_ok=True)\\n' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=201 context='        dfs = []\\n        for sp in splits:\\n>>>             fpath = input_base / sp / f\"{sp}_processed_data.csv\"\\n            logger.info(f\"  Reading split {sp} from {fpath}\")\\n            dfs.append(pd.read_csv(fpath))' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=232 context='            # processed\\n            proc = split_df.copy()\\n>>>             proc_path = out_dir / f\"{split_name}_processed_data.csv\"\\n            proc.to_csv(proc_path, index=False)\\n            logger.info(f\"Wrote converted processed: {proc_path} (shape={proc.shape})\")' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=238 context='            # full (just alias here\u2014but you could re-read your full_data.csv if needed)\\n            full = proc.copy()\\n>>>             full_path = out_dir / f\"{split_name}_full_data.csv\"\\n            full.to_csv(full_path, index=False)\\n            logger.info(f\"Wrote converted full: {full_path} (shape={full.shape})\")' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=251 context='        for sp in splits:\\n            in_dir = input_base / sp\\n>>>             proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n            full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=252 context='            in_dir = input_base / sp\\n            proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n>>>             full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n\\n            df_proc = pd.read_csv(proc_in_path)' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=261 context='\\n            # write processed\\n>>>             proc_out = out_dir / f\"{sp}_processed_data.csv\"\\n            df_conv.to_csv(proc_out, index=False)\\n            logger.info(' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=271 context='                df_full = pd.read_csv(full_in_path)\\n                df_full_conv = apply_conversion(df_full)\\n>>>                 full_out = out_dir / f\"{sp}_full_data.csv\"\\n                df_full_conv.to_csv(full_out, index=False)\\n                logger.info(' is_hardcoded=True construction_method=None",
            "path='Currency conversion step complete.' line_number=277 context='                )\\n\\n>>>     logger.info(\"Currency conversion step complete.\")\\n\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/data' line_number=321 context='\\n        # Standard SageMaker paths\\n>>>         INPUT_PATH = \"/opt/ml/processing/input/data\"\\n        OUTPUT_PATH = \"/opt/ml/processing/output\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=322 context='        # Standard SageMaker paths\\n        INPUT_PATH = \"/opt/ml/processing/input/data\"\\n>>>         OUTPUT_PATH = \"/opt/ml/processing/output\"\\n\\n        # Set up path dictionaries' is_hardcoded=True construction_method=None",
            "path='0.7' line_number=339 context='            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>             \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }' is_hardcoded=True construction_method=None",
            "path='0.5' line_number=340 context='            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n>>>             \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }\\n' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [
            "variable_name='TRAIN_RATIO' line_number=303 context='            \"--train-ratio\",\\n            type=float,\\n>>>             default=float(os.environ.get(\"TRAIN_RATIO\", 0.7)),\\n        )\\n        parser.add_argument(' access_method='os.environ.get' has_default=True default_value=None",
            "variable_name='TEST_VAL_RATIO' line_number=308 context='            \"--test-val-ratio\",\\n            type=float,\\n>>>             default=float(os.environ.get(\"TEST_VAL_RATIO\", 0.5)),\\n        )\\n        parser.add_argument(\"--n-workers\", type=int, default=50)' access_method='os.environ.get' has_default=True default_value=None",
            "variable_name='CURRENCY_CONVERSION_VARS' line_number=331 context='        # Environment variables dictionary\\n        environ_vars = {\\n>>>             \"CURRENCY_CONVERSION_VARS\": os.environ.get(\\n                \"CURRENCY_CONVERSION_VARS\", \"[]\"\\n            ),' access_method='os.environ.get' has_default=True default_value='[]'",
            "variable_name='CURRENCY_CONVERSION_DICT' line_number=334 context='                \"CURRENCY_CONVERSION_VARS\", \"[]\"\\n            ),\\n>>>             \"CURRENCY_CONVERSION_DICT\": os.environ.get(\\n                \"CURRENCY_CONVERSION_DICT\", \"{}\"\\n            ),' access_method='os.environ.get' has_default=True default_value='{}'",
            "variable_name='MARKETPLACE_INFO' line_number=337 context='                \"CURRENCY_CONVERSION_DICT\", \"{}\"\\n            ),\\n>>>             \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),' access_method='os.environ.get' has_default=True default_value='{}'",
            "variable_name='LABEL_FIELD' line_number=338 context='            ),\\n            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n>>>             \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),' access_method='os.environ.get' has_default=True default_value='label'",
            "variable_name='TRAIN_RATIO' line_number=339 context='            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>             \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }' access_method='os.environ.get' has_default=True default_value='0.7'",
            "variable_name='TEST_VAL_RATIO' line_number=340 context='            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n>>>             \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }\\n' access_method='os.environ.get' has_default=True default_value='0.5'"
          ],
          "imports": [
            "module_name='os' import_alias=None line_number=2 is_from_import=False imported_items=[]",
            "module_name='json' import_alias=None line_number=3 is_from_import=False imported_items=[]",
            "module_name='argparse' import_alias=None line_number=4 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=5 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=6 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=7 is_from_import=True imported_items=['Path']",
            "module_name='typing' import_alias=None line_number=8 is_from_import=True imported_items=['Tuple', 'List', 'Dict', 'Any', 'Union', 'Optional']",
            "module_name='pandas' import_alias='pd' line_number=9 is_from_import=False imported_items=[]",
            "module_name='numpy' import_alias='np' line_number=10 is_from_import=False imported_items=[]",
            "module_name='multiprocessing' import_alias=None line_number=11 is_from_import=True imported_items=['Pool', 'cpu_count']",
            "module_name='logging' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='sklearn.model_selection' import_alias=None line_number=13 is_from_import=True imported_items=['train_test_split']"
          ],
          "argument_definitions": [
            "argument_name='job_type' line_number=283 is_required=True has_default=False default_value=None argument_type='str' choices=['training', 'validation', 'testing', 'calibration']",
            "argument_name='mode' line_number=290 is_required=False has_default=True default_value='per_split' argument_type='str' choices=['per_split', 'split_after_conversion']",
            "argument_name='train_ratio' line_number=300 is_required=False has_default=True default_value=None argument_type='float' choices=None",
            "argument_name='test_val_ratio' line_number=305 is_required=False has_default=True default_value=None argument_type='float' choices=None",
            "argument_name='n_workers' line_number=310 is_required=False has_default=True default_value=50 argument_type='int' choices=None",
            "argument_name='marketplace_id_col' line_number=311 is_required=True has_default=False default_value=None argument_type=None choices=None",
            "argument_name='currency_col' line_number=312 is_required=False has_default=True default_value=None argument_type=None choices=None",
            "argument_name='default_currency' line_number=313 is_required=False has_default=True default_value='USD' argument_type=None choices=None",
            "argument_name='skip_invalid_currencies' line_number=314 is_required=False has_default=False default_value=None argument_type=None choices=None",
            "argument_name='enable_conversion' line_number=315 is_required=False has_default=True default_value=True argument_type=None choices=None"
          ],
          "file_operations": [],
          "step_type": "Processing",
          "framework": "sklearn",
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "currency_conversion.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            }
          },
          "outputs": {
            "converted_data": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {
            "job-type": {
              "default": "training",
              "required": false
            },
            "mode": {
              "default": "per_split",
              "required": false
            },
            "train-ratio": {
              "default": "0.7",
              "required": false
            },
            "test-val-ratio": {
              "default": "0.5",
              "required": false
            },
            "marketplace-id-col": {
              "default": "marketplace_id",
              "required": false
            },
            "currency-col": {
              "default": "",
              "required": false
            },
            "default-currency": {
              "default": "USD",
              "required": false
            },
            "skip-invalid-currencies": {
              "default": "false",
              "required": false
            },
            "enable-conversion": {
              "default": "true",
              "required": false
            },
            "n-workers": {
              "default": "50",
              "required": false
            }
          },
          "environment_variables": {
            "required": [
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD"
            ],
            "optional": {
              "TRAIN_RATIO": "0.7",
              "TEST_VAL_RATIO": "0.5"
            }
          },
          "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "step_type": "Processing",
        "framework": "pandas"
      },
      "severity_level": "WARNING"
    }
  },
  "level2_results": {
    "currency_conversion": {
      "test_name": "contract_spec_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.937000",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "multi_variant_validation",
          "message": "Smart Specification Selection: validated against 5 variants",
          "details": {
            "contract": "currency_conversion_contract",
            "variants": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ],
            "total_dependencies": 1,
            "total_outputs": 1,
            "contract_inputs": 1,
            "contract_outputs": 1
          },
          "recommendation": "Multi-variant validation completed successfully",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: CurrencyConversion_Training -> CurrencyConversion -> Processing",
          "details": {
            "contract": "currency_conversion_contract",
            "original_spec_type": "CurrencyConversion_Training",
            "canonical_name": "CurrencyConversion",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output converted_data: properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
          "details": {
            "contract": "currency_conversion_contract",
            "logical_name": "converted_data",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for currency_conversion_contract",
          "details": {
            "contract": "currency_conversion_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 1,
            "outputs_with_property_paths": 1,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "multi_variant_validation",
            "message": "Smart Specification Selection: validated against 5 variants",
            "details": {
              "contract": "currency_conversion_contract",
              "variants": [
                "training",
                "testing",
                "validation",
                "calibration",
                "generic"
              ],
              "total_dependencies": 1,
              "total_outputs": 1,
              "contract_inputs": 1,
              "contract_outputs": 1
            },
            "recommendation": "Multi-variant validation completed successfully"
          },
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: CurrencyConversion_Training -> CurrencyConversion -> Processing",
            "details": {
              "contract": "currency_conversion_contract",
              "original_spec_type": "CurrencyConversion_Training",
              "canonical_name": "CurrencyConversion",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output converted_data: properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "details": {
              "contract": "currency_conversion_contract",
              "logical_name": "converted_data",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for currency_conversion_contract",
            "details": {
              "contract": "currency_conversion_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 1,
              "outputs_with_property_paths": 1,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "currency_conversion.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            }
          },
          "outputs": {
            "converted_data": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {
            "job-type": {
              "default": "training",
              "required": false
            },
            "mode": {
              "default": "per_split",
              "required": false
            },
            "train-ratio": {
              "default": "0.7",
              "required": false
            },
            "test-val-ratio": {
              "default": "0.5",
              "required": false
            },
            "marketplace-id-col": {
              "default": "marketplace_id",
              "required": false
            },
            "currency-col": {
              "default": "",
              "required": false
            },
            "default-currency": {
              "default": "USD",
              "required": false
            },
            "skip-invalid-currencies": {
              "default": "false",
              "required": false
            },
            "enable-conversion": {
              "default": "true",
              "required": false
            },
            "n-workers": {
              "default": "50",
              "required": false
            }
          },
          "environment_variables": {
            "required": [
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD"
            ],
            "optional": {
              "TRAIN_RATIO": "0.7",
              "TEST_VAL_RATIO": "0.5"
            }
          },
          "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "specifications": {
          "currency_conversion_training_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_calibration_spec": {
            "step_type": "CurrencyConversion_Calibration",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed calibration data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted calibration data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_validation_spec": {
            "step_type": "CurrencyConversion_Validation",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed validation data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted validation data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_testing_spec": {
            "step_type": "CurrencyConversion_Testing",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed testing data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted testing data with standardized monetary values"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "variants": {
            "training": {
              "step_type": "CurrencyConversion_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed training data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted training data with standardized monetary values"
                }
              ]
            },
            "testing": {
              "step_type": "CurrencyConversion_Testing",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed testing data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted testing data with standardized monetary values"
                }
              ]
            },
            "validation": {
              "step_type": "CurrencyConversion_Validation",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed validation data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted validation data with standardized monetary values"
                }
              ]
            },
            "calibration": {
              "step_type": "CurrencyConversion_Calibration",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed calibration data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted calibration data with standardized monetary values"
                }
              ]
            },
            "generic": {
              "step_type": "CurrencyConversion_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed training data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted training data with standardized monetary values"
                }
              ]
            }
          },
          "unified_dependencies": {
            "data_input": {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "CradleDataLoading",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Processed training data requiring currency conversion"
            }
          },
          "unified_outputs": {
            "converted_data": {
              "logical_name": "converted_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Currency-converted training data with standardized monetary values"
            }
          },
          "dependency_sources": {
            "data_input": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ]
          },
          "output_sources": {
            "converted_data": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ]
          },
          "variant_count": 5
        }
      },
      "severity_level": "INFO"
    }
  },
  "level3_results": {
    "currency_conversion": {
      "test_name": "spec_dependency_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.942148",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "CurrencyConversion_Training",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "CradleDataLoading",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Processed training data requiring currency conversion"
            }
          ],
          "outputs": [
            {
              "logical_name": "converted_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Currency-converted training data with standardized monetary values"
            }
          ]
        }
      },
      "severity_level": null
    }
  },
  "level4_results": {
    "currency_conversion": {
      "test_name": "builder_config_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.946803",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "currency_conversion"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "label_field",
              "author",
              "marketplace_info",
              "bucket",
              "region",
              "project_root_folder",
              "marketplace_id_col",
              "pipeline_version",
              "currency_conversion_dict",
              "role",
              "service_name"
            ],
            "builder": "currency_conversion"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "currency_conversion"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "label_field",
                "author",
                "marketplace_info",
                "bucket",
                "region",
                "project_root_folder",
                "marketplace_id_col",
                "pipeline_version",
                "currency_conversion_dict",
                "role",
                "service_name"
              ],
              "builder": "currency_conversion"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "job_type",
              "line_number": 74,
              "context": "line_74"
            },
            {
              "field_name": "job_type",
              "line_number": 143,
              "context": "line_143"
            },
            {
              "field_name": "job_type",
              "line_number": 149,
              "context": "line_149"
            },
            {
              "field_name": "enable_currency_conversion",
              "line_number": 152,
              "context": "line_152"
            },
            {
              "field_name": "marketplace_id_col",
              "line_number": 153,
              "context": "line_153"
            },
            {
              "field_name": "currency_conversion_var_list",
              "line_number": 157,
              "context": "line_157"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 171,
              "context": "line_171"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 170,
              "context": "line_170"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 172,
              "context": "line_172"
            },
            {
              "field_name": "processing_framework_version",
              "line_number": 176,
              "context": "line_176"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 179,
              "context": "line_179"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 180,
              "context": "line_180"
            },
            {
              "field_name": "currency_conversion_var_list",
              "line_number": 197,
              "context": "line_197"
            },
            {
              "field_name": "currency_conversion_dict",
              "line_number": 200,
              "context": "line_200"
            },
            {
              "field_name": "marketplace_info",
              "line_number": 202,
              "context": "line_202"
            },
            {
              "field_name": "label_field",
              "line_number": 203,
              "context": "line_203"
            },
            {
              "field_name": "train_ratio",
              "line_number": 204,
              "context": "line_204"
            },
            {
              "field_name": "test_val_ratio",
              "line_number": 205,
              "context": "line_205"
            },
            {
              "field_name": "job_type",
              "line_number": 306,
              "context": "line_306"
            },
            {
              "field_name": "job_type",
              "line_number": 332,
              "context": "line_332"
            },
            {
              "field_name": "mode",
              "line_number": 334,
              "context": "line_334"
            },
            {
              "field_name": "marketplace_id_col",
              "line_number": 336,
              "context": "line_336"
            },
            {
              "field_name": "default_currency",
              "line_number": 338,
              "context": "line_338"
            },
            {
              "field_name": "enable_currency_conversion",
              "line_number": 340,
              "context": "line_340"
            },
            {
              "field_name": "currency_col",
              "line_number": 344,
              "context": "line_344"
            },
            {
              "field_name": "currency_col",
              "line_number": 345,
              "context": "line_345"
            },
            {
              "field_name": "skip_invalid_currencies",
              "line_number": 349,
              "context": "line_349"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "CurrencyConversionStepBuilder",
              "line_number": 40,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 48,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 120,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_create_processor",
              "line_number": 162,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 186,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 210,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 262,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 323,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 355,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 2
            },
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 3
            },
            {
              "type": "import",
              "module": "importlib",
              "alias": null,
              "line_number": 4
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 8
            },
            {
              "type": "from_import",
              "module": "configs.config_currency_conversion_step",
              "name": "CurrencyConversionConfig",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "core.deps.registry_manager",
              "name": "RegistryManager",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "core.deps.dependency_resolver",
              "name": "UnifiedDependencyResolver",
              "alias": null,
              "line_number": 13
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_training_spec",
              "name": "CURRENCY_CONVERSION_TRAINING_SPEC",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_calibration_spec",
              "name": "CURRENCY_CONVERSION_CALIBRATION_SPEC",
              "alias": null,
              "line_number": 20
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_validation_spec",
              "name": "CURRENCY_CONVERSION_VALIDATION_SPEC",
              "alias": null,
              "line_number": 23
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_testing_spec",
              "name": "CURRENCY_CONVERSION_TESTING_SPEC",
              "alias": null,
              "line_number": 26
            },
            {
              "type": "import",
              "module": "json",
              "alias": null,
              "line_number": 193
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 304
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "CurrencyConversionConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "job_type": {
              "type": "<class 'str'>",
              "required": false
            },
            "mode": {
              "type": "<class 'str'>",
              "required": false
            },
            "train_ratio": {
              "type": "<class 'float'>",
              "required": false
            },
            "test_val_ratio": {
              "type": "<class 'float'>",
              "required": false
            },
            "label_field": {
              "type": "<class 'str'>",
              "required": true
            },
            "marketplace_id_col": {
              "type": "<class 'str'>",
              "required": true
            },
            "currency_col": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "currency_conversion_var_list": {
              "type": "typing.List[str]",
              "required": false
            },
            "currency_conversion_dict": {
              "type": "typing.Dict[str, float]",
              "required": true
            },
            "marketplace_info": {
              "type": "typing.Dict[str, typing.Dict[str, str]]",
              "required": true
            },
            "enable_currency_conversion": {
              "type": "<class 'bool'>",
              "required": false
            },
            "default_currency": {
              "type": "<class 'str'>",
              "required": false
            },
            "skip_invalid_currencies": {
              "type": "<class 'bool'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder",
            "label_field",
            "marketplace_id_col",
            "currency_conversion_dict",
            "marketplace_info"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "job_type",
            "mode",
            "train_ratio",
            "test_val_ratio",
            "currency_col",
            "currency_conversion_var_list",
            "enable_currency_conversion",
            "default_currency",
            "skip_invalid_currencies",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "currency_conversion.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1",
            "job_type": "training",
            "mode": "per_split",
            "train_ratio": 0.7,
            "test_val_ratio": 0.5,
            "label_field": "PydanticUndefined",
            "marketplace_id_col": "PydanticUndefined",
            "currency_col": null,
            "currency_conversion_var_list": "PydanticUndefined",
            "currency_conversion_dict": "PydanticUndefined",
            "marketplace_info": "PydanticUndefined",
            "enable_currency_conversion": true,
            "default_currency": "USD",
            "skip_invalid_currencies": false
          }
        }
      },
      "severity_level": "WARNING"
    }
  },
  "recommendations": [],
  "metadata": {}
}