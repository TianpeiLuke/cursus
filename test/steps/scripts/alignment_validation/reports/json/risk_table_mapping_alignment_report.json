{
  "summary": {
    "total_tests": 6,
    "passed_tests": 6,
    "failed_tests": 0,
    "pass_rate": 100.0,
    "total_issues": 19,
    "critical_issues": 0,
    "error_issues": 0,
    "warning_issues": 13,
    "info_issues": 6,
    "highest_severity": "WARNING",
    "validation_timestamp": "2025-09-28T11:13:58.369293",
    "is_passing": true
  },
  "scoring": {
    "overall_score": 100.0,
    "quality_rating": "Excellent",
    "level_scores": {
      "level1_script_contract": 100.0,
      "level2_contract_spec": 100.0,
      "level3_spec_dependencies": 100.0,
      "level4_builder_config": 100.0
    },
    "scoring_report": {
      "overall": {
        "score": 100.0,
        "rating": "Excellent",
        "passed": 4,
        "total": 4,
        "pass_rate": 100.0
      },
      "levels": {
        "level1_script_contract": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level2_contract_spec": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level3_spec_dependencies": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        },
        "level4_builder_config": {
          "score": 100.0,
          "passed": 1,
          "total": 1,
          "tests": {
            "currency_conversion": true
          }
        }
      },
      "failed_tests": [],
      "metadata": {
        "scoring_system": "alignment_validation",
        "level_weights": {
          "level1_script_contract": 1.0,
          "level2_contract_spec": 1.5,
          "level3_spec_dependencies": 2.0,
          "level4_builder_config": 2.5
        },
        "test_importance": {
          "script_contract_path_alignment": 1.5,
          "contract_spec_logical_names": 1.4,
          "spec_dependency_resolution": 1.3,
          "builder_config_environment_vars": 1.2,
          "script_contract_environment_vars": 1.2,
          "contract_spec_dependency_mapping": 1.3,
          "spec_dependency_property_paths": 1.4,
          "builder_config_specification_alignment": 1.5
        }
      }
    }
  },
  "level1_results": {
    "currency_conversion": {
      "test_name": "script_contract_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.926354",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "currency_conversion",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_env_access",
          "message": "Helper functions use direct environment access - consider parameter passing",
          "details": {
            "script": "currency_conversion",
            "helper_accesses": [
              {
                "function": null,
                "variable": "TRAIN_RATIO",
                "line_number": 303
              },
              {
                "function": null,
                "variable": "TEST_VAL_RATIO",
                "line_number": 308
              },
              {
                "function": null,
                "variable": "CURRENCY_CONVERSION_VARS",
                "line_number": 331
              },
              {
                "function": null,
                "variable": "CURRENCY_CONVERSION_DICT",
                "line_number": 334
              },
              {
                "function": null,
                "variable": "MARKETPLACE_INFO",
                "line_number": 337
              },
              {
                "function": null,
                "variable": "LABEL_FIELD",
                "line_number": 338
              },
              {
                "function": null,
                "variable": "TRAIN_RATIO",
                "line_number": 339
              },
              {
                "function": null,
                "variable": "TEST_VAL_RATIO",
                "line_number": 340
              }
            ]
          },
          "recommendation": "Pass environment variables as parameters to helper functions instead of direct access",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "currency_conversion"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.job_type",
            "line_number": 164
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.mode",
            "line_number": 165
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 168
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 169
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 170
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for input_paths",
          "details": {
            "script": "currency_conversion",
            "parameter": "input_paths",
            "current_pattern": "input_paths.get",
            "line_number": 173
          },
          "recommendation": "Use input_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for output_paths",
          "details": {
            "script": "currency_conversion",
            "parameter": "output_paths",
            "current_pattern": "output_paths.get",
            "line_number": 174
          },
          "recommendation": "Use output_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.enable_conversion",
            "line_number": 180
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.marketplace_id_col",
            "line_number": 183
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.currency_col",
            "line_number": 187
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.default_currency",
            "line_number": 188
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.skip_invalid_currencies",
            "line_number": 189
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.n_workers",
            "line_number": 190
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "currency_conversion",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 208
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.train_ratio",
            "line_number": 211
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "currency_conversion",
            "parameter": "job_args",
            "current_pattern": "job_args.test_val_ratio",
            "line_number": 217
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "currency_conversion"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_helper_functions",
          "message": "Helper function 'None' accesses environment directly",
          "details": {
            "script": "currency_conversion",
            "function": null,
            "env_variables": [
              "TRAIN_RATIO",
              "TEST_VAL_RATIO",
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD",
              "TRAIN_RATIO",
              "TEST_VAL_RATIO"
            ],
            "line_numbers": [
              303,
              308,
              331,
              334,
              337,
              338,
              339,
              340
            ]
          },
          "recommendation": "Refactor 'None' to accept environment variables as parameters",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "framework_detected",
          "message": "Processing script uses sklearn framework",
          "details": {
            "script": "currency_conversion",
            "step_type": "Processing",
            "framework": "sklearn"
          },
          "recommendation": "Ensure sklearn dependencies are properly specified",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "currency_conversion",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_env_access",
            "message": "Helper functions use direct environment access - consider parameter passing",
            "details": {
              "script": "currency_conversion",
              "helper_accesses": [
                {
                  "function": null,
                  "variable": "TRAIN_RATIO",
                  "line_number": 303
                },
                {
                  "function": null,
                  "variable": "TEST_VAL_RATIO",
                  "line_number": 308
                },
                {
                  "function": null,
                  "variable": "CURRENCY_CONVERSION_VARS",
                  "line_number": 331
                },
                {
                  "function": null,
                  "variable": "CURRENCY_CONVERSION_DICT",
                  "line_number": 334
                },
                {
                  "function": null,
                  "variable": "MARKETPLACE_INFO",
                  "line_number": 337
                },
                {
                  "function": null,
                  "variable": "LABEL_FIELD",
                  "line_number": 338
                },
                {
                  "function": null,
                  "variable": "TRAIN_RATIO",
                  "line_number": 339
                },
                {
                  "function": null,
                  "variable": "TEST_VAL_RATIO",
                  "line_number": 340
                }
              ]
            },
            "recommendation": "Pass environment variables as parameters to helper functions instead of direct access"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "currency_conversion"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.job_type",
              "line_number": 164
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.mode",
              "line_number": 165
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 168
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 169
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 170
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for input_paths",
            "details": {
              "script": "currency_conversion",
              "parameter": "input_paths",
              "current_pattern": "input_paths.get",
              "line_number": 173
            },
            "recommendation": "Use input_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for output_paths",
            "details": {
              "script": "currency_conversion",
              "parameter": "output_paths",
              "current_pattern": "output_paths.get",
              "line_number": 174
            },
            "recommendation": "Use output_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.enable_conversion",
              "line_number": 180
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.marketplace_id_col",
              "line_number": 183
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.currency_col",
              "line_number": 187
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.default_currency",
              "line_number": 188
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.skip_invalid_currencies",
              "line_number": 189
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.n_workers",
              "line_number": 190
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "currency_conversion",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 208
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.train_ratio",
              "line_number": 211
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "currency_conversion",
              "parameter": "job_args",
              "current_pattern": "job_args.test_val_ratio",
              "line_number": 217
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "currency_conversion"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "severity": "WARNING",
            "category": "testability_helper_functions",
            "message": "Helper function 'None' accesses environment directly",
            "details": {
              "script": "currency_conversion",
              "function": null,
              "env_variables": [
                "TRAIN_RATIO",
                "TEST_VAL_RATIO",
                "CURRENCY_CONVERSION_VARS",
                "CURRENCY_CONVERSION_DICT",
                "MARKETPLACE_INFO",
                "LABEL_FIELD",
                "TRAIN_RATIO",
                "TEST_VAL_RATIO"
              ],
              "line_numbers": [
                303,
                308,
                331,
                334,
                337,
                338,
                339,
                340
              ]
            },
            "recommendation": "Refactor 'None' to accept environment variables as parameters"
          },
          {
            "severity": "INFO",
            "category": "framework_detected",
            "message": "Processing script uses sklearn framework",
            "details": {
              "script": "currency_conversion",
              "step_type": "Processing",
              "framework": "sklearn"
            },
            "recommendation": "Ensure sklearn dependencies are properly specified"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for currency_conversion",
            "recommendation": "Create processing specification file for currency_conversion",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_spec_path": "cursus/steps/specs/currency_conversion_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for currency_conversion",
            "recommendation": "Create processing builder file for currency_conversion",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "currency_conversion",
              "expected_builder_path": "cursus/steps/builders/builder_currency_conversion_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/currency_conversion.py",
          "path_references": [
            "path='Get currency code for a given marketplace ID.' line_number=25 context='    default_currency: str,\\n) -> str:\\n>>>     \"\"\"Get currency code for a given marketplace ID.\"\"\"\\n    try:\\n        if pd.isna(marketplace_id) or str(int(marketplace_id)) not in marketplace_info:' is_hardcoded=True construction_method=None",
            "path='Combine currency codes from marketplace ID and existing currency column.' line_number=42 context='    skip_invalid_currencies: bool,\\n) -> Tuple[pd.DataFrame, str]:\\n>>>     \"\"\"Combine currency codes from marketplace ID and existing currency column.\"\"\"\\n    df[\"currency_code_from_marketplace_id\"] = df[marketplace_id_col].apply(\\n        lambda x: get_currency_code(x, marketplace_info, default_currency)' is_hardcoded=True construction_method=None",
            "path=\"Convert single variable's currency values.\" line_number=68 context='    args: Tuple[pd.DataFrame, str, pd.Series]\\n) -> pd.Series:\\n>>>     \"\"\"Convert single variable\\'s currency values.\"\"\"\\n    df, variable, exchange_rate_series = args\\n    return df[variable] / exchange_rate_series.values' is_hardcoded=True construction_method=None",
            "path='Perform parallel currency conversion on multiple variables.' line_number=80 context='    n_workers: int = 50,\\n) -> pd.DataFrame:\\n>>>     \"\"\"Perform parallel currency conversion on multiple variables.\"\"\"\\n    exchange_rate_series = df[currency_col].apply(\\n        lambda x: currency_conversion_dict.get(x, 1.0)' is_hardcoded=True construction_method=None",
            "path='Process currency conversion.' line_number=110 context='    n_workers: int = 50,\\n) -> pd.DataFrame:\\n>>>     \"\"\"Process currency conversion.\"\"\"\\n    # Drop rows with missing marketplace IDs\\n    df = df.dropna(subset=[marketplace_id_col]).reset_index(drop=True)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/data' line_number=173 context='\\n    # Extract paths from parameters\\n>>>     input_base = Path(input_paths.get(\"data_input\", \"/opt/ml/processing/input/data\"))\\n    output_base = Path(output_paths.get(\"data_output\", \"/opt/ml/processing/output\"))\\n    output_base.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=174 context='    # Extract paths from parameters\\n    input_base = Path(input_paths.get(\"data_input\", \"/opt/ml/processing/input/data\"))\\n>>>     output_base = Path(output_paths.get(\"data_output\", \"/opt/ml/processing/output\"))\\n    output_base.mkdir(parents=True, exist_ok=True)\\n' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=201 context='        dfs = []\\n        for sp in splits:\\n>>>             fpath = input_base / sp / f\"{sp}_processed_data.csv\"\\n            logger.info(f\"  Reading split {sp} from {fpath}\")\\n            dfs.append(pd.read_csv(fpath))' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=232 context='            # processed\\n            proc = split_df.copy()\\n>>>             proc_path = out_dir / f\"{split_name}_processed_data.csv\"\\n            proc.to_csv(proc_path, index=False)\\n            logger.info(f\"Wrote converted processed: {proc_path} (shape={proc.shape})\")' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=238 context='            # full (just alias here\u2014but you could re-read your full_data.csv if needed)\\n            full = proc.copy()\\n>>>             full_path = out_dir / f\"{split_name}_full_data.csv\"\\n            full.to_csv(full_path, index=False)\\n            logger.info(f\"Wrote converted full: {full_path} (shape={full.shape})\")' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=251 context='        for sp in splits:\\n            in_dir = input_base / sp\\n>>>             proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n            full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=252 context='            in_dir = input_base / sp\\n            proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n>>>             full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n\\n            df_proc = pd.read_csv(proc_in_path)' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=261 context='\\n            # write processed\\n>>>             proc_out = out_dir / f\"{sp}_processed_data.csv\"\\n            df_conv.to_csv(proc_out, index=False)\\n            logger.info(' is_hardcoded=True construction_method=None",
            "path='_full_data.csv' line_number=271 context='                df_full = pd.read_csv(full_in_path)\\n                df_full_conv = apply_conversion(df_full)\\n>>>                 full_out = out_dir / f\"{sp}_full_data.csv\"\\n                df_full_conv.to_csv(full_out, index=False)\\n                logger.info(' is_hardcoded=True construction_method=None",
            "path='Currency conversion step complete.' line_number=277 context='                )\\n\\n>>>     logger.info(\"Currency conversion step complete.\")\\n\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/data' line_number=321 context='\\n        # Standard SageMaker paths\\n>>>         INPUT_PATH = \"/opt/ml/processing/input/data\"\\n        OUTPUT_PATH = \"/opt/ml/processing/output\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=322 context='        # Standard SageMaker paths\\n        INPUT_PATH = \"/opt/ml/processing/input/data\"\\n>>>         OUTPUT_PATH = \"/opt/ml/processing/output\"\\n\\n        # Set up path dictionaries' is_hardcoded=True construction_method=None",
            "path='0.7' line_number=339 context='            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>             \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }' is_hardcoded=True construction_method=None",
            "path='0.5' line_number=340 context='            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n>>>             \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }\\n' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [
            "variable_name='TRAIN_RATIO' line_number=303 context='            \"--train-ratio\",\\n            type=float,\\n>>>             default=float(os.environ.get(\"TRAIN_RATIO\", 0.7)),\\n        )\\n        parser.add_argument(' access_method='os.environ.get' has_default=True default_value=None",
            "variable_name='TEST_VAL_RATIO' line_number=308 context='            \"--test-val-ratio\",\\n            type=float,\\n>>>             default=float(os.environ.get(\"TEST_VAL_RATIO\", 0.5)),\\n        )\\n        parser.add_argument(\"--n-workers\", type=int, default=50)' access_method='os.environ.get' has_default=True default_value=None",
            "variable_name='CURRENCY_CONVERSION_VARS' line_number=331 context='        # Environment variables dictionary\\n        environ_vars = {\\n>>>             \"CURRENCY_CONVERSION_VARS\": os.environ.get(\\n                \"CURRENCY_CONVERSION_VARS\", \"[]\"\\n            ),' access_method='os.environ.get' has_default=True default_value='[]'",
            "variable_name='CURRENCY_CONVERSION_DICT' line_number=334 context='                \"CURRENCY_CONVERSION_VARS\", \"[]\"\\n            ),\\n>>>             \"CURRENCY_CONVERSION_DICT\": os.environ.get(\\n                \"CURRENCY_CONVERSION_DICT\", \"{}\"\\n            ),' access_method='os.environ.get' has_default=True default_value='{}'",
            "variable_name='MARKETPLACE_INFO' line_number=337 context='                \"CURRENCY_CONVERSION_DICT\", \"{}\"\\n            ),\\n>>>             \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),' access_method='os.environ.get' has_default=True default_value='{}'",
            "variable_name='LABEL_FIELD' line_number=338 context='            ),\\n            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n>>>             \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),' access_method='os.environ.get' has_default=True default_value='label'",
            "variable_name='TRAIN_RATIO' line_number=339 context='            \"MARKETPLACE_INFO\": os.environ.get(\"MARKETPLACE_INFO\", \"{}\"),\\n            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>             \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n            \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }' access_method='os.environ.get' has_default=True default_value='0.7'",
            "variable_name='TEST_VAL_RATIO' line_number=340 context='            \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            \"TRAIN_RATIO\": os.environ.get(\"TRAIN_RATIO\", \"0.7\"),\\n>>>             \"TEST_VAL_RATIO\": os.environ.get(\"TEST_VAL_RATIO\", \"0.5\"),\\n        }\\n' access_method='os.environ.get' has_default=True default_value='0.5'"
          ],
          "imports": [
            "module_name='os' import_alias=None line_number=2 is_from_import=False imported_items=[]",
            "module_name='json' import_alias=None line_number=3 is_from_import=False imported_items=[]",
            "module_name='argparse' import_alias=None line_number=4 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=5 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=6 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=7 is_from_import=True imported_items=['Path']",
            "module_name='typing' import_alias=None line_number=8 is_from_import=True imported_items=['Tuple', 'List', 'Dict', 'Any', 'Union', 'Optional']",
            "module_name='pandas' import_alias='pd' line_number=9 is_from_import=False imported_items=[]",
            "module_name='numpy' import_alias='np' line_number=10 is_from_import=False imported_items=[]",
            "module_name='multiprocessing' import_alias=None line_number=11 is_from_import=True imported_items=['Pool', 'cpu_count']",
            "module_name='logging' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='sklearn.model_selection' import_alias=None line_number=13 is_from_import=True imported_items=['train_test_split']"
          ],
          "argument_definitions": [
            "argument_name='job_type' line_number=283 is_required=True has_default=False default_value=None argument_type='str' choices=['training', 'validation', 'testing', 'calibration']",
            "argument_name='mode' line_number=290 is_required=False has_default=True default_value='per_split' argument_type='str' choices=['per_split', 'split_after_conversion']",
            "argument_name='train_ratio' line_number=300 is_required=False has_default=True default_value=None argument_type='float' choices=None",
            "argument_name='test_val_ratio' line_number=305 is_required=False has_default=True default_value=None argument_type='float' choices=None",
            "argument_name='n_workers' line_number=310 is_required=False has_default=True default_value=50 argument_type='int' choices=None",
            "argument_name='marketplace_id_col' line_number=311 is_required=True has_default=False default_value=None argument_type=None choices=None",
            "argument_name='currency_col' line_number=312 is_required=False has_default=True default_value=None argument_type=None choices=None",
            "argument_name='default_currency' line_number=313 is_required=False has_default=True default_value='USD' argument_type=None choices=None",
            "argument_name='skip_invalid_currencies' line_number=314 is_required=False has_default=False default_value=None argument_type=None choices=None",
            "argument_name='enable_conversion' line_number=315 is_required=False has_default=True default_value=True argument_type=None choices=None"
          ],
          "file_operations": [],
          "step_type": "Processing",
          "framework": "sklearn",
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "currency_conversion.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            }
          },
          "outputs": {
            "converted_data": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {
            "job-type": {
              "default": "training",
              "required": false
            },
            "mode": {
              "default": "per_split",
              "required": false
            },
            "train-ratio": {
              "default": "0.7",
              "required": false
            },
            "test-val-ratio": {
              "default": "0.5",
              "required": false
            },
            "marketplace-id-col": {
              "default": "marketplace_id",
              "required": false
            },
            "currency-col": {
              "default": "",
              "required": false
            },
            "default-currency": {
              "default": "USD",
              "required": false
            },
            "skip-invalid-currencies": {
              "default": "false",
              "required": false
            },
            "enable-conversion": {
              "default": "true",
              "required": false
            },
            "n-workers": {
              "default": "50",
              "required": false
            }
          },
          "environment_variables": {
            "required": [
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD"
            ],
            "optional": {
              "TRAIN_RATIO": "0.7",
              "TEST_VAL_RATIO": "0.5"
            }
          },
          "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "step_type": "Processing",
        "framework": "pandas"
      },
      "severity_level": "WARNING"
    },
    "dummy_training": {
      "test_name": "script_contract_dummy_training",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.859012",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/models/model.tar.gz",
          "details": {
            "path": "/opt/ml/code/models/model.tar.gz",
            "script": "dummy_training",
            "node_type": "source",
            "path_type": "source_directory"
          },
          "recommendation": "Path /opt/ml/code/models/model.tar.gz is allowed for SOURCE steps - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/hyperparams",
          "details": {
            "path": "/opt/ml/code/hyperparams",
            "script": "dummy_training",
            "node_type": "source",
            "path_type": "source_directory"
          },
          "recommendation": "Path /opt/ml/code/hyperparams is allowed for SOURCE steps - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code",
          "details": {
            "path": "/opt/ml/code",
            "script": "dummy_training",
            "node_type": "source",
            "path_type": "source_directory"
          },
          "recommendation": "Path /opt/ml/code is allowed for SOURCE steps - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/hyperparams/hyperparameters.json",
          "details": {
            "path": "/opt/ml/code/hyperparams/hyperparameters.json",
            "script": "dummy_training",
            "node_type": "source",
            "path_type": "source_directory"
          },
          "recommendation": "Path /opt/ml/code/hyperparams/hyperparameters.json is allowed for SOURCE steps - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "path_usage",
          "message": "SOURCE step uses non-standard path: /opt/ml/processing/input/model",
          "details": {
            "path": "/opt/ml/processing/input/model",
            "script": "dummy_training",
            "node_type": "source"
          },
          "recommendation": "Consider using standard source paths or add /opt/ml/processing/input/model to contract",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "path_usage",
          "message": "SOURCE step uses non-standard path: /opt/ml/processing/input/config",
          "details": {
            "path": "/opt/ml/processing/input/config",
            "script": "dummy_training",
            "node_type": "source"
          },
          "recommendation": "Consider using standard source paths or add /opt/ml/processing/input/config to contract",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/models",
          "details": {
            "path": "/opt/ml/code/models",
            "script": "dummy_training",
            "node_type": "source",
            "path_type": "source_directory"
          },
          "recommendation": "Path /opt/ml/code/models is allowed for SOURCE steps - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "dummy_training",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "dummy_training"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_parameter_usage",
          "message": "Testability parameters defined but not used: job_args, environ_vars, input_paths",
          "details": {
            "script": "dummy_training",
            "unused_parameters": [
              "job_args",
              "environ_vars",
              "input_paths"
            ],
            "used_parameters": [
              "output_paths"
            ]
          },
          "recommendation": "Either use the testability parameters or remove them from function signature",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "dummy_training"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/models/model.tar.gz",
            "details": {
              "path": "/opt/ml/code/models/model.tar.gz",
              "script": "dummy_training",
              "node_type": "source",
              "path_type": "source_directory"
            },
            "recommendation": "Path /opt/ml/code/models/model.tar.gz is allowed for SOURCE steps - no action needed"
          },
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/hyperparams",
            "details": {
              "path": "/opt/ml/code/hyperparams",
              "script": "dummy_training",
              "node_type": "source",
              "path_type": "source_directory"
            },
            "recommendation": "Path /opt/ml/code/hyperparams is allowed for SOURCE steps - no action needed"
          },
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code",
            "details": {
              "path": "/opt/ml/code",
              "script": "dummy_training",
              "node_type": "source",
              "path_type": "source_directory"
            },
            "recommendation": "Path /opt/ml/code is allowed for SOURCE steps - no action needed"
          },
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/hyperparams/hyperparameters.json",
            "details": {
              "path": "/opt/ml/code/hyperparams/hyperparameters.json",
              "script": "dummy_training",
              "node_type": "source",
              "path_type": "source_directory"
            },
            "recommendation": "Path /opt/ml/code/hyperparams/hyperparameters.json is allowed for SOURCE steps - no action needed"
          },
          {
            "severity": "WARNING",
            "category": "path_usage",
            "message": "SOURCE step uses non-standard path: /opt/ml/processing/input/model",
            "details": {
              "path": "/opt/ml/processing/input/model",
              "script": "dummy_training",
              "node_type": "source"
            },
            "recommendation": "Consider using standard source paths or add /opt/ml/processing/input/model to contract"
          },
          {
            "severity": "WARNING",
            "category": "path_usage",
            "message": "SOURCE step uses non-standard path: /opt/ml/processing/input/config",
            "details": {
              "path": "/opt/ml/processing/input/config",
              "script": "dummy_training",
              "node_type": "source"
            },
            "recommendation": "Consider using standard source paths or add /opt/ml/processing/input/config to contract"
          },
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "SOURCE step uses standard SageMaker source path: /opt/ml/code/models",
            "details": {
              "path": "/opt/ml/code/models",
              "script": "dummy_training",
              "node_type": "source",
              "path_type": "source_directory"
            },
            "recommendation": "Path /opt/ml/code/models is allowed for SOURCE steps - no action needed"
          },
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "dummy_training",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "dummy_training"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "WARNING",
            "category": "testability_parameter_usage",
            "message": "Testability parameters defined but not used: job_args, environ_vars, input_paths",
            "details": {
              "script": "dummy_training",
              "unused_parameters": [
                "job_args",
                "environ_vars",
                "input_paths"
              ],
              "used_parameters": [
                "output_paths"
              ]
            },
            "recommendation": "Either use the testability parameters or remove them from function signature"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "dummy_training"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for dummy_training",
            "recommendation": "Create processing specification file for dummy_training",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training",
              "expected_spec_path": "cursus/steps/specs/dummy_training_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for dummy_training",
            "recommendation": "Create processing builder file for dummy_training",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "dummy_training",
              "expected_builder_path": "cursus/steps/builders/builder_dummy_training_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/dummy_training.py",
          "path_references": [
            "path='\\nDummyTraining Processing Script\\n\\nThis script validates, unpacks a pretrained model.tar.gz file, adds a hyperparameters.json file \\ninside it, then repacks it and outputs to the destination. It serves as a dummy training step \\nthat skips actual training and integrates with downstream MIMS packaging and payload steps.\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"\\nDummyTraining Processing Script\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/models/model.tar.gz' line_number=33 context='# These paths align with SOURCE node approach where model and hyperparameters\\n# are embedded in the source directory structure\\n>>> MODEL_SOURCE_PATH = \"/opt/ml/code/models/model.tar.gz\"\\nHYPERPARAMS_SOURCE_PATH = \"/opt/ml/code/hyperparams/hyperparameters.json\"\\nMODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/hyperparams/hyperparameters.json' line_number=34 context='# are embedded in the source directory structure\\nMODEL_SOURCE_PATH = \"/opt/ml/code/models/model.tar.gz\"\\n>>> HYPERPARAMS_SOURCE_PATH = \"/opt/ml/code/hyperparams/hyperparameters.json\"\\nMODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/model' line_number=35 context='MODEL_SOURCE_PATH = \"/opt/ml/code/models/model.tar.gz\"\\nHYPERPARAMS_SOURCE_PATH = \"/opt/ml/code/hyperparams/hyperparameters.json\"\\n>>> MODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"\\n\\n' is_hardcoded=True construction_method=None",
            "path='.tar.gz' line_number=55 context='\\n    # Check file extension\\n>>>     if not input_path.suffix == \".tar.gz\" and not str(input_path).endswith(\".tar.gz\"):\\n        raise ValueError(\\n            f\"Expected a .tar.gz file, but got: {input_path} (ERROR_CODE: INVALID_FORMAT)\"' is_hardcoded=True construction_method=None",
            "path='.tar.gz' line_number=55 context='\\n    # Check file extension\\n>>>     if not input_path.suffix == \".tar.gz\" and not str(input_path).endswith(\".tar.gz\"):\\n        raise ValueError(\\n            f\"Expected a .tar.gz file, but got: {input_path} (ERROR_CODE: INVALID_FORMAT)\"' is_hardcoded=True construction_method=None",
            "path='Ensure a directory exists, creating it if necessary.' line_number=76 context='\\ndef ensure_directory(directory: Path) -> bool:\\n>>>     \"\"\"Ensure a directory exists, creating it if necessary.\"\"\"\\n    try:\\n        directory.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
            "path='Extract a tar file to the specified path.' line_number=87 context='\\ndef extract_tarfile(tar_path: Path, extract_path: Path) -> None:\\n>>>     \"\"\"Extract a tar file to the specified path.\"\"\"\\n    logger.info(f\"Extracting tar file: {tar_path} to {extract_path}\")\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=102 context='                size_mb = member.size / 1024 / 1024\\n                total_size += size_mb\\n>>>                 logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n            logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=103 context='                total_size += size_mb\\n                logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n>>>             logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n\\n            logger.info(f\"Extracting to: {extract_path}\")' is_hardcoded=True construction_method=None",
            "path='Create a tar file from the contents of a directory.' line_number=116 context='\\ndef create_tarfile(output_tar_path: Path, source_dir: Path) -> None:\\n>>>     \"\"\"Create a tar file from the contents of a directory.\"\"\"\\n    logger.info(f\"Creating tar file: {output_tar_path} from {source_dir}\")\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=132 context='                    total_size += size_mb\\n                    files_added += 1\\n>>>                     logger.info(f\"Adding to tar: {arcname} ({size_mb:.2f}MB)\")\\n                    tar.add(item, arcname=arcname)\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=137 context='        logger.info(f\"Tar creation summary:\")\\n        logger.info(f\"  Files added: {files_added}\")\\n>>>         logger.info(f\"  Total uncompressed size: {total_size:.2f}MB\")\\n\\n        if output_tar_path.exists():' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=141 context='        if output_tar_path.exists():\\n            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n>>>             logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n            logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n' is_hardcoded=True construction_method=None",
            "path='.2%' line_number=142 context='            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n            logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n>>>             logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n\\n    except Exception as e:' is_hardcoded=True construction_method=None",
            "path='Copy a file and ensure the destination directory exists.' line_number=150 context='\\ndef copy_file(src: Path, dst: Path) -> None:\\n>>>     \"\"\"Copy a file and ensure the destination directory exists.\"\"\"\\n    logger.info(f\"Copying file: {src} to {dst}\")\\n' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=205 context='\\n        # Copy hyperparameters.json to the working directory\\n>>>         hyperparams_dest = working_dir / \"hyperparameters.json\"\\n        copy_file(hyperparams_path, hyperparams_dest)\\n' is_hardcoded=True construction_method=None",
            "path='model.tar.gz' line_number=212 context='\\n        # Create the output model.tar.gz\\n>>>         output_path = output_dir / \"model.tar.gz\"\\n        create_tarfile(output_path, working_dir)\\n' is_hardcoded=True construction_method=None",
            "path='model.tar.gz' line_number=230 context='    \"\"\"\\n    for base_path in base_paths:\\n>>>         model_path = Path(base_path) / \"model.tar.gz\"\\n        if model_path.exists():\\n            logger.info(f\"Found model file at: {model_path}\")' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=248 context='    \"\"\"\\n    for base_path in base_paths:\\n>>>         hyperparams_path = Path(base_path) / \"hyperparameters.json\"\\n        if hyperparams_path.exists():\\n            logger.info(f\"Found hyperparameters file at: {hyperparams_path}\")' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/models' line_number=278 context='        # Define fallback search paths for model file\\n        model_search_paths = [\\n>>>             \"/opt/ml/code/models\",           # Primary: source directory models folder\\n            \"/opt/ml/code\",                  # Fallback: source directory root\\n            \"/opt/ml/processing/input/model\", # Legacy: processing input (if somehow provided)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code' line_number=279 context='        model_search_paths = [\\n            \"/opt/ml/code/models\",           # Primary: source directory models folder\\n>>>             \"/opt/ml/code\",                  # Fallback: source directory root\\n            \"/opt/ml/processing/input/model\", # Legacy: processing input (if somehow provided)\\n        ]' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/model' line_number=280 context='            \"/opt/ml/code/models\",           # Primary: source directory models folder\\n            \"/opt/ml/code\",                  # Fallback: source directory root\\n>>>             \"/opt/ml/processing/input/model\", # Legacy: processing input (if somehow provided)\\n        ]\\n        ' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/hyperparams' line_number=285 context='        # Define fallback search paths for hyperparameters file\\n        hyperparams_search_paths = [\\n>>>             \"/opt/ml/code/hyperparams\",      # Primary: source directory hyperparams folder\\n            \"/opt/ml/code\",                  # Fallback: source directory root\\n            \"/opt/ml/processing/input/config\", # Legacy: processing input (if somehow provided)' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code' line_number=286 context='        hyperparams_search_paths = [\\n            \"/opt/ml/code/hyperparams\",      # Primary: source directory hyperparams folder\\n>>>             \"/opt/ml/code\",                  # Fallback: source directory root\\n            \"/opt/ml/processing/input/config\", # Legacy: processing input (if somehow provided)\\n        ]' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/config' line_number=287 context='            \"/opt/ml/code/hyperparams\",      # Primary: source directory hyperparams folder\\n            \"/opt/ml/code\",                  # Fallback: source directory root\\n>>>             \"/opt/ml/processing/input/config\", # Legacy: processing input (if somehow provided)\\n        ]\\n        ' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [],
          "imports": [
            "module_name='argparse' import_alias=None line_number=10 is_from_import=False imported_items=[]",
            "module_name='json' import_alias=None line_number=11 is_from_import=False imported_items=[]",
            "module_name='logging' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='os' import_alias=None line_number=13 is_from_import=False imported_items=[]",
            "module_name='shutil' import_alias=None line_number=14 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=15 is_from_import=False imported_items=[]",
            "module_name='tarfile' import_alias=None line_number=16 is_from_import=False imported_items=[]",
            "module_name='tempfile' import_alias=None line_number=17 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=18 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=19 is_from_import=True imported_items=['Path']",
            "module_name='typing' import_alias=None line_number=20 is_from_import=True imported_items=['Dict', 'Optional']"
          ],
          "argument_definitions": [],
          "file_operations": [],
          "step_type": "Processing",
          "framework": null,
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "dummy_training.py",
          "inputs": {},
          "outputs": {
            "model_input": {
              "path": "/opt/ml/processing/output/model"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "Contract for dummy training SOURCE step that packages model.tar.gz and hyperparameters.json from source directory",
          "framework_requirements": {
            "boto3": ">=1.26.0",
            "pathlib": ">=1.0.0"
          }
        },
        "step_type": "Processing"
      },
      "severity_level": "WARNING"
    },
    "model_calibration": {
      "test_name": "script_contract_model_calibration",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.985412",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "environment_variables",
          "message": "Optional environment variable accessed without default: MULTICLASS_CATEGORIES",
          "details": {
            "variable": "MULTICLASS_CATEGORIES",
            "line": 1412,
            "script": "model_calibration"
          },
          "recommendation": "Provide default value when accessing optional variable MULTICLASS_CATEGORIES",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "arguments",
          "message": "Script defines config-driven argument provided by builder: --job-type (accessed as args.job_type)",
          "details": {
            "cli_argument": "job-type",
            "python_attribute": "job_type",
            "script": "model_calibration",
            "source": "builder"
          },
          "recommendation": "Argument --job-type is provided by builder - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "model_calibration",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_env_access",
          "message": "Helper functions use direct environment access - consider parameter passing",
          "details": {
            "script": "model_calibration",
            "helper_accesses": [
              {
                "function": "from_env",
                "variable": "IS_BINARY",
                "line_number": 100
              },
              {
                "function": "from_env",
                "variable": "MULTICLASS_CATEGORIES",
                "line_number": 101
              },
              {
                "function": "from_env",
                "variable": "CALIBRATION_METHOD",
                "line_number": 115
              },
              {
                "function": "from_env",
                "variable": "LABEL_FIELD",
                "line_number": 116
              },
              {
                "function": "from_env",
                "variable": "SCORE_FIELD",
                "line_number": 117
              },
              {
                "function": "from_env",
                "variable": "IS_BINARY",
                "line_number": 118
              },
              {
                "function": "from_env",
                "variable": "MONOTONIC_CONSTRAINT",
                "line_number": 119
              },
              {
                "function": "from_env",
                "variable": "GAM_SPLINES",
                "line_number": 121
              },
              {
                "function": "from_env",
                "variable": "ERROR_THRESHOLD",
                "line_number": 122
              },
              {
                "function": "from_env",
                "variable": "NUM_CLASSES",
                "line_number": 123
              },
              {
                "function": "from_env",
                "variable": "SCORE_FIELD_PREFIX",
                "line_number": 124
              },
              {
                "function": null,
                "variable": "CALIBRATION_METHOD",
                "line_number": 1403
              },
              {
                "function": null,
                "variable": "LABEL_FIELD",
                "line_number": 1404
              },
              {
                "function": null,
                "variable": "SCORE_FIELD",
                "line_number": 1405
              },
              {
                "function": null,
                "variable": "IS_BINARY",
                "line_number": 1406
              },
              {
                "function": null,
                "variable": "MONOTONIC_CONSTRAINT",
                "line_number": 1407
              },
              {
                "function": null,
                "variable": "GAM_SPLINES",
                "line_number": 1408
              },
              {
                "function": null,
                "variable": "ERROR_THRESHOLD",
                "line_number": 1409
              },
              {
                "function": null,
                "variable": "NUM_CLASSES",
                "line_number": 1410
              },
              {
                "function": null,
                "variable": "SCORE_FIELD_PREFIX",
                "line_number": 1411
              },
              {
                "function": null,
                "variable": "MULTICLASS_CATEGORIES",
                "line_number": 1412
              }
            ]
          },
          "recommendation": "Pass environment variables as parameters to helper functions instead of direct access",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "model_calibration"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1029
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for input_paths",
          "details": {
            "script": "model_calibration",
            "parameter": "input_paths",
            "current_pattern": "input_paths.get",
            "line_number": 1040
          },
          "recommendation": "Use input_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for output_paths",
          "details": {
            "script": "model_calibration",
            "parameter": "output_paths",
            "current_pattern": "output_paths.get",
            "line_number": 1041
          },
          "recommendation": "Use output_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for output_paths",
          "details": {
            "script": "model_calibration",
            "parameter": "output_paths",
            "current_pattern": "output_paths.get",
            "line_number": 1042
          },
          "recommendation": "Use output_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for output_paths",
          "details": {
            "script": "model_calibration",
            "parameter": "output_paths",
            "current_pattern": "output_paths.get",
            "line_number": 1043
          },
          "recommendation": "Use output_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1044
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1045
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1046
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1047
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1048
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1052
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1053
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1054
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "model_calibration",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 1055
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "model_calibration",
            "parameter": "job_args",
            "current_pattern": "job_args.job_type",
            "line_number": 1074
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "model_calibration",
            "parameter": "job_args",
            "current_pattern": "args.job_type",
            "line_number": 1393
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "model_calibration"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_helper_functions",
          "message": "Helper function 'from_env' accesses environment directly",
          "details": {
            "script": "model_calibration",
            "function": "from_env",
            "env_variables": [
              "IS_BINARY",
              "MULTICLASS_CATEGORIES",
              "CALIBRATION_METHOD",
              "LABEL_FIELD",
              "SCORE_FIELD",
              "IS_BINARY",
              "MONOTONIC_CONSTRAINT",
              "GAM_SPLINES",
              "ERROR_THRESHOLD",
              "NUM_CLASSES",
              "SCORE_FIELD_PREFIX"
            ],
            "line_numbers": [
              100,
              101,
              115,
              116,
              117,
              118,
              119,
              121,
              122,
              123,
              124
            ]
          },
          "recommendation": "Refactor 'from_env' to accept environment variables as parameters",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_helper_functions",
          "message": "Helper function 'None' accesses environment directly",
          "details": {
            "script": "model_calibration",
            "function": null,
            "env_variables": [
              "CALIBRATION_METHOD",
              "LABEL_FIELD",
              "SCORE_FIELD",
              "IS_BINARY",
              "MONOTONIC_CONSTRAINT",
              "GAM_SPLINES",
              "ERROR_THRESHOLD",
              "NUM_CLASSES",
              "SCORE_FIELD_PREFIX",
              "MULTICLASS_CATEGORIES"
            ],
            "line_numbers": [
              1403,
              1404,
              1405,
              1406,
              1407,
              1408,
              1409,
              1410,
              1411,
              1412
            ]
          },
          "recommendation": "Refactor 'None' to accept environment variables as parameters",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "framework_detected",
          "message": "Processing script uses sklearn framework",
          "details": {
            "script": "model_calibration",
            "step_type": "Processing",
            "framework": "sklearn"
          },
          "recommendation": "Ensure sklearn dependencies are properly specified",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "environment_variables",
            "message": "Optional environment variable accessed without default: MULTICLASS_CATEGORIES",
            "details": {
              "variable": "MULTICLASS_CATEGORIES",
              "line": 1412,
              "script": "model_calibration"
            },
            "recommendation": "Provide default value when accessing optional variable MULTICLASS_CATEGORIES"
          },
          {
            "severity": "INFO",
            "category": "arguments",
            "message": "Script defines config-driven argument provided by builder: --job-type (accessed as args.job_type)",
            "details": {
              "cli_argument": "job-type",
              "python_attribute": "job_type",
              "script": "model_calibration",
              "source": "builder"
            },
            "recommendation": "Argument --job-type is provided by builder - no action needed"
          },
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "model_calibration",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_env_access",
            "message": "Helper functions use direct environment access - consider parameter passing",
            "details": {
              "script": "model_calibration",
              "helper_accesses": [
                {
                  "function": "from_env",
                  "variable": "IS_BINARY",
                  "line_number": 100
                },
                {
                  "function": "from_env",
                  "variable": "MULTICLASS_CATEGORIES",
                  "line_number": 101
                },
                {
                  "function": "from_env",
                  "variable": "CALIBRATION_METHOD",
                  "line_number": 115
                },
                {
                  "function": "from_env",
                  "variable": "LABEL_FIELD",
                  "line_number": 116
                },
                {
                  "function": "from_env",
                  "variable": "SCORE_FIELD",
                  "line_number": 117
                },
                {
                  "function": "from_env",
                  "variable": "IS_BINARY",
                  "line_number": 118
                },
                {
                  "function": "from_env",
                  "variable": "MONOTONIC_CONSTRAINT",
                  "line_number": 119
                },
                {
                  "function": "from_env",
                  "variable": "GAM_SPLINES",
                  "line_number": 121
                },
                {
                  "function": "from_env",
                  "variable": "ERROR_THRESHOLD",
                  "line_number": 122
                },
                {
                  "function": "from_env",
                  "variable": "NUM_CLASSES",
                  "line_number": 123
                },
                {
                  "function": "from_env",
                  "variable": "SCORE_FIELD_PREFIX",
                  "line_number": 124
                },
                {
                  "function": null,
                  "variable": "CALIBRATION_METHOD",
                  "line_number": 1403
                },
                {
                  "function": null,
                  "variable": "LABEL_FIELD",
                  "line_number": 1404
                },
                {
                  "function": null,
                  "variable": "SCORE_FIELD",
                  "line_number": 1405
                },
                {
                  "function": null,
                  "variable": "IS_BINARY",
                  "line_number": 1406
                },
                {
                  "function": null,
                  "variable": "MONOTONIC_CONSTRAINT",
                  "line_number": 1407
                },
                {
                  "function": null,
                  "variable": "GAM_SPLINES",
                  "line_number": 1408
                },
                {
                  "function": null,
                  "variable": "ERROR_THRESHOLD",
                  "line_number": 1409
                },
                {
                  "function": null,
                  "variable": "NUM_CLASSES",
                  "line_number": 1410
                },
                {
                  "function": null,
                  "variable": "SCORE_FIELD_PREFIX",
                  "line_number": 1411
                },
                {
                  "function": null,
                  "variable": "MULTICLASS_CATEGORIES",
                  "line_number": 1412
                }
              ]
            },
            "recommendation": "Pass environment variables as parameters to helper functions instead of direct access"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "model_calibration"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1029
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for input_paths",
            "details": {
              "script": "model_calibration",
              "parameter": "input_paths",
              "current_pattern": "input_paths.get",
              "line_number": 1040
            },
            "recommendation": "Use input_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for output_paths",
            "details": {
              "script": "model_calibration",
              "parameter": "output_paths",
              "current_pattern": "output_paths.get",
              "line_number": 1041
            },
            "recommendation": "Use output_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for output_paths",
            "details": {
              "script": "model_calibration",
              "parameter": "output_paths",
              "current_pattern": "output_paths.get",
              "line_number": 1042
            },
            "recommendation": "Use output_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for output_paths",
            "details": {
              "script": "model_calibration",
              "parameter": "output_paths",
              "current_pattern": "output_paths.get",
              "line_number": 1043
            },
            "recommendation": "Use output_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1044
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1045
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1046
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1047
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1048
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1052
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1053
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1054
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "model_calibration",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 1055
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "model_calibration",
              "parameter": "job_args",
              "current_pattern": "job_args.job_type",
              "line_number": 1074
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "model_calibration",
              "parameter": "job_args",
              "current_pattern": "args.job_type",
              "line_number": 1393
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "model_calibration"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "severity": "WARNING",
            "category": "testability_helper_functions",
            "message": "Helper function 'from_env' accesses environment directly",
            "details": {
              "script": "model_calibration",
              "function": "from_env",
              "env_variables": [
                "IS_BINARY",
                "MULTICLASS_CATEGORIES",
                "CALIBRATION_METHOD",
                "LABEL_FIELD",
                "SCORE_FIELD",
                "IS_BINARY",
                "MONOTONIC_CONSTRAINT",
                "GAM_SPLINES",
                "ERROR_THRESHOLD",
                "NUM_CLASSES",
                "SCORE_FIELD_PREFIX"
              ],
              "line_numbers": [
                100,
                101,
                115,
                116,
                117,
                118,
                119,
                121,
                122,
                123,
                124
              ]
            },
            "recommendation": "Refactor 'from_env' to accept environment variables as parameters"
          },
          {
            "severity": "WARNING",
            "category": "testability_helper_functions",
            "message": "Helper function 'None' accesses environment directly",
            "details": {
              "script": "model_calibration",
              "function": null,
              "env_variables": [
                "CALIBRATION_METHOD",
                "LABEL_FIELD",
                "SCORE_FIELD",
                "IS_BINARY",
                "MONOTONIC_CONSTRAINT",
                "GAM_SPLINES",
                "ERROR_THRESHOLD",
                "NUM_CLASSES",
                "SCORE_FIELD_PREFIX",
                "MULTICLASS_CATEGORIES"
              ],
              "line_numbers": [
                1403,
                1404,
                1405,
                1406,
                1407,
                1408,
                1409,
                1410,
                1411,
                1412
              ]
            },
            "recommendation": "Refactor 'None' to accept environment variables as parameters"
          },
          {
            "severity": "INFO",
            "category": "framework_detected",
            "message": "Processing script uses sklearn framework",
            "details": {
              "script": "model_calibration",
              "step_type": "Processing",
              "framework": "sklearn"
            },
            "recommendation": "Ensure sklearn dependencies are properly specified"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for model_calibration",
            "recommendation": "Create processing specification file for model_calibration",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration",
              "expected_spec_path": "cursus/steps/specs/model_calibration_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for model_calibration",
            "recommendation": "Create processing builder file for model_calibration",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "model_calibration",
              "expected_builder_path": "cursus/steps/builders/builder_model_calibration_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/model_calibration.py",
          "path_references": [
            "path='Model Calibration Script for SageMaker Processing.\\n\\nThis script calibrates model prediction scores to accurate probabilities,\\nwhich is essential for risk-based decision-making and threshold setting.\\nIt supports multiple calibration methods including GAM, Isotonic Regression,\\nand Platt Scaling, with options for monotonicity constraints.\\nIt supports both binary and multi-class classification scenarios.\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"Model Calibration Script for SageMaker Processing.\\n\\nThis script calibrates model prediction scores to accurate probabilities,' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/eval_data' line_number=43 context='\\n# Define standard SageMaker paths\\n>>> INPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\nOUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\nOUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibration' line_number=44 context='# Define standard SageMaker paths\\nINPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\n>>> OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\nOUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\nOUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/metrics' line_number=45 context='INPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\nOUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\n>>> OUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\nOUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibrated_data' line_number=46 context='OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\nOUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\n>>> OUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"\\n\\n' is_hardcoded=True construction_method=None",
            "path='Configuration class for model calibration.' line_number=50 context='\\nclass CalibrationConfig:\\n>>>     \"\"\"Configuration class for model calibration.\"\"\"\\n\\n    def __init__(' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/eval_data' line_number=54 context='    def __init__(\\n        self,\\n>>>         input_data_path: str = \"/opt/ml/processing/input/eval_data\",\\n        output_calibration_path: str = \"/opt/ml/processing/output/calibration\",\\n        output_metrics_path: str = \"/opt/ml/processing/output/metrics\",' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibration' line_number=55 context='        self,\\n        input_data_path: str = \"/opt/ml/processing/input/eval_data\",\\n>>>         output_calibration_path: str = \"/opt/ml/processing/output/calibration\",\\n        output_metrics_path: str = \"/opt/ml/processing/output/metrics\",\\n        output_calibrated_data_path: str = \"/opt/ml/processing/output/calibrated_data\",' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/metrics' line_number=56 context='        input_data_path: str = \"/opt/ml/processing/input/eval_data\",\\n        output_calibration_path: str = \"/opt/ml/processing/output/calibration\",\\n>>>         output_metrics_path: str = \"/opt/ml/processing/output/metrics\",\\n        output_calibrated_data_path: str = \"/opt/ml/processing/output/calibrated_data\",\\n        calibration_method: str = \"gam\",' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibrated_data' line_number=57 context='        output_calibration_path: str = \"/opt/ml/processing/output/calibration\",\\n        output_metrics_path: str = \"/opt/ml/processing/output/metrics\",\\n>>>         output_calibrated_data_path: str = \"/opt/ml/processing/output/calibrated_data\",\\n        calibration_method: str = \"gam\",\\n        label_field: str = \"label\",' is_hardcoded=True construction_method=None",
            "path='Initialize configuration with paths and parameters.' line_number=69 context='        multiclass_categories: Optional[List[str]] = None,\\n    ):\\n>>>         \"\"\"Initialize configuration with paths and parameters.\"\"\"\\n        # I/O Paths\\n        self.input_data_path = input_data_path' is_hardcoded=True construction_method=None",
            "path='Create configuration from environment variables.' line_number=97 context='    @classmethod\\n    def from_env(cls) -> \\'CalibrationConfig\\':\\n>>>         \"\"\"Create configuration from environment variables.\"\"\"\\n        # Parse multiclass categories from environment\\n        multiclass_categories = None' is_hardcoded=True construction_method=None",
            "path='0.05' line_number=122 context='            == \"true\",\\n            gam_splines=int(os.environ.get(\"GAM_SPLINES\", \"10\")),\\n>>>             error_threshold=float(os.environ.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n            num_classes=int(os.environ.get(\"NUM_CLASSES\", \"2\")),\\n            score_field_prefix=os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),' is_hardcoded=True construction_method=None",
            "path=\"Create output directories if they don't exist.\" line_number=130 context='\\ndef create_directories(config: Optional[\\'CalibrationConfig\\'] = None) -> None:\\n>>>     \"\"\"Create output directories if they don\\'t exist.\"\"\"\\n    config = config or CalibrationConfig.from_env()\\n    os.makedirs(config.output_calibration_path, exist_ok=True)' is_hardcoded=True construction_method=None",
            "path='.csv' line_number=157 context='\\n    for fname in sorted(os.listdir(data_dir)):\\n>>>         if fname.lower().endswith((\".csv\", \".parquet\", \".json\")):\\n            return os.path.join(data_dir, fname)\\n' is_hardcoded=True construction_method=None",
            "path='.json' line_number=157 context='\\n    for fname in sorted(os.listdir(data_dir)):\\n>>>         if fname.lower().endswith((\".csv\", \".parquet\", \".json\")):\\n            return os.path.join(data_dir, fname)\\n' is_hardcoded=True construction_method=None",
            "path='.csv' line_number=184 context='    if data_file.endswith(\".parquet\"):\\n        df = pd.read_parquet(data_file)\\n>>>     elif data_file.endswith(\".csv\"):\\n        df = pd.read_csv(data_file)\\n    else:' is_hardcoded=True construction_method=None",
            "path='Log a section title with delimiters for better visibility.' line_number=222 context='\\ndef log_section(title: str) -> None:\\n>>>     \"\"\"Log a section title with delimiters for better visibility.\"\"\"\\n    delimiter = \"=\" * 80\\n    logger.info(delimiter)' is_hardcoded=True construction_method=None",
            "path=\"Extract and load data from nested tar.gz files in SageMaker output structure.\\n\\n    Handles SageMaker's specific output structure:\\n    - output.tar.gz (outer archive)\\n      - val.tar.gz (inner archive)\\n        - val/predictions.csv (actual data)\\n        - val_metrics/... (metrics and plots)\\n      - test.tar.gz (inner archive)\\n        - test/predictions.csv (actual data)\\n        - test_metrics/... (metrics and plots)\\n\\n    Also handles cases where the input path contains:\\n    - Direct output.tar.gz file\\n    - Path to a job directory that contains output/output.tar.gz\\n    - Path to a parent directory with job subdirectories\\n\\n    Args:\\n        config: Configuration object (optional, created from environment if not provided)\\n\\n    Returns:\\n        pd.DataFrame: Combined dataset with predictions from extracted tar.gz files\\n\\n    Raises:\\n        FileNotFoundError: If necessary tar.gz files or prediction data not found\\n    \" line_number=230 context='\\ndef extract_and_load_nested_tarball_data(config: Optional[\\'CalibrationConfig\\'] = None) -> pd.DataFrame:\\n>>>     \"\"\"Extract and load data from nested tar.gz files in SageMaker output structure.\\n\\n    Handles SageMaker\\'s specific output structure:' is_hardcoded=True construction_method=None",
            "path='output.tar.gz' line_number=279 context='    output_archive = None\\n    for fname in os.listdir(input_dir):\\n>>>         if fname.lower() == \"output.tar.gz\":\\n            output_archive = os.path.join(input_dir, fname)\\n            logger.info(f\"Found output.tar.gz directly in input directory\")' is_hardcoded=True construction_method=None",
            "path='output' line_number=293 context='            if os.path.isdir(item_path):\\n                # Check if this directory has an output/output.tar.gz file\\n>>>                 output_dir = os.path.join(item_path, \"output\")\\n                if os.path.isdir(output_dir):\\n                    nested_archive = os.path.join(output_dir, \"output.tar.gz\")' is_hardcoded=False construction_method='os.path.join'",
            "path='output.tar.gz' line_number=295 context='                output_dir = os.path.join(item_path, \"output\")\\n                if os.path.isdir(output_dir):\\n>>>                     nested_archive = os.path.join(output_dir, \"output.tar.gz\")\\n                    if os.path.isfile(nested_archive):\\n                        output_archive = nested_archive' is_hardcoded=False construction_method='os.path.join'",
            "path='output.tar.gz' line_number=295 context='                output_dir = os.path.join(item_path, \"output\")\\n                if os.path.isdir(output_dir):\\n>>>                     nested_archive = os.path.join(output_dir, \"output.tar.gz\")\\n                    if os.path.isfile(nested_archive):\\n                        output_archive = nested_archive' is_hardcoded=True construction_method=None",
            "path='output.tar.gz' line_number=308 context='        for root, _, files in os.walk(input_dir):\\n            for fname in files:\\n>>>                 if fname.lower() == \"output.tar.gz\":\\n                    output_archive = os.path.join(root, fname)\\n                    logger.info(' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=325 context='\\n    logger.info(f\"Found SageMaker output archive: {output_archive}\")\\n>>>     logger.info(f\"File size: {os.path.getsize(output_archive) / (1024*1024):.2f} MB\")\\n\\n    # Create temporary directories for extraction' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=340 context='            logger.info(f\"Outer archive contains {len(members)} files:\")\\n            for member in members:\\n>>>                 logger.info(f\"  - {member.name} ({member.size / 1024:.2f} KB)\")\\n            tar.extractall(path=outer_temp_dir)\\n        logger.info(f\"Extracted to: {outer_temp_dir}\")' is_hardcoded=True construction_method=None",
            "path='.tar.gz' line_number=347 context='        inner_archives = []\\n        for fname in os.listdir(outer_temp_dir):\\n>>>             if fname.lower().endswith(\".tar.gz\"):\\n                inner_archives.append(os.path.join(outer_temp_dir, fname))\\n' is_hardcoded=True construction_method=None",
            "path='No val.tar.gz or test.tar.gz found in output.tar.gz' line_number=352 context='        if not inner_archives:\\n            raise FileNotFoundError(\\n>>>                 \"No val.tar.gz or test.tar.gz found in output.tar.gz\"\\n            )\\n' is_hardcoded=True construction_method=None",
            "path='.' line_number=361 context='        # Process each inner archive (val.tar.gz, test.tar.gz)\\n        for inner_archive in inner_archives:\\n>>>             archive_name = os.path.basename(inner_archive).split(\".\")[\\n                0\\n            ]  # \\'val\\' or \\'test\\'' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=375 context='                logger.info(f\"Inner archive contains {len(members)} files:\")\\n                for member in members:\\n>>>                     logger.info(f\"  - {member.name} ({member.size / 1024:.2f} KB)\")\\n                tar.extractall(path=inner_extract_dir)\\n            logger.info(f\"Extracted inner archive to: {inner_extract_dir}\")' is_hardcoded=True construction_method=None",
            "path='predictions.csv' line_number=380 context='\\n            # Look for predictions.csv in the correct structure\\n>>>             predictions_path = os.path.join(\\n                inner_extract_dir, archive_name, \"predictions.csv\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='predictions.csv' line_number=381 context='            # Look for predictions.csv in the correct structure\\n            predictions_path = os.path.join(\\n>>>                 inner_extract_dir, archive_name, \"predictions.csv\"\\n            )\\n            if not os.path.exists(predictions_path):' is_hardcoded=True construction_method=None",
            "path='Column mismatch between datasets. Common columns will be used.' line_number=408 context='                if set(df.columns) != set(combined_df.columns):\\n                    logger.warning(\\n>>>                         f\"Column mismatch between datasets. Common columns will be used.\"\\n                    )\\n                    common_cols = list(' is_hardcoded=True construction_method=None",
            "path='Compute comprehensive calibration metrics including ECE, MCE, and reliability diagram.\\n\\n    This function calculates:\\n    - Expected Calibration Error (ECE): weighted average of absolute calibration errors\\n    - Maximum Calibration Error (MCE): maximum calibration error across all bins\\n    - Reliability diagram data: points for plotting calibration curve\\n    - Bin statistics: detailed information about each probability bin\\n    - Brier score: quadratic scoring rule for probabilistic predictions\\n    - Preservation of discrimination: comparison of AUC before/after calibration\\n\\n    Args:\\n        y_true: Ground truth binary labels (0/1)\\n        y_prob: Predicted probabilities\\n        n_bins: Number of bins for calibration curve\\n\\n    Returns:\\n        Dict: Dictionary containing calibration metrics\\n    ' line_number=686 context='    y_true: np.ndarray, y_prob: np.ndarray, n_bins: int = 10\\n) -> Dict[str, Any]:\\n>>>     \"\"\"Compute comprehensive calibration metrics including ECE, MCE, and reliability diagram.\\n\\n    This function calculates:' is_hardcoded=True construction_method=None",
            "path='reliability_diagram.png' line_number=918 context='\\n    # Save figure\\n>>>     figure_path = os.path.join(config.output_metrics_path, \"reliability_diagram.png\")\\n    plt.savefig(figure_path)\\n    plt.close(fig)' is_hardcoded=False construction_method='os.path.join'",
            "path='reliability_diagram.png' line_number=918 context='\\n    # Save figure\\n>>>     figure_path = os.path.join(config.output_metrics_path, \"reliability_diagram.png\")\\n    plt.savefig(figure_path)\\n    plt.close(fig)' is_hardcoded=True construction_method=None",
            "path='multiclass_reliability_diagram.png' line_number=1000 context='\\n    plt.tight_layout()\\n>>>     figure_path = os.path.join(\\n        config.output_metrics_path, \"multiclass_reliability_diagram.png\"\\n    )' is_hardcoded=False construction_method='os.path.join'",
            "path='multiclass_reliability_diagram.png' line_number=1001 context='    plt.tight_layout()\\n    figure_path = os.path.join(\\n>>>         config.output_metrics_path, \"multiclass_reliability_diagram.png\"\\n    )\\n    plt.savefig(figure_path)' is_hardcoded=True construction_method=None",
            "path='0.05' line_number=1053 context='            == \"true\",\\n            gam_splines=int(environ_vars.get(\"GAM_SPLINES\", \"10\")),\\n>>>             error_threshold=float(environ_vars.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n            num_classes=int(environ_vars.get(\"NUM_CLASSES\", \"2\")),\\n            score_field_prefix=environ_vars.get(' is_hardcoded=True construction_method=None",
            "path='calibration_metrics.json' line_number=1155 context='\\n            # Save metrics report\\n>>>             metrics_path = os.path.join(\\n                config.output_metrics_path, \"calibration_metrics.json\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibration_metrics.json' line_number=1156 context='            # Save metrics report\\n            metrics_path = os.path.join(\\n>>>                 config.output_metrics_path, \"calibration_metrics.json\"\\n            )\\n            with open(metrics_path, \"w\") as f:' is_hardcoded=True construction_method=None",
            "path='calibration_model.pkl' line_number=1162 context='\\n            # Save calibrator model\\n>>>             calibrator_path = os.path.join(\\n                config.output_calibration_path, \"calibration_model.pkl\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibration_model.pkl' line_number=1163 context='            # Save calibrator model\\n            calibrator_path = os.path.join(\\n>>>                 config.output_calibration_path, \"calibration_model.pkl\"\\n            )\\n            with open(calibrator_path, \"wb\") as f:' is_hardcoded=True construction_method=None",
            "path='calibrated_data.csv' line_number=1170 context='            # Add calibrated scores to dataframe and save\\n            df[\"calibrated_\" + config.score_field] = y_prob_calibrated\\n>>>             output_path = os.path.join(\\n                config.output_calibrated_data_path, \"calibrated_data.csv\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibrated_data.csv' line_number=1171 context='            df[\"calibrated_\" + config.score_field] = y_prob_calibrated\\n            output_path = os.path.join(\\n>>>                 config.output_calibrated_data_path, \"calibrated_data.csv\"\\n            )\\n            df.to_csv(output_path, index=False)' is_hardcoded=True construction_method=None",
            "path='calibration_summary.json' line_number=1195 context='            }\\n\\n>>>             summary_path = os.path.join(\\n                config.output_calibration_path, \"calibration_summary.json\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibration_summary.json' line_number=1196 context='\\n            summary_path = os.path.join(\\n>>>                 config.output_calibration_path, \"calibration_summary.json\"\\n            )\\n            with open(summary_path, \"w\") as f:' is_hardcoded=True construction_method=None",
            "path='.4f' line_number=1212 context='\\n            logger.info(\\n>>>                 f\"Binary calibration complete. ECE reduced from {uncalibrated_metrics[\\'expected_calibration_error\\']:.4f} to {calibrated_metrics[\\'expected_calibration_error\\']:.4f}\"\\n            )\\n' is_hardcoded=True construction_method=None",
            "path='.4f' line_number=1212 context='\\n            logger.info(\\n>>>                 f\"Binary calibration complete. ECE reduced from {uncalibrated_metrics[\\'expected_calibration_error\\']:.4f} to {calibrated_metrics[\\'expected_calibration_error\\']:.4f}\"\\n            )\\n' is_hardcoded=True construction_method=None",
            "path='calibration_metrics.json' line_number=1278 context='\\n            # Save metrics report\\n>>>             metrics_path = os.path.join(\\n                config.output_metrics_path, \"calibration_metrics.json\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibration_metrics.json' line_number=1279 context='            # Save metrics report\\n            metrics_path = os.path.join(\\n>>>                 config.output_metrics_path, \"calibration_metrics.json\"\\n            )\\n            with open(metrics_path, \"w\") as f:' is_hardcoded=True construction_method=None",
            "path='calibration_models' line_number=1285 context='\\n            # Save calibrator models\\n>>>             calibrator_dir = os.path.join(\\n                config.output_calibration_path, \"calibration_models\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='.pkl' line_number=1294 context='                class_name = config.multiclass_categories[i]\\n                calibrator_path = os.path.join(\\n>>>                     calibrator_dir, f\"calibration_model_class_{class_name}.pkl\"\\n                )\\n                with open(calibrator_path, \"wb\") as f:' is_hardcoded=True construction_method=None",
            "path='calibrated_data.csv' line_number=1306 context='                df[f\"calibrated_{col_name}\"] = y_prob_calibrated[:, i]\\n\\n>>>             output_path = os.path.join(\\n                config.output_calibrated_data_path, \"calibrated_data.csv\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibrated_data.csv' line_number=1307 context='\\n            output_path = os.path.join(\\n>>>                 config.output_calibrated_data_path, \"calibrated_data.csv\"\\n            )\\n            df.to_csv(output_path, index=False)' is_hardcoded=True construction_method=None",
            "path='calibration_summary.json' line_number=1339 context='            }\\n\\n>>>             summary_path = os.path.join(\\n                config.output_calibration_path, \"calibration_summary.json\"\\n            )' is_hardcoded=False construction_method='os.path.join'",
            "path='calibration_summary.json' line_number=1340 context='\\n            summary_path = os.path.join(\\n>>>                 config.output_calibration_path, \"calibration_summary.json\"\\n            )\\n            with open(summary_path, \"w\") as f:' is_hardcoded=True construction_method=None",
            "path='.4f' line_number=1357 context='            logger.info(\\n                f\"Multi-class calibration complete. Macro ECE reduced from \"\\n>>>                 + f\"{uncalibrated_metrics[\\'macro_expected_calibration_error\\']:.4f} to \"\\n                + f\"{calibrated_metrics[\\'macro_expected_calibration_error\\']:.4f}\"\\n            )' is_hardcoded=True construction_method=None",
            "path='.4f' line_number=1358 context='                f\"Multi-class calibration complete. Macro ECE reduced from \"\\n                + f\"{uncalibrated_metrics[\\'macro_expected_calibration_error\\']:.4f} to \"\\n>>>                 + f\"{calibrated_metrics[\\'macro_expected_calibration_error\\']:.4f}\"\\n            )\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/eval_data' line_number=1396 context='\\n    # Define standard SageMaker paths\\n>>>     INPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\n    OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\n    OUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibration' line_number=1397 context='    # Define standard SageMaker paths\\n    INPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\n>>>     OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\n    OUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\n    OUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/metrics' line_number=1398 context='    INPUT_DATA_PATH = \"/opt/ml/processing/input/eval_data\"\\n    OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\n>>>     OUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\n    OUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output/calibrated_data' line_number=1399 context='    OUTPUT_CALIBRATION_PATH = \"/opt/ml/processing/output/calibration\"\\n    OUTPUT_METRICS_PATH = \"/opt/ml/processing/output/metrics\"\\n>>>     OUTPUT_CALIBRATED_DATA_PATH = \"/opt/ml/processing/output/calibrated_data\"\\n\\n    # Parse environment variables' is_hardcoded=True construction_method=None",
            "path='0.05' line_number=1409 context='        \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),\\n        \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),\\n>>>         \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),\\n        \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),\\n        \"SCORE_FIELD_PREFIX\": os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [
            "variable_name='IS_BINARY' line_number=100 context='        # Parse multiclass categories from environment\\n        multiclass_categories = None\\n>>>         if os.environ.get(\"IS_BINARY\", \"True\").lower() != \"true\":\\n            multiclass_cats = os.environ.get(\"MULTICLASS_CATEGORIES\", None)\\n            if multiclass_cats:' access_method='os.environ.get' has_default=True default_value='True'",
            "variable_name='MULTICLASS_CATEGORIES' line_number=101 context='        multiclass_categories = None\\n        if os.environ.get(\"IS_BINARY\", \"True\").lower() != \"true\":\\n>>>             multiclass_cats = os.environ.get(\"MULTICLASS_CATEGORIES\", None)\\n            if multiclass_cats:\\n                try:' access_method='os.environ.get' has_default=True default_value=None",
            "variable_name='CALIBRATION_METHOD' line_number=115 context='            output_metrics_path=OUTPUT_METRICS_PATH,\\n            output_calibrated_data_path=OUTPUT_CALIBRATED_DATA_PATH,\\n>>>             calibration_method=os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n            label_field=os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            score_field=os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),' access_method='os.environ.get' has_default=True default_value='gam'",
            "variable_name='LABEL_FIELD' line_number=116 context='            output_calibrated_data_path=OUTPUT_CALIBRATED_DATA_PATH,\\n            calibration_method=os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n>>>             label_field=os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            score_field=os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n            is_binary=os.environ.get(\"IS_BINARY\", \"True\").lower() == \"true\",' access_method='os.environ.get' has_default=True default_value='label'",
            "variable_name='SCORE_FIELD' line_number=117 context='            calibration_method=os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n            label_field=os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>             score_field=os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n            is_binary=os.environ.get(\"IS_BINARY\", \"True\").lower() == \"true\",\\n            monotonic_constraint=os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\").lower()' access_method='os.environ.get' has_default=True default_value='prob_class_1'",
            "variable_name='IS_BINARY' line_number=118 context='            label_field=os.environ.get(\"LABEL_FIELD\", \"label\"),\\n            score_field=os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n>>>             is_binary=os.environ.get(\"IS_BINARY\", \"True\").lower() == \"true\",\\n            monotonic_constraint=os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\").lower()\\n            == \"true\",' access_method='os.environ.get' has_default=True default_value='True'",
            "variable_name='MONOTONIC_CONSTRAINT' line_number=119 context='            score_field=os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n            is_binary=os.environ.get(\"IS_BINARY\", \"True\").lower() == \"true\",\\n>>>             monotonic_constraint=os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\").lower()\\n            == \"true\",\\n            gam_splines=int(os.environ.get(\"GAM_SPLINES\", \"10\")),' access_method='os.environ.get' has_default=True default_value='True'",
            "variable_name='GAM_SPLINES' line_number=121 context='            monotonic_constraint=os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\").lower()\\n            == \"true\",\\n>>>             gam_splines=int(os.environ.get(\"GAM_SPLINES\", \"10\")),\\n            error_threshold=float(os.environ.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n            num_classes=int(os.environ.get(\"NUM_CLASSES\", \"2\")),' access_method='os.environ.get' has_default=True default_value='10'",
            "variable_name='ERROR_THRESHOLD' line_number=122 context='            == \"true\",\\n            gam_splines=int(os.environ.get(\"GAM_SPLINES\", \"10\")),\\n>>>             error_threshold=float(os.environ.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n            num_classes=int(os.environ.get(\"NUM_CLASSES\", \"2\")),\\n            score_field_prefix=os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),' access_method='os.environ.get' has_default=True default_value='0.05'",
            "variable_name='NUM_CLASSES' line_number=123 context='            gam_splines=int(os.environ.get(\"GAM_SPLINES\", \"10\")),\\n            error_threshold=float(os.environ.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n>>>             num_classes=int(os.environ.get(\"NUM_CLASSES\", \"2\")),\\n            score_field_prefix=os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),\\n            multiclass_categories=multiclass_categories,' access_method='os.environ.get' has_default=True default_value='2'",
            "variable_name='SCORE_FIELD_PREFIX' line_number=124 context='            error_threshold=float(os.environ.get(\"ERROR_THRESHOLD\", \"0.05\")),\\n            num_classes=int(os.environ.get(\"NUM_CLASSES\", \"2\")),\\n>>>             score_field_prefix=os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),\\n            multiclass_categories=multiclass_categories,\\n        )' access_method='os.environ.get' has_default=True default_value='prob_class_'",
            "variable_name='CALIBRATION_METHOD' line_number=1403 context='    # Parse environment variables\\n    environ_vars = {\\n>>>         \"CALIBRATION_METHOD\": os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n        \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n        \"SCORE_FIELD\": os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),' access_method='os.environ.get' has_default=True default_value='gam'",
            "variable_name='LABEL_FIELD' line_number=1404 context='    environ_vars = {\\n        \"CALIBRATION_METHOD\": os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n>>>         \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n        \"SCORE_FIELD\": os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n        \"IS_BINARY\": os.environ.get(\"IS_BINARY\", \"True\"),' access_method='os.environ.get' has_default=True default_value='label'",
            "variable_name='SCORE_FIELD' line_number=1405 context='        \"CALIBRATION_METHOD\": os.environ.get(\"CALIBRATION_METHOD\", \"gam\"),\\n        \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n>>>         \"SCORE_FIELD\": os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n        \"IS_BINARY\": os.environ.get(\"IS_BINARY\", \"True\"),\\n        \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),' access_method='os.environ.get' has_default=True default_value='prob_class_1'",
            "variable_name='IS_BINARY' line_number=1406 context='        \"LABEL_FIELD\": os.environ.get(\"LABEL_FIELD\", \"label\"),\\n        \"SCORE_FIELD\": os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n>>>         \"IS_BINARY\": os.environ.get(\"IS_BINARY\", \"True\"),\\n        \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),\\n        \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),' access_method='os.environ.get' has_default=True default_value='True'",
            "variable_name='MONOTONIC_CONSTRAINT' line_number=1407 context='        \"SCORE_FIELD\": os.environ.get(\"SCORE_FIELD\", \"prob_class_1\"),\\n        \"IS_BINARY\": os.environ.get(\"IS_BINARY\", \"True\"),\\n>>>         \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),\\n        \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),\\n        \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),' access_method='os.environ.get' has_default=True default_value='True'",
            "variable_name='GAM_SPLINES' line_number=1408 context='        \"IS_BINARY\": os.environ.get(\"IS_BINARY\", \"True\"),\\n        \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),\\n>>>         \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),\\n        \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),\\n        \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),' access_method='os.environ.get' has_default=True default_value='10'",
            "variable_name='ERROR_THRESHOLD' line_number=1409 context='        \"MONOTONIC_CONSTRAINT\": os.environ.get(\"MONOTONIC_CONSTRAINT\", \"True\"),\\n        \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),\\n>>>         \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),\\n        \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),\\n        \"SCORE_FIELD_PREFIX\": os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),' access_method='os.environ.get' has_default=True default_value='0.05'",
            "variable_name='NUM_CLASSES' line_number=1410 context='        \"GAM_SPLINES\": os.environ.get(\"GAM_SPLINES\", \"10\"),\\n        \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),\\n>>>         \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),\\n        \"SCORE_FIELD_PREFIX\": os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),\\n        \"MULTICLASS_CATEGORIES\": os.environ.get(\"MULTICLASS_CATEGORIES\"),' access_method='os.environ.get' has_default=True default_value='2'",
            "variable_name='SCORE_FIELD_PREFIX' line_number=1411 context='        \"ERROR_THRESHOLD\": os.environ.get(\"ERROR_THRESHOLD\", \"0.05\"),\\n        \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),\\n>>>         \"SCORE_FIELD_PREFIX\": os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),\\n        \"MULTICLASS_CATEGORIES\": os.environ.get(\"MULTICLASS_CATEGORIES\"),\\n    }' access_method='os.environ.get' has_default=True default_value='prob_class_'",
            "variable_name='MULTICLASS_CATEGORIES' line_number=1412 context='        \"NUM_CLASSES\": os.environ.get(\"NUM_CLASSES\", \"2\"),\\n        \"SCORE_FIELD_PREFIX\": os.environ.get(\"SCORE_FIELD_PREFIX\", \"prob_class_\"),\\n>>>         \"MULTICLASS_CATEGORIES\": os.environ.get(\"MULTICLASS_CATEGORIES\"),\\n    }\\n' access_method='os.environ.get' has_default=False default_value=None"
          ],
          "imports": [
            "module_name='os' import_alias=None line_number=11 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='json' import_alias=None line_number=13 is_from_import=False imported_items=[]",
            "module_name='logging' import_alias=None line_number=14 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=15 is_from_import=False imported_items=[]",
            "module_name='argparse' import_alias=None line_number=16 is_from_import=False imported_items=[]",
            "module_name='typing' import_alias=None line_number=17 is_from_import=True imported_items=['Dict', 'List', 'Any', 'Optional', 'Tuple']",
            "module_name='numpy' import_alias='np' line_number=19 is_from_import=False imported_items=[]",
            "module_name='pandas' import_alias='pd' line_number=20 is_from_import=False imported_items=[]",
            "module_name='pickle' import_alias='pkl' line_number=21 is_from_import=False imported_items=[]",
            "module_name='matplotlib.pyplot' import_alias='plt' line_number=22 is_from_import=False imported_items=[]",
            "module_name='sklearn.isotonic' import_alias=None line_number=23 is_from_import=True imported_items=['IsotonicRegression']",
            "module_name='sklearn.linear_model' import_alias=None line_number=24 is_from_import=True imported_items=['LogisticRegression']",
            "module_name='sklearn.calibration' import_alias=None line_number=25 is_from_import=True imported_items=['calibration_curve']",
            "module_name='sklearn.metrics' import_alias=None line_number=26 is_from_import=True imported_items=['brier_score_loss', 'roc_auc_score']",
            "module_name='pygam' import_alias=None line_number=30 is_from_import=True imported_items=['LogisticGAM', 's']",
            "module_name='tarfile' import_alias=None line_number=255 is_from_import=False imported_items=[]",
            "module_name='tempfile' import_alias=None line_number=256 is_from_import=False imported_items=[]",
            "module_name='shutil' import_alias=None line_number=257 is_from_import=False imported_items=[]",
            "module_name='ast' import_alias=None line_number=1032 is_from_import=False imported_items=[]"
          ],
          "argument_definitions": [
            "argument_name='job_type' line_number=1385 is_required=False has_default=True default_value='calibration' argument_type='str' choices=None"
          ],
          "file_operations": [
            "file_path='<file_object>' operation_type='write' line_number=1159 context='            )\\n            with open(metrics_path, \"w\") as f:\\n>>>                 json.dump(metrics_report, f, indent=2)\\n\\n            # Save calibrator model' mode=None method='json.dump'",
            "file_path='<file_object>' operation_type='write' line_number=1166 context='            )\\n            with open(calibrator_path, \"wb\") as f:\\n>>>                 pkl.dump(calibrator, f)\\n\\n            # Add calibrated scores to dataframe and save' mode=None method='pickle.dump'",
            "file_path='<file_object>' operation_type='write' line_number=1199 context='            )\\n            with open(summary_path, \"w\") as f:\\n>>>                 json.dump(summary, f, indent=2)\\n\\n            # Check if calibration improved by error threshold' mode=None method='json.dump'",
            "file_path='<file_object>' operation_type='write' line_number=1282 context='            )\\n            with open(metrics_path, \"w\") as f:\\n>>>                 json.dump(metrics_report, f, indent=2)\\n\\n            # Save calibrator models' mode=None method='json.dump'",
            "file_path='<file_object>' operation_type='write' line_number=1297 context='                )\\n                with open(calibrator_path, \"wb\") as f:\\n>>>                     pkl.dump(calibrator, f)\\n                calibrator_paths[f\"class_{class_name}\"] = calibrator_path\\n' mode=None method='pickle.dump'",
            "file_path='<file_object>' operation_type='write' line_number=1343 context='            )\\n            with open(summary_path, \"w\") as f:\\n>>>                 json.dump(summary, f, indent=2)\\n\\n            # Check if calibration improved by error threshold' mode=None method='json.dump'"
          ],
          "step_type": "Processing",
          "framework": "sklearn",
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "model_calibration.py",
          "inputs": {
            "evaluation_data": {
              "path": "/opt/ml/processing/input/eval_data"
            }
          },
          "outputs": {
            "calibration_output": {
              "path": "/opt/ml/processing/output/calibration"
            },
            "metrics_output": {
              "path": "/opt/ml/processing/output/metrics"
            },
            "calibrated_data": {
              "path": "/opt/ml/processing/output/calibrated_data"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [
              "CALIBRATION_METHOD",
              "LABEL_FIELD",
              "SCORE_FIELD",
              "IS_BINARY"
            ],
            "optional": {
              "MONOTONIC_CONSTRAINT": "True",
              "GAM_SPLINES": "10",
              "ERROR_THRESHOLD": "0.05",
              "NUM_CLASSES": "2",
              "SCORE_FIELD_PREFIX": "prob_class_",
              "MULTICLASS_CATEGORIES": "[0, 1]"
            }
          },
          "description": "Contract for model calibration processing step.\n    \n    The model calibration step takes a trained model's raw prediction scores and\n    calibrates them to better reflect true probabilities, which is essential for\n    risk-based decision-making, threshold setting, and confidence in model outputs.\n    Supports both binary and multi-class classification scenarios.\n    \n    Input Structure:\n    - /opt/ml/processing/input/eval_data: Evaluation dataset with ground truth labels and model predictions\n    \n    Output Structure:\n    - /opt/ml/processing/output/calibration: Calibration mapping and artifacts\n    - /opt/ml/processing/output/metrics: Calibration quality metrics\n    - /opt/ml/processing/output/calibrated_data: Dataset with calibrated probabilities\n    \n    Environment Variables:\n    - CALIBRATION_METHOD: Method to use for calibration (gam, isotonic, platt)\n    - LABEL_FIELD: Name of the label column\n    - SCORE_FIELD: Name of the prediction score column (for binary classification)\n    - IS_BINARY: Whether this is a binary classification task (true/false)\n    - MONOTONIC_CONSTRAINT: Whether to enforce monotonicity in GAM (optional)\n    - GAM_SPLINES: Number of splines for GAM (optional)\n    - ERROR_THRESHOLD: Acceptable calibration error threshold (optional)\n    - NUM_CLASSES: Number of classes for multi-class classification (optional, default=2)\n    - SCORE_FIELD_PREFIX: Prefix for probability columns in multi-class scenario (optional)\n    - MULTICLASS_CATEGORIES: JSON string of class names/values for multi-class (optional)\n    ",
          "framework_requirements": {
            "scikit-learn": ">=0.23.2,<1.0.0",
            "pandas": ">=1.2.0,<2.0.0",
            "numpy": ">=1.20.0",
            "pygam": ">=0.8.0",
            "matplotlib": ">=3.3.0"
          }
        },
        "step_type": "Processing",
        "framework": "pandas"
      },
      "severity_level": "WARNING"
    },
    "package": {
      "test_name": "script_contract_package",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.123035",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "package",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "package"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_parameter_usage",
          "message": "Testability parameters defined but not used: job_args",
          "details": {
            "script": "package",
            "unused_parameters": [
              "job_args"
            ],
            "used_parameters": [
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "Either use the testability parameters or remove them from function signature",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "package",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 261
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "package"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "package",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "package"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "WARNING",
            "category": "testability_parameter_usage",
            "message": "Testability parameters defined but not used: job_args",
            "details": {
              "script": "package",
              "unused_parameters": [
                "job_args"
              ],
              "used_parameters": [
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "Either use the testability parameters or remove them from function signature"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "package",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 261
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "package"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "package",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "package",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "package",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "package"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for package",
            "recommendation": "Create processing specification file for package",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "package",
              "expected_spec_path": "cursus/steps/specs/package_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for package",
            "recommendation": "Create processing builder file for package",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "package",
              "expected_builder_path": "cursus/steps/builders/builder_package_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/package.py",
          "path_references": [
            "path='/opt/ml/processing/input/model' line_number=20 context='\\n# Constants - default paths (will be overridden by parameters in main function)\\n>>> DEFAULT_MODEL_PATH = \"/opt/ml/processing/input/model\"\\nDEFAULT_SCRIPT_PATH = \"/opt/ml/processing/input/script\"\\nDEFAULT_CALIBRATION_PATH = \"/opt/ml/processing/input/calibration\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/script' line_number=21 context='# Constants - default paths (will be overridden by parameters in main function)\\nDEFAULT_MODEL_PATH = \"/opt/ml/processing/input/model\"\\n>>> DEFAULT_SCRIPT_PATH = \"/opt/ml/processing/input/script\"\\nDEFAULT_CALIBRATION_PATH = \"/opt/ml/processing/input/calibration\"\\nDEFAULT_OUTPUT_PATH = \"/opt/ml/processing/output\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/calibration' line_number=22 context='DEFAULT_MODEL_PATH = \"/opt/ml/processing/input/model\"\\nDEFAULT_SCRIPT_PATH = \"/opt/ml/processing/input/script\"\\n>>> DEFAULT_CALIBRATION_PATH = \"/opt/ml/processing/input/calibration\"\\nDEFAULT_OUTPUT_PATH = \"/opt/ml/processing/output\"\\nDEFAULT_WORKING_DIRECTORY = \"/tmp/mims_packaging_directory\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=23 context='DEFAULT_SCRIPT_PATH = \"/opt/ml/processing/input/script\"\\nDEFAULT_CALIBRATION_PATH = \"/opt/ml/processing/input/calibration\"\\n>>> DEFAULT_OUTPUT_PATH = \"/opt/ml/processing/output\"\\nDEFAULT_WORKING_DIRECTORY = \"/tmp/mims_packaging_directory\"\\n' is_hardcoded=True construction_method=None",
            "path='/tmp/mims_packaging_directory' line_number=24 context='DEFAULT_CALIBRATION_PATH = \"/opt/ml/processing/input/calibration\"\\nDEFAULT_OUTPUT_PATH = \"/opt/ml/processing/output\"\\n>>> DEFAULT_WORKING_DIRECTORY = \"/tmp/mims_packaging_directory\"\\n\\n' is_hardcoded=True construction_method=None",
            "path='Ensure a directory exists, creating it if necessary.' line_number=28 context='\\ndef ensure_directory(directory: Path) -> bool:\\n>>>     \"\"\"Ensure a directory exists, creating it if necessary.\"\"\"\\n    try:\\n        directory.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
            "path='Check if a file exists and log its details.' line_number=40 context='\\ndef check_file_exists(path: Path, description: str) -> bool:\\n>>>     \"\"\"Check if a file exists and log its details.\"\"\"\\n    exists = path.exists() and path.is_file()\\n    try:' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=48 context='            logger.info(f\"{description}:\")\\n            logger.info(f\"  Path: {path}\")\\n>>>             logger.info(f\"  Size: {size_mb:.2f}MB\")\\n            logger.info(f\"  Permissions: {oct(stats.st_mode)[-3:]}\")\\n            logger.info(f\"  Last modified: {stats.st_mtime}\")' is_hardcoded=True construction_method=None",
            "path='List and log the contents of a directory.' line_number=60 context='\\ndef list_directory_contents(path: Path, description: str) -> None:\\n>>>     \"\"\"List and log the contents of a directory.\"\"\"\\n    logger.info(f\"\\\\n{\\'=\\'*20} Contents of {description} {\\'=\\'*20}\")\\n    logger.info(f\"Path: {path}\")' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=85 context='                    total_size += size_mb\\n                    file_count += 1\\n>>>                     logger.info(f\"{indent}\ud83d\udcc4 {item.name} ({size_mb:.2f}MB)\")\\n                elif item.is_dir():\\n                    dir_count += 1' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=95 context='        logger.info(f\"  Total files: {file_count}\")\\n        logger.info(f\"  Total directories: {dir_count}\")\\n>>>         logger.info(f\"  Total size: {total_size:.2f}MB\")\\n\\n    except Exception as e:' is_hardcoded=True construction_method=None",
            "path='Copy a file and log the operation, ensuring destination directory exists.' line_number=104 context='\\ndef copy_file_robust(src: Path, dst: Path) -> bool:\\n>>>     \"\"\"Copy a file and log the operation, ensuring destination directory exists.\"\"\"\\n    logger.info(f\"\\\\nAttempting to copy file:\")\\n    logger.info(f\"  From: {src}\")' is_hardcoded=True construction_method=None",
            "path='Source file does not exist or is not a file. Skipping copy.' line_number=110 context='\\n    if not check_file_exists(src, \"Source file for copy\"):\\n>>>         logger.warning(\"Source file does not exist or is not a file. Skipping copy.\")\\n        return False\\n' is_hardcoded=True construction_method=None",
            "path='Recursively copy scripts from source to destination.' line_number=128 context='\\ndef copy_scripts(src_dir: Path, dst_dir: Path) -> None:\\n>>>     \"\"\"Recursively copy scripts from source to destination.\"\"\"\\n    logger.info(f\"\\\\n{\\'=\\'*20} Copying Scripts {\\'=\\'*20}\")\\n    logger.info(f\"From: {src_dir}\")' is_hardcoded=True construction_method=None",
            "path='Source scripts directory does not exist or is not a directory. Skipping script copy.' line_number=137 context='    if not src_dir.exists() or not src_dir.is_dir():\\n        logger.warning(\\n>>>             \"Source scripts directory does not exist or is not a directory. Skipping script copy.\"\\n        )\\n        return' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=156 context='    logger.info(f\"\\\\nScript copying summary:\")\\n    logger.info(f\"  Files copied: {files_copied}\")\\n>>>     logger.info(f\"  Total size: {total_size_mb:.2f}MB\")\\n\\n    list_directory_contents(dst_dir, \"Destination scripts directory\")' is_hardcoded=True construction_method=None",
            "path='Extract a tar file to the specified path.' line_number=162 context='\\ndef extract_tarfile(tar_path: Path, extract_path: Path) -> None:\\n>>>     \"\"\"Extract a tar file to the specified path.\"\"\"\\n    logger.info(f\"\\\\n{\\'=\\'*20} Extracting Tar File {\\'=\\'*20}\")\\n' is_hardcoded=True construction_method=None",
            "path='Cannot extract. Tar file does not exist.' line_number=166 context='\\n    if not check_file_exists(tar_path, \"Tar file to extract\"):\\n>>>         logger.error(\"Cannot extract. Tar file does not exist.\")\\n        return\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=178 context='                size_mb = member.size / 1024 / 1024\\n                total_size += size_mb\\n>>>                 logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n            logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=179 context='                total_size += size_mb\\n                logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n>>>             logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n\\n            logger.info(f\"\\\\nExtracting to: {extract_path}\")' is_hardcoded=True construction_method=None",
            "path='Create a tar file from the contents of a directory.' line_number=192 context='\\ndef create_tarfile(output_tar_path: Path, source_dir: Path) -> None:\\n>>>     \"\"\"Create a tar file from the contents of a directory.\"\"\"\\n    logger.info(f\"\\\\n{\\'=\\'*20} Creating Tar File {\\'=\\'*20}\")\\n    logger.info(f\"Output tar: {output_tar_path}\")' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=210 context='                    total_size += size_mb\\n                    files_added += 1\\n>>>                     logger.info(f\"Adding to tar: {arcname} ({size_mb:.2f}MB)\")\\n                    tar.add(item, arcname=arcname)\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=215 context='        logger.info(f\"\\\\nTar creation summary:\")\\n        logger.info(f\"  Files added: {files_added}\")\\n>>>         logger.info(f\"  Total uncompressed size: {total_size:.2f}MB\")\\n\\n        if check_file_exists(output_tar_path, \"Created tar file\"):' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=219 context='        if check_file_exists(output_tar_path, \"Created tar file\"):\\n            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n>>>             logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n            logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n' is_hardcoded=True construction_method=None",
            "path='.2%' line_number=220 context='            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n            logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n>>>             logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n\\n    except Exception as e:' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=269 context='    logger.info(f\"Working directory: {os.getcwd()}\")\\n    logger.info(\\n>>>         f\"Available disk space: {shutil.disk_usage(\\'/\\').free / (1024*1024*1024):.2f}GB\"\\n    )\\n' is_hardcoded=True construction_method=None",
            "path='model.tar.gz' line_number=288 context='\\n        # Extract input model.tar.gz if it exists\\n>>>         input_model_tar = model_path / \"model.tar.gz\"\\n        logger.info(\"\\\\nChecking for input model.tar.gz...\")\\n' is_hardcoded=True construction_method=None",
            "path='\\nChecking for input model.tar.gz...' line_number=289 context='        # Extract input model.tar.gz if it exists\\n        input_model_tar = model_path / \"model.tar.gz\"\\n>>>         logger.info(\"\\\\nChecking for input model.tar.gz...\")\\n\\n        if check_file_exists(input_model_tar, \"Input model.tar.gz\"):' is_hardcoded=True construction_method=None",
            "path='Input model.tar.gz' line_number=291 context='        logger.info(\"\\\\nChecking for input model.tar.gz...\")\\n\\n>>>         if check_file_exists(input_model_tar, \"Input model.tar.gz\"):\\n            extract_tarfile(input_model_tar, working_directory)\\n        else:' is_hardcoded=True construction_method=None",
            "path='No model.tar.gz found. Copying all files from model_path...' line_number=294 context='            extract_tarfile(input_model_tar, working_directory)\\n        else:\\n>>>             logger.info(\"No model.tar.gz found. Copying all files from model_path...\")\\n            files_copied = 0\\n            total_size = 0' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=304 context='                        total_size += item.stat().st_size / 1024 / 1024\\n            logger.info(\\n>>>                 f\"\\\\nCopied {files_copied} files, total size: {total_size:.2f}MB\"\\n            )\\n' is_hardcoded=True construction_method=None",
            "path='Copying calibration artifacts to calibration subdirectory...' line_number=319 context='            # and calibration_summary.json\\n            # Copy calibration artifacts to working_directory/calibration/ to match inference expectations\\n>>>             logger.info(\"Copying calibration artifacts to calibration subdirectory...\")\\n            files_copied = 0\\n            total_size = 0' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=329 context='                        total_size += item.stat().st_size / 1024 / 1024\\n            \\n>>>             logger.info(f\"Copied {files_copied} calibration files, total size: {total_size:.2f}MB\")\\n            list_directory_contents(calibration_directory, \"Calibration directory\")\\n        else:' is_hardcoded=True construction_method=None",
            "path='model.tar.gz' line_number=339 context='\\n        # Create the output model.tar.gz\\n>>>         output_tar_file = output_path / \"model.tar.gz\"\\n        create_tarfile(output_tar_file, working_directory)\\n' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [],
          "imports": [
            "module_name='shutil' import_alias=None line_number=1 is_from_import=False imported_items=[]",
            "module_name='tarfile' import_alias=None line_number=2 is_from_import=False imported_items=[]",
            "module_name='argparse' import_alias=None line_number=3 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=4 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=5 is_from_import=True imported_items=['Path']",
            "module_name='logging' import_alias=None line_number=6 is_from_import=False imported_items=[]",
            "module_name='os' import_alias=None line_number=7 is_from_import=False imported_items=[]",
            "module_name='typing' import_alias=None line_number=8 is_from_import=True imported_items=['List', 'Dict', 'Optional', 'Any']",
            "module_name='sys' import_alias=None line_number=9 is_from_import=False imported_items=[]"
          ],
          "argument_definitions": [],
          "file_operations": [],
          "step_type": "Processing",
          "framework": null,
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "package.py",
          "inputs": {
            "model_input": {
              "path": "/opt/ml/processing/input/model"
            },
            "inference_scripts_input": {
              "path": "/opt/ml/processing/input/script"
            },
            "calibration_model": {
              "path": "/opt/ml/processing/input/calibration"
            }
          },
          "outputs": {
            "packaged_model": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "\n    MIMS packaging script that:\n    1. Extracts model artifacts from input model directory or model.tar.gz\n    2. Includes calibration model if available\n    3. Copies inference scripts to code directory\n    4. Creates a packaged model.tar.gz file for deployment\n    4. Provides detailed logging of the packaging process\n    \n    Input Structure:\n    - /opt/ml/processing/input/model: Model artifacts (files or model.tar.gz)\n    - /opt/ml/processing/input/script: Inference scripts to include\n    - /opt/ml/processing/input/calibration: Optional calibration model artifacts\n    \n    Output Structure:\n    - /opt/ml/processing/output/model.tar.gz: Packaged model ready for deployment\n    ",
          "framework_requirements": {
            "python": ">=3.7"
          }
        },
        "step_type": "Processing"
      },
      "severity_level": "WARNING"
    },
    "payload": {
      "test_name": "script_contract_payload",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.240933",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "payload",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "payload"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_parameter_usage",
          "message": "Testability parameters defined but not used: job_args",
          "details": {
            "script": "payload",
            "unused_parameters": [
              "job_args"
            ],
            "used_parameters": [
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "Either use the testability parameters or remove them from function signature",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "payload",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 202
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "payload",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 209
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "payload",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 217
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "payload",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.items",
            "line_number": 223
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for environ_vars",
          "details": {
            "script": "payload",
            "parameter": "environ_vars",
            "current_pattern": "environ_vars.get",
            "line_number": 525
          },
          "recommendation": "Use environ_vars['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "payload"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": null,
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "payload",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "payload"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "WARNING",
            "category": "testability_parameter_usage",
            "message": "Testability parameters defined but not used: job_args",
            "details": {
              "script": "payload",
              "unused_parameters": [
                "job_args"
              ],
              "used_parameters": [
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "Either use the testability parameters or remove them from function signature"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "payload",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 202
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "payload",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 209
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "payload",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 217
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "payload",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.items",
              "line_number": 223
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for environ_vars",
            "details": {
              "script": "payload",
              "parameter": "environ_vars",
              "current_pattern": "environ_vars.get",
              "line_number": 525
            },
            "recommendation": "Use environ_vars['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "payload"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "payload",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "payload",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "payload",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "payload"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for payload",
            "recommendation": "Create processing specification file for payload",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "payload",
              "expected_spec_path": "cursus/steps/specs/payload_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for payload",
            "recommendation": "Create processing builder file for payload",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "payload",
              "expected_builder_path": "cursus/steps/builders/builder_payload_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/payload.py",
          "path_references": [
            "path='\\nMIMS Payload Generation Processing Script\\n\\nThis script reads field information from hyperparameters extracted from model.tar.gz,\\nextracts configuration from environment variables,\\nand creates payload files for model inference.\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"\\nMIMS Payload Generation Processing Script\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/model' line_number=32 context='\\n# Default paths (will be overridden by parameters in main function)\\n>>> DEFAULT_MODEL_DIR = \"/opt/ml/processing/input/model\"\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_WORKING_DIRECTORY = \"/tmp/mims_payload_work\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=33 context='# Default paths (will be overridden by parameters in main function)\\nDEFAULT_MODEL_DIR = \"/opt/ml/processing/input/model\"\\n>>> DEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_WORKING_DIRECTORY = \"/tmp/mims_payload_work\"\\n' is_hardcoded=True construction_method=None",
            "path='/tmp/mims_payload_work' line_number=34 context='DEFAULT_MODEL_DIR = \"/opt/ml/processing/input/model\"\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\n>>> DEFAULT_WORKING_DIRECTORY = \"/tmp/mims_payload_work\"\\n\\n' is_hardcoded=True construction_method=None",
            "path='Ensure a directory exists, creating it if necessary.' line_number=45 context='\\ndef ensure_directory(directory_path) -> bool:\\n>>>     \"\"\"Ensure a directory exists, creating it if necessary.\"\"\"\\n    try:\\n        if isinstance(directory_path, str):' is_hardcoded=True construction_method=None",
            "path='model.tar.gz' line_number=105 context='    # The builder step has been updated to use the directory as destination, not model.tar.gz\\n    # But we\\'ll keep the name for backward compatibility and handle both cases\\n>>>     input_model_path = input_model_dir / \"model.tar.gz\"\\n    logger.info(f\"Looking for hyperparameters in model artifacts\")\\n' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=122 context='                hyperparams_info = None\\n                for member in tar.getmembers():\\n>>>                     if member.name == \"hyperparameters.json\":\\n                        hyperparams_info = member\\n                        break' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=136 context='                    # Extract only the hyperparameters file\\n                    tar.extract(hyperparams_info, working_directory)\\n>>>                     hyperparams_path = working_directory / \"hyperparameters.json\"\\n        except Exception as e:\\n            logger.warning(f\"Error processing model.tar.gz as tarfile: {e}\")' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=150 context='            f\"{input_model_path} is a directory, looking for hyperparameters.json inside\"\\n        )\\n>>>         direct_hyperparams_path = input_model_path / \"hyperparameters.json\"\\n        if direct_hyperparams_path.exists():\\n            logger.info(' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=160 context='    if hyperparams_path is None:\\n        logger.info(f\"Looking for hyperparameters.json directly in {input_model_dir}\")\\n>>>         direct_hyperparams_path = input_model_dir / \"hyperparameters.json\"\\n        if direct_hyperparams_path.exists():\\n            logger.info(' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=172 context='            f\"Searching recursively for hyperparameters.json in {input_model_dir}\"\\n        )\\n>>>         for path in input_model_dir.rglob(\"hyperparameters.json\"):\\n            hyperparams_path = path\\n            logger.info(f\"Found hyperparameters.json at {hyperparams_path}\")' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=193 context='        import shutil\\n\\n>>>         dest_path = working_directory / \"hyperparameters.json\"\\n        shutil.copy2(hyperparams_path, dest_path)\\n' is_hardcoded=True construction_method=None",
            "path='Get content types from environment variables.' line_number=201 context='\\ndef get_environment_content_types(environ_vars: Dict[str, str]) -> List[str]:\\n>>>     \"\"\"Get content types from environment variables.\"\"\"\\n    content_types_str = environ_vars.get(ENV_CONTENT_TYPES, \"application/json\")\\n    return [ct.strip() for ct in content_types_str.split(\",\")]' is_hardcoded=True construction_method=None",
            "path='Get default numeric value from environment variables.' line_number=207 context='\\ndef get_environment_default_numeric_value(environ_vars: Dict[str, str]) -> float:\\n>>>     \"\"\"Get default numeric value from environment variables.\"\"\"\\n    try:\\n        return float(environ_vars.get(ENV_DEFAULT_NUMERIC_VALUE, \"0.0\"))' is_hardcoded=True construction_method=None",
            "path='0.0' line_number=209 context='    \"\"\"Get default numeric value from environment variables.\"\"\"\\n    try:\\n>>>         return float(environ_vars.get(ENV_DEFAULT_NUMERIC_VALUE, \"0.0\"))\\n    except ValueError:\\n        logger.warning(f\"Invalid {ENV_DEFAULT_NUMERIC_VALUE}, using default 0.0\")' is_hardcoded=True construction_method=None",
            "path=', using default 0.0' line_number=211 context='        return float(environ_vars.get(ENV_DEFAULT_NUMERIC_VALUE, \"0.0\"))\\n    except ValueError:\\n>>>         logger.warning(f\"Invalid {ENV_DEFAULT_NUMERIC_VALUE}, using default 0.0\")\\n        return 0.0\\n' is_hardcoded=True construction_method=None",
            "path='Get default text value from environment variables.' line_number=216 context='\\ndef get_environment_default_text_value(environ_vars: Dict[str, str]) -> str:\\n>>>     \"\"\"Get default text value from environment variables.\"\"\"\\n    return environ_vars.get(ENV_DEFAULT_TEXT_VALUE, \"DEFAULT_TEXT\")\\n' is_hardcoded=True construction_method=None",
            "path='Get special field values from environment variables.' line_number=221 context='\\ndef get_environment_special_fields(environ_vars: Dict[str, str]) -> Dict[str, str]:\\n>>>     \"\"\"Get special field values from environment variables.\"\"\"\\n    special_fields = {}\\n    for env_var, env_value in environ_vars.items():' is_hardcoded=True construction_method=None",
            "path='.csv' line_number=417 context='\\n        # Determine file extension and name\\n>>>         ext = \".csv\" if content_type == \"text/csv\" else \".json\"\\n        file_name = f\"payload_{content_type.replace(\\'/\\', \\'_\\')}_{i}{ext}\"\\n        file_path = output_dir / file_name' is_hardcoded=True construction_method=None",
            "path='.json' line_number=417 context='\\n        # Determine file extension and name\\n>>>         ext = \".csv\" if content_type == \"text/csv\" else \".json\"\\n        file_name = f\"payload_{content_type.replace(\\'/\\', \\'_\\')}_{i}{ext}\"\\n        file_path = output_dir / file_name' is_hardcoded=True construction_method=None",
            "path='payload.tar.gz' line_number=451 context='    # Create archive in the output directory\\n    output_dir = output_dir or Path(DEFAULT_OUTPUT_DIR)\\n>>>     archive_path = output_dir / \"payload.tar.gz\"\\n\\n    # Ensure parent directory exists (but not the actual archive path)' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=471 context='                total_size += size_mb\\n                files_added += 1\\n>>>                 logger.info(f\"Adding to tar: {file_name} ({size_mb:.2f}MB)\")\\n                tar.add(file_path, arcname=file_name)\\n' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=476 context='        logger.info(f\"Tar creation summary:\")\\n        logger.info(f\"  Files added: {files_added}\")\\n>>>         logger.info(f\"  Total uncompressed size: {total_size:.2f}MB\")\\n\\n        # Verify archive was created' is_hardcoded=True construction_method=None",
            "path='.2f' line_number=482 context='            compressed_size = archive_path.stat().st_size / (1024 * 1024)\\n            logger.info(f\"Successfully created payload archive: {archive_path}\")\\n>>>             logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n            logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n        else:' is_hardcoded=True construction_method=None",
            "path='.2%' line_number=483 context='            logger.info(f\"Successfully created payload archive: {archive_path}\")\\n            logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n>>>             logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n        else:\\n            logger.error(' is_hardcoded=True construction_method=None",
            "path='1.0.0' line_number=563 context='        # Extract pipeline name and version from hyperparams\\n        pipeline_name = hyperparams.get(\"pipeline_name\", \"default_pipeline\")\\n>>>         pipeline_version = hyperparams.get(\"pipeline_version\", \"1.0.0\")\\n        model_objective = hyperparams.get(\"model_objective\", None)\\n' is_hardcoded=True construction_method=None",
            "path='MIMS payload generation complete.' line_number=585 context='\\n        # Log summary information about the payload generation\\n>>>         logger.info(f\"MIMS payload generation complete.\")\\n        logger.info(f\"Number of payload samples generated: {len(payload_file_paths)}\")\\n        logger.info(f\"Content types: {content_types}\")' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [],
          "imports": [
            "module_name='json' import_alias=None line_number=9 is_from_import=False imported_items=[]",
            "module_name='logging' import_alias=None line_number=10 is_from_import=False imported_items=[]",
            "module_name='os' import_alias=None line_number=11 is_from_import=False imported_items=[]",
            "module_name='tarfile' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='tempfile' import_alias=None line_number=13 is_from_import=False imported_items=[]",
            "module_name='argparse' import_alias=None line_number=14 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=15 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=16 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=17 is_from_import=True imported_items=['Path']",
            "module_name='enum' import_alias=None line_number=18 is_from_import=True imported_items=['Enum']",
            "module_name='typing' import_alias=None line_number=19 is_from_import=True imported_items=['List', 'Dict', 'Any', 'Union', 'Optional']",
            "module_name='datetime' import_alias=None line_number=20 is_from_import=True imported_items=['datetime']",
            "module_name='shutil' import_alias=None line_number=191 is_from_import=False imported_items=[]"
          ],
          "argument_definitions": [],
          "file_operations": [
            "file_path='<file_object>' operation_type='read' line_number=187 context='    # Load the hyperparameters\\n    with open(hyperparams_path, \"r\") as f:\\n>>>         hyperparams = json.load(f)\\n\\n    # Copy to working directory if not already there' mode=None method='json.load'"
          ],
          "step_type": "Processing",
          "framework": null,
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "payload.py",
          "inputs": {
            "model_input": {
              "path": "/opt/ml/processing/input/model"
            }
          },
          "outputs": {
            "payload_sample": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {
              "CONTENT_TYPES": "application/json",
              "DEFAULT_NUMERIC_VALUE": "0.0",
              "DEFAULT_TEXT_VALUE": "DEFAULT_TEXT"
            }
          },
          "description": "\n    MIMS payload generation script that:\n    1. Extracts hyperparameters from model artifacts (model.tar.gz or directory)\n    2. Creates model variable list from field information\n    3. Generates sample payloads in multiple formats (JSON, CSV)\n    4. Archives payload files for deployment\n    \n    Note: This script extracts pipeline name, version, and model objective from hyperparameters,\n    not from environment variables. It does not use PIPELINE_NAME, REGION, PAYLOAD_S3_KEY, or \n    BUCKET_NAME environment variables.\n    \n    Input Structure:\n    - /opt/ml/processing/input/model: Model artifacts containing hyperparameters.json\n    \n    Output Structure:\n    - /tmp/mims_payload_work/payload_sample/: Sample payload files (temporary)\n    - /opt/ml/processing/output/: Output directory containing payload.tar.gz file\n    \n    Environment Variables:\n    - CONTENT_TYPES: Comma-separated list of content types (default: \"application/json\")\n    - DEFAULT_NUMERIC_VALUE: Default value for numeric fields (default: \"0.0\")\n    - DEFAULT_TEXT_VALUE: Default value for text fields (default: \"DEFAULT_TEXT\")\n    - SPECIAL_FIELD_<fieldname>: Custom values for specific fields\n    \n    Arguments:\n    - mode: Operating mode for the script (default: \"standard\")\n    ",
          "framework_requirements": {
            "python": ">=3.7"
          }
        },
        "step_type": "Processing"
      },
      "severity_level": "WARNING"
    },
    "risk_table_mapping": {
      "test_name": "script_contract_risk_table_mapping",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.355834",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams",
          "details": {
            "path": "/opt/ml/code/hyperparams",
            "script": "risk_table_mapping",
            "node_type": "internal",
            "path_type": "fallback_path"
          },
          "recommendation": "Fallback path /opt/ml/code/hyperparams allowed for robustness - consider providing via proper input channel",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "path_usage",
          "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams/hyperparameters.json",
          "details": {
            "path": "/opt/ml/code/hyperparams/hyperparameters.json",
            "script": "risk_table_mapping",
            "node_type": "internal",
            "path_type": "fallback_path"
          },
          "recommendation": "Fallback path /opt/ml/code/hyperparams/hyperparameters.json allowed for robustness - consider providing via proper input channel",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "path_usage",
          "message": "Contract declares path not used in script: /opt/ml/processing/input/config",
          "details": {
            "path": "/opt/ml/processing/input/config",
            "script": "risk_table_mapping"
          },
          "recommendation": "Either use path /opt/ml/processing/input/config in script or remove from contract",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "arguments",
          "message": "Script defines config-driven argument provided by builder: --job-type (accessed as args.job_type)",
          "details": {
            "cli_argument": "job-type",
            "python_attribute": "job_type",
            "script": "risk_table_mapping",
            "source": "builder"
          },
          "recommendation": "Argument --job-type is provided by builder - no action needed",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "file_operations",
          "message": "Contract declares input not read by script: /opt/ml/processing/input/config",
          "details": {
            "path": "/opt/ml/processing/input/config",
            "operation": "read",
            "script": "risk_table_mapping"
          },
          "recommendation": "Either read /opt/ml/processing/input/config in script or remove from contract inputs",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_compliance",
          "message": "Main function follows testability pattern with all required parameters",
          "details": {
            "script": "risk_table_mapping",
            "testability_parameters": [
              "job_args",
              "environ_vars",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "No action needed - script follows testability best practices",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_entry_point",
          "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
          "details": {
            "script": "risk_table_mapping"
          },
          "recommendation": "Add environment variable collection in __main__ block to pass to main function",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "testability_parameter_usage",
          "message": "Testability parameters defined but not used: environ_vars",
          "details": {
            "script": "risk_table_mapping",
            "unused_parameters": [
              "environ_vars"
            ],
            "used_parameters": [
              "job_args",
              "output_paths",
              "input_paths"
            ]
          },
          "recommendation": "Either use the testability parameters or remove them from function signature",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "risk_table_mapping",
            "parameter": "job_args",
            "current_pattern": "job_args.job_type",
            "line_number": 508
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for input_paths",
          "details": {
            "script": "risk_table_mapping",
            "parameter": "input_paths",
            "current_pattern": "input_paths.get",
            "line_number": 511
          },
          "recommendation": "Use input_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for input_paths",
          "details": {
            "script": "risk_table_mapping",
            "parameter": "input_paths",
            "current_pattern": "input_paths.get",
            "line_number": 516
          },
          "recommendation": "Use input_paths['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_parameter_access",
          "message": "Consider using dictionary-style access for job_args",
          "details": {
            "script": "risk_table_mapping",
            "parameter": "job_args",
            "current_pattern": "args.job_type",
            "line_number": 590
          },
          "recommendation": "Use job_args['key'] for accessing nested values",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "testability_container_support",
          "message": "No container detection found - consider adding hybrid mode support",
          "details": {
            "script": "risk_table_mapping"
          },
          "recommendation": "Add container detection to support both local and container execution",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "framework_detected",
          "message": "Processing script uses sklearn framework",
          "details": {
            "script": "risk_table_mapping",
            "step_type": "Processing",
            "framework": "sklearn"
          },
          "recommendation": "Ensure sklearn dependencies are properly specified",
          "alignment_level": "AlignmentLevel.SCRIPT_CONTRACT",
          "step_type": "Processing",
          "framework_context": "pandas",
          "reference_examples": []
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams",
            "details": {
              "path": "/opt/ml/code/hyperparams",
              "script": "risk_table_mapping",
              "node_type": "internal",
              "path_type": "fallback_path"
            },
            "recommendation": "Fallback path /opt/ml/code/hyperparams allowed for robustness - consider providing via proper input channel"
          },
          {
            "severity": "INFO",
            "category": "path_usage",
            "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams/hyperparameters.json",
            "details": {
              "path": "/opt/ml/code/hyperparams/hyperparameters.json",
              "script": "risk_table_mapping",
              "node_type": "internal",
              "path_type": "fallback_path"
            },
            "recommendation": "Fallback path /opt/ml/code/hyperparams/hyperparameters.json allowed for robustness - consider providing via proper input channel"
          },
          {
            "severity": "WARNING",
            "category": "path_usage",
            "message": "Contract declares path not used in script: /opt/ml/processing/input/config",
            "details": {
              "path": "/opt/ml/processing/input/config",
              "script": "risk_table_mapping"
            },
            "recommendation": "Either use path /opt/ml/processing/input/config in script or remove from contract"
          },
          {
            "severity": "INFO",
            "category": "arguments",
            "message": "Script defines config-driven argument provided by builder: --job-type (accessed as args.job_type)",
            "details": {
              "cli_argument": "job-type",
              "python_attribute": "job_type",
              "script": "risk_table_mapping",
              "source": "builder"
            },
            "recommendation": "Argument --job-type is provided by builder - no action needed"
          },
          {
            "severity": "INFO",
            "category": "file_operations",
            "message": "Contract declares input not read by script: /opt/ml/processing/input/config",
            "details": {
              "path": "/opt/ml/processing/input/config",
              "operation": "read",
              "script": "risk_table_mapping"
            },
            "recommendation": "Either read /opt/ml/processing/input/config in script or remove from contract inputs"
          },
          {
            "severity": "INFO",
            "category": "testability_compliance",
            "message": "Main function follows testability pattern with all required parameters",
            "details": {
              "script": "risk_table_mapping",
              "testability_parameters": [
                "job_args",
                "environ_vars",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "No action needed - script follows testability best practices"
          },
          {
            "severity": "WARNING",
            "category": "testability_entry_point",
            "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
            "details": {
              "script": "risk_table_mapping"
            },
            "recommendation": "Add environment variable collection in __main__ block to pass to main function"
          },
          {
            "severity": "WARNING",
            "category": "testability_parameter_usage",
            "message": "Testability parameters defined but not used: environ_vars",
            "details": {
              "script": "risk_table_mapping",
              "unused_parameters": [
                "environ_vars"
              ],
              "used_parameters": [
                "job_args",
                "output_paths",
                "input_paths"
              ]
            },
            "recommendation": "Either use the testability parameters or remove them from function signature"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "risk_table_mapping",
              "parameter": "job_args",
              "current_pattern": "job_args.job_type",
              "line_number": 508
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for input_paths",
            "details": {
              "script": "risk_table_mapping",
              "parameter": "input_paths",
              "current_pattern": "input_paths.get",
              "line_number": 511
            },
            "recommendation": "Use input_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for input_paths",
            "details": {
              "script": "risk_table_mapping",
              "parameter": "input_paths",
              "current_pattern": "input_paths.get",
              "line_number": 516
            },
            "recommendation": "Use input_paths['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_parameter_access",
            "message": "Consider using dictionary-style access for job_args",
            "details": {
              "script": "risk_table_mapping",
              "parameter": "job_args",
              "current_pattern": "args.job_type",
              "line_number": 590
            },
            "recommendation": "Use job_args['key'] for accessing nested values"
          },
          {
            "severity": "INFO",
            "category": "testability_container_support",
            "message": "No container detection found - consider adding hybrid mode support",
            "details": {
              "script": "risk_table_mapping"
            },
            "recommendation": "Add container detection to support both local and container execution"
          },
          {
            "severity": "INFO",
            "category": "framework_detected",
            "message": "Processing script uses sklearn framework",
            "details": {
              "script": "risk_table_mapping",
              "step_type": "Processing",
              "framework": "sklearn"
            },
            "recommendation": "Ensure sklearn dependencies are properly specified"
          },
          {
            "category": "missing_data_transformation",
            "message": "Processing script should contain data transformation logic",
            "recommendation": "Add data transformation operations (e.g., pandas operations, sklearn transforms)",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping",
              "framework": null
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_input_data_loading",
            "message": "Processing script should load input data",
            "recommendation": "Add input data loading from /opt/ml/processing/input/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping",
              "expected_path": "/opt/ml/processing/input/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_output_data_saving",
            "message": "Processing script should save processed data",
            "recommendation": "Add output data saving to /opt/ml/processing/output/",
            "severity": "WARNING",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping",
              "expected_path": "/opt/ml/processing/output/"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_environment_variables",
            "message": "Processing script should use environment variables for configuration",
            "recommendation": "Add environment variable access (e.g., os.environ.get())",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_specification",
            "message": "Processing specification not found for risk_table_mapping",
            "recommendation": "Create processing specification file for risk_table_mapping",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping",
              "expected_spec_path": "cursus/steps/specs/risk_table_mapping_processing_spec.py"
            },
            "source": "ProcessingStepEnhancer"
          },
          {
            "category": "missing_processing_builder",
            "message": "Processing builder not found for risk_table_mapping",
            "recommendation": "Create processing builder file for risk_table_mapping",
            "severity": "INFO",
            "step_type": "Processing",
            "details": {
              "script": "risk_table_mapping",
              "expected_builder_path": "cursus/steps/builders/builder_risk_table_mapping_step.py"
            },
            "source": "ProcessingStepEnhancer"
          }
        ],
        "script_analysis": {
          "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/risk_table_mapping.py",
          "path_references": [
            "path='\\nRisk Table Mapping Processing Script\\n\\nThis script creates and applies risk tables for categorical features based on \\ntarget variable correlation, and handles missing value imputation for numeric features.\\nIt supports both training mode (fit and transform) and inference mode (transform only).\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"\\nRisk Table Mapping Processing Script\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/data' line_number=24 context='\\n# Default paths (will be overridden by parameters in main function)\\n>>> DEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\nDEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/hyperparams' line_number=25 context='# Default paths (will be overridden by parameters in main function)\\nDEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\n>>> DEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/output' line_number=26 context='DEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\nDEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\n>>> DEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"\\n' is_hardcoded=True construction_method=None",
            "path='/opt/ml/processing/input/risk_tables' line_number=27 context='DEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\n>>> DEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"\\n\\n# Constants for file paths to ensure consistency between training and inference' is_hardcoded=True construction_method=None",
            "path='bin_mapping.pkl' line_number=32 context='# These constants ensure the same filenames are used across all job types,\\n# facilitating proper connections between training and non-training steps\\n>>> RISK_TABLE_FILENAME = \"bin_mapping.pkl\"  # Used by downstream steps as input dependency\\nHYPERPARAMS_FILENAME = (\\n    \"hyperparameters.json\"  # Expected by the script and generated by the builder' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=34 context='RISK_TABLE_FILENAME = \"bin_mapping.pkl\"  # Used by downstream steps as input dependency\\nHYPERPARAMS_FILENAME = (\\n>>>     \"hyperparameters.json\"  # Expected by the script and generated by the builder\\n)\\n' is_hardcoded=True construction_method=None",
            "path='\\n    A class to create risk tables for categorical features.\\n\\n    Risk tables map categorical values to numerical risk scores based on\\n    their correlation with the target variable.\\n    ' line_number=120 context='\\nclass OfflineBinning:\\n>>>     \"\"\"\\n    A class to create risk tables for categorical features.\\n' is_hardcoded=True construction_method=None",
            "path='Fits the risk tables based on the provided dataframe.' line_number=135 context='        self, df: pd.DataFrame, smooth_factor: float = 0, count_threshold: int = 0\\n    ) -> None:\\n>>>         \"\"\"Fits the risk tables based on the provided dataframe.\"\"\"\\n        # Drop any -1 or NaN target rows for fitting\\n        fit_df = df.loc[(df[self.target] != -1) & (~df[self.target].isnull())].copy()' is_hardcoded=True construction_method=None",
            "path='Helper to calculate the risk table for a single variable.' line_number=175 context='        count_threshold: int,\\n    ) -> Dict:\\n>>>         \"\"\"Helper to calculate the risk table for a single variable.\"\"\"\\n        cross_tab = pd.crosstab(\\n            df[variable],' is_hardcoded=True construction_method=None",
            "path='Transforms the dataframe using the fitted risk tables.' line_number=201 context='\\n    def transform(self, df: pd.DataFrame) -> pd.DataFrame:\\n>>>         \"\"\"Transforms the dataframe using the fitted risk tables.\"\"\"\\n        df_transformed = df.copy()\\n        for var, risk_table_info in self.risk_tables.items():' is_hardcoded=True construction_method=None",
            "path='Loads pre-existing risk tables.' line_number=211 context='\\n    def load_risk_tables(self, risk_tables: Dict) -> None:\\n>>>         \"\"\"Loads pre-existing risk tables.\"\"\"\\n        self.risk_tables = risk_tables\\n        logger.info(f\"Loaded {len(risk_tables)} risk tables\")' is_hardcoded=True construction_method=None",
            "path='train_processed_data.csv' line_number=227 context='    if job_type == \"training\":\\n        # For training, we expect data in train/test/val subdirectories\\n>>>         train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n        test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n        val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")' is_hardcoded=True construction_method=None",
            "path='test_processed_data.csv' line_number=228 context='        # For training, we expect data in train/test/val subdirectories\\n        train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n>>>         test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n        val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")\\n        logger.info(' is_hardcoded=True construction_method=None",
            "path='val_processed_data.csv' line_number=229 context='        train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n        test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n>>>         val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")\\n        logger.info(\\n            f\"Loaded training data splits: train={train_df.shape}, test={test_df.shape}, val={val_df.shape}\"' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=236 context='    else:\\n        # For other job types, we expect data in a single directory named after job_type\\n>>>         df = pd.read_csv(input_path / job_type / f\"{job_type}_processed_data.csv\")\\n        logger.info(f\"Loaded {job_type} data: {df.shape}\")\\n        return {job_type: df}' is_hardcoded=True construction_method=None",
            "path='_processed_data.csv' line_number=256 context='        split_output_dir.mkdir(exist_ok=True, parents=True)\\n\\n>>>         output_file = split_output_dir / f\"{split_name}_processed_data.csv\"\\n        df.to_csv(output_file, index=False)\\n        logger.info(f\"Saved {split_name} data to {output_file}, shape: {df.shape}\")' is_hardcoded=True construction_method=None",
            "path='No valid categorical fields found for risk mapping. Using original data.' line_number=296 context='        if not valid_cat_fields:\\n            logger.warning(\\n>>>                 \"No valid categorical fields found for risk mapping. Using original data.\"\\n            )\\n            transformed_data = data_dict' is_hardcoded=True construction_method=None",
            "path='Risk-table mapping complete.' line_number=473 context='    save_artifacts(binner, hyperparams, output_path)\\n\\n>>>     logger.info(\"Risk-table mapping complete.\")\\n    return transformed_data, binner\\n' is_hardcoded=True construction_method=None",
            "path='. ' line_number=519 context='            if not risk_table_input_dir:\\n                logger.warning(\\n>>>                     f\"No risk_table_input path provided for non-training job {job_type}. \"\\n                    + \"Risk table mapping may fail.\"\\n                )' is_hardcoded=True construction_method=None",
            "path='Risk table mapping may fail.' line_number=520 context='                logger.warning(\\n                    f\"No risk_table_input path provided for non-training job {job_type}. \"\\n>>>                     + \"Risk table mapping may fail.\"\\n                )\\n' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=536 context='        if \"hyperparameters_s3_uri\" in input_paths:\\n            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n>>>             if not hparam_path.endswith(\"hyperparameters.json\"):\\n                hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:' is_hardcoded=True construction_method=None",
            "path='hyperparameters.json' line_number=537 context='            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n            if not hparam_path.endswith(\"hyperparameters.json\"):\\n>>>                 hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:\\n            # Fallback to source directory if not provided' is_hardcoded=False construction_method='os.path.join'",
            "path='hyperparameters.json' line_number=537 context='            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n            if not hparam_path.endswith(\"hyperparameters.json\"):\\n>>>                 hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:\\n            # Fallback to source directory if not provided' is_hardcoded=True construction_method=None",
            "path='/opt/ml/code/hyperparams/hyperparameters.json' line_number=540 context='        else:\\n            # Fallback to source directory if not provided\\n>>>             hparam_path = \"/opt/ml/code/hyperparams/hyperparameters.json\"\\n\\n        logger.info(f\"Loading hyperparameters from {hparam_path}\")' is_hardcoded=True construction_method=None",
            "path='. Risk table mapping requires hyperparameters to be provided either via input channel or in source directory at /opt/ml/code/hyperparams/hyperparameters.json' line_number=549 context='            # FAIL with clear error instead of using arbitrary defaults\\n            raise FileNotFoundError(\\n>>>                 f\"Hyperparameters file not found at {hparam_path}. \"\\n                f\"Risk table mapping requires hyperparameters to be provided either via \"\\n                f\"input channel or in source directory at /opt/ml/code/hyperparams/hyperparameters.json\"' is_hardcoded=True construction_method=None"
          ],
          "env_var_accesses": [],
          "imports": [
            "module_name='argparse' import_alias=None line_number=10 is_from_import=False imported_items=[]",
            "module_name='os' import_alias=None line_number=11 is_from_import=False imported_items=[]",
            "module_name='sys' import_alias=None line_number=12 is_from_import=False imported_items=[]",
            "module_name='pandas' import_alias='pd' line_number=13 is_from_import=False imported_items=[]",
            "module_name='numpy' import_alias='np' line_number=14 is_from_import=False imported_items=[]",
            "module_name='json' import_alias=None line_number=15 is_from_import=False imported_items=[]",
            "module_name='pickle' import_alias='pkl' line_number=16 is_from_import=False imported_items=[]",
            "module_name='traceback' import_alias=None line_number=17 is_from_import=False imported_items=[]",
            "module_name='pathlib' import_alias=None line_number=18 is_from_import=True imported_items=['Path']",
            "module_name='sklearn.impute' import_alias=None line_number=19 is_from_import=True imported_items=['SimpleImputer']",
            "module_name='logging' import_alias=None line_number=20 is_from_import=False imported_items=[]",
            "module_name='typing' import_alias=None line_number=21 is_from_import=True imported_items=['Dict', 'List', 'Tuple', 'Any', 'Optional', 'Callable']"
          ],
          "argument_definitions": [
            "argument_name='job_type' line_number=572 is_required=True has_default=False default_value=None argument_type='str' choices=['training', 'validation', 'testing', 'calibration']"
          ],
          "file_operations": [
            "file_path='<file_object>' operation_type='read' line_number=64 context='    try:\\n        with open(config_path, \"r\") as file:\\n>>>             return json.load(file)\\n    except FileNotFoundError as e:\\n        logger.error(f\"Configuration file not found at {config_path}: {str(e)}\")' mode=None method='json.load'",
            "file_path='<file_object>' operation_type='write' line_number=372 context='    bin_output_path = output_path / RISK_TABLE_FILENAME\\n    with open(bin_output_path, \"wb\") as f:\\n>>>         pkl.dump(binner.risk_tables, f)\\n    logger.info(f\"Saved binning mapping to {bin_output_path}\")\\n    logger.info(f\"This file can be used as input for non-training jobs\")' mode=None method='pickle.dump'",
            "file_path='<file_object>' operation_type='write' line_number=379 context='    hyperparams_output_path = output_path / HYPERPARAMS_FILENAME\\n    with open(hyperparams_output_path, \"w\") as f:\\n>>>         json.dump(hyperparams, f, indent=2)\\n    logger.info(f\"Saved hyperparameters to {hyperparams_output_path}\")\\n' mode=None method='json.dump'",
            "file_path='<file_object>' operation_type='read' line_number=398 context='    logger.info(f\"Loading risk tables from {risk_table_path}\")\\n    with open(risk_table_path, \"rb\") as f:\\n>>>         risk_tables = pkl.load(f)\\n\\n    logger.info(f\"Successfully loaded risk tables with {len(risk_tables)} mappings\")' mode=None method='pickle.load'"
          ],
          "step_type": "Processing",
          "framework": "sklearn",
          "step_type_patterns": {}
        },
        "contract": {
          "entry_point": "risk_table_mapping.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            },
            "hyperparameters_s3_uri": {
              "path": "/opt/ml/processing/input/config"
            },
            "risk_tables": {
              "path": "/opt/ml/processing/input/risk_tables"
            }
          },
          "outputs": {
            "processed_data": {
              "path": "/opt/ml/processing/output"
            },
            "risk_tables": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "\n    Risk table mapping script that:\n    1. Creates risk tables for categorical features based on target variable correlation\n    2. Handles missing value imputation for numeric features\n    3. Supports both training mode (fit and transform) and inference mode (transform only)\n    4. Applies smoothing and count thresholds for robust risk estimation\n    5. Saves fitted artifacts for reuse in inference\n    \n    Input Structure:\n    - /opt/ml/processing/input/data: Data files from tabular preprocessing\n      - Training mode: train/, test/, val/ subdirectories with processed data\n      - Other modes: job_type/ subdirectory with processed data\n    - /opt/ml/processing/input/config: Configuration files\n      - config.json: Model configuration including category risk parameters\n      - metadata.csv: Variable metadata with types and imputation strategies\n      - job_type: Configuration parameter specifying job type (training, validation, testing, calibration)\n    - /opt/ml/processing/input/risk_tables: Pre-trained risk tables (for non-training modes)\n      - bin_mapping.pkl: Risk table mappings for categorical features\n      - missing_value_imputation.pkl: Imputation values for numeric features\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Transformed data by split\n    - /opt/ml/processing/output/bin_mapping.pkl: Risk table mappings for categorical features\n    - /opt/ml/processing/output/missing_value_imputation.pkl: Imputation values for numeric features\n    - /opt/ml/processing/output/config.pkl: Serialized configuration with metadata\n    \n    Job Types (from config):\n    - training: Fits risk tables on training data, transforms all splits\n    - validation/testing/calibration: Uses pre-trained risk tables, transforms single split\n    \n    Training Mode:\n    - Fits risk tables on training data\n    - Transforms train/test/val splits\n    - Saves risk tables and imputation models\n    \n    Non-Training Modes:\n    - Loads pre-trained risk tables and imputation models\n    - Transforms data using loaded artifacts\n    - Maintains the same output structure as training mode\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "step_type": "Processing",
        "framework": "pandas"
      },
      "severity_level": "WARNING"
    }
  },
  "level2_results": {
    "currency_conversion": {
      "test_name": "contract_spec_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.937000",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "multi_variant_validation",
          "message": "Smart Specification Selection: validated against 5 variants",
          "details": {
            "contract": "currency_conversion_contract",
            "variants": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ],
            "total_dependencies": 1,
            "total_outputs": 1,
            "contract_inputs": 1,
            "contract_outputs": 1
          },
          "recommendation": "Multi-variant validation completed successfully",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: CurrencyConversion_Training -> CurrencyConversion -> Processing",
          "details": {
            "contract": "currency_conversion_contract",
            "original_spec_type": "CurrencyConversion_Training",
            "canonical_name": "CurrencyConversion",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output converted_data: properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
          "details": {
            "contract": "currency_conversion_contract",
            "logical_name": "converted_data",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for currency_conversion_contract",
          "details": {
            "contract": "currency_conversion_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 1,
            "outputs_with_property_paths": 1,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "multi_variant_validation",
            "message": "Smart Specification Selection: validated against 5 variants",
            "details": {
              "contract": "currency_conversion_contract",
              "variants": [
                "training",
                "testing",
                "validation",
                "calibration",
                "generic"
              ],
              "total_dependencies": 1,
              "total_outputs": 1,
              "contract_inputs": 1,
              "contract_outputs": 1
            },
            "recommendation": "Multi-variant validation completed successfully"
          },
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: CurrencyConversion_Training -> CurrencyConversion -> Processing",
            "details": {
              "contract": "currency_conversion_contract",
              "original_spec_type": "CurrencyConversion_Training",
              "canonical_name": "CurrencyConversion",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output converted_data: properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "details": {
              "contract": "currency_conversion_contract",
              "logical_name": "converted_data",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for currency_conversion_contract",
            "details": {
              "contract": "currency_conversion_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 1,
              "outputs_with_property_paths": 1,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "currency_conversion.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            }
          },
          "outputs": {
            "converted_data": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {
            "job-type": {
              "default": "training",
              "required": false
            },
            "mode": {
              "default": "per_split",
              "required": false
            },
            "train-ratio": {
              "default": "0.7",
              "required": false
            },
            "test-val-ratio": {
              "default": "0.5",
              "required": false
            },
            "marketplace-id-col": {
              "default": "marketplace_id",
              "required": false
            },
            "currency-col": {
              "default": "",
              "required": false
            },
            "default-currency": {
              "default": "USD",
              "required": false
            },
            "skip-invalid-currencies": {
              "default": "false",
              "required": false
            },
            "enable-conversion": {
              "default": "true",
              "required": false
            },
            "n-workers": {
              "default": "50",
              "required": false
            }
          },
          "environment_variables": {
            "required": [
              "CURRENCY_CONVERSION_VARS",
              "CURRENCY_CONVERSION_DICT",
              "MARKETPLACE_INFO",
              "LABEL_FIELD"
            ],
            "optional": {
              "TRAIN_RATIO": "0.7",
              "TEST_VAL_RATIO": "0.5"
            }
          },
          "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "specifications": {
          "currency_conversion_training_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_calibration_spec": {
            "step_type": "CurrencyConversion_Calibration",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed calibration data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted calibration data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_validation_spec": {
            "step_type": "CurrencyConversion_Validation",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed validation data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted validation data with standardized monetary values"
              }
            ]
          },
          "currency_conversion_testing_spec": {
            "step_type": "CurrencyConversion_Testing",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed testing data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted testing data with standardized monetary values"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "CurrencyConversion_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "CradleDataLoading",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Processed training data requiring currency conversion"
              }
            ],
            "outputs": [
              {
                "logical_name": "converted_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Currency-converted training data with standardized monetary values"
              }
            ]
          },
          "variants": {
            "training": {
              "step_type": "CurrencyConversion_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed training data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted training data with standardized monetary values"
                }
              ]
            },
            "testing": {
              "step_type": "CurrencyConversion_Testing",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed testing data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted testing data with standardized monetary values"
                }
              ]
            },
            "validation": {
              "step_type": "CurrencyConversion_Validation",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed validation data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted validation data with standardized monetary values"
                }
              ]
            },
            "calibration": {
              "step_type": "CurrencyConversion_Calibration",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed calibration data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted calibration data with standardized monetary values"
                }
              ]
            },
            "generic": {
              "step_type": "CurrencyConversion_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "CradleDataLoading",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Processed training data requiring currency conversion"
                }
              ],
              "outputs": [
                {
                  "logical_name": "converted_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Currency-converted training data with standardized monetary values"
                }
              ]
            }
          },
          "unified_dependencies": {
            "data_input": {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "CradleDataLoading",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Processed training data requiring currency conversion"
            }
          },
          "unified_outputs": {
            "converted_data": {
              "logical_name": "converted_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Currency-converted training data with standardized monetary values"
            }
          },
          "dependency_sources": {
            "data_input": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ]
          },
          "output_sources": {
            "converted_data": [
              "training",
              "testing",
              "validation",
              "calibration",
              "generic"
            ]
          },
          "variant_count": 5
        }
      },
      "severity_level": "INFO"
    },
    "dummy_training": {
      "test_name": "contract_spec_dummy_training",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.863278",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: DummyTraining -> DummyTraining -> Processing",
          "details": {
            "contract": "dummy_training_contract",
            "original_spec_type": "DummyTraining",
            "canonical_name": "DummyTraining",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output model_input: properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
          "details": {
            "contract": "dummy_training_contract",
            "logical_name": "model_input",
            "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for dummy_training_contract",
          "details": {
            "contract": "dummy_training_contract",
            "step_type": "processing",
            "node_type": "source",
            "total_outputs": 1,
            "outputs_with_property_paths": 1,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: DummyTraining -> DummyTraining -> Processing",
            "details": {
              "contract": "dummy_training_contract",
              "original_spec_type": "DummyTraining",
              "canonical_name": "DummyTraining",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output model_input: properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
            "details": {
              "contract": "dummy_training_contract",
              "logical_name": "model_input",
              "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for dummy_training_contract",
            "details": {
              "contract": "dummy_training_contract",
              "step_type": "processing",
              "node_type": "source",
              "total_outputs": 1,
              "outputs_with_property_paths": 1,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "dummy_training.py",
          "inputs": {},
          "outputs": {
            "model_input": {
              "path": "/opt/ml/processing/output/model"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "Contract for dummy training SOURCE step that packages model.tar.gz and hyperparameters.json from source directory",
          "framework_requirements": {
            "boto3": ">=1.26.0",
            "pathlib": ">=1.0.0"
          }
        },
        "specifications": {
          "dummy_training_spec": {
            "step_type": "DummyTraining",
            "node_type": "source",
            "dependencies": [],
            "outputs": [
              {
                "logical_name": "model_input",
                "output_type": "model_artifacts",
                "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "S3 path to model artifacts with integrated hyperparameters (from source directory)"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "DummyTraining",
            "node_type": "source",
            "dependencies": [],
            "outputs": [
              {
                "logical_name": "model_input",
                "output_type": "model_artifacts",
                "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "S3 path to model artifacts with integrated hyperparameters (from source directory)"
              }
            ]
          },
          "variants": {
            "training": {
              "step_type": "DummyTraining",
              "node_type": "source",
              "dependencies": [],
              "outputs": [
                {
                  "logical_name": "model_input",
                  "output_type": "model_artifacts",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "S3 path to model artifacts with integrated hyperparameters (from source directory)"
                }
              ]
            }
          },
          "unified_dependencies": {},
          "unified_outputs": {
            "model_input": {
              "logical_name": "model_input",
              "output_type": "model_artifacts",
              "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "S3 path to model artifacts with integrated hyperparameters (from source directory)"
            }
          },
          "dependency_sources": {},
          "output_sources": {
            "model_input": [
              "training"
            ]
          },
          "variant_count": 1
        }
      },
      "severity_level": "INFO"
    },
    "model_calibration": {
      "test_name": "contract_spec_model_calibration",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.990446",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "multi_variant_validation",
          "message": "Smart Specification Selection: validated against 4 variants",
          "details": {
            "contract": "model_calibration_contract",
            "variants": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "total_dependencies": 1,
            "total_outputs": 3,
            "contract_inputs": 1,
            "contract_outputs": 3
          },
          "recommendation": "Multi-variant validation completed successfully",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: ModelCalibration_Training -> ModelCalibration -> Processing",
          "details": {
            "contract": "model_calibration_contract",
            "original_spec_type": "ModelCalibration_Training",
            "canonical_name": "ModelCalibration",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output calibration_output: properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
          "details": {
            "contract": "model_calibration_contract",
            "logical_name": "calibration_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output metrics_output: properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
          "details": {
            "contract": "model_calibration_contract",
            "logical_name": "metrics_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output calibrated_data: properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
          "details": {
            "contract": "model_calibration_contract",
            "logical_name": "calibrated_data",
            "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for model_calibration_contract",
          "details": {
            "contract": "model_calibration_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 3,
            "outputs_with_property_paths": 3,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 3/3 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "multi_variant_validation",
            "message": "Smart Specification Selection: validated against 4 variants",
            "details": {
              "contract": "model_calibration_contract",
              "variants": [
                "training",
                "testing",
                "validation",
                "calibration"
              ],
              "total_dependencies": 1,
              "total_outputs": 3,
              "contract_inputs": 1,
              "contract_outputs": 3
            },
            "recommendation": "Multi-variant validation completed successfully"
          },
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: ModelCalibration_Training -> ModelCalibration -> Processing",
            "details": {
              "contract": "model_calibration_contract",
              "original_spec_type": "ModelCalibration_Training",
              "canonical_name": "ModelCalibration",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output calibration_output: properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
            "details": {
              "contract": "model_calibration_contract",
              "logical_name": "calibration_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output metrics_output: properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
            "details": {
              "contract": "model_calibration_contract",
              "logical_name": "metrics_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output calibrated_data: properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
            "details": {
              "contract": "model_calibration_contract",
              "logical_name": "calibrated_data",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for model_calibration_contract",
            "details": {
              "contract": "model_calibration_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 3,
              "outputs_with_property_paths": 3,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 3/3 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "model_calibration.py",
          "inputs": {
            "evaluation_data": {
              "path": "/opt/ml/processing/input/eval_data"
            }
          },
          "outputs": {
            "calibration_output": {
              "path": "/opt/ml/processing/output/calibration"
            },
            "metrics_output": {
              "path": "/opt/ml/processing/output/metrics"
            },
            "calibrated_data": {
              "path": "/opt/ml/processing/output/calibrated_data"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [
              "CALIBRATION_METHOD",
              "LABEL_FIELD",
              "SCORE_FIELD",
              "IS_BINARY"
            ],
            "optional": {
              "MONOTONIC_CONSTRAINT": "True",
              "GAM_SPLINES": "10",
              "ERROR_THRESHOLD": "0.05",
              "NUM_CLASSES": "2",
              "SCORE_FIELD_PREFIX": "prob_class_",
              "MULTICLASS_CATEGORIES": "[0, 1]"
            }
          },
          "description": "Contract for model calibration processing step.\n    \n    The model calibration step takes a trained model's raw prediction scores and\n    calibrates them to better reflect true probabilities, which is essential for\n    risk-based decision-making, threshold setting, and confidence in model outputs.\n    Supports both binary and multi-class classification scenarios.\n    \n    Input Structure:\n    - /opt/ml/processing/input/eval_data: Evaluation dataset with ground truth labels and model predictions\n    \n    Output Structure:\n    - /opt/ml/processing/output/calibration: Calibration mapping and artifacts\n    - /opt/ml/processing/output/metrics: Calibration quality metrics\n    - /opt/ml/processing/output/calibrated_data: Dataset with calibrated probabilities\n    \n    Environment Variables:\n    - CALIBRATION_METHOD: Method to use for calibration (gam, isotonic, platt)\n    - LABEL_FIELD: Name of the label column\n    - SCORE_FIELD: Name of the prediction score column (for binary classification)\n    - IS_BINARY: Whether this is a binary classification task (true/false)\n    - MONOTONIC_CONSTRAINT: Whether to enforce monotonicity in GAM (optional)\n    - GAM_SPLINES: Number of splines for GAM (optional)\n    - ERROR_THRESHOLD: Acceptable calibration error threshold (optional)\n    - NUM_CLASSES: Number of classes for multi-class classification (optional, default=2)\n    - SCORE_FIELD_PREFIX: Prefix for probability columns in multi-class scenario (optional)\n    - MULTICLASS_CATEGORIES: JSON string of class names/values for multi-class (optional)\n    ",
          "framework_requirements": {
            "scikit-learn": ">=0.23.2,<1.0.0",
            "pandas": ">=1.2.0,<2.0.0",
            "numpy": ">=1.20.0",
            "pygam": ">=0.8.0",
            "matplotlib": ">=3.3.0"
          }
        },
        "specifications": {
          "model_calibration_training_spec": {
            "step_type": "ModelCalibration_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "PytorchTraining",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Training evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training dataset with calibrated probabilities"
              }
            ]
          },
          "model_calibration_spec": {
            "step_type": "ModelCalibration",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Dataset with calibrated probabilities"
              }
            ]
          },
          "model_calibration_validation_spec": {
            "step_type": "ModelCalibration_Validation",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "PytorchTraining",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Validation evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Validation calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Validation calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Validation dataset with calibrated probabilities"
              }
            ]
          },
          "model_calibration_calibration_spec": {
            "step_type": "ModelCalibration_Calibration",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "PytorchTraining",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Calibration evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Calibration dataset with calibrated probabilities"
              }
            ]
          },
          "model_calibration_testing_spec": {
            "step_type": "ModelCalibration_Testing",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "PytorchTraining",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Testing evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Testing calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Testing calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Testing dataset with calibrated probabilities"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "ModelCalibration_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "evaluation_data",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TrainingEvaluation",
                  "PytorchTraining",
                  "XGBoostTraining",
                  "XGBoostModelEval",
                  "CrossValidation",
                  "ModelEvaluation"
                ],
                "data_type": "S3Uri",
                "description": "Training evaluation dataset with ground truth labels and model predictions"
              }
            ],
            "outputs": [
              {
                "logical_name": "calibration_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training calibration mapping and artifacts"
              },
              {
                "logical_name": "metrics_output",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training calibration quality metrics and visualizations"
              },
              {
                "logical_name": "calibrated_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Training dataset with calibrated probabilities"
              }
            ]
          },
          "variants": {
            "training": {
              "step_type": "ModelCalibration_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "evaluation_data",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TrainingEvaluation",
                    "PytorchTraining",
                    "XGBoostTraining",
                    "XGBoostModelEval",
                    "CrossValidation",
                    "ModelEvaluation"
                  ],
                  "data_type": "S3Uri",
                  "description": "Training evaluation dataset with ground truth labels and model predictions"
                }
              ],
              "outputs": [
                {
                  "logical_name": "calibration_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Training calibration mapping and artifacts"
                },
                {
                  "logical_name": "metrics_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Training calibration quality metrics and visualizations"
                },
                {
                  "logical_name": "calibrated_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Training dataset with calibrated probabilities"
                }
              ]
            },
            "testing": {
              "step_type": "ModelCalibration_Testing",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "evaluation_data",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TrainingEvaluation",
                    "PytorchTraining",
                    "XGBoostTraining",
                    "XGBoostModelEval",
                    "CrossValidation",
                    "ModelEvaluation"
                  ],
                  "data_type": "S3Uri",
                  "description": "Testing evaluation dataset with ground truth labels and model predictions"
                }
              ],
              "outputs": [
                {
                  "logical_name": "calibration_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Testing calibration mapping and artifacts"
                },
                {
                  "logical_name": "metrics_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Testing calibration quality metrics and visualizations"
                },
                {
                  "logical_name": "calibrated_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Testing dataset with calibrated probabilities"
                }
              ]
            },
            "validation": {
              "step_type": "ModelCalibration_Validation",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "evaluation_data",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TrainingEvaluation",
                    "PytorchTraining",
                    "XGBoostTraining",
                    "XGBoostModelEval",
                    "CrossValidation",
                    "ModelEvaluation"
                  ],
                  "data_type": "S3Uri",
                  "description": "Validation evaluation dataset with ground truth labels and model predictions"
                }
              ],
              "outputs": [
                {
                  "logical_name": "calibration_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Validation calibration mapping and artifacts"
                },
                {
                  "logical_name": "metrics_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Validation calibration quality metrics and visualizations"
                },
                {
                  "logical_name": "calibrated_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Validation dataset with calibrated probabilities"
                }
              ]
            },
            "calibration": {
              "step_type": "ModelCalibration_Calibration",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "evaluation_data",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TrainingEvaluation",
                    "PytorchTraining",
                    "XGBoostTraining",
                    "XGBoostModelEval",
                    "CrossValidation",
                    "ModelEvaluation"
                  ],
                  "data_type": "S3Uri",
                  "description": "Calibration evaluation dataset with ground truth labels and model predictions"
                }
              ],
              "outputs": [
                {
                  "logical_name": "calibration_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Calibration mapping and artifacts"
                },
                {
                  "logical_name": "metrics_output",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Calibration quality metrics and visualizations"
                },
                {
                  "logical_name": "calibrated_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Calibration dataset with calibrated probabilities"
                }
              ]
            }
          },
          "unified_dependencies": {
            "evaluation_data": {
              "logical_name": "evaluation_data",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TrainingEvaluation",
                "PytorchTraining",
                "XGBoostTraining",
                "XGBoostModelEval",
                "CrossValidation",
                "ModelEvaluation"
              ],
              "data_type": "S3Uri",
              "description": "Calibration evaluation dataset with ground truth labels and model predictions"
            }
          },
          "unified_outputs": {
            "calibration_output": {
              "logical_name": "calibration_output",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration mapping and artifacts"
            },
            "metrics_output": {
              "logical_name": "metrics_output",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration quality metrics and visualizations"
            },
            "calibrated_data": {
              "logical_name": "calibrated_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration dataset with calibrated probabilities"
            }
          },
          "dependency_sources": {
            "evaluation_data": [
              "training",
              "testing",
              "validation",
              "calibration"
            ]
          },
          "output_sources": {
            "calibration_output": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "metrics_output": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "calibrated_data": [
              "training",
              "testing",
              "validation",
              "calibration"
            ]
          },
          "variant_count": 4
        }
      },
      "severity_level": "INFO"
    },
    "package": {
      "test_name": "contract_spec_package",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.127781",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: Package -> Package -> Processing",
          "details": {
            "contract": "package_contract",
            "original_spec_type": "Package",
            "canonical_name": "Package",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output packaged_model: properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
          "details": {
            "contract": "package_contract",
            "logical_name": "packaged_model",
            "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for package_contract",
          "details": {
            "contract": "package_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 1,
            "outputs_with_property_paths": 1,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: Package -> Package -> Processing",
            "details": {
              "contract": "package_contract",
              "original_spec_type": "Package",
              "canonical_name": "Package",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output packaged_model: properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
            "details": {
              "contract": "package_contract",
              "logical_name": "packaged_model",
              "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for package_contract",
            "details": {
              "contract": "package_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 1,
              "outputs_with_property_paths": 1,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "package.py",
          "inputs": {
            "model_input": {
              "path": "/opt/ml/processing/input/model"
            },
            "inference_scripts_input": {
              "path": "/opt/ml/processing/input/script"
            },
            "calibration_model": {
              "path": "/opt/ml/processing/input/calibration"
            }
          },
          "outputs": {
            "packaged_model": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "\n    MIMS packaging script that:\n    1. Extracts model artifacts from input model directory or model.tar.gz\n    2. Includes calibration model if available\n    3. Copies inference scripts to code directory\n    4. Creates a packaged model.tar.gz file for deployment\n    4. Provides detailed logging of the packaging process\n    \n    Input Structure:\n    - /opt/ml/processing/input/model: Model artifacts (files or model.tar.gz)\n    - /opt/ml/processing/input/script: Inference scripts to include\n    - /opt/ml/processing/input/calibration: Optional calibration model artifacts\n    \n    Output Structure:\n    - /opt/ml/processing/output/model.tar.gz: Packaged model ready for deployment\n    ",
          "framework_requirements": {
            "python": ">=3.7"
          }
        },
        "specifications": {
          "package_spec": {
            "step_type": "Package",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "model_input",
                "dependency_type": "model_artifacts",
                "required": true,
                "compatible_sources": [
                  "ModelStep",
                  "TrainingStep",
                  "XGBoostTraining"
                ],
                "data_type": "S3Uri",
                "description": "Trained model artifacts to be packaged"
              },
              {
                "logical_name": "inference_scripts_input",
                "dependency_type": "custom_property",
                "required": false,
                "compatible_sources": [
                  "ScriptStep",
                  "ProcessingStep"
                ],
                "data_type": "String",
                "description": "Inference scripts and code for model deployment (can be local directory path or S3 URI)"
              },
              {
                "logical_name": "calibration_model",
                "dependency_type": "processing_output",
                "required": false,
                "compatible_sources": [
                  "ModelCalibration"
                ],
                "data_type": "S3Uri",
                "description": "Calibration model and artifacts for probability calibration (optional)"
              }
            ],
            "outputs": [
              {
                "logical_name": "packaged_model",
                "output_type": "model_artifacts",
                "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Packaged model ready for deployment"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "Package",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "model_input",
                "dependency_type": "model_artifacts",
                "required": true,
                "compatible_sources": [
                  "ModelStep",
                  "TrainingStep",
                  "XGBoostTraining"
                ],
                "data_type": "S3Uri",
                "description": "Trained model artifacts to be packaged"
              },
              {
                "logical_name": "inference_scripts_input",
                "dependency_type": "custom_property",
                "required": false,
                "compatible_sources": [
                  "ScriptStep",
                  "ProcessingStep"
                ],
                "data_type": "String",
                "description": "Inference scripts and code for model deployment (can be local directory path or S3 URI)"
              },
              {
                "logical_name": "calibration_model",
                "dependency_type": "processing_output",
                "required": false,
                "compatible_sources": [
                  "ModelCalibration"
                ],
                "data_type": "S3Uri",
                "description": "Calibration model and artifacts for probability calibration (optional)"
              }
            ],
            "outputs": [
              {
                "logical_name": "packaged_model",
                "output_type": "model_artifacts",
                "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Packaged model ready for deployment"
              }
            ]
          },
          "variants": {
            "generic": {
              "step_type": "Package",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "model_input",
                  "dependency_type": "model_artifacts",
                  "required": true,
                  "compatible_sources": [
                    "ModelStep",
                    "TrainingStep",
                    "XGBoostTraining"
                  ],
                  "data_type": "S3Uri",
                  "description": "Trained model artifacts to be packaged"
                },
                {
                  "logical_name": "inference_scripts_input",
                  "dependency_type": "custom_property",
                  "required": false,
                  "compatible_sources": [
                    "ScriptStep",
                    "ProcessingStep"
                  ],
                  "data_type": "String",
                  "description": "Inference scripts and code for model deployment (can be local directory path or S3 URI)"
                },
                {
                  "logical_name": "calibration_model",
                  "dependency_type": "processing_output",
                  "required": false,
                  "compatible_sources": [
                    "ModelCalibration"
                  ],
                  "data_type": "S3Uri",
                  "description": "Calibration model and artifacts for probability calibration (optional)"
                }
              ],
              "outputs": [
                {
                  "logical_name": "packaged_model",
                  "output_type": "model_artifacts",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Packaged model ready for deployment"
                }
              ]
            }
          },
          "unified_dependencies": {
            "model_input": {
              "logical_name": "model_input",
              "dependency_type": "model_artifacts",
              "required": true,
              "compatible_sources": [
                "ModelStep",
                "TrainingStep",
                "XGBoostTraining"
              ],
              "data_type": "S3Uri",
              "description": "Trained model artifacts to be packaged"
            },
            "inference_scripts_input": {
              "logical_name": "inference_scripts_input",
              "dependency_type": "custom_property",
              "required": false,
              "compatible_sources": [
                "ScriptStep",
                "ProcessingStep"
              ],
              "data_type": "String",
              "description": "Inference scripts and code for model deployment (can be local directory path or S3 URI)"
            },
            "calibration_model": {
              "logical_name": "calibration_model",
              "dependency_type": "processing_output",
              "required": false,
              "compatible_sources": [
                "ModelCalibration"
              ],
              "data_type": "S3Uri",
              "description": "Calibration model and artifacts for probability calibration (optional)"
            }
          },
          "unified_outputs": {
            "packaged_model": {
              "logical_name": "packaged_model",
              "output_type": "model_artifacts",
              "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Packaged model ready for deployment"
            }
          },
          "dependency_sources": {
            "model_input": [
              "generic"
            ],
            "inference_scripts_input": [
              "generic"
            ],
            "calibration_model": [
              "generic"
            ]
          },
          "output_sources": {
            "packaged_model": [
              "generic"
            ]
          },
          "variant_count": 1
        }
      },
      "severity_level": "INFO"
    },
    "payload": {
      "test_name": "contract_spec_payload",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.246404",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: Payload -> Payload -> Processing",
          "details": {
            "contract": "payload_contract",
            "original_spec_type": "Payload",
            "canonical_name": "Payload",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output payload_sample: properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
          "details": {
            "contract": "payload_contract",
            "logical_name": "payload_sample",
            "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for payload_contract",
          "details": {
            "contract": "payload_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 1,
            "outputs_with_property_paths": 1,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: Payload -> Payload -> Processing",
            "details": {
              "contract": "payload_contract",
              "original_spec_type": "Payload",
              "canonical_name": "Payload",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output payload_sample: properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
            "details": {
              "contract": "payload_contract",
              "logical_name": "payload_sample",
              "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for payload_contract",
            "details": {
              "contract": "payload_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 1,
              "outputs_with_property_paths": 1,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "payload.py",
          "inputs": {
            "model_input": {
              "path": "/opt/ml/processing/input/model"
            }
          },
          "outputs": {
            "payload_sample": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {
              "CONTENT_TYPES": "application/json",
              "DEFAULT_NUMERIC_VALUE": "0.0",
              "DEFAULT_TEXT_VALUE": "DEFAULT_TEXT"
            }
          },
          "description": "\n    MIMS payload generation script that:\n    1. Extracts hyperparameters from model artifacts (model.tar.gz or directory)\n    2. Creates model variable list from field information\n    3. Generates sample payloads in multiple formats (JSON, CSV)\n    4. Archives payload files for deployment\n    \n    Note: This script extracts pipeline name, version, and model objective from hyperparameters,\n    not from environment variables. It does not use PIPELINE_NAME, REGION, PAYLOAD_S3_KEY, or \n    BUCKET_NAME environment variables.\n    \n    Input Structure:\n    - /opt/ml/processing/input/model: Model artifacts containing hyperparameters.json\n    \n    Output Structure:\n    - /tmp/mims_payload_work/payload_sample/: Sample payload files (temporary)\n    - /opt/ml/processing/output/: Output directory containing payload.tar.gz file\n    \n    Environment Variables:\n    - CONTENT_TYPES: Comma-separated list of content types (default: \"application/json\")\n    - DEFAULT_NUMERIC_VALUE: Default value for numeric fields (default: \"0.0\")\n    - DEFAULT_TEXT_VALUE: Default value for text fields (default: \"DEFAULT_TEXT\")\n    - SPECIAL_FIELD_<fieldname>: Custom values for specific fields\n    \n    Arguments:\n    - mode: Operating mode for the script (default: \"standard\")\n    ",
          "framework_requirements": {
            "python": ">=3.7"
          }
        },
        "specifications": {
          "payload_spec": {
            "step_type": "Payload",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "model_input",
                "dependency_type": "model_artifacts",
                "required": true,
                "compatible_sources": [
                  "ModelStep",
                  "TrainingStep",
                  "XGBoostTraining"
                ],
                "data_type": "S3Uri",
                "description": "Trained model artifacts for payload generation"
              }
            ],
            "outputs": [
              {
                "logical_name": "payload_sample",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Generated payload samples archive (payload.tar.gz)"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "Payload",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "model_input",
                "dependency_type": "model_artifacts",
                "required": true,
                "compatible_sources": [
                  "ModelStep",
                  "TrainingStep",
                  "XGBoostTraining"
                ],
                "data_type": "S3Uri",
                "description": "Trained model artifacts for payload generation"
              }
            ],
            "outputs": [
              {
                "logical_name": "payload_sample",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Generated payload samples archive (payload.tar.gz)"
              }
            ]
          },
          "variants": {
            "generic": {
              "step_type": "Payload",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "model_input",
                  "dependency_type": "model_artifacts",
                  "required": true,
                  "compatible_sources": [
                    "ModelStep",
                    "TrainingStep",
                    "XGBoostTraining"
                  ],
                  "data_type": "S3Uri",
                  "description": "Trained model artifacts for payload generation"
                }
              ],
              "outputs": [
                {
                  "logical_name": "payload_sample",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Generated payload samples archive (payload.tar.gz)"
                }
              ]
            }
          },
          "unified_dependencies": {
            "model_input": {
              "logical_name": "model_input",
              "dependency_type": "model_artifacts",
              "required": true,
              "compatible_sources": [
                "ModelStep",
                "TrainingStep",
                "XGBoostTraining"
              ],
              "data_type": "S3Uri",
              "description": "Trained model artifacts for payload generation"
            }
          },
          "unified_outputs": {
            "payload_sample": {
              "logical_name": "payload_sample",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Generated payload samples archive (payload.tar.gz)"
            }
          },
          "dependency_sources": {
            "model_input": [
              "generic"
            ]
          },
          "output_sources": {
            "payload_sample": [
              "generic"
            ]
          },
          "variant_count": 1
        }
      },
      "severity_level": "INFO"
    },
    "risk_table_mapping": {
      "test_name": "contract_spec_risk_table_mapping",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.361483",
      "issues": [
        {
          "level": "SeverityLevel.INFO",
          "category": "multi_variant_validation",
          "message": "Smart Specification Selection: validated against 4 variants",
          "details": {
            "contract": "risk_table_mapping_contract",
            "variants": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "total_dependencies": 3,
            "total_outputs": 2,
            "contract_inputs": 3,
            "contract_outputs": 2
          },
          "recommendation": "Multi-variant validation completed successfully",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "step_type_resolution",
          "message": "Step type resolved via registry: RiskTableMapping_Training -> RiskTableMapping -> Processing",
          "details": {
            "contract": "risk_table_mapping_contract",
            "original_spec_type": "RiskTableMapping_Training",
            "canonical_name": "RiskTableMapping",
            "resolved_sagemaker_type": "Processing",
            "registry_available": true
          },
          "recommendation": "Using Processing step property paths for validation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output processed_data: properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
          "details": {
            "contract": "risk_table_mapping_contract",
            "logical_name": "processed_data",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation",
          "message": "Valid property path in output risk_tables: properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
          "details": {
            "contract": "risk_table_mapping_contract",
            "logical_name": "risk_tables",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "step_type": "processing",
            "validation_source": "SageMaker Documentation v2.92.2",
            "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
          },
          "recommendation": "Property path is correctly formatted for the step type",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "property_path_validation_summary",
          "message": "Property path validation completed for risk_table_mapping_contract",
          "details": {
            "contract": "risk_table_mapping_contract",
            "step_type": "processing",
            "node_type": "internal",
            "total_outputs": 2,
            "outputs_with_property_paths": 2,
            "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
            "documentation_version": "v2.92.2"
          },
          "recommendation": "Validated 2/2 outputs with property paths against SageMaker documentation",
          "alignment_level": "AlignmentLevel.CONTRACT_SPECIFICATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "INFO",
            "category": "multi_variant_validation",
            "message": "Smart Specification Selection: validated against 4 variants",
            "details": {
              "contract": "risk_table_mapping_contract",
              "variants": [
                "training",
                "testing",
                "validation",
                "calibration"
              ],
              "total_dependencies": 3,
              "total_outputs": 2,
              "contract_inputs": 3,
              "contract_outputs": 2
            },
            "recommendation": "Multi-variant validation completed successfully"
          },
          {
            "severity": "INFO",
            "category": "step_type_resolution",
            "message": "Step type resolved via registry: RiskTableMapping_Training -> RiskTableMapping -> Processing",
            "details": {
              "contract": "risk_table_mapping_contract",
              "original_spec_type": "RiskTableMapping_Training",
              "canonical_name": "RiskTableMapping",
              "resolved_sagemaker_type": "Processing",
              "registry_available": true
            },
            "recommendation": "Using Processing step property paths for validation"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output processed_data: properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "details": {
              "contract": "risk_table_mapping_contract",
              "logical_name": "processed_data",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation",
            "message": "Valid property path in output risk_tables: properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "details": {
              "contract": "risk_table_mapping_contract",
              "logical_name": "risk_tables",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "step_type": "processing",
              "validation_source": "SageMaker Documentation v2.92.2",
              "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
            },
            "recommendation": "Property path is correctly formatted for the step type"
          },
          {
            "severity": "INFO",
            "category": "property_path_validation_summary",
            "message": "Property path validation completed for risk_table_mapping_contract",
            "details": {
              "contract": "risk_table_mapping_contract",
              "step_type": "processing",
              "node_type": "internal",
              "total_outputs": 2,
              "outputs_with_property_paths": 2,
              "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
              "documentation_version": "v2.92.2"
            },
            "recommendation": "Validated 2/2 outputs with property paths against SageMaker documentation"
          }
        ],
        "contract": {
          "entry_point": "risk_table_mapping.py",
          "inputs": {
            "data_input": {
              "path": "/opt/ml/processing/input/data"
            },
            "hyperparameters_s3_uri": {
              "path": "/opt/ml/processing/input/config"
            },
            "risk_tables": {
              "path": "/opt/ml/processing/input/risk_tables"
            }
          },
          "outputs": {
            "processed_data": {
              "path": "/opt/ml/processing/output"
            },
            "risk_tables": {
              "path": "/opt/ml/processing/output"
            }
          },
          "arguments": {},
          "environment_variables": {
            "required": [],
            "optional": {}
          },
          "description": "\n    Risk table mapping script that:\n    1. Creates risk tables for categorical features based on target variable correlation\n    2. Handles missing value imputation for numeric features\n    3. Supports both training mode (fit and transform) and inference mode (transform only)\n    4. Applies smoothing and count thresholds for robust risk estimation\n    5. Saves fitted artifacts for reuse in inference\n    \n    Input Structure:\n    - /opt/ml/processing/input/data: Data files from tabular preprocessing\n      - Training mode: train/, test/, val/ subdirectories with processed data\n      - Other modes: job_type/ subdirectory with processed data\n    - /opt/ml/processing/input/config: Configuration files\n      - config.json: Model configuration including category risk parameters\n      - metadata.csv: Variable metadata with types and imputation strategies\n      - job_type: Configuration parameter specifying job type (training, validation, testing, calibration)\n    - /opt/ml/processing/input/risk_tables: Pre-trained risk tables (for non-training modes)\n      - bin_mapping.pkl: Risk table mappings for categorical features\n      - missing_value_imputation.pkl: Imputation values for numeric features\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Transformed data by split\n    - /opt/ml/processing/output/bin_mapping.pkl: Risk table mappings for categorical features\n    - /opt/ml/processing/output/missing_value_imputation.pkl: Imputation values for numeric features\n    - /opt/ml/processing/output/config.pkl: Serialized configuration with metadata\n    \n    Job Types (from config):\n    - training: Fits risk tables on training data, transforms all splits\n    - validation/testing/calibration: Uses pre-trained risk tables, transforms single split\n    \n    Training Mode:\n    - Fits risk tables on training data\n    - Transforms train/test/val splits\n    - Saves risk tables and imputation models\n    \n    Non-Training Modes:\n    - Loads pre-trained risk tables and imputation models\n    - Transforms data using loaded artifacts\n    - Maintains the same output structure as training mode\n    ",
          "framework_requirements": {
            "pandas": ">=1.3.0",
            "numpy": ">=1.21.0",
            "scikit-learn": ">=1.0.0"
          }
        },
        "specifications": {
          "risk_table_mapping_testing_spec": {
            "step_type": "RiskTableMapping_Testing",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Preprocessed testing data from tabular preprocessing step"
              },
              {
                "logical_name": "hyperparameters_s3_uri",
                "dependency_type": "hyperparameters",
                "required": false,
                "compatible_sources": [
                  "DataPrep",
                  "ModelTraining",
                  "FeatureEngineering",
                  "DataQuality",
                  "HyperparameterPrep",
                  "ProcessingStep",
                  "ConfigurationStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
              },
              {
                "logical_name": "risk_tables",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "RiskTableMapping_Training"
                ],
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models from training step"
              }
            ],
            "outputs": [
              {
                "logical_name": "processed_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Processed testing data with risk table mappings applied"
              },
              {
                "logical_name": "risk_tables",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models (passthrough from training)"
              }
            ]
          },
          "risk_table_mapping_calibration_spec": {
            "step_type": "RiskTableMapping_Calibration",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Preprocessed calibration data from tabular preprocessing step"
              },
              {
                "logical_name": "hyperparameters_s3_uri",
                "dependency_type": "hyperparameters",
                "required": false,
                "compatible_sources": [
                  "DataPrep",
                  "ModelTraining",
                  "FeatureEngineering",
                  "DataQuality",
                  "HyperparameterPrep",
                  "ProcessingStep",
                  "ConfigurationStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
              },
              {
                "logical_name": "risk_tables",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "RiskTableMapping_Training"
                ],
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models from training step"
              }
            ],
            "outputs": [
              {
                "logical_name": "processed_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Processed calibration data with risk table mappings applied"
              },
              {
                "logical_name": "risk_tables",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models (passthrough from training)"
              }
            ]
          },
          "risk_table_mapping_validation_spec": {
            "step_type": "RiskTableMapping_Validation",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Preprocessed validation data from tabular preprocessing step"
              },
              {
                "logical_name": "hyperparameters_s3_uri",
                "dependency_type": "hyperparameters",
                "required": false,
                "compatible_sources": [
                  "DataPrep",
                  "ModelTraining",
                  "FeatureEngineering",
                  "DataQuality",
                  "HyperparameterPrep",
                  "ProcessingStep",
                  "ConfigurationStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
              },
              {
                "logical_name": "risk_tables",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "RiskTableMapping_Training"
                ],
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models from training step"
              }
            ],
            "outputs": [
              {
                "logical_name": "processed_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Processed validation data with risk table mappings applied"
              },
              {
                "logical_name": "risk_tables",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models (passthrough from training)"
              }
            ]
          },
          "risk_table_mapping_training_spec": {
            "step_type": "RiskTableMapping_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Preprocessed training data from tabular preprocessing step"
              },
              {
                "logical_name": "hyperparameters_s3_uri",
                "dependency_type": "hyperparameters",
                "required": false,
                "compatible_sources": [
                  "DataPrep",
                  "ModelTraining",
                  "FeatureEngineering",
                  "DataQuality",
                  "HyperparameterPrep",
                  "ProcessingStep",
                  "ConfigurationStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
              },
              {
                "logical_name": "risk_tables",
                "dependency_type": "processing_output",
                "required": false,
                "compatible_sources": [
                  "RiskTableMapping_Training",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
              }
            ],
            "outputs": [
              {
                "logical_name": "processed_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Processed data with risk table mappings applied"
              },
              {
                "logical_name": "risk_tables",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models for categorical features"
              }
            ]
          }
        },
        "unified_specification": {
          "primary_spec": {
            "step_type": "RiskTableMapping_Training",
            "node_type": "internal",
            "dependencies": [
              {
                "logical_name": "data_input",
                "dependency_type": "processing_output",
                "required": true,
                "compatible_sources": [
                  "TabularPreprocessing",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Preprocessed training data from tabular preprocessing step"
              },
              {
                "logical_name": "hyperparameters_s3_uri",
                "dependency_type": "hyperparameters",
                "required": false,
                "compatible_sources": [
                  "DataPrep",
                  "ModelTraining",
                  "FeatureEngineering",
                  "DataQuality",
                  "HyperparameterPrep",
                  "ProcessingStep",
                  "ConfigurationStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
              },
              {
                "logical_name": "risk_tables",
                "dependency_type": "processing_output",
                "required": false,
                "compatible_sources": [
                  "RiskTableMapping_Training",
                  "ProcessingStep"
                ],
                "data_type": "S3Uri",
                "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
              }
            ],
            "outputs": [
              {
                "logical_name": "processed_data",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Processed data with risk table mappings applied"
              },
              {
                "logical_name": "risk_tables",
                "output_type": "processing_output",
                "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                "data_type": "S3Uri",
                "description": "Risk tables and imputation models for categorical features"
              }
            ]
          },
          "variants": {
            "training": {
              "step_type": "RiskTableMapping_Training",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Preprocessed training data from tabular preprocessing step"
                },
                {
                  "logical_name": "hyperparameters_s3_uri",
                  "dependency_type": "hyperparameters",
                  "required": false,
                  "compatible_sources": [
                    "DataPrep",
                    "ModelTraining",
                    "FeatureEngineering",
                    "DataQuality",
                    "HyperparameterPrep",
                    "ProcessingStep",
                    "ConfigurationStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
                },
                {
                  "logical_name": "risk_tables",
                  "dependency_type": "processing_output",
                  "required": false,
                  "compatible_sources": [
                    "RiskTableMapping_Training",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
                }
              ],
              "outputs": [
                {
                  "logical_name": "processed_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Processed data with risk table mappings applied"
                },
                {
                  "logical_name": "risk_tables",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models for categorical features"
                }
              ]
            },
            "testing": {
              "step_type": "RiskTableMapping_Testing",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Preprocessed testing data from tabular preprocessing step"
                },
                {
                  "logical_name": "hyperparameters_s3_uri",
                  "dependency_type": "hyperparameters",
                  "required": false,
                  "compatible_sources": [
                    "DataPrep",
                    "ModelTraining",
                    "FeatureEngineering",
                    "DataQuality",
                    "HyperparameterPrep",
                    "ProcessingStep",
                    "ConfigurationStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
                },
                {
                  "logical_name": "risk_tables",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "RiskTableMapping_Training"
                  ],
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models from training step"
                }
              ],
              "outputs": [
                {
                  "logical_name": "processed_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Processed testing data with risk table mappings applied"
                },
                {
                  "logical_name": "risk_tables",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models (passthrough from training)"
                }
              ]
            },
            "validation": {
              "step_type": "RiskTableMapping_Validation",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Preprocessed validation data from tabular preprocessing step"
                },
                {
                  "logical_name": "hyperparameters_s3_uri",
                  "dependency_type": "hyperparameters",
                  "required": false,
                  "compatible_sources": [
                    "DataPrep",
                    "ModelTraining",
                    "FeatureEngineering",
                    "DataQuality",
                    "HyperparameterPrep",
                    "ProcessingStep",
                    "ConfigurationStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
                },
                {
                  "logical_name": "risk_tables",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "RiskTableMapping_Training"
                  ],
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models from training step"
                }
              ],
              "outputs": [
                {
                  "logical_name": "processed_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Processed validation data with risk table mappings applied"
                },
                {
                  "logical_name": "risk_tables",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models (passthrough from training)"
                }
              ]
            },
            "calibration": {
              "step_type": "RiskTableMapping_Calibration",
              "node_type": "internal",
              "dependencies": [
                {
                  "logical_name": "data_input",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "TabularPreprocessing",
                    "ProcessingStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Preprocessed calibration data from tabular preprocessing step"
                },
                {
                  "logical_name": "hyperparameters_s3_uri",
                  "dependency_type": "hyperparameters",
                  "required": false,
                  "compatible_sources": [
                    "DataPrep",
                    "ModelTraining",
                    "FeatureEngineering",
                    "DataQuality",
                    "HyperparameterPrep",
                    "ProcessingStep",
                    "ConfigurationStep"
                  ],
                  "data_type": "S3Uri",
                  "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
                },
                {
                  "logical_name": "risk_tables",
                  "dependency_type": "processing_output",
                  "required": true,
                  "compatible_sources": [
                    "RiskTableMapping_Training"
                  ],
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models from training step"
                }
              ],
              "outputs": [
                {
                  "logical_name": "processed_data",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Processed calibration data with risk table mappings applied"
                },
                {
                  "logical_name": "risk_tables",
                  "output_type": "processing_output",
                  "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
                  "data_type": "S3Uri",
                  "description": "Risk tables and imputation models (passthrough from training)"
                }
              ]
            }
          },
          "unified_dependencies": {
            "data_input": {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed calibration data from tabular preprocessing step"
            },
            "hyperparameters_s3_uri": {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ModelTraining",
                "FeatureEngineering",
                "DataQuality",
                "HyperparameterPrep",
                "ProcessingStep",
                "ConfigurationStep"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            "risk_tables": {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "RiskTableMapping_Training"
              ],
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models from training step"
            }
          },
          "unified_outputs": {
            "processed_data": {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed calibration data with risk table mappings applied"
            },
            "risk_tables": {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models (passthrough from training)"
            }
          },
          "dependency_sources": {
            "data_input": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "hyperparameters_s3_uri": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "risk_tables": [
              "training",
              "testing",
              "validation",
              "calibration"
            ]
          },
          "output_sources": {
            "processed_data": [
              "training",
              "testing",
              "validation",
              "calibration"
            ],
            "risk_tables": [
              "training",
              "testing",
              "validation",
              "calibration"
            ]
          },
          "variant_count": 4
        }
      },
      "severity_level": "INFO"
    }
  },
  "level3_results": {
    "currency_conversion": {
      "test_name": "spec_dependency_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.942148",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "CurrencyConversion_Training",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "CradleDataLoading",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Processed training data requiring currency conversion"
            }
          ],
          "outputs": [
            {
              "logical_name": "converted_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Currency-converted training data with standardized monetary values"
            }
          ]
        }
      },
      "severity_level": null
    },
    "dummy_training": {
      "test_name": "spec_dependency_dummy_training",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.865413",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "DummyTraining",
          "node_type": "source",
          "dependencies": [],
          "outputs": [
            {
              "logical_name": "model_input",
              "output_type": "model_artifacts",
              "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "S3 path to model artifacts with integrated hyperparameters (from source directory)"
            }
          ]
        }
      },
      "severity_level": null
    },
    "model_calibration": {
      "test_name": "spec_dependency_model_calibration",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.996110",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "ModelCalibration_Calibration",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "evaluation_data",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TrainingEvaluation",
                "PytorchTraining",
                "XGBoostTraining",
                "XGBoostModelEval",
                "CrossValidation",
                "ModelEvaluation"
              ],
              "data_type": "S3Uri",
              "description": "Calibration evaluation dataset with ground truth labels and model predictions"
            }
          ],
          "outputs": [
            {
              "logical_name": "calibration_output",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibration_output'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration mapping and artifacts"
            },
            {
              "logical_name": "metrics_output",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['metrics_output'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration quality metrics and visualizations"
            },
            {
              "logical_name": "calibrated_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['calibrated_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Calibration dataset with calibrated probabilities"
            }
          ]
        }
      },
      "severity_level": null
    },
    "package": {
      "test_name": "spec_dependency_package",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.133994",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "Package",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "model_input",
              "dependency_type": "model_artifacts",
              "required": true,
              "compatible_sources": [
                "ModelStep",
                "TrainingStep",
                "XGBoostTraining"
              ],
              "data_type": "S3Uri",
              "description": "Trained model artifacts to be packaged"
            },
            {
              "logical_name": "inference_scripts_input",
              "dependency_type": "custom_property",
              "required": false,
              "compatible_sources": [
                "ScriptStep",
                "ProcessingStep"
              ],
              "data_type": "String",
              "description": "Inference scripts and code for model deployment (can be local directory path or S3 URI)"
            },
            {
              "logical_name": "calibration_model",
              "dependency_type": "processing_output",
              "required": false,
              "compatible_sources": [
                "ModelCalibration"
              ],
              "data_type": "S3Uri",
              "description": "Calibration model and artifacts for probability calibration (optional)"
            }
          ],
          "outputs": [
            {
              "logical_name": "packaged_model",
              "output_type": "model_artifacts",
              "property_path": "properties.ProcessingOutputConfig.Outputs['packaged_model'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Packaged model ready for deployment"
            }
          ]
        }
      },
      "severity_level": null
    },
    "payload": {
      "test_name": "spec_dependency_payload",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.249910",
      "issues": [],
      "details": {
        "passed": true,
        "issues": [],
        "specification": {
          "step_type": "Payload",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "model_input",
              "dependency_type": "model_artifacts",
              "required": true,
              "compatible_sources": [
                "ModelStep",
                "TrainingStep",
                "XGBoostTraining"
              ],
              "data_type": "S3Uri",
              "description": "Trained model artifacts for payload generation"
            }
          ],
          "outputs": [
            {
              "logical_name": "payload_sample",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['payload_sample'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Generated payload samples archive (payload.tar.gz)"
            }
          ]
        }
      },
      "severity_level": null
    },
    "risk_table_mapping": {
      "test_name": "spec_dependency_risk_table_mapping",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.366459",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "dependency_compatibility",
          "message": "Dependency hyperparameters_s3_uri has low compatibility score: 0.420",
          "details": {
            "logical_name": "hyperparameters_s3_uri",
            "specification": "risk_table_mapping",
            "best_match": {
              "provider": "BatchTransform",
              "output": "transform_output",
              "score": 0.4197368421052632
            },
            "required": false,
            "threshold_info": {
              "mode": "relaxed",
              "thresholds": {
                "pass": "\u2265 0.6",
                "warning": "0.4 - 0.59",
                "error": "0.2 - 0.39",
                "critical": "< 0.2"
              },
              "resolution_threshold": 0.5,
              "description": "Relaxed validation allowing reasonable compatibility matches"
            },
            "score_breakdown": {
              "type_compatibility": 0.2,
              "data_type_compatibility": 0.2,
              "semantic_similarity": 0.019736842105263157,
              "exact_match_bonus": 0.0,
              "source_compatibility": 0.0,
              "keyword_matching": 0.0
            },
            "all_candidates": [
              {
                "provider": "BatchTransform",
                "output": "transform_output",
                "score": 0.4197368421052632
              },
              {
                "provider": "PyTorchModel",
                "output": "model_name",
                "score": 0.31875000000000003
              },
              {
                "provider": "XGBoostModel",
                "output": "model_name",
                "score": 0.31875000000000003
              }
            ]
          },
          "recommendation": "Consider renaming 'hyperparameters_s3_uri' or adding aliases to improve semantic matching; Add 'BatchTransform' to compatible_sources for hyperparameters_s3_uri",
          "alignment_level": "AlignmentLevel.SPECIFICATION_DEPENDENCY"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "dependency_compatibility",
            "message": "Dependency hyperparameters_s3_uri has low compatibility score: 0.420",
            "details": {
              "logical_name": "hyperparameters_s3_uri",
              "specification": "risk_table_mapping",
              "best_match": {
                "provider": "BatchTransform",
                "output": "transform_output",
                "score": 0.4197368421052632
              },
              "required": false,
              "threshold_info": {
                "mode": "relaxed",
                "thresholds": {
                  "pass": "\u2265 0.6",
                  "warning": "0.4 - 0.59",
                  "error": "0.2 - 0.39",
                  "critical": "< 0.2"
                },
                "resolution_threshold": 0.5,
                "description": "Relaxed validation allowing reasonable compatibility matches"
              },
              "score_breakdown": {
                "type_compatibility": 0.2,
                "data_type_compatibility": 0.2,
                "semantic_similarity": 0.019736842105263157,
                "exact_match_bonus": 0.0,
                "source_compatibility": 0.0,
                "keyword_matching": 0.0
              },
              "all_candidates": [
                {
                  "provider": "BatchTransform",
                  "output": "transform_output",
                  "score": 0.4197368421052632
                },
                {
                  "provider": "PyTorchModel",
                  "output": "model_name",
                  "score": 0.31875000000000003
                },
                {
                  "provider": "XGBoostModel",
                  "output": "model_name",
                  "score": 0.31875000000000003
                }
              ]
            },
            "recommendation": "Consider renaming 'hyperparameters_s3_uri' or adding aliases to improve semantic matching; Add 'BatchTransform' to compatible_sources for hyperparameters_s3_uri"
          }
        ],
        "specification": {
          "step_type": "RiskTableMapping_Training",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed training data from tabular preprocessing step"
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ModelTraining",
                "FeatureEngineering",
                "DataQuality",
                "HyperparameterPrep",
                "ProcessingStep",
                "ConfigurationStep"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": false,
              "compatible_sources": [
                "RiskTableMapping_Training",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
            }
          ],
          "outputs": [
            {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed data with risk table mappings applied"
            },
            {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models for categorical features"
            }
          ]
        }
      },
      "severity_level": "WARNING"
    }
  },
  "level4_results": {
    "currency_conversion": {
      "test_name": "builder_config_currency_conversion",
      "passed": true,
      "timestamp": "2025-09-28T11:13:56.946803",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "currency_conversion"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "label_field",
              "author",
              "marketplace_info",
              "bucket",
              "region",
              "project_root_folder",
              "marketplace_id_col",
              "pipeline_version",
              "currency_conversion_dict",
              "role",
              "service_name"
            ],
            "builder": "currency_conversion"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "currency_conversion"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "label_field",
                "author",
                "marketplace_info",
                "bucket",
                "region",
                "project_root_folder",
                "marketplace_id_col",
                "pipeline_version",
                "currency_conversion_dict",
                "role",
                "service_name"
              ],
              "builder": "currency_conversion"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "job_type",
              "line_number": 74,
              "context": "line_74"
            },
            {
              "field_name": "job_type",
              "line_number": 143,
              "context": "line_143"
            },
            {
              "field_name": "job_type",
              "line_number": 149,
              "context": "line_149"
            },
            {
              "field_name": "enable_currency_conversion",
              "line_number": 152,
              "context": "line_152"
            },
            {
              "field_name": "marketplace_id_col",
              "line_number": 153,
              "context": "line_153"
            },
            {
              "field_name": "currency_conversion_var_list",
              "line_number": 157,
              "context": "line_157"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 171,
              "context": "line_171"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 170,
              "context": "line_170"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 172,
              "context": "line_172"
            },
            {
              "field_name": "processing_framework_version",
              "line_number": 176,
              "context": "line_176"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 179,
              "context": "line_179"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 180,
              "context": "line_180"
            },
            {
              "field_name": "currency_conversion_var_list",
              "line_number": 197,
              "context": "line_197"
            },
            {
              "field_name": "currency_conversion_dict",
              "line_number": 200,
              "context": "line_200"
            },
            {
              "field_name": "marketplace_info",
              "line_number": 202,
              "context": "line_202"
            },
            {
              "field_name": "label_field",
              "line_number": 203,
              "context": "line_203"
            },
            {
              "field_name": "train_ratio",
              "line_number": 204,
              "context": "line_204"
            },
            {
              "field_name": "test_val_ratio",
              "line_number": 205,
              "context": "line_205"
            },
            {
              "field_name": "job_type",
              "line_number": 306,
              "context": "line_306"
            },
            {
              "field_name": "job_type",
              "line_number": 332,
              "context": "line_332"
            },
            {
              "field_name": "mode",
              "line_number": 334,
              "context": "line_334"
            },
            {
              "field_name": "marketplace_id_col",
              "line_number": 336,
              "context": "line_336"
            },
            {
              "field_name": "default_currency",
              "line_number": 338,
              "context": "line_338"
            },
            {
              "field_name": "enable_currency_conversion",
              "line_number": 340,
              "context": "line_340"
            },
            {
              "field_name": "currency_col",
              "line_number": 344,
              "context": "line_344"
            },
            {
              "field_name": "currency_col",
              "line_number": 345,
              "context": "line_345"
            },
            {
              "field_name": "skip_invalid_currencies",
              "line_number": 349,
              "context": "line_349"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "CurrencyConversionStepBuilder",
              "line_number": 40,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 48,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 120,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_create_processor",
              "line_number": 162,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 186,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 210,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 262,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 323,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 355,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 2
            },
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 3
            },
            {
              "type": "import",
              "module": "importlib",
              "alias": null,
              "line_number": 4
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 8
            },
            {
              "type": "from_import",
              "module": "configs.config_currency_conversion_step",
              "name": "CurrencyConversionConfig",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "core.deps.registry_manager",
              "name": "RegistryManager",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "core.deps.dependency_resolver",
              "name": "UnifiedDependencyResolver",
              "alias": null,
              "line_number": 13
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_training_spec",
              "name": "CURRENCY_CONVERSION_TRAINING_SPEC",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_calibration_spec",
              "name": "CURRENCY_CONVERSION_CALIBRATION_SPEC",
              "alias": null,
              "line_number": 20
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_validation_spec",
              "name": "CURRENCY_CONVERSION_VALIDATION_SPEC",
              "alias": null,
              "line_number": 23
            },
            {
              "type": "from_import",
              "module": "specs.currency_conversion_testing_spec",
              "name": "CURRENCY_CONVERSION_TESTING_SPEC",
              "alias": null,
              "line_number": 26
            },
            {
              "type": "import",
              "module": "json",
              "alias": null,
              "line_number": 193
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 304
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "CurrencyConversionConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "job_type": {
              "type": "<class 'str'>",
              "required": false
            },
            "mode": {
              "type": "<class 'str'>",
              "required": false
            },
            "train_ratio": {
              "type": "<class 'float'>",
              "required": false
            },
            "test_val_ratio": {
              "type": "<class 'float'>",
              "required": false
            },
            "label_field": {
              "type": "<class 'str'>",
              "required": true
            },
            "marketplace_id_col": {
              "type": "<class 'str'>",
              "required": true
            },
            "currency_col": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "currency_conversion_var_list": {
              "type": "typing.List[str]",
              "required": false
            },
            "currency_conversion_dict": {
              "type": "typing.Dict[str, float]",
              "required": true
            },
            "marketplace_info": {
              "type": "typing.Dict[str, typing.Dict[str, str]]",
              "required": true
            },
            "enable_currency_conversion": {
              "type": "<class 'bool'>",
              "required": false
            },
            "default_currency": {
              "type": "<class 'str'>",
              "required": false
            },
            "skip_invalid_currencies": {
              "type": "<class 'bool'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder",
            "label_field",
            "marketplace_id_col",
            "currency_conversion_dict",
            "marketplace_info"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "job_type",
            "mode",
            "train_ratio",
            "test_val_ratio",
            "currency_col",
            "currency_conversion_var_list",
            "enable_currency_conversion",
            "default_currency",
            "skip_invalid_currencies",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "currency_conversion.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1",
            "job_type": "training",
            "mode": "per_split",
            "train_ratio": 0.7,
            "test_val_ratio": 0.5,
            "label_field": "PydanticUndefined",
            "marketplace_id_col": "PydanticUndefined",
            "currency_col": null,
            "currency_conversion_var_list": "PydanticUndefined",
            "currency_conversion_dict": "PydanticUndefined",
            "marketplace_info": "PydanticUndefined",
            "enable_currency_conversion": true,
            "default_currency": "USD",
            "skip_invalid_currencies": false
          }
        }
      },
      "severity_level": "WARNING"
    },
    "dummy_training": {
      "test_name": "builder_config_dummy_training",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.867951",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "dummy_training"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "author",
              "bucket",
              "region",
              "project_root_folder",
              "pipeline_version",
              "role",
              "service_name"
            ],
            "builder": "dummy_training"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "dummy_training"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "author",
                "bucket",
                "region",
                "project_root_folder",
                "pipeline_version",
                "role",
                "service_name"
              ],
              "builder": "dummy_training"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "processing_entry_point",
              "line_number": 87,
              "context": "line_87"
            },
            {
              "field_name": "processing_framework_version",
              "line_number": 103,
              "context": "line_103"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 106,
              "context": "line_106"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 107,
              "context": "line_107"
            },
            {
              "field_name": "processing_entry_point",
              "line_number": 239,
              "context": "line_239"
            },
            {
              "field_name": "effective_source_dir",
              "line_number": 241,
              "context": "line_241"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "DummyTrainingStepBuilder",
              "line_number": 32,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 35,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 70,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_processor",
              "line_number": 95,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 113,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 128,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 140,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 186,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 197,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 9
            },
            {
              "type": "import",
              "module": "os",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "import",
              "module": "json",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "import",
              "module": "tempfile",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "import",
              "module": "shutil",
              "alias": null,
              "line_number": 13
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 14
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 18
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 19
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 19
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 20
            },
            {
              "type": "from_import",
              "module": "sagemaker.s3",
              "name": "S3Uploader",
              "alias": null,
              "line_number": 21
            },
            {
              "type": "from_import",
              "module": "botocore.exceptions",
              "name": "ClientError",
              "alias": null,
              "line_number": 22
            },
            {
              "type": "from_import",
              "module": "configs.config_dummy_training_step",
              "name": "DummyTrainingConfig",
              "alias": null,
              "line_number": 24
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 25
            },
            {
              "type": "from_import",
              "module": "s3_utils",
              "name": "S3PathHandler",
              "alias": null,
              "line_number": 26
            },
            {
              "type": "from_import",
              "module": "specs.dummy_training_spec",
              "name": "DUMMY_TRAINING_SPEC",
              "alias": null,
              "line_number": 27
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 160
            },
            {
              "type": "import",
              "module": "traceback",
              "alias": null,
              "line_number": 269
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "DummyTrainingConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "dummy_training.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1"
          }
        }
      },
      "severity_level": "WARNING"
    },
    "model_calibration": {
      "test_name": "builder_config_model_calibration",
      "passed": true,
      "timestamp": "2025-09-28T11:13:57.999350",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "model_calibration"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "label_field",
              "author",
              "bucket",
              "region",
              "project_root_folder",
              "pipeline_version",
              "role",
              "service_name"
            ],
            "builder": "model_calibration"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "model_calibration"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "label_field",
                "author",
                "bucket",
                "region",
                "project_root_folder",
                "pipeline_version",
                "role",
                "service_name"
              ],
              "builder": "model_calibration"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "job_type",
              "line_number": 82,
              "context": "line_82"
            },
            {
              "field_name": "calibration_method",
              "line_number": 158,
              "context": "line_158"
            },
            {
              "field_name": "calibration_method",
              "line_number": 160,
              "context": "line_160"
            },
            {
              "field_name": "job_type",
              "line_number": 166,
              "context": "line_166"
            },
            {
              "field_name": "job_type",
              "line_number": 167,
              "context": "line_167"
            },
            {
              "field_name": "gam_splines",
              "line_number": 170,
              "context": "line_170"
            },
            {
              "field_name": "gam_splines",
              "line_number": 171,
              "context": "line_171"
            },
            {
              "field_name": "error_threshold",
              "line_number": 173,
              "context": "line_173"
            },
            {
              "field_name": "error_threshold",
              "line_number": 175,
              "context": "line_175"
            },
            {
              "field_name": "calibration_method",
              "line_number": 246,
              "context": "line_246"
            },
            {
              "field_name": "label_field",
              "line_number": 247,
              "context": "line_247"
            },
            {
              "field_name": "score_field",
              "line_number": 248,
              "context": "line_248"
            },
            {
              "field_name": "monotonic_constraint",
              "line_number": 249,
              "context": "line_249"
            },
            {
              "field_name": "gam_splines",
              "line_number": 250,
              "context": "line_250"
            },
            {
              "field_name": "error_threshold",
              "line_number": 251,
              "context": "line_251"
            },
            {
              "field_name": "is_binary",
              "line_number": 253,
              "context": "line_253"
            },
            {
              "field_name": "num_classes",
              "line_number": 254,
              "context": "line_254"
            },
            {
              "field_name": "score_field_prefix",
              "line_number": 255,
              "context": "line_255"
            },
            {
              "field_name": "is_binary",
              "line_number": 260,
              "context": "line_260"
            },
            {
              "field_name": "multiclass_categories",
              "line_number": 260,
              "context": "line_260"
            },
            {
              "field_name": "multiclass_categories",
              "line_number": 264,
              "context": "line_264"
            },
            {
              "field_name": "job_type",
              "line_number": 374,
              "context": "line_374"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 400,
              "context": "line_400"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 399,
              "context": "line_399"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 401,
              "context": "line_401"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 413,
              "context": "line_413"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 414,
              "context": "line_414"
            },
            {
              "field_name": "job_type",
              "line_number": 430,
              "context": "line_430"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "ModelCalibrationStepBuilder",
              "line_number": 43,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 52,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 123,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_is_pipeline_variable",
              "line_number": 180,
              "args": [
                "self",
                "value"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_detect_circular_references",
              "line_number": 194,
              "args": [
                "self",
                "var",
                "visited"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 232,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 269,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 329,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_processor",
              "line_number": 391,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 420,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 436,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 9
            },
            {
              "type": "import",
              "module": "importlib",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Union",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Set",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 14
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 14
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 16
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.entities",
              "name": "PipelineVariable",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 19
            },
            {
              "type": "from_import",
              "module": "configs.config_model_calibration_step",
              "name": "ModelCalibrationConfig",
              "alias": null,
              "line_number": 20
            },
            {
              "type": "from_import",
              "module": "specs.model_calibration_training_spec",
              "name": "MODEL_CALIBRATION_TRAINING_SPEC",
              "alias": null,
              "line_number": 24
            },
            {
              "type": "from_import",
              "module": "specs.model_calibration_calibration_spec",
              "name": "MODEL_CALIBRATION_CALIBRATION_SPEC",
              "alias": null,
              "line_number": 25
            },
            {
              "type": "from_import",
              "module": "specs.model_calibration_validation_spec",
              "name": "MODEL_CALIBRATION_VALIDATION_SPEC",
              "alias": null,
              "line_number": 28
            },
            {
              "type": "from_import",
              "module": "specs.model_calibration_testing_spec",
              "name": "MODEL_CALIBRATION_TESTING_SPEC",
              "alias": null,
              "line_number": 31
            },
            {
              "type": "import",
              "module": "json",
              "alias": null,
              "line_number": 261
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 372
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "ModelCalibrationConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "label_field": {
              "type": "<class 'str'>",
              "required": true
            },
            "calibration_method": {
              "type": "<class 'str'>",
              "required": false
            },
            "monotonic_constraint": {
              "type": "<class 'bool'>",
              "required": false
            },
            "gam_splines": {
              "type": "<class 'int'>",
              "required": false
            },
            "error_threshold": {
              "type": "<class 'float'>",
              "required": false
            },
            "is_binary": {
              "type": "<class 'bool'>",
              "required": false
            },
            "num_classes": {
              "type": "<class 'int'>",
              "required": false
            },
            "score_field": {
              "type": "<class 'str'>",
              "required": false
            },
            "score_field_prefix": {
              "type": "<class 'str'>",
              "required": false
            },
            "multiclass_categories": {
              "type": "typing.List[typing.Union[str, int]]",
              "required": false
            },
            "job_type": {
              "type": "<class 'str'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder",
            "label_field"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "calibration_method",
            "monotonic_constraint",
            "gam_splines",
            "error_threshold",
            "is_binary",
            "num_classes",
            "score_field",
            "score_field_prefix",
            "multiclass_categories",
            "job_type",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": "dockers/xgboost_atoz/scripts",
            "processing_entry_point": "model_calibration.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1",
            "label_field": "PydanticUndefined",
            "calibration_method": "gam",
            "monotonic_constraint": true,
            "gam_splines": 10,
            "error_threshold": 0.05,
            "is_binary": true,
            "num_classes": 2,
            "score_field": "prob_class_1",
            "score_field_prefix": "prob_class_",
            "multiclass_categories": "PydanticUndefined",
            "job_type": "calibration"
          }
        }
      },
      "severity_level": "WARNING"
    },
    "package": {
      "test_name": "builder_config_package",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.136647",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "package"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "author",
              "bucket",
              "region",
              "project_root_folder",
              "pipeline_version",
              "role",
              "service_name"
            ],
            "builder": "package"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "package"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "author",
                "bucket",
                "region",
                "project_root_folder",
                "pipeline_version",
                "role",
                "service_name"
              ],
              "builder": "package"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "processing_entry_point",
              "line_number": 81,
              "context": "line_81"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 115,
              "context": "line_115"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 114,
              "context": "line_114"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 116,
              "context": "line_116"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 128,
              "context": "line_128"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 129,
              "context": "line_129"
            },
            {
              "field_name": "pipeline_name",
              "line_number": 147,
              "context": "line_147"
            },
            {
              "field_name": "region",
              "line_number": 150,
              "context": "line_150"
            },
            {
              "field_name": "resolved_source_dir",
              "line_number": 195,
              "context": "line_195"
            },
            {
              "field_name": "source_dir",
              "line_number": 196,
              "context": "line_196"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "PackageStepBuilder",
              "line_number": 26,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 34,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 68,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_create_processor",
              "line_number": 103,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 135,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 165,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 286,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 347,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 358,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 2
            },
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 3
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 5
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 5
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "configs.config_package_step",
              "name": "PackageConfig",
              "alias": null,
              "line_number": 9
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "core.deps.registry_manager",
              "name": "RegistryManager",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "core.deps.dependency_resolver",
              "name": "UnifiedDependencyResolver",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "specs.package_spec",
              "name": "PACKAGE_SPEC",
              "alias": null,
              "line_number": 16
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 328
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "PackageConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "package.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1"
          }
        }
      },
      "severity_level": "WARNING"
    },
    "payload": {
      "test_name": "builder_config_payload",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.252996",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: source_model_inference_output_variable_list",
          "details": {
            "field_name": "source_model_inference_output_variable_list",
            "builder": "payload"
          },
          "recommendation": "Access required field source_model_inference_output_variable_list in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: expected_tps",
          "details": {
            "field_name": "expected_tps",
            "builder": "payload"
          },
          "recommendation": "Access required field expected_tps in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: model_owner",
          "details": {
            "field_name": "model_owner",
            "builder": "payload"
          },
          "recommendation": "Access required field model_owner in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: model_objective",
          "details": {
            "field_name": "model_objective",
            "builder": "payload"
          },
          "recommendation": "Access required field model_objective in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: model_domain",
          "details": {
            "field_name": "model_domain",
            "builder": "payload"
          },
          "recommendation": "Access required field model_domain in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "payload"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: max_latency_in_millisecond",
          "details": {
            "field_name": "max_latency_in_millisecond",
            "builder": "payload"
          },
          "recommendation": "Access required field max_latency_in_millisecond in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: source_model_inference_input_variable_list",
          "details": {
            "field_name": "source_model_inference_input_variable_list",
            "builder": "payload"
          },
          "recommendation": "Access required field source_model_inference_input_variable_list in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "author",
              "source_model_inference_output_variable_list",
              "expected_tps",
              "bucket",
              "model_owner",
              "model_objective",
              "model_domain",
              "region",
              "project_root_folder",
              "max_latency_in_millisecond",
              "pipeline_version",
              "source_model_inference_input_variable_list",
              "role",
              "service_name"
            ],
            "builder": "payload"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: source_model_inference_output_variable_list",
            "details": {
              "field_name": "source_model_inference_output_variable_list",
              "builder": "payload"
            },
            "recommendation": "Access required field source_model_inference_output_variable_list in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: expected_tps",
            "details": {
              "field_name": "expected_tps",
              "builder": "payload"
            },
            "recommendation": "Access required field expected_tps in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: model_owner",
            "details": {
              "field_name": "model_owner",
              "builder": "payload"
            },
            "recommendation": "Access required field model_owner in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: model_objective",
            "details": {
              "field_name": "model_objective",
              "builder": "payload"
            },
            "recommendation": "Access required field model_objective in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: model_domain",
            "details": {
              "field_name": "model_domain",
              "builder": "payload"
            },
            "recommendation": "Access required field model_domain in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "payload"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: max_latency_in_millisecond",
            "details": {
              "field_name": "max_latency_in_millisecond",
              "builder": "payload"
            },
            "recommendation": "Access required field max_latency_in_millisecond in builder or make it optional"
          },
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: source_model_inference_input_variable_list",
            "details": {
              "field_name": "source_model_inference_input_variable_list",
              "builder": "payload"
            },
            "recommendation": "Access required field source_model_inference_input_variable_list in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "author",
                "source_model_inference_output_variable_list",
                "expected_tps",
                "bucket",
                "model_owner",
                "model_objective",
                "model_domain",
                "region",
                "project_root_folder",
                "max_latency_in_millisecond",
                "pipeline_version",
                "source_model_inference_input_variable_list",
                "role",
                "service_name"
              ],
              "builder": "payload"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "bucket",
              "line_number": 85,
              "context": "line_85"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 120,
              "context": "line_120"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 119,
              "context": "line_119"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 121,
              "context": "line_121"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 133,
              "context": "line_133"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 134,
              "context": "line_134"
            },
            {
              "field_name": "source_model_inference_content_types",
              "line_number": 157,
              "context": "line_157"
            },
            {
              "field_name": "default_numeric_value",
              "line_number": 162,
              "context": "line_162"
            },
            {
              "field_name": "default_text_value",
              "line_number": 166,
              "context": "line_166"
            },
            {
              "field_name": "special_field_values",
              "line_number": 172,
              "context": "line_172"
            },
            {
              "field_name": "special_field_values",
              "line_number": 174,
              "context": "line_174"
            },
            {
              "field_name": "processing_script_arguments",
              "line_number": 305,
              "context": "line_305"
            },
            {
              "field_name": "processing_script_arguments",
              "line_number": 309,
              "context": "line_309"
            },
            {
              "field_name": "processing_script_arguments",
              "line_number": 311,
              "context": "line_311"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "PayloadStepBuilder",
              "line_number": 29,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 37,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 74,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_create_processor",
              "line_number": 107,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 140,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 180,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 233,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 294,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 317,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "TYPE_CHECKING",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 2
            },
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 3
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 5
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 5
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 9
            },
            {
              "type": "from_import",
              "module": "core.deps.registry_manager",
              "name": "RegistryManager",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "core.deps.dependency_resolver",
              "name": "UnifiedDependencyResolver",
              "alias": null,
              "line_number": 11
            },
            {
              "type": "from_import",
              "module": "configs.config_payload_step",
              "name": "PayloadConfig",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "specs.payload_spec",
              "name": "PAYLOAD_SPEC",
              "alias": null,
              "line_number": 19
            },
            {
              "type": "from_import",
              "module": "configs.config_payload_step",
              "name": "PayloadConfig",
              "alias": null,
              "line_number": 56
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 275
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "PayloadConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "model_owner": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_domain": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_objective": {
              "type": "<class 'str'>",
              "required": true
            },
            "source_model_inference_output_variable_list": {
              "type": "typing.Dict[str, str]",
              "required": true
            },
            "source_model_inference_input_variable_list": {
              "type": "typing.Union[typing.Dict[str, str], typing.List[typing.List[str]]]",
              "required": true
            },
            "expected_tps": {
              "type": "<class 'int'>",
              "required": true
            },
            "max_latency_in_millisecond": {
              "type": "<class 'int'>",
              "required": true
            },
            "framework": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_model_inference_content_types": {
              "type": "typing.List[str]",
              "required": false
            },
            "source_model_inference_response_types": {
              "type": "typing.List[str]",
              "required": false
            },
            "max_acceptable_error_rate": {
              "type": "<class 'float'>",
              "required": false
            },
            "default_numeric_value": {
              "type": "<class 'float'>",
              "required": false
            },
            "default_text_value": {
              "type": "<class 'str'>",
              "required": false
            },
            "special_field_values": {
              "type": "typing.Optional[typing.Dict[str, str]]",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder",
            "model_owner",
            "model_domain",
            "model_objective",
            "source_model_inference_output_variable_list",
            "source_model_inference_input_variable_list",
            "expected_tps",
            "max_latency_in_millisecond"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "framework",
            "source_model_inference_content_types",
            "source_model_inference_response_types",
            "max_acceptable_error_rate",
            "default_numeric_value",
            "default_text_value",
            "special_field_values",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "payload.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1",
            "model_owner": "PydanticUndefined",
            "model_domain": "PydanticUndefined",
            "model_objective": "PydanticUndefined",
            "source_model_inference_output_variable_list": "PydanticUndefined",
            "source_model_inference_input_variable_list": "PydanticUndefined",
            "expected_tps": "PydanticUndefined",
            "max_latency_in_millisecond": "PydanticUndefined",
            "framework": "xgboost",
            "source_model_inference_content_types": [
              "text/csv"
            ],
            "source_model_inference_response_types": [
              "application/json"
            ],
            "max_acceptable_error_rate": 0.2,
            "default_numeric_value": 0.0,
            "default_text_value": "DEFAULT_TEXT",
            "special_field_values": null
          }
        }
      },
      "severity_level": "WARNING"
    },
    "risk_table_mapping": {
      "test_name": "builder_config_risk_table_mapping",
      "passed": true,
      "timestamp": "2025-09-28T11:13:58.369275",
      "issues": [
        {
          "level": "SeverityLevel.WARNING",
          "category": "configuration_fields",
          "message": "Required configuration field not accessed in builder: project_root_folder",
          "details": {
            "field_name": "project_root_folder",
            "builder": "risk_table_mapping"
          },
          "recommendation": "Access required field project_root_folder in builder or make it optional",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        },
        {
          "level": "SeverityLevel.INFO",
          "category": "required_field_validation",
          "message": "Builder has required fields but no explicit validation logic detected",
          "details": {
            "required_fields": [
              "author",
              "bucket",
              "region",
              "project_root_folder",
              "pipeline_version",
              "role",
              "service_name"
            ],
            "builder": "risk_table_mapping"
          },
          "recommendation": "Consider adding explicit validation logic for required configuration fields",
          "alignment_level": "AlignmentLevel.BUILDER_CONFIGURATION"
        }
      ],
      "details": {
        "passed": true,
        "issues": [
          {
            "severity": "WARNING",
            "category": "configuration_fields",
            "message": "Required configuration field not accessed in builder: project_root_folder",
            "details": {
              "field_name": "project_root_folder",
              "builder": "risk_table_mapping"
            },
            "recommendation": "Access required field project_root_folder in builder or make it optional"
          },
          {
            "severity": "INFO",
            "category": "required_field_validation",
            "message": "Builder has required fields but no explicit validation logic detected",
            "details": {
              "required_fields": [
                "author",
                "bucket",
                "region",
                "project_root_folder",
                "pipeline_version",
                "role",
                "service_name"
              ],
              "builder": "risk_table_mapping"
            },
            "recommendation": "Consider adding explicit validation logic for required configuration fields"
          }
        ],
        "builder_analysis": {
          "config_accesses": [
            {
              "field_name": "job_type",
              "line_number": 79,
              "context": "line_79"
            },
            {
              "field_name": "job_type",
              "line_number": 148,
              "context": "line_148"
            },
            {
              "field_name": "job_type",
              "line_number": 154,
              "context": "line_154"
            },
            {
              "field_name": "label_name",
              "line_number": 157,
              "context": "line_157"
            },
            {
              "field_name": "job_type",
              "line_number": 161,
              "context": "line_161"
            },
            {
              "field_name": "cat_field_list",
              "line_number": 161,
              "context": "line_161"
            },
            {
              "field_name": "use_large_processing_instance",
              "line_number": 175,
              "context": "line_175"
            },
            {
              "field_name": "processing_instance_type_large",
              "line_number": 174,
              "context": "line_174"
            },
            {
              "field_name": "processing_instance_type_small",
              "line_number": 176,
              "context": "line_176"
            },
            {
              "field_name": "processing_framework_version",
              "line_number": 180,
              "context": "line_180"
            },
            {
              "field_name": "processing_instance_count",
              "line_number": 183,
              "context": "line_183"
            },
            {
              "field_name": "processing_volume_size",
              "line_number": 184,
              "context": "line_184"
            },
            {
              "field_name": "env",
              "line_number": 205,
              "context": "line_205"
            },
            {
              "field_name": "env",
              "line_number": 206,
              "context": "line_206"
            },
            {
              "field_name": "job_type",
              "line_number": 311,
              "context": "line_311"
            },
            {
              "field_name": "job_type",
              "line_number": 338,
              "context": "line_338"
            },
            {
              "field_name": "processing_entry_point",
              "line_number": 399,
              "context": "line_399"
            },
            {
              "field_name": "effective_source_dir",
              "line_number": 401,
              "context": "line_401"
            }
          ],
          "validation_calls": [],
          "default_assignments": [],
          "class_definitions": [
            {
              "class_name": "RiskTableMappingStepBuilder",
              "line_number": 44,
              "base_classes": [
                "StepBuilderBase"
              ],
              "decorators": []
            }
          ],
          "method_definitions": [
            {
              "method_name": "__init__",
              "line_number": 53,
              "args": [
                "self",
                "config",
                "sagemaker_session",
                "role",
                "registry_manager",
                "dependency_resolver"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "validate_configuration",
              "line_number": 125,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_create_processor",
              "line_number": 166,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_environment_variables",
              "line_number": 190,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_inputs",
              "line_number": 212,
              "args": [
                "self",
                "inputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_outputs",
              "line_number": 270,
              "args": [
                "self",
                "outputs"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "_get_job_arguments",
              "line_number": 328,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            },
            {
              "method_name": "create_step",
              "line_number": 344,
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false
            }
          ],
          "import_statements": [
            {
              "type": "from_import",
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "Any",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "typing",
              "name": "List",
              "alias": null,
              "line_number": 1
            },
            {
              "type": "from_import",
              "module": "pathlib",
              "name": "Path",
              "alias": null,
              "line_number": 2
            },
            {
              "type": "import",
              "module": "logging",
              "alias": null,
              "line_number": 3
            },
            {
              "type": "import",
              "module": "importlib",
              "alias": null,
              "line_number": 4
            },
            {
              "type": "import",
              "module": "tempfile",
              "alias": null,
              "line_number": 5
            },
            {
              "type": "import",
              "module": "json",
              "alias": null,
              "line_number": 6
            },
            {
              "type": "import",
              "module": "shutil",
              "alias": null,
              "line_number": 7
            },
            {
              "type": "import",
              "module": "os",
              "alias": null,
              "line_number": 8
            },
            {
              "type": "import",
              "module": "boto3",
              "alias": null,
              "line_number": 9
            },
            {
              "type": "from_import",
              "module": "botocore.exceptions",
              "name": "ClientError",
              "alias": null,
              "line_number": 10
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "ProcessingStep",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.steps",
              "name": "Step",
              "alias": null,
              "line_number": 12
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingInput",
              "alias": null,
              "line_number": 13
            },
            {
              "type": "from_import",
              "module": "sagemaker.processing",
              "name": "ProcessingOutput",
              "alias": null,
              "line_number": 13
            },
            {
              "type": "from_import",
              "module": "sagemaker.sklearn",
              "name": "SKLearnProcessor",
              "alias": null,
              "line_number": 14
            },
            {
              "type": "from_import",
              "module": "sagemaker.s3",
              "name": "S3Uploader",
              "alias": null,
              "line_number": 15
            },
            {
              "type": "from_import",
              "module": "configs.config_risk_table_mapping_step",
              "name": "RiskTableMappingConfig",
              "alias": null,
              "line_number": 17
            },
            {
              "type": "from_import",
              "module": "core.base.builder_base",
              "name": "StepBuilderBase",
              "alias": null,
              "line_number": 18
            },
            {
              "type": "from_import",
              "module": "s3_utils",
              "name": "S3PathHandler",
              "alias": null,
              "line_number": 19
            },
            {
              "type": "from_import",
              "module": "specs.risk_table_mapping_training_spec",
              "name": "RISK_TABLE_MAPPING_TRAINING_SPEC",
              "alias": null,
              "line_number": 23
            },
            {
              "type": "from_import",
              "module": "specs.risk_table_mapping_validation_spec",
              "name": "RISK_TABLE_MAPPING_VALIDATION_SPEC",
              "alias": null,
              "line_number": 26
            },
            {
              "type": "from_import",
              "module": "specs.risk_table_mapping_testing_spec",
              "name": "RISK_TABLE_MAPPING_TESTING_SPEC",
              "alias": null,
              "line_number": 29
            },
            {
              "type": "from_import",
              "module": "specs.risk_table_mapping_calibration_spec",
              "name": "RISK_TABLE_MAPPING_CALIBRATION_SPEC",
              "alias": null,
              "line_number": 30
            },
            {
              "type": "from_import",
              "module": "sagemaker.workflow.functions",
              "name": "Join",
              "alias": null,
              "line_number": 309
            },
            {
              "type": "import",
              "module": "traceback",
              "alias": null,
              "line_number": 429
            }
          ],
          "config_class_usage": []
        },
        "config_analysis": {
          "class_name": "RiskTableMappingConfig",
          "fields": {
            "author": {
              "type": "<class 'str'>",
              "required": true
            },
            "bucket": {
              "type": "<class 'str'>",
              "required": true
            },
            "role": {
              "type": "<class 'str'>",
              "required": true
            },
            "region": {
              "type": "<class 'str'>",
              "required": true
            },
            "service_name": {
              "type": "<class 'str'>",
              "required": true
            },
            "pipeline_version": {
              "type": "<class 'str'>",
              "required": true
            },
            "model_class": {
              "type": "<class 'str'>",
              "required": false
            },
            "current_date": {
              "type": "<class 'str'>",
              "required": false
            },
            "framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "py_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "project_root_folder": {
              "type": "<class 'str'>",
              "required": true
            },
            "processing_instance_count": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_volume_size": {
              "type": "<class 'int'>",
              "required": false
            },
            "processing_instance_type_large": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_instance_type_small": {
              "type": "<class 'str'>",
              "required": false
            },
            "use_large_processing_instance": {
              "type": "<class 'bool'>",
              "required": false
            },
            "processing_source_dir": {
              "type": "typing.Optional[str]",
              "required": false
            },
            "processing_entry_point": {
              "type": "<class 'str'>",
              "required": false
            },
            "processing_script_arguments": {
              "type": "typing.Optional[typing.List[str]]",
              "required": false
            },
            "processing_framework_version": {
              "type": "<class 'str'>",
              "required": false
            },
            "job_type": {
              "type": "<class 'str'>",
              "required": false
            },
            "cat_field_list": {
              "type": "typing.List[str]",
              "required": false
            },
            "label_name": {
              "type": "<class 'str'>",
              "required": false
            },
            "smooth_factor": {
              "type": "<class 'float'>",
              "required": false
            },
            "count_threshold": {
              "type": "<class 'int'>",
              "required": false
            },
            "aws_region": {
              "type": "property",
              "required": false
            },
            "effective_instance_type": {
              "type": "property",
              "required": false
            },
            "effective_source_dir": {
              "type": "property",
              "required": false
            },
            "model_extra": {
              "type": "property",
              "required": false
            },
            "model_fields_set": {
              "type": "property",
              "required": false
            },
            "pipeline_description": {
              "type": "property",
              "required": false
            },
            "pipeline_name": {
              "type": "property",
              "required": false
            },
            "pipeline_s3_loc": {
              "type": "property",
              "required": false
            },
            "resolved_processing_source_dir": {
              "type": "property",
              "required": false
            },
            "resolved_source_dir": {
              "type": "property",
              "required": false
            },
            "script_contract": {
              "type": "property",
              "required": false
            },
            "script_path": {
              "type": "property",
              "required": false
            },
            "step_catalog": {
              "type": "property",
              "required": false
            }
          },
          "required_fields": [
            "author",
            "bucket",
            "role",
            "region",
            "service_name",
            "pipeline_version",
            "project_root_folder"
          ],
          "optional_fields": [
            "model_class",
            "current_date",
            "framework_version",
            "py_version",
            "source_dir",
            "processing_instance_count",
            "processing_volume_size",
            "processing_instance_type_large",
            "processing_instance_type_small",
            "use_large_processing_instance",
            "processing_source_dir",
            "processing_entry_point",
            "processing_script_arguments",
            "processing_framework_version",
            "job_type",
            "cat_field_list",
            "label_name",
            "smooth_factor",
            "count_threshold",
            "aws_region",
            "effective_instance_type",
            "effective_source_dir",
            "model_extra",
            "model_fields_set",
            "pipeline_description",
            "pipeline_name",
            "pipeline_s3_loc",
            "resolved_processing_source_dir",
            "resolved_source_dir",
            "script_contract",
            "script_path",
            "step_catalog"
          ],
          "default_values": {
            "author": "PydanticUndefined",
            "bucket": "PydanticUndefined",
            "role": "PydanticUndefined",
            "region": "PydanticUndefined",
            "service_name": "PydanticUndefined",
            "pipeline_version": "PydanticUndefined",
            "model_class": "xgboost",
            "current_date": "PydanticUndefined",
            "framework_version": "2.1.0",
            "py_version": "py310",
            "source_dir": null,
            "project_root_folder": "PydanticUndefined",
            "processing_instance_count": 1,
            "processing_volume_size": 500,
            "processing_instance_type_large": "ml.m5.4xlarge",
            "processing_instance_type_small": "ml.m5.2xlarge",
            "use_large_processing_instance": false,
            "processing_source_dir": null,
            "processing_entry_point": "risk_table_mapping.py",
            "processing_script_arguments": null,
            "processing_framework_version": "1.2-1",
            "job_type": "training",
            "cat_field_list": [],
            "label_name": "target",
            "smooth_factor": 0.01,
            "count_threshold": 5
          }
        }
      },
      "severity_level": "WARNING"
    }
  },
  "recommendations": [],
  "metadata": {}
}