{
  "script_name": "dummy_training",
  "level1": {
    "passed": true,
    "issues": [
      {
        "severity": "INFO",
        "category": "testability_compliance",
        "message": "Main function follows testability pattern with all required parameters",
        "details": {
          "script": "dummy_training",
          "testability_parameters": [
            "input_paths",
            "environ_vars",
            "output_paths",
            "job_args"
          ]
        },
        "recommendation": "No action needed - script follows testability best practices"
      },
      {
        "severity": "WARNING",
        "category": "testability_entry_point",
        "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
        "details": {
          "script": "dummy_training"
        },
        "recommendation": "Add environment variable collection in __main__ block to pass to main function"
      },
      {
        "severity": "WARNING",
        "category": "testability_parameter_usage",
        "message": "Testability parameters defined but not used: environ_vars, job_args",
        "details": {
          "script": "dummy_training",
          "unused_parameters": [
            "environ_vars",
            "job_args"
          ],
          "used_parameters": [
            "input_paths",
            "output_paths"
          ]
        },
        "recommendation": "Either use the testability parameters or remove them from function signature"
      },
      {
        "severity": "INFO",
        "category": "testability_parameter_access",
        "message": "Consider using dictionary-style access for input_paths",
        "details": {
          "script": "dummy_training",
          "parameter": "input_paths",
          "current_pattern": "input_paths.get",
          "line_number": 234
        },
        "recommendation": "Use input_paths['key'] for accessing nested values"
      },
      {
        "severity": "INFO",
        "category": "testability_container_support",
        "message": "No container detection found - consider adding hybrid mode support",
        "details": {
          "script": "dummy_training"
        },
        "recommendation": "Add container detection to support both local and container execution"
      }
    ],
    "script_analysis": {
      "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/dummy_training.py",
      "path_references": [
        "path='\\nDummyTraining Processing Script\\n\\nThis script validates, unpacks a pretrained model.tar.gz file, adds a hyperparameters.json file \\ninside it, then repacks it and outputs to the destination. It serves as a dummy training step \\nthat skips actual training and integrates with downstream MIMS packaging and payload steps.\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"\\nDummyTraining Processing Script\\n' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/input/model/model.tar.gz' line_number=35 context='# - hyperparameters_s3_uri: \"/opt/ml/processing/input/config/hyperparameters.json\"\\n# - model_input: \"/opt/ml/processing/output/model\" (aligns with packaging step dependency)\\n>>> MODEL_INPUT_PATH = \"/opt/ml/processing/input/model/model.tar.gz\"\\nHYPERPARAMS_INPUT_PATH = \"/opt/ml/processing/input/config/hyperparameters.json\"\\nMODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/input/config/hyperparameters.json' line_number=36 context='# - model_input: \"/opt/ml/processing/output/model\" (aligns with packaging step dependency)\\nMODEL_INPUT_PATH = \"/opt/ml/processing/input/model/model.tar.gz\"\\n>>> HYPERPARAMS_INPUT_PATH = \"/opt/ml/processing/input/config/hyperparameters.json\"\\nMODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"\\n' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/output/model' line_number=37 context='MODEL_INPUT_PATH = \"/opt/ml/processing/input/model/model.tar.gz\"\\nHYPERPARAMS_INPUT_PATH = \"/opt/ml/processing/input/config/hyperparameters.json\"\\n>>> MODEL_OUTPUT_DIR = \"/opt/ml/processing/output/model\"\\n\\ndef validate_model(input_path: Path) -> bool:' is_hardcoded=True construction_method=None",
        "path='.tar.gz' line_number=56 context='    \\n    # Check file extension\\n>>>     if not input_path.suffix == \\'.tar.gz\\' and not str(input_path).endswith(\\'.tar.gz\\'):\\n        raise ValueError(f\"Expected a .tar.gz file, but got: {input_path} (ERROR_CODE: INVALID_FORMAT)\")\\n    ' is_hardcoded=True construction_method=None",
        "path='.tar.gz' line_number=56 context='    \\n    # Check file extension\\n>>>     if not input_path.suffix == \\'.tar.gz\\' and not str(input_path).endswith(\\'.tar.gz\\'):\\n        raise ValueError(f\"Expected a .tar.gz file, but got: {input_path} (ERROR_CODE: INVALID_FORMAT)\")\\n    ' is_hardcoded=True construction_method=None",
        "path='Ensure a directory exists, creating it if necessary.' line_number=72 context='\\ndef ensure_directory(directory: Path):\\n>>>     \"\"\"Ensure a directory exists, creating it if necessary.\"\"\"\\n    try:\\n        directory.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
        "path='Extract a tar file to the specified path.' line_number=82 context='\\ndef extract_tarfile(tar_path: Path, extract_path: Path):\\n>>>     \"\"\"Extract a tar file to the specified path.\"\"\"\\n    logger.info(f\"Extracting tar file: {tar_path} to {extract_path}\")\\n    ' is_hardcoded=True construction_method=None",
        "path='.2f' line_number=97 context='                size_mb = member.size / 1024 / 1024\\n                total_size += size_mb\\n>>>                 logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n            logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n            ' is_hardcoded=True construction_method=None",
        "path='.2f' line_number=98 context='                total_size += size_mb\\n                logger.info(f\"  {member.name} ({size_mb:.2f}MB)\")\\n>>>             logger.info(f\"Total size in tar: {total_size:.2f}MB\")\\n            \\n            logger.info(f\"Extracting to: {extract_path}\")' is_hardcoded=True construction_method=None",
        "path='Create a tar file from the contents of a directory.' line_number=110 context='\\ndef create_tarfile(output_tar_path: Path, source_dir: Path):\\n>>>     \"\"\"Create a tar file from the contents of a directory.\"\"\"\\n    logger.info(f\"Creating tar file: {output_tar_path} from {source_dir}\")\\n    ' is_hardcoded=True construction_method=None",
        "path='.2f' line_number=126 context='                    total_size += size_mb\\n                    files_added += 1\\n>>>                     logger.info(f\"Adding to tar: {arcname} ({size_mb:.2f}MB)\")\\n                    tar.add(item, arcname=arcname)\\n        ' is_hardcoded=True construction_method=None",
        "path='.2f' line_number=131 context='        logger.info(f\"Tar creation summary:\")\\n        logger.info(f\"  Files added: {files_added}\")\\n>>>         logger.info(f\"  Total uncompressed size: {total_size:.2f}MB\")\\n        \\n        if output_tar_path.exists():' is_hardcoded=True construction_method=None",
        "path='.2f' line_number=135 context='        if output_tar_path.exists():\\n            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n>>>             logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n            logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n        ' is_hardcoded=True construction_method=None",
        "path='.2%' line_number=136 context='            compressed_size = output_tar_path.stat().st_size / 1024 / 1024\\n            logger.info(f\"  Compressed tar size: {compressed_size:.2f}MB\")\\n>>>             logger.info(f\"  Compression ratio: {compressed_size/total_size:.2%}\")\\n        \\n    except Exception as e:' is_hardcoded=True construction_method=None",
        "path='Copy a file and ensure the destination directory exists.' line_number=143 context='\\ndef copy_file(src: Path, dst: Path):\\n>>>     \"\"\"Copy a file and ensure the destination directory exists.\"\"\"\\n    logger.info(f\"Copying file: {src} to {dst}\")\\n    ' is_hardcoded=True construction_method=None",
        "path='hyperparameters.json' line_number=195 context='        \\n        # Copy hyperparameters.json to the working directory\\n>>>         hyperparams_dest = working_dir / \"hyperparameters.json\"\\n        copy_file(hyperparams_path, hyperparams_dest)\\n        ' is_hardcoded=True construction_method=None",
        "path='model.tar.gz' line_number=202 context='        \\n        # Create the output model.tar.gz\\n>>>         output_path = output_dir / \"model.tar.gz\"\\n        create_tarfile(output_path, working_dir)\\n        ' is_hardcoded=True construction_method=None",
        "path='No hyperparameters file found. Falling back to simple copy mode.' line_number=249 context='        else:\\n            # For backward compatibility: just validate and copy the model\\n>>>             logger.info(\"No hyperparameters file found. Falling back to simple copy mode.\")\\n            validate_model(model_path)\\n            output_path = output_dir / \"model.tar.gz\"' is_hardcoded=True construction_method=None",
        "path='model.tar.gz' line_number=251 context='            logger.info(\"No hyperparameters file found. Falling back to simple copy mode.\")\\n            validate_model(model_path)\\n>>>             output_path = output_dir / \"model.tar.gz\"\\n            ensure_directory(output_dir)\\n            copy_file(model_path, output_path)' is_hardcoded=True construction_method=None"
      ],
      "env_var_accesses": [],
      "imports": [
        "module_name='argparse' import_alias=None line_number=10 is_from_import=False imported_items=[]",
        "module_name='json' import_alias=None line_number=11 is_from_import=False imported_items=[]",
        "module_name='logging' import_alias=None line_number=12 is_from_import=False imported_items=[]",
        "module_name='os' import_alias=None line_number=13 is_from_import=False imported_items=[]",
        "module_name='shutil' import_alias=None line_number=14 is_from_import=False imported_items=[]",
        "module_name='sys' import_alias=None line_number=15 is_from_import=False imported_items=[]",
        "module_name='tarfile' import_alias=None line_number=16 is_from_import=False imported_items=[]",
        "module_name='tempfile' import_alias=None line_number=17 is_from_import=False imported_items=[]",
        "module_name='traceback' import_alias=None line_number=18 is_from_import=False imported_items=[]",
        "module_name='pathlib' import_alias=None line_number=19 is_from_import=True imported_items=['Path']",
        "module_name='typing' import_alias=None line_number=20 is_from_import=True imported_items=['Dict', 'Optional']",
        "module_name='traceback' import_alias=None line_number=269 is_from_import=False imported_items=[]"
      ],
      "argument_definitions": [],
      "file_operations": [],
      "step_type": "Processing",
      "framework": null,
      "step_type_patterns": {}
    },
    "contract": {
      "entry_point": "dummy_training.py",
      "inputs": {
        "pretrained_model_path": {
          "path": "/opt/ml/processing/input/model/model.tar.gz"
        },
        "hyperparameters_s3_uri": {
          "path": "/opt/ml/processing/input/config/hyperparameters.json"
        }
      },
      "outputs": {
        "model_input": {
          "path": "/opt/ml/processing/output/model"
        }
      },
      "arguments": {},
      "environment_variables": {
        "required": [],
        "optional": {}
      },
      "description": "Contract for dummy training step that processes a pretrained model.tar.gz by unpacking it, adding a hyperparameters.json file inside, and repacking it for downstream steps",
      "framework_requirements": {
        "boto3": ">=1.26.0",
        "pathlib": ">=1.0.0"
      }
    }
  },
  "level2": {
    "passed": true,
    "issues": [
      {
        "severity": "INFO",
        "category": "step_type_resolution",
        "message": "Step type resolved via registry: DummyTraining -> DummyTraining -> Processing",
        "details": {
          "contract": "dummy_training_contract",
          "original_spec_type": "DummyTraining",
          "canonical_name": "DummyTraining",
          "resolved_sagemaker_type": "Processing",
          "registry_available": true
        },
        "recommendation": "Using Processing step property paths for validation"
      },
      {
        "severity": "INFO",
        "category": "property_path_validation",
        "message": "Valid property path in output model_input: properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
        "details": {
          "contract": "dummy_training_contract",
          "logical_name": "model_input",
          "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
          "step_type": "processing",
          "validation_source": "SageMaker Documentation v2.92.2",
          "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
        },
        "recommendation": "Property path is correctly formatted for the step type"
      },
      {
        "severity": "INFO",
        "category": "property_path_validation_summary",
        "message": "Property path validation completed for dummy_training_contract",
        "details": {
          "contract": "dummy_training_contract",
          "step_type": "processing",
          "node_type": "internal",
          "total_outputs": 1,
          "outputs_with_property_paths": 1,
          "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
          "documentation_version": "v2.92.2"
        },
        "recommendation": "Validated 1/1 outputs with property paths against SageMaker documentation"
      }
    ],
    "contract": {
      "entry_point": "dummy_training.py",
      "inputs": {
        "pretrained_model_path": {
          "path": "/opt/ml/processing/input/model/model.tar.gz"
        },
        "hyperparameters_s3_uri": {
          "path": "/opt/ml/processing/input/config/hyperparameters.json"
        }
      },
      "outputs": {
        "model_input": {
          "path": "/opt/ml/processing/output/model"
        }
      },
      "arguments": {},
      "environment_variables": {
        "required": [],
        "optional": {}
      },
      "description": "Contract for dummy training step that processes a pretrained model.tar.gz by unpacking it, adding a hyperparameters.json file inside, and repacking it for downstream steps",
      "framework_requirements": {
        "boto3": ">=1.26.0",
        "pathlib": ">=1.0.0"
      }
    },
    "specifications": {
      "dummy_training_spec": {
        "step_type": "DummyTraining",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "pretrained_model_path",
            "dependency_type": "processing_output",
            "required": false,
            "compatible_sources": [
              "XGBoostTraining",
              "ProcessingStep",
              "TabularPreprocessing",
              "PytorchTraining"
            ],
            "data_type": "S3Uri",
            "description": "Optional pretrained model path. If not provided, step uploads local model file from config."
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "HyperparameterPrep",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Optional hyperparameters file. If not provided, step generates hyperparameters from config."
          }
        ],
        "outputs": [
          {
            "logical_name": "model_input",
            "output_type": "model_artifacts",
            "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "S3 path to model artifacts with integrated hyperparameters"
          }
        ]
      }
    },
    "unified_specification": {
      "primary_spec": {
        "step_type": "DummyTraining",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "pretrained_model_path",
            "dependency_type": "processing_output",
            "required": false,
            "compatible_sources": [
              "XGBoostTraining",
              "ProcessingStep",
              "TabularPreprocessing",
              "PytorchTraining"
            ],
            "data_type": "S3Uri",
            "description": "Optional pretrained model path. If not provided, step uploads local model file from config."
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "HyperparameterPrep",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Optional hyperparameters file. If not provided, step generates hyperparameters from config."
          }
        ],
        "outputs": [
          {
            "logical_name": "model_input",
            "output_type": "model_artifacts",
            "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "S3 path to model artifacts with integrated hyperparameters"
          }
        ]
      },
      "variants": {
        "training": {
          "step_type": "DummyTraining",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "pretrained_model_path",
              "dependency_type": "processing_output",
              "required": false,
              "compatible_sources": [
                "XGBoostTraining",
                "ProcessingStep",
                "TabularPreprocessing",
                "PytorchTraining"
              ],
              "data_type": "S3Uri",
              "description": "Optional pretrained model path. If not provided, step uploads local model file from config."
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "HyperparameterPrep",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Optional hyperparameters file. If not provided, step generates hyperparameters from config."
            }
          ],
          "outputs": [
            {
              "logical_name": "model_input",
              "output_type": "model_artifacts",
              "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "S3 path to model artifacts with integrated hyperparameters"
            }
          ]
        }
      },
      "unified_dependencies": {
        "pretrained_model_path": {
          "logical_name": "pretrained_model_path",
          "dependency_type": "processing_output",
          "required": false,
          "compatible_sources": [
            "XGBoostTraining",
            "ProcessingStep",
            "TabularPreprocessing",
            "PytorchTraining"
          ],
          "data_type": "S3Uri",
          "description": "Optional pretrained model path. If not provided, step uploads local model file from config."
        },
        "hyperparameters_s3_uri": {
          "logical_name": "hyperparameters_s3_uri",
          "dependency_type": "hyperparameters",
          "required": false,
          "compatible_sources": [
            "HyperparameterPrep",
            "ProcessingStep"
          ],
          "data_type": "S3Uri",
          "description": "Optional hyperparameters file. If not provided, step generates hyperparameters from config."
        }
      },
      "unified_outputs": {
        "model_input": {
          "logical_name": "model_input",
          "output_type": "model_artifacts",
          "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "S3 path to model artifacts with integrated hyperparameters"
        }
      },
      "dependency_sources": {
        "pretrained_model_path": [
          "training"
        ],
        "hyperparameters_s3_uri": [
          "training"
        ]
      },
      "output_sources": {
        "model_input": [
          "training"
        ]
      },
      "variant_count": 1
    }
  },
  "level3": {
    "passed": true,
    "issues": [
      {
        "severity": "WARNING",
        "category": "dependency_compatibility",
        "message": "Dependency hyperparameters_s3_uri has low compatibility score: 0.420",
        "details": {
          "logical_name": "hyperparameters_s3_uri",
          "specification": "dummy_training",
          "best_match": {
            "provider": "BatchTransform",
            "output": "transform_output",
            "score": 0.4197368421052632
          },
          "required": false,
          "threshold_info": {
            "mode": "relaxed",
            "thresholds": {
              "pass": "\u2265 0.6",
              "warning": "0.4 - 0.59",
              "error": "0.2 - 0.39",
              "critical": "< 0.2"
            },
            "resolution_threshold": 0.5,
            "description": "Relaxed validation allowing reasonable compatibility matches"
          },
          "score_breakdown": {
            "type_compatibility": 0.2,
            "data_type_compatibility": 0.2,
            "semantic_similarity": 0.019736842105263157,
            "exact_match_bonus": 0.0,
            "source_compatibility": 0.0,
            "keyword_matching": 0.0
          },
          "all_candidates": [
            {
              "provider": "BatchTransform",
              "output": "transform_output",
              "score": 0.4197368421052632
            },
            {
              "provider": "PyTorchModel",
              "output": "model_name",
              "score": 0.31875000000000003
            },
            {
              "provider": "XGBoostModel",
              "output": "model_name",
              "score": 0.31875000000000003
            }
          ]
        },
        "recommendation": "Consider renaming 'hyperparameters_s3_uri' or adding aliases to improve semantic matching; Add 'BatchTransform' to compatible_sources for hyperparameters_s3_uri"
      }
    ],
    "specification": {
      "step_type": "DummyTraining",
      "node_type": "internal",
      "dependencies": [
        {
          "logical_name": "pretrained_model_path",
          "dependency_type": "processing_output",
          "required": false,
          "compatible_sources": [
            "XGBoostTraining",
            "ProcessingStep",
            "TabularPreprocessing",
            "PytorchTraining"
          ],
          "data_type": "S3Uri",
          "description": "Optional pretrained model path. If not provided, step uploads local model file from config."
        },
        {
          "logical_name": "hyperparameters_s3_uri",
          "dependency_type": "hyperparameters",
          "required": false,
          "compatible_sources": [
            "HyperparameterPrep",
            "ProcessingStep"
          ],
          "data_type": "S3Uri",
          "description": "Optional hyperparameters file. If not provided, step generates hyperparameters from config."
        }
      ],
      "outputs": [
        {
          "logical_name": "model_input",
          "output_type": "model_artifacts",
          "property_path": "properties.ProcessingOutputConfig.Outputs['model_input'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "S3 path to model artifacts with integrated hyperparameters"
        }
      ]
    }
  },
  "level4": {
    "passed": true,
    "issues": [
      {
        "severity": "INFO",
        "category": "required_field_validation",
        "message": "Builder has required fields but no explicit validation logic detected",
        "details": {
          "required_fields": [
            "pipeline_version",
            "author",
            "role",
            "bucket",
            "service_name",
            "region"
          ],
          "builder": "dummy_training"
        },
        "recommendation": "Consider adding explicit validation logic for required configuration fields"
      }
    ],
    "builder_analysis": {
      "config_accesses": [
        {
          "field_name": "pretrained_model_path",
          "line_number": 83,
          "context": "line_83"
        },
        {
          "field_name": "pretrained_model_path",
          "line_number": 87,
          "context": "line_87"
        },
        {
          "field_name": "pretrained_model_path",
          "line_number": 88,
          "context": "line_88"
        },
        {
          "field_name": "hyperparameters",
          "line_number": 97,
          "context": "line_97"
        },
        {
          "field_name": "pretrained_model_path",
          "line_number": 188,
          "context": "line_188"
        },
        {
          "field_name": "pipeline_s3_loc",
          "line_number": 191,
          "context": "line_191"
        },
        {
          "field_name": "pretrained_model_path",
          "line_number": 197,
          "context": "line_197"
        },
        {
          "field_name": "hyperparameters",
          "line_number": 221,
          "context": "line_221"
        },
        {
          "field_name": "hyperparameters_s3_uri",
          "line_number": 232,
          "context": "line_232"
        },
        {
          "field_name": "bucket",
          "line_number": 235,
          "context": "line_235"
        },
        {
          "field_name": "pipeline_name",
          "line_number": 236,
          "context": "line_236"
        },
        {
          "field_name": "processing_framework_version",
          "line_number": 290,
          "context": "line_290"
        },
        {
          "field_name": "processing_instance_count",
          "line_number": 293,
          "context": "line_293"
        },
        {
          "field_name": "processing_volume_size",
          "line_number": 294,
          "context": "line_294"
        },
        {
          "field_name": "pipeline_s3_loc",
          "line_number": 406,
          "context": "line_406"
        }
      ],
      "validation_calls": [],
      "default_assignments": [],
      "class_definitions": [
        {
          "class_name": "DummyTrainingStepBuilder",
          "line_number": 33,
          "base_classes": [
            "StepBuilderBase"
          ],
          "decorators": [
            "Call"
          ]
        }
      ],
      "method_definitions": [
        {
          "method_name": "__init__",
          "line_number": 36,
          "args": [
            "self",
            "config",
            "sagemaker_session",
            "role",
            "notebook_root",
            "registry_manager",
            "dependency_resolver"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "validate_configuration",
          "line_number": 72,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_normalize_s3_uri",
          "line_number": 102,
          "args": [
            "self",
            "uri",
            "description"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_validate_s3_uri",
          "line_number": 130,
          "args": [
            "self",
            "uri",
            "description"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_s3_directory_path",
          "line_number": 154,
          "args": [
            "self",
            "uri",
            "filename"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_upload_model_to_s3",
          "line_number": 178,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_prepare_hyperparameters_file",
          "line_number": 210,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_processor",
          "line_number": 282,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_environment_variables",
          "line_number": 300,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_inputs",
          "line_number": 315,
          "args": [
            "self",
            "inputs"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_outputs",
          "line_number": 386,
          "args": [
            "self",
            "outputs"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_job_arguments",
          "line_number": 426,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "create_step",
          "line_number": 437,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        }
      ],
      "import_statements": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line_number": 9
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line_number": 10
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line_number": 11
        },
        {
          "type": "import",
          "module": "tempfile",
          "alias": null,
          "line_number": 12
        },
        {
          "type": "import",
          "module": "shutil",
          "alias": null,
          "line_number": 13
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line_number": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line_number": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line_number": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line_number": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line_number": 15
        },
        {
          "type": "from_import",
          "module": "sagemaker.processing",
          "name": "ProcessingInput",
          "alias": null,
          "line_number": 17
        },
        {
          "type": "from_import",
          "module": "sagemaker.processing",
          "name": "ProcessingOutput",
          "alias": null,
          "line_number": 17
        },
        {
          "type": "from_import",
          "module": "sagemaker.sklearn",
          "name": "SKLearnProcessor",
          "alias": null,
          "line_number": 18
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.steps",
          "name": "ProcessingStep",
          "alias": null,
          "line_number": 19
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.steps",
          "name": "Step",
          "alias": null,
          "line_number": 19
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.functions",
          "name": "Join",
          "alias": null,
          "line_number": 20
        },
        {
          "type": "from_import",
          "module": "sagemaker.s3",
          "name": "S3Uploader",
          "alias": null,
          "line_number": 21
        },
        {
          "type": "from_import",
          "module": "botocore.exceptions",
          "name": "ClientError",
          "alias": null,
          "line_number": 22
        },
        {
          "type": "from_import",
          "module": "configs.config_dummy_training_step",
          "name": "DummyTrainingConfig",
          "alias": null,
          "line_number": 24
        },
        {
          "type": "from_import",
          "module": "core.base.builder_base",
          "name": "StepBuilderBase",
          "alias": null,
          "line_number": 25
        },
        {
          "type": "from_import",
          "module": "s3_utils",
          "name": "S3PathHandler",
          "alias": null,
          "line_number": 26
        },
        {
          "type": "from_import",
          "module": "specs.dummy_training_spec",
          "name": "DUMMY_TRAINING_SPEC",
          "alias": null,
          "line_number": 27
        },
        {
          "type": "from_import",
          "module": "registry.builder_registry",
          "name": "register_builder",
          "alias": null,
          "line_number": 28
        },
        {
          "type": "import",
          "module": "traceback",
          "alias": null,
          "line_number": 206
        },
        {
          "type": "import",
          "module": "traceback",
          "alias": null,
          "line_number": 506
        }
      ],
      "config_class_usage": []
    },
    "config_analysis": {
      "class_name": "DummyTrainingConfig",
      "fields": {
        "author": {
          "type": "<class 'str'>",
          "required": true
        },
        "bucket": {
          "type": "<class 'str'>",
          "required": true
        },
        "role": {
          "type": "<class 'str'>",
          "required": true
        },
        "region": {
          "type": "<class 'str'>",
          "required": true
        },
        "service_name": {
          "type": "<class 'str'>",
          "required": true
        },
        "pipeline_version": {
          "type": "<class 'str'>",
          "required": true
        },
        "model_class": {
          "type": "<class 'str'>",
          "required": false
        },
        "current_date": {
          "type": "<class 'str'>",
          "required": false
        },
        "framework_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "py_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "source_dir": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "processing_instance_count": {
          "type": "<class 'int'>",
          "required": false
        },
        "processing_volume_size": {
          "type": "<class 'int'>",
          "required": false
        },
        "processing_instance_type_large": {
          "type": "<class 'str'>",
          "required": false
        },
        "processing_instance_type_small": {
          "type": "<class 'str'>",
          "required": false
        },
        "use_large_processing_instance": {
          "type": "<class 'bool'>",
          "required": false
        },
        "processing_source_dir": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "processing_entry_point": {
          "type": "<class 'str'>",
          "required": false
        },
        "processing_script_arguments": {
          "type": "typing.Optional[typing.List[str]]",
          "required": false
        },
        "processing_framework_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "pretrained_model_path": {
          "type": "<class 'str'>",
          "required": false
        },
        "hyperparameters": {
          "type": "<class 'cursus.core.base.hyperparameters_base.ModelHyperparameters'>",
          "required": false
        },
        "hyperparameters_s3_uri": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "aws_region": {
          "type": "property",
          "required": false
        },
        "effective_instance_type": {
          "type": "property",
          "required": false
        },
        "effective_source_dir": {
          "type": "property",
          "required": false
        },
        "model_extra": {
          "type": "property",
          "required": false
        },
        "model_fields_set": {
          "type": "property",
          "required": false
        },
        "pipeline_description": {
          "type": "property",
          "required": false
        },
        "pipeline_name": {
          "type": "property",
          "required": false
        },
        "pipeline_s3_loc": {
          "type": "property",
          "required": false
        },
        "script_contract": {
          "type": "property",
          "required": false
        },
        "script_path": {
          "type": "property",
          "required": false
        }
      },
      "required_fields": [
        "author",
        "bucket",
        "role",
        "region",
        "service_name",
        "pipeline_version"
      ],
      "optional_fields": [
        "model_class",
        "current_date",
        "framework_version",
        "py_version",
        "source_dir",
        "processing_instance_count",
        "processing_volume_size",
        "processing_instance_type_large",
        "processing_instance_type_small",
        "use_large_processing_instance",
        "processing_source_dir",
        "processing_entry_point",
        "processing_script_arguments",
        "processing_framework_version",
        "pretrained_model_path",
        "hyperparameters",
        "hyperparameters_s3_uri",
        "aws_region",
        "effective_instance_type",
        "effective_source_dir",
        "model_extra",
        "model_fields_set",
        "pipeline_description",
        "pipeline_name",
        "pipeline_s3_loc",
        "script_contract",
        "script_path"
      ],
      "default_values": {
        "author": "PydanticUndefined",
        "bucket": "PydanticUndefined",
        "role": "PydanticUndefined",
        "region": "PydanticUndefined",
        "service_name": "PydanticUndefined",
        "pipeline_version": "PydanticUndefined",
        "model_class": "xgboost",
        "current_date": "PydanticUndefined",
        "framework_version": "2.1.0",
        "py_version": "py310",
        "source_dir": null,
        "processing_instance_count": 1,
        "processing_volume_size": 500,
        "processing_instance_type_large": "ml.m5.4xlarge",
        "processing_instance_type_small": "ml.m5.2xlarge",
        "use_large_processing_instance": false,
        "processing_source_dir": null,
        "processing_entry_point": "dummy_training.py",
        "processing_script_arguments": null,
        "processing_framework_version": "1.2-1",
        "pretrained_model_path": "",
        "hyperparameters": "PydanticUndefined",
        "hyperparameters_s3_uri": null
      }
    }
  },
  "overall_status": "PASSING",
  "metadata": {
    "script_name": "dummy_training",
    "validation_timestamp": "2025-09-07T19:43:23.361443",
    "validator_version": "1.0.0",
    "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/dummy_training.py"
  }
}