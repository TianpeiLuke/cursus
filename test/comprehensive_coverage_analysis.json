{
  "timestamp": "2025-10-04 11:11:16",
  "coverage_analysis": {
    "api": {
      "component": "api",
      "description": "DAG and pipeline API components",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "api/dag/edge_types.py",
        "api/dag/pipeline_dag_resolver.py",
        "api/dag/workspace_dag.py",
        "api/dag/enhanced_dag.py",
        "api/dag/base_dag.py"
      ],
      "test_files": [
        "api/dag/test_base_dag.py",
        "api/dag/test_pipeline_dag_resolver.py",
        "api/dag/test_edge_types.py"
      ],
      "total_source_functions": 246,
      "tested_functions": 93,
      "untested_functions": 153,
      "coverage_percentage": 37.80487804878049,
      "total_source_lines": 2080,
      "total_test_lines": 1225,
      "test_to_source_ratio": 0.8252032520325203,
      "source_functions_by_file": {
        "api/dag/edge_types.py": [
          "DependencyEdge.to_property_reference_dict",
          "to_property_reference_dict",
          "DependencyEdge.is_high_confidence",
          "is_high_confidence",
          "DependencyEdge.is_auto_resolved",
          "is_auto_resolved",
          "DependencyEdge.__str__",
          "__str__",
          "DependencyEdge.__repr__",
          "__repr__",
          "ConditionalEdge.validate_condition",
          "validate_condition",
          "EdgeCollection.__init__",
          "__init__",
          "EdgeCollection.add_edge",
          "add_edge",
          "EdgeCollection.remove_edge",
          "remove_edge",
          "EdgeCollection.get_edges_from_step",
          "get_edges_from_step",
          "EdgeCollection.get_edges_to_step",
          "get_edges_to_step",
          "EdgeCollection.get_edge",
          "get_edge",
          "EdgeCollection.list_all_edges",
          "list_all_edges",
          "EdgeCollection.list_auto_resolved_edges",
          "list_auto_resolved_edges",
          "EdgeCollection.list_high_confidence_edges",
          "list_high_confidence_edges",
          "EdgeCollection.list_low_confidence_edges",
          "list_low_confidence_edges",
          "EdgeCollection.get_step_dependencies",
          "get_step_dependencies",
          "EdgeCollection.validate_edges",
          "validate_edges",
          "EdgeCollection.get_statistics",
          "get_statistics",
          "EdgeCollection.__len__",
          "__len__",
          "EdgeCollection.__iter__",
          "__iter__",
          "EdgeCollection.__contains__",
          "__contains__",
          "to_property_reference_dict",
          "is_high_confidence",
          "is_auto_resolved",
          "__str__",
          "__repr__",
          "validate_condition",
          "__init__",
          "add_edge",
          "remove_edge",
          "get_edges_from_step",
          "get_edges_to_step",
          "get_edge",
          "list_all_edges",
          "list_auto_resolved_edges",
          "list_high_confidence_edges",
          "list_low_confidence_edges",
          "get_step_dependencies",
          "validate_edges",
          "get_statistics",
          "__len__",
          "__iter__",
          "__contains__"
        ],
        "api/dag/pipeline_dag_resolver.py": [
          "PipelineDAGResolver.__init__",
          "__init__",
          "PipelineDAGResolver._initialize_step_catalog",
          "_initialize_step_catalog",
          "PipelineDAGResolver._initialize_config_resolver",
          "_initialize_config_resolver",
          "PipelineDAGResolver._validate_dag_with_catalog",
          "_validate_dag_with_catalog",
          "PipelineDAGResolver._build_networkx_graph",
          "_build_networkx_graph",
          "PipelineDAGResolver.create_execution_plan",
          "create_execution_plan",
          "PipelineDAGResolver._build_data_flow_map",
          "_build_data_flow_map",
          "PipelineDAGResolver._discover_step_contract",
          "_discover_step_contract",
          "PipelineDAGResolver._discover_step_contract_legacy",
          "_discover_step_contract_legacy",
          "PipelineDAGResolver._get_step_specification",
          "_get_step_specification",
          "PipelineDAGResolver._find_compatible_output",
          "_find_compatible_output",
          "PipelineDAGResolver._are_paths_compatible",
          "_are_paths_compatible",
          "PipelineDAGResolver.get_step_dependencies",
          "get_step_dependencies",
          "PipelineDAGResolver.get_dependent_steps",
          "get_dependent_steps",
          "PipelineDAGResolver.validate_dag_integrity",
          "validate_dag_integrity",
          "PipelineDAGResolver._validate_graph_structure",
          "_validate_graph_structure",
          "PipelineDAGResolver._validate_steps_with_catalog",
          "_validate_steps_with_catalog",
          "PipelineDAGResolver._validate_component_availability",
          "_validate_component_availability",
          "PipelineDAGResolver._validate_workspace_compatibility",
          "_validate_workspace_compatibility",
          "PipelineDAGResolver._load_configs_from_file",
          "_load_configs_from_file",
          "PipelineDAGResolver._instantiate_config_from_catalog",
          "_instantiate_config_from_catalog",
          "PipelineDAGResolver._get_config_class_by_name",
          "_get_config_class_by_name",
          "PipelineDAGResolver._class_name_to_module",
          "_class_name_to_module",
          "PipelineDAGResolver._create_config_instance",
          "_create_config_instance",
          "PipelineDAGResolver.get_config_resolution_preview",
          "get_config_resolution_preview",
          "__init__",
          "_initialize_step_catalog",
          "_initialize_config_resolver",
          "_validate_dag_with_catalog",
          "_build_networkx_graph",
          "create_execution_plan",
          "_build_data_flow_map",
          "_discover_step_contract",
          "_discover_step_contract_legacy",
          "_get_step_specification",
          "_find_compatible_output",
          "_are_paths_compatible",
          "get_step_dependencies",
          "get_dependent_steps",
          "validate_dag_integrity",
          "_validate_graph_structure",
          "_validate_steps_with_catalog",
          "_validate_component_availability",
          "_validate_workspace_compatibility",
          "_load_configs_from_file",
          "_instantiate_config_from_catalog",
          "_get_config_class_by_name",
          "_class_name_to_module",
          "_create_config_instance",
          "get_config_resolution_preview"
        ],
        "api/dag/workspace_dag.py": [
          "WorkspaceAwareDAG.__init__",
          "__init__",
          "WorkspaceAwareDAG.add_workspace_step",
          "add_workspace_step",
          "WorkspaceAwareDAG.remove_workspace_step",
          "remove_workspace_step",
          "WorkspaceAwareDAG.get_workspace_step",
          "get_workspace_step",
          "WorkspaceAwareDAG.get_developers",
          "get_developers",
          "WorkspaceAwareDAG.get_steps_by_developer",
          "get_steps_by_developer",
          "WorkspaceAwareDAG.get_steps_by_type",
          "get_steps_by_type",
          "WorkspaceAwareDAG.validate_workspace_dependencies",
          "validate_workspace_dependencies",
          "WorkspaceAwareDAG._has_workspace_cycles",
          "_has_workspace_cycles",
          "WorkspaceAwareDAG.to_workspace_pipeline_config",
          "to_workspace_pipeline_config",
          "WorkspaceAwareDAG.get_workspace_summary",
          "get_workspace_summary",
          "WorkspaceAwareDAG.get_execution_order",
          "get_execution_order",
          "WorkspaceAwareDAG.analyze_workspace_complexity",
          "analyze_workspace_complexity",
          "WorkspaceAwareDAG.from_workspace_config",
          "from_workspace_config",
          "WorkspaceAwareDAG.clone",
          "clone",
          "WorkspaceAwareDAG.merge_workspace_dag",
          "merge_workspace_dag",
          "__init__",
          "add_workspace_step",
          "remove_workspace_step",
          "get_workspace_step",
          "get_developers",
          "get_steps_by_developer",
          "get_steps_by_type",
          "validate_workspace_dependencies",
          "_has_workspace_cycles",
          "to_workspace_pipeline_config",
          "get_workspace_summary",
          "get_execution_order",
          "analyze_workspace_complexity",
          "from_workspace_config",
          "clone",
          "merge_workspace_dag"
        ],
        "api/dag/enhanced_dag.py": [
          "EnhancedPipelineDAG.__init__",
          "__init__",
          "EnhancedPipelineDAG.register_step_specification",
          "register_step_specification",
          "EnhancedPipelineDAG.auto_resolve_dependencies",
          "auto_resolve_dependencies",
          "EnhancedPipelineDAG.add_manual_dependency",
          "add_manual_dependency",
          "EnhancedPipelineDAG.get_step_dependencies",
          "get_step_dependencies",
          "EnhancedPipelineDAG.get_step_inputs_for_sagemaker",
          "get_step_inputs_for_sagemaker",
          "EnhancedPipelineDAG.validate_enhanced_dag",
          "validate_enhanced_dag",
          "EnhancedPipelineDAG.get_execution_order",
          "get_execution_order",
          "EnhancedPipelineDAG.get_dag_statistics",
          "get_dag_statistics",
          "EnhancedPipelineDAG.get_resolution_report",
          "get_resolution_report",
          "EnhancedPipelineDAG._calculate_edge_confidence",
          "_calculate_edge_confidence",
          "EnhancedPipelineDAG.clear_resolution_cache",
          "clear_resolution_cache",
          "EnhancedPipelineDAG.export_for_visualization",
          "export_for_visualization",
          "EnhancedPipelineDAG.__repr__",
          "__repr__",
          "__init__",
          "register_step_specification",
          "auto_resolve_dependencies",
          "add_manual_dependency",
          "get_step_dependencies",
          "get_step_inputs_for_sagemaker",
          "validate_enhanced_dag",
          "get_execution_order",
          "get_dag_statistics",
          "get_resolution_report",
          "_calculate_edge_confidence",
          "clear_resolution_cache",
          "export_for_visualization",
          "__repr__"
        ],
        "api/dag/base_dag.py": [
          "PipelineDAG.__init__",
          "__init__",
          "PipelineDAG.add_node",
          "add_node",
          "PipelineDAG.add_edge",
          "add_edge",
          "PipelineDAG.get_dependencies",
          "get_dependencies",
          "PipelineDAG.topological_sort",
          "topological_sort",
          "__init__",
          "add_node",
          "add_edge",
          "get_dependencies",
          "topological_sort"
        ]
      },
      "test_functions_by_file": {
        "api/dag/test_base_dag.py": [
          "TestPipelineDAG.setUp",
          "setUp",
          "TestPipelineDAG.test_init_empty",
          "test_init_empty",
          "TestPipelineDAG.test_init_with_nodes_edges",
          "test_init_with_nodes_edges",
          "TestPipelineDAG.test_add_node",
          "test_add_node",
          "TestPipelineDAG.test_add_edge",
          "test_add_edge",
          "TestPipelineDAG.test_get_dependencies",
          "test_get_dependencies",
          "TestPipelineDAG.test_topological_sort",
          "test_topological_sort",
          "TestPipelineDAG.test_topological_sort_with_cycle",
          "test_topological_sort_with_cycle",
          "TestPipelineDAG.test_topological_sort_disconnected",
          "test_topological_sort_disconnected",
          "setUp",
          "test_init_empty",
          "test_init_with_nodes_edges",
          "test_add_node",
          "test_add_edge",
          "test_get_dependencies",
          "test_topological_sort",
          "test_topological_sort_with_cycle",
          "test_topological_sort_disconnected"
        ],
        "api/dag/test_pipeline_dag_resolver.py": [
          "TestPipelineDAGResolverEnhanced.setup_method",
          "setup_method",
          "TestPipelineDAGResolverEnhanced.test_basic_execution_plan_creation",
          "test_basic_execution_plan_creation",
          "TestPipelineDAGResolverEnhanced.test_data_flow_map_fallback",
          "test_data_flow_map_fallback",
          "TestPipelineDAGResolverEnhanced.test_contract_discovery_success",
          "test_contract_discovery_success",
          "TestPipelineDAGResolverEnhanced.test_contract_discovery_failure",
          "test_contract_discovery_failure",
          "TestPipelineDAGResolverEnhanced.test_class_name_to_module_conversion",
          "test_class_name_to_module_conversion",
          "TestPipelineDAGResolverEnhanced.test_find_compatible_output_direct_match",
          "test_find_compatible_output_direct_match",
          "TestPipelineDAGResolverEnhanced.test_find_compatible_output_semantic_match",
          "test_find_compatible_output_semantic_match",
          "TestPipelineDAGResolverEnhanced.test_find_compatible_output_fallback",
          "test_find_compatible_output_fallback",
          "TestPipelineDAGResolverEnhanced.test_path_compatibility_sagemaker_conventions",
          "test_path_compatibility_sagemaker_conventions",
          "TestPipelineDAGResolverEnhanced.test_get_step_specification_with_step_catalog",
          "test_get_step_specification_with_step_catalog",
          "TestPipelineDAGResolverEnhanced.test_get_step_specification_no_catalog",
          "test_get_step_specification_no_catalog",
          "TestPipelineDAGResolverEnhanced.test_enhanced_data_flow_map_with_contracts",
          "test_enhanced_data_flow_map_with_contracts",
          "TestPipelineDAGResolverEnhanced.test_dag_validation_with_cycles",
          "test_dag_validation_with_cycles",
          "TestPipelineDAGResolverEnhanced.test_dag_validation_with_dangling_dependencies",
          "test_dag_validation_with_dangling_dependencies",
          "TestPipelineDAGResolverEnhanced.test_dag_validation_with_isolated_nodes",
          "test_dag_validation_with_isolated_nodes",
          "TestPipelineDAGResolverEnhanced.test_real_contract_discovery_with_registry_steps",
          "test_real_contract_discovery_with_registry_steps",
          "TestPipelineDAGResolverEnhanced.test_execution_plan_with_real_contracts",
          "test_execution_plan_with_real_contracts",
          "TestPipelineDAGResolverEnhanced.test_complex_dag_execution_plan",
          "test_complex_dag_execution_plan",
          "TestPipelineDAGResolverEnhanced.test_registry_step_name_validation",
          "test_registry_step_name_validation",
          "TestPipelineDAGResolverEnhanced.test_canonical_name_conversion_for_registry_steps",
          "test_canonical_name_conversion_for_registry_steps",
          "TestPipelineDAGResolverEnhanced.test_spec_type_retrieval_for_registry_steps",
          "test_spec_type_retrieval_for_registry_steps",
          "TestPipelineDAGResolverEnhanced.test_data_flow_with_real_step_contracts",
          "test_data_flow_with_real_step_contracts",
          "TestPipelineDAGResolverEnhanced.test_step_catalog_integration_in_data_flow_building",
          "test_step_catalog_integration_in_data_flow_building",
          "setup_method",
          "test_basic_execution_plan_creation",
          "test_data_flow_map_fallback",
          "test_contract_discovery_success",
          "test_contract_discovery_failure",
          "test_class_name_to_module_conversion",
          "test_find_compatible_output_direct_match",
          "test_find_compatible_output_semantic_match",
          "test_find_compatible_output_fallback",
          "test_path_compatibility_sagemaker_conventions",
          "test_get_step_specification_with_step_catalog",
          "test_get_step_specification_no_catalog",
          "test_enhanced_data_flow_map_with_contracts",
          "test_dag_validation_with_cycles",
          "test_dag_validation_with_dangling_dependencies",
          "test_dag_validation_with_isolated_nodes",
          "test_real_contract_discovery_with_registry_steps",
          "test_execution_plan_with_real_contracts",
          "test_complex_dag_execution_plan",
          "test_registry_step_name_validation",
          "test_canonical_name_conversion_for_registry_steps",
          "test_spec_type_retrieval_for_registry_steps",
          "test_data_flow_with_real_step_contracts",
          "test_step_catalog_integration_in_data_flow_building",
          "mock_discover_contract",
          "mock_discover_contract"
        ],
        "api/dag/test_edge_types.py": [
          "TestEdgeType.test_edge_type_values",
          "test_edge_type_values",
          "TestDependencyEdge.setUp",
          "setUp",
          "TestDependencyEdge.test_create_valid_dependency_edge",
          "test_create_valid_dependency_edge",
          "TestDependencyEdge.test_create_dependency_edge_with_custom_values",
          "test_create_dependency_edge_with_custom_values",
          "TestDependencyEdge.test_empty_string_validation",
          "test_empty_string_validation",
          "TestDependencyEdge.test_confidence_validation",
          "test_confidence_validation",
          "TestDependencyEdge.test_to_property_reference_dict",
          "test_to_property_reference_dict",
          "TestDependencyEdge.test_is_high_confidence",
          "test_is_high_confidence",
          "TestDependencyEdge.test_is_auto_resolved",
          "test_is_auto_resolved",
          "TestDependencyEdge.test_string_representations",
          "test_string_representations",
          "TestDependencyEdge.test_pydantic_serialization",
          "test_pydantic_serialization",
          "TestDependencyEdge.test_pydantic_deserialization",
          "test_pydantic_deserialization",
          "TestConditionalEdge.setUp",
          "setUp",
          "TestConditionalEdge.test_create_conditional_edge",
          "test_create_conditional_edge",
          "TestConditionalEdge.test_create_conditional_edge_with_condition",
          "test_create_conditional_edge_with_condition",
          "TestConditionalEdge.test_empty_condition_warning",
          "test_empty_condition_warning",
          "TestConditionalEdge.test_non_empty_condition_no_warning",
          "test_non_empty_condition_no_warning",
          "TestParallelEdge.setUp",
          "setUp",
          "TestParallelEdge.test_create_parallel_edge",
          "test_create_parallel_edge",
          "TestParallelEdge.test_create_parallel_edge_with_max_parallel",
          "test_create_parallel_edge_with_max_parallel",
          "TestParallelEdge.test_max_parallel_validation",
          "test_max_parallel_validation",
          "TestEdgeCollection.setUp",
          "setUp",
          "TestEdgeCollection.test_empty_collection",
          "test_empty_collection",
          "TestEdgeCollection.test_add_edge",
          "test_add_edge",
          "TestEdgeCollection.test_add_duplicate_edge_higher_confidence",
          "test_add_duplicate_edge_higher_confidence",
          "TestEdgeCollection.test_add_duplicate_edge_lower_confidence",
          "test_add_duplicate_edge_lower_confidence",
          "TestEdgeCollection.test_remove_edge",
          "test_remove_edge",
          "TestEdgeCollection.test_get_edges_from_step",
          "test_get_edges_from_step",
          "TestEdgeCollection.test_get_edges_to_step",
          "test_get_edges_to_step",
          "TestEdgeCollection.test_get_edge",
          "test_get_edge",
          "TestEdgeCollection.test_list_methods",
          "test_list_methods",
          "TestEdgeCollection.test_get_step_dependencies",
          "test_get_step_dependencies",
          "TestEdgeCollection.test_validate_edges",
          "test_validate_edges",
          "TestEdgeCollection.test_get_statistics",
          "test_get_statistics",
          "test_edge_type_values",
          "setUp",
          "test_create_valid_dependency_edge",
          "test_create_dependency_edge_with_custom_values",
          "test_empty_string_validation",
          "test_confidence_validation",
          "test_to_property_reference_dict",
          "test_is_high_confidence",
          "test_is_auto_resolved",
          "test_string_representations",
          "test_pydantic_serialization",
          "test_pydantic_deserialization",
          "setUp",
          "test_create_conditional_edge",
          "test_create_conditional_edge_with_condition",
          "test_empty_condition_warning",
          "test_non_empty_condition_no_warning",
          "setUp",
          "test_create_parallel_edge",
          "test_create_parallel_edge_with_max_parallel",
          "test_max_parallel_validation",
          "setUp",
          "test_empty_collection",
          "test_add_edge",
          "test_add_duplicate_edge_higher_confidence",
          "test_add_duplicate_edge_lower_confidence",
          "test_remove_edge",
          "test_get_edges_from_step",
          "test_get_edges_to_step",
          "test_get_edge",
          "test_list_methods",
          "test_get_step_dependencies",
          "test_validate_edges",
          "test_get_statistics"
        ]
      },
      "likely_tested_functions": [
        "DependencyEdge.to_property_reference_dict",
        "to_property_reference_dict",
        "DependencyEdge.is_high_confidence",
        "is_high_confidence",
        "DependencyEdge.is_auto_resolved",
        "is_auto_resolved",
        "DependencyEdge.__str__",
        "DependencyEdge.__repr__",
        "ConditionalEdge.validate_condition",
        "EdgeCollection.__init__",
        "EdgeCollection.add_edge",
        "add_edge",
        "EdgeCollection.remove_edge",
        "remove_edge",
        "EdgeCollection.get_edges_from_step",
        "get_edges_from_step",
        "EdgeCollection.get_edges_to_step",
        "get_edges_to_step",
        "EdgeCollection.get_edge",
        "get_edge",
        "EdgeCollection.list_all_edges",
        "EdgeCollection.list_auto_resolved_edges",
        "EdgeCollection.list_high_confidence_edges",
        "EdgeCollection.list_low_confidence_edges",
        "EdgeCollection.get_step_dependencies",
        "get_step_dependencies",
        "EdgeCollection.validate_edges",
        "validate_edges",
        "EdgeCollection.get_statistics",
        "get_statistics",
        "EdgeCollection.__len__",
        "EdgeCollection.__iter__",
        "EdgeCollection.__contains__",
        "to_property_reference_dict",
        "is_high_confidence",
        "is_auto_resolved",
        "add_edge",
        "remove_edge",
        "get_edges_from_step",
        "get_edges_to_step",
        "get_edge",
        "get_step_dependencies",
        "validate_edges",
        "get_statistics",
        "PipelineDAGResolver.__init__",
        "PipelineDAGResolver._initialize_step_catalog",
        "PipelineDAGResolver._initialize_config_resolver",
        "PipelineDAGResolver._validate_dag_with_catalog",
        "PipelineDAGResolver._build_networkx_graph",
        "PipelineDAGResolver.create_execution_plan",
        "PipelineDAGResolver._build_data_flow_map",
        "PipelineDAGResolver._discover_step_contract",
        "PipelineDAGResolver._discover_step_contract_legacy",
        "PipelineDAGResolver._get_step_specification",
        "_get_step_specification",
        "PipelineDAGResolver._find_compatible_output",
        "_find_compatible_output",
        "PipelineDAGResolver._are_paths_compatible",
        "PipelineDAGResolver.get_step_dependencies",
        "get_step_dependencies",
        "PipelineDAGResolver.get_dependent_steps",
        "PipelineDAGResolver.validate_dag_integrity",
        "PipelineDAGResolver._validate_graph_structure",
        "PipelineDAGResolver._validate_steps_with_catalog",
        "PipelineDAGResolver._validate_component_availability",
        "PipelineDAGResolver._validate_workspace_compatibility",
        "PipelineDAGResolver._load_configs_from_file",
        "PipelineDAGResolver._instantiate_config_from_catalog",
        "PipelineDAGResolver._get_config_class_by_name",
        "PipelineDAGResolver._class_name_to_module",
        "_class_name_to_module",
        "PipelineDAGResolver._create_config_instance",
        "PipelineDAGResolver.get_config_resolution_preview",
        "_get_step_specification",
        "_find_compatible_output",
        "get_step_dependencies",
        "_class_name_to_module",
        "EnhancedPipelineDAG.get_step_dependencies",
        "get_step_dependencies",
        "get_step_dependencies",
        "PipelineDAG.__init__",
        "PipelineDAG.add_node",
        "add_node",
        "PipelineDAG.add_edge",
        "add_edge",
        "PipelineDAG.get_dependencies",
        "get_dependencies",
        "PipelineDAG.topological_sort",
        "topological_sort",
        "add_node",
        "add_edge",
        "get_dependencies",
        "topological_sort"
      ],
      "likely_untested_functions": [
        "__str__",
        "__repr__",
        "validate_condition",
        "__init__",
        "list_all_edges",
        "list_auto_resolved_edges",
        "list_high_confidence_edges",
        "list_low_confidence_edges",
        "__len__",
        "__iter__",
        "__contains__",
        "__str__",
        "__repr__",
        "validate_condition",
        "__init__",
        "list_all_edges",
        "list_auto_resolved_edges",
        "list_high_confidence_edges",
        "list_low_confidence_edges",
        "__len__",
        "__iter__",
        "__contains__",
        "__init__",
        "_initialize_step_catalog",
        "_initialize_config_resolver",
        "_validate_dag_with_catalog",
        "_build_networkx_graph",
        "create_execution_plan",
        "_build_data_flow_map",
        "_discover_step_contract",
        "_discover_step_contract_legacy",
        "_are_paths_compatible",
        "get_dependent_steps",
        "validate_dag_integrity",
        "_validate_graph_structure",
        "_validate_steps_with_catalog",
        "_validate_component_availability",
        "_validate_workspace_compatibility",
        "_load_configs_from_file",
        "_instantiate_config_from_catalog",
        "_get_config_class_by_name",
        "_create_config_instance",
        "get_config_resolution_preview",
        "__init__",
        "_initialize_step_catalog",
        "_initialize_config_resolver",
        "_validate_dag_with_catalog",
        "_build_networkx_graph",
        "create_execution_plan",
        "_build_data_flow_map",
        "_discover_step_contract",
        "_discover_step_contract_legacy",
        "_are_paths_compatible",
        "get_dependent_steps",
        "validate_dag_integrity",
        "_validate_graph_structure",
        "_validate_steps_with_catalog",
        "_validate_component_availability",
        "_validate_workspace_compatibility",
        "_load_configs_from_file",
        "_instantiate_config_from_catalog",
        "_get_config_class_by_name",
        "_create_config_instance",
        "get_config_resolution_preview",
        "WorkspaceAwareDAG.__init__",
        "__init__",
        "WorkspaceAwareDAG.add_workspace_step",
        "add_workspace_step",
        "WorkspaceAwareDAG.remove_workspace_step",
        "remove_workspace_step",
        "WorkspaceAwareDAG.get_workspace_step",
        "get_workspace_step",
        "WorkspaceAwareDAG.get_developers",
        "get_developers",
        "WorkspaceAwareDAG.get_steps_by_developer",
        "get_steps_by_developer",
        "WorkspaceAwareDAG.get_steps_by_type",
        "get_steps_by_type",
        "WorkspaceAwareDAG.validate_workspace_dependencies",
        "validate_workspace_dependencies",
        "WorkspaceAwareDAG._has_workspace_cycles",
        "_has_workspace_cycles",
        "WorkspaceAwareDAG.to_workspace_pipeline_config",
        "to_workspace_pipeline_config",
        "WorkspaceAwareDAG.get_workspace_summary",
        "get_workspace_summary",
        "WorkspaceAwareDAG.get_execution_order",
        "get_execution_order",
        "WorkspaceAwareDAG.analyze_workspace_complexity",
        "analyze_workspace_complexity",
        "WorkspaceAwareDAG.from_workspace_config",
        "from_workspace_config",
        "WorkspaceAwareDAG.clone",
        "clone",
        "WorkspaceAwareDAG.merge_workspace_dag",
        "merge_workspace_dag",
        "__init__",
        "add_workspace_step",
        "remove_workspace_step",
        "get_workspace_step",
        "get_developers",
        "get_steps_by_developer",
        "get_steps_by_type",
        "validate_workspace_dependencies",
        "_has_workspace_cycles",
        "to_workspace_pipeline_config",
        "get_workspace_summary",
        "get_execution_order",
        "analyze_workspace_complexity",
        "from_workspace_config",
        "clone",
        "merge_workspace_dag",
        "EnhancedPipelineDAG.__init__",
        "__init__",
        "EnhancedPipelineDAG.register_step_specification",
        "register_step_specification",
        "EnhancedPipelineDAG.auto_resolve_dependencies",
        "auto_resolve_dependencies",
        "EnhancedPipelineDAG.add_manual_dependency",
        "add_manual_dependency",
        "EnhancedPipelineDAG.get_step_inputs_for_sagemaker",
        "get_step_inputs_for_sagemaker",
        "EnhancedPipelineDAG.validate_enhanced_dag",
        "validate_enhanced_dag",
        "EnhancedPipelineDAG.get_execution_order",
        "get_execution_order",
        "EnhancedPipelineDAG.get_dag_statistics",
        "get_dag_statistics",
        "EnhancedPipelineDAG.get_resolution_report",
        "get_resolution_report",
        "EnhancedPipelineDAG._calculate_edge_confidence",
        "_calculate_edge_confidence",
        "EnhancedPipelineDAG.clear_resolution_cache",
        "clear_resolution_cache",
        "EnhancedPipelineDAG.export_for_visualization",
        "export_for_visualization",
        "EnhancedPipelineDAG.__repr__",
        "__repr__",
        "__init__",
        "register_step_specification",
        "auto_resolve_dependencies",
        "add_manual_dependency",
        "get_step_inputs_for_sagemaker",
        "validate_enhanced_dag",
        "get_execution_order",
        "get_dag_statistics",
        "get_resolution_report",
        "_calculate_edge_confidence",
        "clear_resolution_cache",
        "export_for_visualization",
        "__repr__",
        "__init__",
        "__init__"
      ]
    },
    "cli": {
      "component": "cli",
      "description": "Command-line interface tools",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "cli/workspace_cli.py",
        "cli/pipeline_cli.py",
        "cli/builder_test_cli.py",
        "cli/registry_cli.py",
        "cli/catalog_cli.py",
        "cli/alignment_cli.py",
        "cli/runtime_testing_cli.py"
      ],
      "test_files": [
        "cli/test_catalog_cli.py",
        "cli/test_workspace_cli.py",
        "cli/test_alignment_cli.py",
        "cli/test_registry_cli.py",
        "cli/test_runtime_testing_cli.py",
        "cli/test_pipeline_cli.py",
        "cli/test_builder_test_cli.py"
      ],
      "total_source_functions": 75,
      "tested_functions": 53,
      "untested_functions": 22,
      "coverage_percentage": 70.66666666666667,
      "total_source_lines": 4983,
      "total_test_lines": 4927,
      "test_to_source_ratio": 9.133333333333333,
      "source_functions_by_file": {
        "cli/workspace_cli.py": [
          "workspace_cli",
          "init_workspace",
          "discover_components",
          "validate_workspace",
          "workspace_info",
          "search_components",
          "system_status",
          "refresh_catalog",
          "main"
        ],
        "cli/pipeline_cli.py": [
          "pipeline_cli",
          "list_pipelines",
          "discover_pipelines",
          "show_pipeline",
          "show_connections",
          "show_alternatives",
          "find_path",
          "recommend_pipelines",
          "validate_registry",
          "show_stats",
          "main"
        ],
        "cli/builder_test_cli.py": [
          "print_test_results",
          "print_enhanced_results",
          "import_builder_class",
          "export_results_to_json",
          "generate_score_chart",
          "builder_test",
          "test_all",
          "test_level",
          "test_variant",
          "test_by_type",
          "registry_report",
          "validate_builder",
          "list_builders",
          "test_all_discovered",
          "test_single",
          "list_discovered",
          "main"
        ],
        "cli/registry_cli.py": [
          "registry_cli",
          "init_workspace",
          "list_steps",
          "validate_registry",
          "resolve_step",
          "validate_step_definition",
          "validation_status",
          "reset_validation_metrics",
          "_create_workspace_structure",
          "_create_workspace_registry",
          "_create_workspace_documentation",
          "_create_example_implementations",
          "main"
        ],
        "cli/catalog_cli.py": [
          "catalog_cli",
          "list_steps",
          "search_steps",
          "show_step",
          "show_components",
          "list_frameworks",
          "list_workspaces",
          "show_metrics",
          "discover_workspace",
          "main"
        ],
        "cli/alignment_cli.py": [
          "print_validation_summary",
          "_make_json_serializable",
          "save_report",
          "generate_html_report",
          "alignment",
          "validate",
          "validate_all",
          "validate_level",
          "list_scripts",
          "main"
        ],
        "cli/runtime_testing_cli.py": [
          "runtime",
          "test_script",
          "test_pipeline",
          "test_compatibility",
          "main"
        ]
      },
      "test_functions_by_file": {
        "cli/test_catalog_cli.py": [
          "runner",
          "temp_workspace",
          "mock_step_catalog",
          "TestCatalogCLIBasics.test_catalog_cli_help",
          "test_catalog_cli_help",
          "TestCatalogCLIBasics.test_catalog_cli_no_args",
          "test_catalog_cli_no_args",
          "TestListStepsCommand.test_list_steps_basic",
          "test_list_steps_basic",
          "TestListStepsCommand.test_list_steps_with_workspace_filter",
          "test_list_steps_with_workspace_filter",
          "TestListStepsCommand.test_list_steps_with_framework_filter",
          "test_list_steps_with_framework_filter",
          "TestListStepsCommand.test_list_steps_json_format",
          "test_list_steps_json_format",
          "TestListStepsCommand.test_list_steps_with_limit",
          "test_list_steps_with_limit",
          "TestListStepsCommand.test_list_steps_error_handling",
          "test_list_steps_error_handling",
          "TestSearchStepsCommand.test_search_steps_basic",
          "test_search_steps_basic",
          "TestSearchStepsCommand.test_search_steps_json_format",
          "test_search_steps_json_format",
          "TestSearchStepsCommand.test_search_steps_with_job_type",
          "test_search_steps_with_job_type",
          "TestShowStepCommand.test_show_step_basic",
          "test_show_step_basic",
          "TestShowStepCommand.test_show_step_not_found",
          "test_show_step_not_found",
          "TestShowStepCommand.test_show_step_json_format",
          "test_show_step_json_format",
          "TestShowStepCommand.test_show_step_with_variants",
          "test_show_step_with_variants",
          "TestComponentsCommand.test_show_components_basic",
          "test_show_components_basic",
          "TestComponentsCommand.test_show_components_with_type_filter",
          "test_show_components_with_type_filter",
          "TestComponentsCommand.test_show_components_json_format",
          "test_show_components_json_format",
          "TestFrameworksCommand.test_list_frameworks_basic",
          "test_list_frameworks_basic",
          "TestFrameworksCommand.test_list_frameworks_json_format",
          "test_list_frameworks_json_format",
          "TestWorkspacesCommand.test_list_workspaces_basic",
          "test_list_workspaces_basic",
          "TestWorkspacesCommand.test_list_workspaces_json_format",
          "test_list_workspaces_json_format",
          "TestMetricsCommand.test_show_metrics_basic",
          "test_show_metrics_basic",
          "TestMetricsCommand.test_show_metrics_json_format",
          "test_show_metrics_json_format",
          "TestDiscoverCommand.test_discover_workspace_basic",
          "test_discover_workspace_basic",
          "TestDiscoverCommand.test_discover_workspace_json_format",
          "test_discover_workspace_json_format",
          "TestDiscoverCommand.test_discover_workspace_no_dir",
          "test_discover_workspace_no_dir",
          "TestCLIErrorHandling.test_search_steps_error_handling",
          "test_search_steps_error_handling",
          "TestCLIErrorHandling.test_show_step_error_handling",
          "test_show_step_error_handling",
          "TestCLIErrorHandling.test_components_error_handling",
          "test_components_error_handling",
          "TestCLIErrorHandling.test_frameworks_error_handling",
          "test_frameworks_error_handling",
          "TestCLIErrorHandling.test_workspaces_error_handling",
          "test_workspaces_error_handling",
          "TestCLIErrorHandling.test_metrics_error_handling",
          "test_metrics_error_handling",
          "TestCLIErrorHandling.test_discover_error_handling",
          "test_discover_error_handling",
          "TestCLIIntegrationScenarios.test_step_discovery_workflow",
          "test_step_discovery_workflow",
          "TestCLIIntegrationScenarios.test_framework_analysis_workflow",
          "test_framework_analysis_workflow",
          "TestCLIIntegrationScenarios.test_workspace_management_workflow",
          "test_workspace_management_workflow",
          "test_catalog_cli_help",
          "test_catalog_cli_no_args",
          "test_list_steps_basic",
          "test_list_steps_with_workspace_filter",
          "test_list_steps_with_framework_filter",
          "test_list_steps_json_format",
          "test_list_steps_with_limit",
          "test_list_steps_error_handling",
          "test_search_steps_basic",
          "test_search_steps_json_format",
          "test_search_steps_with_job_type",
          "test_show_step_basic",
          "test_show_step_not_found",
          "test_show_step_json_format",
          "test_show_step_with_variants",
          "test_show_components_basic",
          "test_show_components_with_type_filter",
          "test_show_components_json_format",
          "test_list_frameworks_basic",
          "test_list_frameworks_json_format",
          "test_list_workspaces_basic",
          "test_list_workspaces_json_format",
          "test_show_metrics_basic",
          "test_show_metrics_json_format",
          "test_discover_workspace_basic",
          "test_discover_workspace_json_format",
          "test_discover_workspace_no_dir",
          "test_search_steps_error_handling",
          "test_show_step_error_handling",
          "test_components_error_handling",
          "test_frameworks_error_handling",
          "test_workspaces_error_handling",
          "test_metrics_error_handling",
          "test_discover_error_handling",
          "test_step_discovery_workflow",
          "test_framework_analysis_workflow",
          "test_workspace_management_workflow"
        ],
        "cli/test_workspace_cli.py": [
          "cli_runner",
          "temp_dir",
          "TestWorkspaceCliBasic.test_workspace_cli_group_exists",
          "test_workspace_cli_group_exists",
          "TestWorkspaceCliBasic.test_workspace_cli_commands_exist",
          "test_workspace_cli_commands_exist",
          "TestInitWorkspaceCommand.test_init_workspace_package_only",
          "test_init_workspace_package_only",
          "TestInitWorkspaceCommand.test_init_workspace_with_dirs",
          "test_init_workspace_with_dirs",
          "TestInitWorkspaceCommand.test_init_workspace_json_output",
          "test_init_workspace_json_output",
          "TestInitWorkspaceCommand.test_init_workspace_error_handling",
          "test_init_workspace_error_handling",
          "TestDiscoverComponentsCommand.test_discover_components_basic",
          "test_discover_components_basic",
          "TestDiscoverComponentsCommand.test_discover_components_with_search",
          "test_discover_components_with_search",
          "TestDiscoverComponentsCommand.test_discover_components_json_format",
          "test_discover_components_json_format",
          "TestDiscoverComponentsCommand.test_discover_components_with_details",
          "test_discover_components_with_details",
          "TestDiscoverComponentsCommand.test_discover_components_no_results",
          "test_discover_components_no_results",
          "TestValidateWorkspaceCommand.test_validate_workspace_structure",
          "test_validate_workspace_structure",
          "TestValidateWorkspaceCommand.test_validate_workspace_components",
          "test_validate_workspace_components",
          "TestValidateWorkspaceCommand.test_validate_component_quality",
          "test_validate_component_quality",
          "TestValidateWorkspaceCommand.test_validate_cross_workspace_compatibility",
          "test_validate_cross_workspace_compatibility",
          "TestValidateWorkspaceCommand.test_validate_workspace_json_output",
          "test_validate_workspace_json_output",
          "TestValidateWorkspaceCommand.test_validate_workspace_with_report_save",
          "test_validate_workspace_with_report_save",
          "TestWorkspaceInfoCommand.test_workspace_info_summary",
          "test_workspace_info_summary",
          "TestWorkspaceInfoCommand.test_workspace_info_specific_component",
          "test_workspace_info_specific_component",
          "TestWorkspaceInfoCommand.test_workspace_info_component_not_found",
          "test_workspace_info_component_not_found",
          "TestSearchComponentsCommand.test_search_components_basic",
          "test_search_components_basic",
          "TestSearchComponentsCommand.test_search_components_list_format",
          "test_search_components_list_format",
          "TestSearchComponentsCommand.test_search_components_no_results",
          "test_search_components_no_results",
          "TestSystemStatusCommand.test_system_status_basic",
          "test_system_status_basic",
          "TestSystemStatusCommand.test_system_status_json_format",
          "test_system_status_json_format",
          "TestRefreshCatalogCommand.test_refresh_catalog_success",
          "test_refresh_catalog_success",
          "TestRefreshCatalogCommand.test_refresh_catalog_no_changes",
          "test_refresh_catalog_no_changes",
          "TestRefreshCatalogCommand.test_refresh_catalog_failure",
          "test_refresh_catalog_failure",
          "TestWorkspaceCliErrorHandling.test_discover_components_error",
          "test_discover_components_error",
          "TestWorkspaceCliErrorHandling.test_validate_workspace_error",
          "test_validate_workspace_error",
          "TestWorkspaceCliErrorHandling.test_workspace_info_error",
          "test_workspace_info_error",
          "TestWorkspaceCliErrorHandling.test_search_components_error",
          "test_search_components_error",
          "TestWorkspaceCliErrorHandling.test_system_status_error",
          "test_system_status_error",
          "TestWorkspaceCliErrorHandling.test_refresh_catalog_error",
          "test_refresh_catalog_error",
          "TestWorkspaceCliIntegration.test_full_workflow_integration",
          "test_full_workflow_integration",
          "test_workspace_cli_group_exists",
          "test_workspace_cli_commands_exist",
          "test_init_workspace_package_only",
          "test_init_workspace_with_dirs",
          "test_init_workspace_json_output",
          "test_init_workspace_error_handling",
          "test_discover_components_basic",
          "test_discover_components_with_search",
          "test_discover_components_json_format",
          "test_discover_components_with_details",
          "test_discover_components_no_results",
          "test_validate_workspace_structure",
          "test_validate_workspace_components",
          "test_validate_component_quality",
          "test_validate_cross_workspace_compatibility",
          "test_validate_workspace_json_output",
          "test_validate_workspace_with_report_save",
          "test_workspace_info_summary",
          "test_workspace_info_specific_component",
          "test_workspace_info_component_not_found",
          "test_search_components_basic",
          "test_search_components_list_format",
          "test_search_components_no_results",
          "test_system_status_basic",
          "test_system_status_json_format",
          "test_refresh_catalog_success",
          "test_refresh_catalog_no_changes",
          "test_refresh_catalog_failure",
          "test_discover_components_error",
          "test_validate_workspace_error",
          "test_workspace_info_error",
          "test_search_components_error",
          "test_system_status_error",
          "test_refresh_catalog_error",
          "test_full_workflow_integration"
        ],
        "cli/test_alignment_cli.py": [
          "cli_runner",
          "temp_dir",
          "TestAlignmentCliBasic.test_alignment_cli_group_exists",
          "test_alignment_cli_group_exists",
          "TestAlignmentCliBasic.test_alignment_cli_commands_exist",
          "test_alignment_cli_commands_exist",
          "TestValidateCommand.test_validate_script_success",
          "test_validate_script_success",
          "TestValidateCommand.test_validate_script_failure",
          "test_validate_script_failure",
          "TestValidateCommand.test_validate_script_with_workspace_dirs",
          "test_validate_script_with_workspace_dirs",
          "TestValidateCommand.test_validate_script_with_level3_mode",
          "test_validate_script_with_level3_mode",
          "TestValidateCommand.test_validate_script_verbose_output",
          "test_validate_script_verbose_output",
          "TestValidateCommand.test_validate_script_with_scoring",
          "test_validate_script_with_scoring",
          "TestValidateCommand.test_validate_script_json_output",
          "test_validate_script_json_output",
          "TestValidateCommand.test_validate_script_html_output",
          "test_validate_script_html_output",
          "TestValidateCommand.test_validate_script_error_handling",
          "test_validate_script_error_handling",
          "TestValidateAllCommand.test_validate_all_scripts_success",
          "test_validate_all_scripts_success",
          "TestValidateAllCommand.test_validate_all_scripts_with_failures",
          "test_validate_all_scripts_with_failures",
          "TestValidateAllCommand.test_validate_all_scripts_with_continue_on_error",
          "test_validate_all_scripts_with_continue_on_error",
          "TestValidateAllCommand.test_validate_all_scripts_json_output",
          "test_validate_all_scripts_json_output",
          "TestValidateLevelCommand.test_validate_level_success",
          "test_validate_level_success",
          "TestValidateLevelCommand.test_validate_level_failure",
          "test_validate_level_failure",
          "TestValidateLevelCommand.test_validate_level_invalid_level",
          "test_validate_level_invalid_level",
          "TestValidateLevelCommand.test_validate_level_error_handling",
          "test_validate_level_error_handling",
          "TestListScriptsCommand.test_list_scripts_success",
          "test_list_scripts_success",
          "TestListScriptsCommand.test_list_scripts_with_workspace_dirs",
          "test_list_scripts_with_workspace_dirs",
          "TestListScriptsCommand.test_list_scripts_no_scripts_found",
          "test_list_scripts_no_scripts_found",
          "TestListScriptsCommand.test_list_scripts_error_handling",
          "test_list_scripts_error_handling",
          "TestAlignmentCliHelpers.test_json_serialization_with_complex_objects",
          "test_json_serialization_with_complex_objects",
          "TestAlignmentCliHelpers.test_html_report_generation",
          "test_html_report_generation",
          "TestAlignmentCliIntegration.test_full_workflow_integration",
          "test_full_workflow_integration",
          "test_alignment_cli_group_exists",
          "test_alignment_cli_commands_exist",
          "test_validate_script_success",
          "test_validate_script_failure",
          "test_validate_script_with_workspace_dirs",
          "test_validate_script_with_level3_mode",
          "test_validate_script_verbose_output",
          "test_validate_script_with_scoring",
          "test_validate_script_json_output",
          "test_validate_script_html_output",
          "test_validate_script_error_handling",
          "test_validate_all_scripts_success",
          "test_validate_all_scripts_with_failures",
          "test_validate_all_scripts_with_continue_on_error",
          "test_validate_all_scripts_json_output",
          "test_validate_level_success",
          "test_validate_level_failure",
          "test_validate_level_invalid_level",
          "test_validate_level_error_handling",
          "test_list_scripts_success",
          "test_list_scripts_with_workspace_dirs",
          "test_list_scripts_no_scripts_found",
          "test_list_scripts_error_handling",
          "test_json_serialization_with_complex_objects",
          "test_html_report_generation",
          "test_full_workflow_integration"
        ],
        "cli/test_registry_cli.py": [
          "runner",
          "temp_workspace",
          "TestRegistryCLIBasics.test_registry_cli_help",
          "test_registry_cli_help",
          "TestRegistryCLIBasics.test_registry_cli_no_args",
          "test_registry_cli_no_args",
          "TestInitWorkspaceCommand.test_init_workspace_minimal",
          "test_init_workspace_minimal",
          "TestInitWorkspaceCommand.test_init_workspace_with_template",
          "test_init_workspace_with_template",
          "TestInitWorkspaceCommand.test_init_workspace_invalid_id",
          "test_init_workspace_invalid_id",
          "TestInitWorkspaceCommand.test_init_workspace_existing_without_force",
          "test_init_workspace_existing_without_force",
          "TestInitWorkspaceCommand.test_init_workspace_with_force",
          "test_init_workspace_with_force",
          "TestListStepsCommand.test_list_steps_basic",
          "test_list_steps_basic",
          "TestListStepsCommand.test_list_steps_with_workspace",
          "test_list_steps_with_workspace",
          "TestListStepsCommand.test_list_steps_with_source",
          "test_list_steps_with_source",
          "TestListStepsCommand.test_list_steps_conflicts_only",
          "test_list_steps_conflicts_only",
          "TestListStepsCommand.test_list_steps_no_conflicts",
          "test_list_steps_no_conflicts",
          "TestValidateRegistryCommand.test_validate_registry_basic",
          "test_validate_registry_basic",
          "TestValidateRegistryCommand.test_validate_registry_with_workspace",
          "test_validate_registry_with_workspace",
          "TestValidateRegistryCommand.test_validate_registry_with_conflicts",
          "test_validate_registry_with_conflicts",
          "TestResolveStepCommand.test_resolve_step_success",
          "test_resolve_step_success",
          "TestResolveStepCommand.test_resolve_step_failure",
          "test_resolve_step_failure",
          "TestResolveStepCommand.test_resolve_step_fallback",
          "test_resolve_step_fallback",
          "TestValidateStepDefinitionCommand.test_validate_step_definition_valid",
          "test_validate_step_definition_valid",
          "TestValidateStepDefinitionCommand.test_validate_step_definition_invalid",
          "test_validate_step_definition_invalid",
          "TestValidateStepDefinitionCommand.test_validate_step_definition_auto_correct",
          "test_validate_step_definition_auto_correct",
          "TestValidateStepDefinitionCommand.test_validate_step_definition_performance",
          "test_validate_step_definition_performance",
          "TestValidateStepDefinitionCommand.test_validate_step_definition_missing_name",
          "test_validate_step_definition_missing_name",
          "TestValidationStatusCommand.test_validation_status_basic",
          "test_validation_status_basic",
          "TestValidationStatusCommand.test_validation_status_with_exception",
          "test_validation_status_with_exception",
          "TestResetValidationMetricsCommand.test_reset_validation_metrics_confirmed",
          "test_reset_validation_metrics_confirmed",
          "TestResetValidationMetricsCommand.test_reset_validation_metrics_cancelled",
          "test_reset_validation_metrics_cancelled",
          "TestResetValidationMetricsCommand.test_reset_validation_metrics_with_exception",
          "test_reset_validation_metrics_with_exception",
          "TestCLIErrorHandling.test_list_steps_with_exception",
          "test_list_steps_with_exception",
          "TestCLIErrorHandling.test_validate_registry_with_exception",
          "test_validate_registry_with_exception",
          "TestCLIErrorHandling.test_resolve_step_with_exception",
          "test_resolve_step_with_exception",
          "TestCLIIntegrationScenarios.test_workspace_creation_workflow",
          "test_workspace_creation_workflow",
          "TestCLIIntegrationScenarios.test_registry_validation_workflow",
          "test_registry_validation_workflow",
          "TestCLIIntegrationScenarios.test_step_validation_workflow",
          "test_step_validation_workflow",
          "test_registry_cli_help",
          "test_registry_cli_no_args",
          "test_init_workspace_minimal",
          "test_init_workspace_with_template",
          "test_init_workspace_invalid_id",
          "test_init_workspace_existing_without_force",
          "test_init_workspace_with_force",
          "test_list_steps_basic",
          "test_list_steps_with_workspace",
          "test_list_steps_with_source",
          "test_list_steps_conflicts_only",
          "test_list_steps_no_conflicts",
          "test_validate_registry_basic",
          "test_validate_registry_with_workspace",
          "test_validate_registry_with_conflicts",
          "test_resolve_step_success",
          "test_resolve_step_failure",
          "test_resolve_step_fallback",
          "test_validate_step_definition_valid",
          "test_validate_step_definition_invalid",
          "test_validate_step_definition_auto_correct",
          "test_validate_step_definition_performance",
          "test_validate_step_definition_missing_name",
          "test_validation_status_basic",
          "test_validation_status_with_exception",
          "test_reset_validation_metrics_confirmed",
          "test_reset_validation_metrics_cancelled",
          "test_reset_validation_metrics_with_exception",
          "test_list_steps_with_exception",
          "test_validate_registry_with_exception",
          "test_resolve_step_with_exception",
          "test_workspace_creation_workflow",
          "test_registry_validation_workflow",
          "test_step_validation_workflow"
        ],
        "cli/test_runtime_testing_cli.py": [
          "runner",
          "temp_dir",
          "mock_script_result",
          "mock_compatibility_result",
          "mock_script_spec",
          "TestRuntimeTestingCLI.test_cli_help",
          "test_cli_help",
          "TestRuntimeTestingCLI.test_cli_version",
          "test_cli_version",
          "TestRuntimeTestingCLI.test_test_script_help",
          "test_test_script_help",
          "TestRuntimeTestingCLI.test_test_script_success_without_step_catalog",
          "test_test_script_success_without_step_catalog",
          "TestRuntimeTestingCLI.test_test_script_success_with_step_catalog",
          "test_test_script_success_with_step_catalog",
          "TestRuntimeTestingCLI.test_test_script_failure",
          "test_test_script_failure",
          "TestRuntimeTestingCLI.test_test_compatibility_success",
          "test_test_compatibility_success",
          "TestRuntimeTestingCLI.test_test_compatibility_with_step_catalog",
          "test_test_compatibility_with_step_catalog",
          "TestRuntimeTestingCLI.test_test_compatibility_failure",
          "test_test_compatibility_failure",
          "TestRuntimeTestingCLI.test_test_pipeline_success",
          "test_test_pipeline_success",
          "TestRuntimeTestingCLI.test_test_pipeline_with_step_catalog",
          "test_test_pipeline_with_step_catalog",
          "TestRuntimeTestingCLI.test_test_pipeline_file_not_found",
          "test_test_pipeline_file_not_found",
          "TestRuntimeTestingCLI.test_exception_handling",
          "test_exception_handling",
          "TestRuntimeTestingCLI.test_workspace_dirs_option",
          "test_workspace_dirs_option",
          "TestRuntimeTestingCLI.test_environment_workspace_integration",
          "test_environment_workspace_integration",
          "TestRuntimeTestingCLIIntegration.test_full_workflow_simulation",
          "test_full_workflow_simulation",
          "TestRuntimeTestingCLIIntegration.test_json_output_format",
          "test_json_output_format",
          "test_cli_help",
          "test_cli_version",
          "test_test_script_help",
          "test_test_script_success_without_step_catalog",
          "test_test_script_success_with_step_catalog",
          "test_test_script_failure",
          "test_test_compatibility_success",
          "test_test_compatibility_with_step_catalog",
          "test_test_compatibility_failure",
          "test_test_pipeline_success",
          "test_test_pipeline_with_step_catalog",
          "test_test_pipeline_file_not_found",
          "test_exception_handling",
          "test_workspace_dirs_option",
          "test_environment_workspace_integration",
          "test_full_workflow_simulation",
          "test_json_output_format"
        ],
        "cli/test_pipeline_cli.py": [
          "runner",
          "mock_pipeline_manager",
          "mock_catalog_info",
          "TestPipelineCLIBasics.test_pipeline_cli_help",
          "test_pipeline_cli_help",
          "TestPipelineCLIBasics.test_pipeline_cli_no_args",
          "test_pipeline_cli_no_args",
          "TestListPipelinesCommand.test_list_pipelines_basic",
          "test_list_pipelines_basic",
          "TestListPipelinesCommand.test_list_pipelines_with_framework_filter",
          "test_list_pipelines_with_framework_filter",
          "TestListPipelinesCommand.test_list_pipelines_json_format",
          "test_list_pipelines_json_format",
          "TestListPipelinesCommand.test_list_pipelines_with_limit",
          "test_list_pipelines_with_limit",
          "TestListPipelinesCommand.test_list_pipelines_error_handling",
          "test_list_pipelines_error_handling",
          "TestDiscoverPipelinesCommand.test_discover_pipelines_by_framework",
          "test_discover_pipelines_by_framework",
          "TestDiscoverPipelinesCommand.test_discover_pipelines_by_use_case",
          "test_discover_pipelines_by_use_case",
          "TestDiscoverPipelinesCommand.test_discover_pipelines_json_format",
          "test_discover_pipelines_json_format",
          "TestDiscoverPipelinesCommand.test_discover_pipelines_no_criteria",
          "test_discover_pipelines_no_criteria",
          "TestShowPipelineCommand.test_show_pipeline_basic",
          "test_show_pipeline_basic",
          "TestShowPipelineCommand.test_show_pipeline_not_found",
          "test_show_pipeline_not_found",
          "TestShowPipelineCommand.test_show_pipeline_with_connections",
          "test_show_pipeline_with_connections",
          "TestShowPipelineCommand.test_show_pipeline_json_format",
          "test_show_pipeline_json_format",
          "TestConnectionsCommand.test_show_connections_basic",
          "test_show_connections_basic",
          "TestConnectionsCommand.test_show_connections_json_format",
          "test_show_connections_json_format",
          "TestAlternativesCommand.test_show_alternatives_basic",
          "test_show_alternatives_basic",
          "TestAlternativesCommand.test_show_alternatives_json_format",
          "test_show_alternatives_json_format",
          "TestAlternativesCommand.test_show_alternatives_none_found",
          "test_show_alternatives_none_found",
          "TestPathCommand.test_find_path_success",
          "test_find_path_success",
          "TestPathCommand.test_find_path_not_found",
          "test_find_path_not_found",
          "TestPathCommand.test_find_path_json_format",
          "test_find_path_json_format",
          "TestRecommendCommand.test_recommend_pipelines_basic",
          "test_recommend_pipelines_basic",
          "TestRecommendCommand.test_recommend_pipelines_with_criteria",
          "test_recommend_pipelines_with_criteria",
          "TestRecommendCommand.test_recommend_pipelines_json_format",
          "test_recommend_pipelines_json_format",
          "TestRecommendCommand.test_recommend_pipelines_no_results",
          "test_recommend_pipelines_no_results",
          "TestValidateCommand.test_validate_registry_success",
          "test_validate_registry_success",
          "TestValidateCommand.test_validate_registry_with_issues",
          "test_validate_registry_with_issues",
          "TestValidateCommand.test_validate_registry_json_format",
          "test_validate_registry_json_format",
          "TestStatsCommand.test_show_stats_basic",
          "test_show_stats_basic",
          "TestStatsCommand.test_show_stats_json_format",
          "test_show_stats_json_format",
          "TestStatsCommand.test_show_stats_with_error",
          "test_show_stats_with_error",
          "TestCLIErrorHandling.test_discover_error_handling",
          "test_discover_error_handling",
          "TestCLIErrorHandling.test_show_error_handling",
          "test_show_error_handling",
          "TestCLIErrorHandling.test_connections_error_handling",
          "test_connections_error_handling",
          "TestCLIErrorHandling.test_alternatives_error_handling",
          "test_alternatives_error_handling",
          "TestCLIErrorHandling.test_path_error_handling",
          "test_path_error_handling",
          "TestCLIErrorHandling.test_recommend_error_handling",
          "test_recommend_error_handling",
          "TestCLIErrorHandling.test_validate_error_handling",
          "test_validate_error_handling",
          "TestCLIErrorHandling.test_stats_error_handling",
          "test_stats_error_handling",
          "TestCLIIntegrationScenarios.test_pipeline_discovery_workflow",
          "test_pipeline_discovery_workflow",
          "TestCLIIntegrationScenarios.test_pipeline_recommendation_workflow",
          "test_pipeline_recommendation_workflow",
          "TestCLIIntegrationScenarios.test_pipeline_validation_workflow",
          "test_pipeline_validation_workflow",
          "test_pipeline_cli_help",
          "test_pipeline_cli_no_args",
          "test_list_pipelines_basic",
          "test_list_pipelines_with_framework_filter",
          "test_list_pipelines_json_format",
          "test_list_pipelines_with_limit",
          "test_list_pipelines_error_handling",
          "test_discover_pipelines_by_framework",
          "test_discover_pipelines_by_use_case",
          "test_discover_pipelines_json_format",
          "test_discover_pipelines_no_criteria",
          "test_show_pipeline_basic",
          "test_show_pipeline_not_found",
          "test_show_pipeline_with_connections",
          "test_show_pipeline_json_format",
          "test_show_connections_basic",
          "test_show_connections_json_format",
          "test_show_alternatives_basic",
          "test_show_alternatives_json_format",
          "test_show_alternatives_none_found",
          "test_find_path_success",
          "test_find_path_not_found",
          "test_find_path_json_format",
          "test_recommend_pipelines_basic",
          "test_recommend_pipelines_with_criteria",
          "test_recommend_pipelines_json_format",
          "test_recommend_pipelines_no_results",
          "test_validate_registry_success",
          "test_validate_registry_with_issues",
          "test_validate_registry_json_format",
          "test_show_stats_basic",
          "test_show_stats_json_format",
          "test_show_stats_with_error",
          "test_discover_error_handling",
          "test_show_error_handling",
          "test_connections_error_handling",
          "test_alternatives_error_handling",
          "test_path_error_handling",
          "test_recommend_error_handling",
          "test_validate_error_handling",
          "test_stats_error_handling",
          "test_pipeline_discovery_workflow",
          "test_pipeline_recommendation_workflow",
          "test_pipeline_validation_workflow"
        ],
        "cli/test_builder_test_cli.py": [
          "cli_runner",
          "temp_dir",
          "TestBuilderTestCliBasic.test_builder_test_cli_group_exists",
          "test_builder_test_cli_group_exists",
          "TestBuilderTestCliBasic.test_builder_test_cli_commands_exist",
          "test_builder_test_cli_commands_exist",
          "TestTestAllCommand.test_test_all_success",
          "test_test_all_success",
          "TestTestAllCommand.test_test_all_with_failures",
          "test_test_all_with_failures",
          "TestTestAllCommand.test_test_all_with_scoring",
          "test_test_all_with_scoring",
          "TestTestAllCommand.test_test_all_with_exports",
          "test_test_all_with_exports",
          "TestTestAllCommand.test_test_all_error_handling",
          "test_test_all_error_handling",
          "TestTestLevelCommand.test_test_level_1_success",
          "test_test_level_1_success",
          "TestTestLevelCommand.test_test_level_2_success",
          "test_test_level_2_success",
          "TestTestLevelCommand.test_test_level_invalid_level",
          "test_test_level_invalid_level",
          "TestTestVariantCommand.test_test_variant_processing_success",
          "test_test_variant_processing_success",
          "TestTestVariantCommand.test_test_variant_invalid_variant",
          "test_test_variant_invalid_variant",
          "TestTestByTypeCommand.test_test_by_type_success",
          "test_test_by_type_success",
          "TestTestByTypeCommand.test_test_by_type_with_errors",
          "test_test_by_type_with_errors",
          "TestTestByTypeCommand.test_test_by_type_with_export",
          "test_test_by_type_with_export",
          "TestRegistryReportCommand.test_registry_report_success",
          "test_registry_report_success",
          "TestRegistryReportCommand.test_registry_report_with_verbose_errors",
          "test_registry_report_with_verbose_errors",
          "TestValidateBuilderCommand.test_validate_builder_success",
          "test_validate_builder_success",
          "TestValidateBuilderCommand.test_validate_builder_with_errors",
          "test_validate_builder_with_errors",
          "TestListBuildersCommand.test_list_builders_success",
          "test_list_builders_success",
          "TestListBuildersCommand.test_list_builders_no_builders_found",
          "test_list_builders_no_builders_found",
          "TestListBuildersCommand.test_list_builders_error_handling",
          "test_list_builders_error_handling",
          "TestBuilderTestCliHelpers.test_json_export_functionality",
          "test_json_export_functionality",
          "TestBuilderTestCliHelpers.test_generate_score_chart",
          "test_generate_score_chart",
          "TestBuilderTestCliErrorHandling.test_test_all_import_error",
          "test_test_all_import_error",
          "TestBuilderTestCliErrorHandling.test_test_level_execution_error",
          "test_test_level_execution_error",
          "TestBuilderTestCliErrorHandling.test_test_variant_execution_error",
          "test_test_variant_execution_error",
          "TestBuilderTestCliIntegration.test_full_workflow_integration",
          "test_full_workflow_integration",
          "TestBuilderTestCliIntegration.test_scoring_workflow_integration",
          "test_scoring_workflow_integration",
          "test_builder_test_cli_group_exists",
          "test_builder_test_cli_commands_exist",
          "test_test_all_success",
          "test_test_all_with_failures",
          "test_test_all_with_scoring",
          "test_test_all_with_exports",
          "test_test_all_error_handling",
          "test_test_level_1_success",
          "test_test_level_2_success",
          "test_test_level_invalid_level",
          "test_test_variant_processing_success",
          "test_test_variant_invalid_variant",
          "test_test_by_type_success",
          "test_test_by_type_with_errors",
          "test_test_by_type_with_export",
          "test_registry_report_success",
          "test_registry_report_with_verbose_errors",
          "test_validate_builder_success",
          "test_validate_builder_with_errors",
          "test_list_builders_success",
          "test_list_builders_no_builders_found",
          "test_list_builders_error_handling",
          "test_json_export_functionality",
          "test_generate_score_chart",
          "test_test_all_import_error",
          "test_test_level_execution_error",
          "test_test_variant_execution_error",
          "test_full_workflow_integration",
          "test_scoring_workflow_integration"
        ]
      },
      "likely_tested_functions": [
        "workspace_cli",
        "init_workspace",
        "discover_components",
        "validate_workspace",
        "workspace_info",
        "search_components",
        "system_status",
        "refresh_catalog",
        "pipeline_cli",
        "list_pipelines",
        "discover_pipelines",
        "show_pipeline",
        "show_connections",
        "show_alternatives",
        "find_path",
        "recommend_pipelines",
        "validate_registry",
        "show_stats",
        "generate_score_chart",
        "builder_test",
        "test_all",
        "test_level",
        "test_variant",
        "test_by_type",
        "registry_report",
        "validate_builder",
        "list_builders",
        "registry_cli",
        "init_workspace",
        "list_steps",
        "validate_registry",
        "resolve_step",
        "validate_step_definition",
        "validation_status",
        "reset_validation_metrics",
        "catalog_cli",
        "list_steps",
        "search_steps",
        "show_step",
        "show_components",
        "list_frameworks",
        "list_workspaces",
        "show_metrics",
        "discover_workspace",
        "alignment",
        "validate",
        "validate_all",
        "validate_level",
        "list_scripts",
        "runtime",
        "test_script",
        "test_pipeline",
        "test_compatibility"
      ],
      "likely_untested_functions": [
        "main",
        "main",
        "print_test_results",
        "print_enhanced_results",
        "import_builder_class",
        "export_results_to_json",
        "test_all_discovered",
        "test_single",
        "list_discovered",
        "main",
        "_create_workspace_structure",
        "_create_workspace_registry",
        "_create_workspace_documentation",
        "_create_example_implementations",
        "main",
        "main",
        "print_validation_summary",
        "_make_json_serializable",
        "save_report",
        "generate_html_report",
        "main",
        "main"
      ]
    },
    "core": {
      "component": "core",
      "description": "Core framework components (assembler, base, compiler, config_fields, deps)",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "core/assembler/pipeline_template_base.py",
        "core/assembler/pipeline_assembler.py",
        "core/utils/hybrid_path_resolution.py",
        "core/deps/specification_registry.py",
        "core/deps/registry_manager.py",
        "core/deps/factory.py",
        "core/deps/dependency_resolver.py",
        "core/deps/property_reference.py",
        "core/deps/semantic_matcher.py",
        "core/config_fields/tier_registry.py",
        "core/config_fields/step_catalog_aware_categorizer.py",
        "core/config_fields/config_merger.py",
        "core/config_fields/constants.py",
        "core/config_fields/type_aware_config_serializer.py",
        "core/config_fields/cradle_config_factory.py",
        "core/config_fields/unified_config_manager.py",
        "core/config_fields/performance_optimizer.py",
        "core/config_fields/config_field_categorizer.py",
        "core/config_fields/circular_reference_tracker.py",
        "core/compiler/name_generator.py",
        "core/compiler/dag_compiler.py",
        "core/compiler/dynamic_template.py",
        "core/compiler/exceptions.py",
        "core/compiler/validation.py",
        "core/base/enums.py",
        "core/base/contract_base.py",
        "core/base/specification_base.py",
        "core/base/config_base.py",
        "core/base/builder_base.py",
        "core/base/hyperparameters_base.py"
      ],
      "test_files": [
        "core/assembler/test_pipeline_builder_template.py",
        "core/assembler/test_pipeline_template_base.py",
        "core/assembler/test_pipeline_assembler.py",
        "core/integration/test_pipeline_execution_temp_dir_integration.py",
        "core/utils/test_hybrid_path_resolution.py",
        "core/config_portability/test_processing_config_portability.py",
        "core/config_portability/test_base_config_portability.py",
        "core/deps/test_semantic_matcher.py",
        "core/deps/test_property_reference.py",
        "core/deps/test_global_state_isolation.py",
        "core/deps/test_factory.py",
        "core/deps/test_specification_registry.py",
        "core/deps/test_registry_manager.py",
        "core/deps/test_helpers.py",
        "core/deps/test_dependency_resolver.py",
        "core/config_fields/test_type_aware_serialization.py",
        "core/config_fields/test_circular_reference_tracker.py",
        "core/config_fields/test_config_field_categorizer.py",
        "core/config_fields/test_circular_reference_consolidated.py",
        "core/config_fields/test_end_to_end_integration.py",
        "core/config_fields/test_bug_fixes_consolidated.py",
        "core/config_fields/test_config_class_detector.py",
        "core/config_fields/test_tier_registry.py",
        "core/config_fields/test_config_merger.py",
        "core/config_fields/test_type_aware_deserialization.py",
        "core/config_fields/test_config_class_store.py",
        "core/config_fields/test_integration.py",
        "core/config_fields/test_load_configs_correctness.py",
        "core/config_fields/test_constants.py",
        "core/compiler/test_validation.py",
        "core/compiler/test_config_resolver.py",
        "core/compiler/test_exceptions.py",
        "core/compiler/test_name_generator.py",
        "core/compiler/test_dynamic_template.py",
        "core/compiler/test_dag_compiler.py",
        "core/compiler/test_enhanced_config_resolver.py",
        "core/base/test_hyperparameters_base.py",
        "core/base/test_contract_base.py",
        "core/base/test_config_base.py",
        "core/base/test_all_base.py",
        "core/base/test_enums.py",
        "core/base/test_builder_base.py",
        "core/base/test_specification_base.py",
        "core/base/test_get_script_contract_simple.py"
      ],
      "total_source_functions": 991,
      "tested_functions": 653,
      "untested_functions": 338,
      "coverage_percentage": 65.89303733602422,
      "total_source_lines": 12092,
      "total_test_lines": 19276,
      "test_to_source_ratio": 2.2613521695257317,
      "source_functions_by_file": {
        "core/assembler/pipeline_template_base.py": [
          "PipelineTemplateBase.__init__",
          "__init__",
          "PipelineTemplateBase._load_configs",
          "_load_configs",
          "PipelineTemplateBase._get_base_config",
          "_get_base_config",
          "PipelineTemplateBase._initialize_components",
          "_initialize_components",
          "PipelineTemplateBase._validate_configuration",
          "_validate_configuration",
          "PipelineTemplateBase._create_pipeline_dag",
          "_create_pipeline_dag",
          "PipelineTemplateBase._create_config_map",
          "_create_config_map",
          "PipelineTemplateBase._create_step_builder_map",
          "_create_step_builder_map",
          "PipelineTemplateBase.set_pipeline_parameters",
          "set_pipeline_parameters",
          "PipelineTemplateBase._get_pipeline_parameters",
          "_get_pipeline_parameters",
          "PipelineTemplateBase.generate_pipeline",
          "generate_pipeline",
          "PipelineTemplateBase._get_pipeline_name",
          "_get_pipeline_name",
          "PipelineTemplateBase._store_pipeline_metadata",
          "_store_pipeline_metadata",
          "PipelineTemplateBase.create_with_components",
          "create_with_components",
          "PipelineTemplateBase.build_with_context",
          "build_with_context",
          "PipelineTemplateBase.build_in_thread",
          "build_in_thread",
          "__init__",
          "_load_configs",
          "_get_base_config",
          "_initialize_components",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "set_pipeline_parameters",
          "_get_pipeline_parameters",
          "generate_pipeline",
          "_get_pipeline_name",
          "_store_pipeline_metadata",
          "create_with_components",
          "build_with_context",
          "build_in_thread"
        ],
        "core/assembler/pipeline_assembler.py": [
          "safe_value_for_logging",
          "PipelineAssembler.__init__",
          "__init__",
          "PipelineAssembler._initialize_step_builders",
          "_initialize_step_builders",
          "PipelineAssembler._propagate_messages",
          "_propagate_messages",
          "PipelineAssembler._generate_outputs",
          "_generate_outputs",
          "PipelineAssembler._instantiate_step",
          "_instantiate_step",
          "PipelineAssembler.create_with_components",
          "create_with_components",
          "PipelineAssembler._get_registry_manager",
          "_get_registry_manager",
          "PipelineAssembler._get_dependency_resolver",
          "_get_dependency_resolver",
          "PipelineAssembler.generate_pipeline",
          "generate_pipeline",
          "__init__",
          "_initialize_step_builders",
          "_propagate_messages",
          "_generate_outputs",
          "_instantiate_step",
          "create_with_components",
          "_get_registry_manager",
          "_get_dependency_resolver",
          "generate_pipeline"
        ],
        "core/utils/hybrid_path_resolution.py": [
          "HybridResolutionMetrics.__init__",
          "__init__",
          "HybridResolutionMetrics.record_strategy_1_success",
          "record_strategy_1_success",
          "HybridResolutionMetrics.record_strategy_2_success",
          "record_strategy_2_success",
          "HybridResolutionMetrics.record_failure",
          "record_failure",
          "HybridResolutionMetrics.get_metrics",
          "get_metrics",
          "HybridResolutionConfig.is_hybrid_resolution_enabled",
          "is_hybrid_resolution_enabled",
          "HybridResolutionConfig.get_hybrid_resolution_mode",
          "get_hybrid_resolution_mode",
          "get_hybrid_resolution_metrics",
          "HybridPathResolver.__init__",
          "__init__",
          "HybridPathResolver.resolve_path",
          "resolve_path",
          "HybridPathResolver._package_location_discovery",
          "_package_location_discovery",
          "HybridPathResolver._working_directory_discovery",
          "_working_directory_discovery",
          "resolve_hybrid_path",
          "__init__",
          "record_strategy_1_success",
          "record_strategy_2_success",
          "record_failure",
          "get_metrics",
          "is_hybrid_resolution_enabled",
          "get_hybrid_resolution_mode",
          "__init__",
          "resolve_path",
          "_package_location_discovery",
          "_working_directory_discovery"
        ],
        "core/deps/specification_registry.py": [
          "SpecificationRegistry.__init__",
          "__init__",
          "SpecificationRegistry.register",
          "register",
          "SpecificationRegistry.get_specification",
          "get_specification",
          "SpecificationRegistry.get_specifications_by_type",
          "get_specifications_by_type",
          "SpecificationRegistry.list_step_names",
          "list_step_names",
          "SpecificationRegistry.list_step_types",
          "list_step_types",
          "SpecificationRegistry.find_compatible_outputs",
          "find_compatible_outputs",
          "SpecificationRegistry._are_compatible",
          "_are_compatible",
          "SpecificationRegistry._calculate_compatibility_score",
          "_calculate_compatibility_score",
          "SpecificationRegistry.__repr__",
          "__repr__",
          "__init__",
          "register",
          "get_specification",
          "get_specifications_by_type",
          "list_step_names",
          "list_step_types",
          "find_compatible_outputs",
          "_are_compatible",
          "_calculate_compatibility_score",
          "__repr__"
        ],
        "core/deps/registry_manager.py": [
          "RegistryManager.__init__",
          "__init__",
          "RegistryManager._get_hybrid_manager",
          "_get_hybrid_manager",
          "RegistryManager._get_workspace_aware_context_name",
          "_get_workspace_aware_context_name",
          "RegistryManager.get_registry",
          "get_registry",
          "RegistryManager.list_contexts",
          "list_contexts",
          "RegistryManager.clear_context",
          "clear_context",
          "RegistryManager.clear_all_contexts",
          "clear_all_contexts",
          "RegistryManager.get_context_stats",
          "get_context_stats",
          "RegistryManager.__repr__",
          "__repr__",
          "get_registry",
          "list_contexts",
          "clear_context",
          "get_context_stats",
          "get_pipeline_registry",
          "get_default_registry",
          "integrate_with_pipeline_builder",
          "__init__",
          "_get_hybrid_manager",
          "_get_workspace_aware_context_name",
          "get_registry",
          "list_contexts",
          "clear_context",
          "clear_all_contexts",
          "get_context_stats",
          "__repr__",
          "new_init"
        ],
        "core/deps/factory.py": [
          "create_pipeline_components",
          "get_thread_components",
          "dependency_resolution_context"
        ],
        "core/deps/dependency_resolver.py": [
          "UnifiedDependencyResolver.__init__",
          "__init__",
          "UnifiedDependencyResolver.register_specification",
          "register_specification",
          "UnifiedDependencyResolver.resolve_all_dependencies",
          "resolve_all_dependencies",
          "UnifiedDependencyResolver.resolve_step_dependencies",
          "resolve_step_dependencies",
          "UnifiedDependencyResolver.resolve_with_scoring",
          "resolve_with_scoring",
          "UnifiedDependencyResolver._get_all_candidates_with_scores",
          "_get_all_candidates_with_scores",
          "UnifiedDependencyResolver._get_score_breakdown",
          "_get_score_breakdown",
          "UnifiedDependencyResolver._generate_resolution_details",
          "_generate_resolution_details",
          "UnifiedDependencyResolver._resolve_single_dependency",
          "_resolve_single_dependency",
          "UnifiedDependencyResolver._calculate_compatibility",
          "_calculate_compatibility",
          "UnifiedDependencyResolver._are_types_compatible",
          "_are_types_compatible",
          "UnifiedDependencyResolver._are_data_types_compatible",
          "_are_data_types_compatible",
          "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
          "_normalize_step_type_for_compatibility",
          "UnifiedDependencyResolver._calculate_keyword_match",
          "_calculate_keyword_match",
          "UnifiedDependencyResolver.get_resolution_report",
          "get_resolution_report",
          "UnifiedDependencyResolver.clear_cache",
          "clear_cache",
          "create_dependency_resolver",
          "__init__",
          "register_specification",
          "resolve_all_dependencies",
          "resolve_step_dependencies",
          "resolve_with_scoring",
          "_get_all_candidates_with_scores",
          "_get_score_breakdown",
          "_generate_resolution_details",
          "_resolve_single_dependency",
          "_calculate_compatibility",
          "_are_types_compatible",
          "_are_data_types_compatible",
          "_normalize_step_type_for_compatibility",
          "_calculate_keyword_match",
          "get_resolution_report",
          "clear_cache"
        ],
        "core/deps/property_reference.py": [
          "PropertyReference.validate_step_name",
          "validate_step_name",
          "PropertyReference.to_sagemaker_property",
          "to_sagemaker_property",
          "PropertyReference.to_runtime_property",
          "to_runtime_property",
          "PropertyReference._get_property_value",
          "_get_property_value",
          "PropertyReference._parse_property_path",
          "_parse_property_path",
          "PropertyReference.__str__",
          "__str__",
          "PropertyReference.__repr__",
          "__repr__",
          "validate_step_name",
          "to_sagemaker_property",
          "to_runtime_property",
          "_get_property_value",
          "_parse_property_path",
          "__str__",
          "__repr__"
        ],
        "core/deps/semantic_matcher.py": [
          "SemanticMatcher.__init__",
          "__init__",
          "SemanticMatcher.calculate_similarity",
          "calculate_similarity",
          "SemanticMatcher.calculate_similarity_with_aliases",
          "calculate_similarity_with_aliases",
          "SemanticMatcher._normalize_name",
          "_normalize_name",
          "SemanticMatcher._calculate_string_similarity",
          "_calculate_string_similarity",
          "SemanticMatcher._calculate_token_similarity",
          "_calculate_token_similarity",
          "SemanticMatcher._calculate_semantic_similarity",
          "_calculate_semantic_similarity",
          "SemanticMatcher._calculate_substring_similarity",
          "_calculate_substring_similarity",
          "SemanticMatcher._are_synonyms",
          "_are_synonyms",
          "SemanticMatcher.find_best_matches",
          "find_best_matches",
          "SemanticMatcher.explain_similarity",
          "explain_similarity",
          "__init__",
          "calculate_similarity",
          "calculate_similarity_with_aliases",
          "_normalize_name",
          "_calculate_string_similarity",
          "_calculate_token_similarity",
          "_calculate_semantic_similarity",
          "_calculate_substring_similarity",
          "_are_synonyms",
          "find_best_matches",
          "explain_similarity"
        ],
        "core/config_fields/tier_registry.py": [
          "ConfigFieldTierRegistryAdapter.get_tier",
          "get_tier",
          "ConfigFieldTierRegistryAdapter.register_field",
          "register_field",
          "ConfigFieldTierRegistryAdapter.register_fields",
          "register_fields",
          "ConfigFieldTierRegistryAdapter.get_fields_by_tier",
          "get_fields_by_tier",
          "ConfigFieldTierRegistryAdapter.reset_to_defaults",
          "reset_to_defaults",
          "get_tier",
          "register_field",
          "register_fields",
          "get_fields_by_tier",
          "reset_to_defaults"
        ],
        "core/config_fields/step_catalog_aware_categorizer.py": [
          "StepCatalogAwareConfigFieldCategorizer.__init__",
          "__init__",
          "StepCatalogAwareConfigFieldCategorizer._initialize_enhanced_mappings",
          "_initialize_enhanced_mappings",
          "StepCatalogAwareConfigFieldCategorizer._get_workspace_field_mappings",
          "_get_workspace_field_mappings",
          "StepCatalogAwareConfigFieldCategorizer._get_framework_field_mappings",
          "_get_framework_field_mappings",
          "StepCatalogAwareConfigFieldCategorizer._categorize_field_with_step_catalog_context",
          "_categorize_field_with_step_catalog_context",
          "StepCatalogAwareConfigFieldCategorizer._categorize_field",
          "_categorize_field",
          "StepCatalogAwareConfigFieldCategorizer.get_enhanced_categorization_info",
          "get_enhanced_categorization_info",
          "StepCatalogAwareConfigFieldCategorizer.categorize_with_enhanced_metadata",
          "categorize_with_enhanced_metadata",
          "create_step_catalog_aware_categorizer",
          "__init__",
          "_initialize_enhanced_mappings",
          "_get_workspace_field_mappings",
          "_get_framework_field_mappings",
          "_categorize_field_with_step_catalog_context",
          "_categorize_field",
          "get_enhanced_categorization_info",
          "categorize_with_enhanced_metadata"
        ],
        "core/config_fields/config_merger.py": [
          "ConfigMerger.__init__",
          "__init__",
          "ConfigMerger.merge",
          "merge",
          "ConfigMerger._verify_merged_output",
          "_verify_merged_output",
          "ConfigMerger._generate_step_name",
          "_generate_step_name",
          "ConfigMerger._check_mutual_exclusivity",
          "_check_mutual_exclusivity",
          "ConfigMerger._check_special_fields_placement",
          "_check_special_fields_placement",
          "ConfigMerger._check_required_fields",
          "_check_required_fields",
          "ConfigMerger.save",
          "save",
          "ConfigMerger.load",
          "load",
          "ConfigMerger.merge_with_direction",
          "merge_with_direction",
          "merge_and_save_configs",
          "load_configs",
          "__init__",
          "merge",
          "_verify_merged_output",
          "_generate_step_name",
          "_check_mutual_exclusivity",
          "_check_special_fields_placement",
          "_check_required_fields",
          "save",
          "load",
          "merge_with_direction"
        ],
        "core/config_fields/constants.py": [],
        "core/config_fields/type_aware_config_serializer.py": [
          "TypeAwareConfigSerializer.__init__",
          "__init__",
          "TypeAwareConfigSerializer.serialize",
          "serialize",
          "TypeAwareConfigSerializer.deserialize",
          "deserialize",
          "TypeAwareConfigSerializer._deserialize_model",
          "_deserialize_model",
          "TypeAwareConfigSerializer._get_class_by_name",
          "_get_class_by_name",
          "TypeAwareConfigSerializer.generate_step_name",
          "generate_step_name",
          "TypeAwareConfigSerializer._generate_step_name_fallback",
          "_generate_step_name_fallback",
          "serialize_config",
          "deserialize_config",
          "__init__",
          "serialize",
          "deserialize",
          "_deserialize_model",
          "_get_class_by_name",
          "generate_step_name",
          "_generate_step_name_fallback",
          "build_complete_config_classes"
        ],
        "core/config_fields/cradle_config_factory.py": [
          "_map_region_to_aws_region",
          "_create_field_schema",
          "_format_edx_manifest_key",
          "_create_edx_manifest",
          "_create_edx_manifest_from_key",
          "_generate_transform_sql",
          "_get_all_fields",
          "create_cradle_data_load_config",
          "create_training_and_calibration_configs"
        ],
        "core/config_fields/unified_config_manager.py": [
          "SimpleTierAwareTracker.__init__",
          "__init__",
          "SimpleTierAwareTracker.enter_object",
          "enter_object",
          "SimpleTierAwareTracker.exit_object",
          "exit_object",
          "SimpleTierAwareTracker.reset",
          "reset",
          "UnifiedConfigManager.__init__",
          "__init__",
          "UnifiedConfigManager.step_catalog",
          "step_catalog",
          "UnifiedConfigManager.get_config_classes",
          "get_config_classes",
          "UnifiedConfigManager.get_field_tiers",
          "get_field_tiers",
          "UnifiedConfigManager.serialize_with_tier_awareness",
          "serialize_with_tier_awareness",
          "UnifiedConfigManager._serialize_recursive",
          "_serialize_recursive",
          "UnifiedConfigManager._get_basic_config_classes",
          "_get_basic_config_classes",
          "UnifiedConfigManager._basic_field_categorization",
          "_basic_field_categorization",
          "get_unified_config_manager",
          "__init__",
          "enter_object",
          "exit_object",
          "reset",
          "__init__",
          "step_catalog",
          "get_config_classes",
          "get_field_tiers",
          "serialize_with_tier_awareness",
          "_serialize_recursive",
          "_get_basic_config_classes",
          "_basic_field_categorization"
        ],
        "core/config_fields/performance_optimizer.py": [
          "ConfigClassDiscoveryCache.__init__",
          "__init__",
          "ConfigClassDiscoveryCache.get",
          "get",
          "ConfigClassDiscoveryCache.set",
          "set",
          "ConfigClassDiscoveryCache.invalidate",
          "invalidate",
          "ConfigClassDiscoveryCache.get_stats",
          "get_stats",
          "PerformanceOptimizer.__init__",
          "__init__",
          "PerformanceOptimizer.cached_config_discovery",
          "cached_config_discovery",
          "PerformanceOptimizer.optimized_config_loading",
          "optimized_config_loading",
          "PerformanceOptimizer.optimized_serialization",
          "optimized_serialization",
          "PerformanceOptimizer.get_performance_stats",
          "get_performance_stats",
          "PerformanceOptimizer.clear_performance_stats",
          "clear_performance_stats",
          "PerformanceOptimizer.invalidate_cache",
          "invalidate_cache",
          "get_performance_optimizer",
          "performance_monitor",
          "cached_file_stat",
          "optimize_logging_for_production",
          "MemoryOptimizer.get_memory_usage",
          "get_memory_usage",
          "MemoryOptimizer.optimize_garbage_collection",
          "optimize_garbage_collection",
          "__init__",
          "get",
          "set",
          "invalidate",
          "get_stats",
          "__init__",
          "cached_config_discovery",
          "optimized_config_loading",
          "optimized_serialization",
          "get_performance_stats",
          "clear_performance_stats",
          "invalidate_cache",
          "decorator",
          "get_memory_usage",
          "optimize_garbage_collection",
          "wrapper"
        ],
        "core/config_fields/config_field_categorizer.py": [
          "ConfigFieldCategorizer.__init__",
          "__init__",
          "ConfigFieldCategorizer._collect_field_info",
          "_collect_field_info",
          "ConfigFieldCategorizer._is_special_field",
          "_is_special_field",
          "ConfigFieldCategorizer._is_likely_static",
          "_is_likely_static",
          "ConfigFieldCategorizer._categorize_fields",
          "_categorize_fields",
          "ConfigFieldCategorizer._categorize_field",
          "_categorize_field",
          "ConfigFieldCategorizer._place_field",
          "_place_field",
          "ConfigFieldCategorizer.get_category_for_field",
          "get_category_for_field",
          "ConfigFieldCategorizer.get_categorized_fields",
          "get_categorized_fields",
          "ConfigFieldCategorizer.get_field_sources",
          "get_field_sources",
          "ConfigFieldCategorizer.print_categorization_stats",
          "print_categorization_stats",
          "__init__",
          "_collect_field_info",
          "_is_special_field",
          "_is_likely_static",
          "_categorize_fields",
          "_categorize_field",
          "_place_field",
          "get_category_for_field",
          "get_categorized_fields",
          "get_field_sources",
          "print_categorization_stats"
        ],
        "core/config_fields/circular_reference_tracker.py": [
          "SimplifiedCircularReferenceTracker.__init__",
          "__init__",
          "SimplifiedCircularReferenceTracker.enter_object",
          "enter_object",
          "SimplifiedCircularReferenceTracker.exit_object",
          "exit_object",
          "SimplifiedCircularReferenceTracker.get_current_path_str",
          "get_current_path_str",
          "SimplifiedCircularReferenceTracker.reset",
          "reset",
          "SimplifiedCircularReferenceTracker._get_module_from_step_catalog",
          "_get_module_from_step_catalog",
          "SimplifiedCircularReferenceTracker._format_simple_cycle_error",
          "_format_simple_cycle_error",
          "__init__",
          "enter_object",
          "exit_object",
          "get_current_path_str",
          "reset",
          "_get_module_from_step_catalog",
          "_format_simple_cycle_error"
        ],
        "core/compiler/name_generator.py": [
          "generate_random_word",
          "validate_pipeline_name",
          "sanitize_pipeline_name",
          "generate_pipeline_name"
        ],
        "core/compiler/dag_compiler.py": [
          "compile_dag_to_pipeline",
          "PipelineDAGCompiler.__init__",
          "__init__",
          "PipelineDAGCompiler.validate_dag_compatibility",
          "validate_dag_compatibility",
          "PipelineDAGCompiler.preview_resolution",
          "preview_resolution",
          "PipelineDAGCompiler.compile",
          "compile",
          "PipelineDAGCompiler.compile_with_report",
          "compile_with_report",
          "PipelineDAGCompiler.create_template",
          "create_template",
          "PipelineDAGCompiler.get_supported_step_types",
          "get_supported_step_types",
          "PipelineDAGCompiler.validate_config_file",
          "validate_config_file",
          "PipelineDAGCompiler.get_last_template",
          "get_last_template",
          "__init__",
          "validate_dag_compatibility",
          "preview_resolution",
          "compile",
          "compile_with_report",
          "create_template",
          "get_supported_step_types",
          "validate_config_file",
          "get_last_template"
        ],
        "core/compiler/dynamic_template.py": [
          "DynamicPipelineTemplate.__init__",
          "__init__",
          "DynamicPipelineTemplate._detect_config_classes",
          "_detect_config_classes",
          "DynamicPipelineTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "DynamicPipelineTemplate._create_config_map",
          "_create_config_map",
          "DynamicPipelineTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "DynamicPipelineTemplate._validate_configuration",
          "_validate_configuration",
          "DynamicPipelineTemplate.get_resolution_preview",
          "get_resolution_preview",
          "DynamicPipelineTemplate._store_pipeline_metadata",
          "_store_pipeline_metadata",
          "DynamicPipelineTemplate.get_step_catalog_stats",
          "get_step_catalog_stats",
          "DynamicPipelineTemplate.validate_before_build",
          "validate_before_build",
          "DynamicPipelineTemplate.get_step_dependencies",
          "get_step_dependencies",
          "DynamicPipelineTemplate.get_execution_order",
          "get_execution_order",
          "__init__",
          "_detect_config_classes",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "get_resolution_preview",
          "_store_pipeline_metadata",
          "get_step_catalog_stats",
          "validate_before_build",
          "get_step_dependencies",
          "get_execution_order"
        ],
        "core/compiler/exceptions.py": [
          "ConfigurationError.__init__",
          "__init__",
          "ConfigurationError.__str__",
          "__str__",
          "AmbiguityError.__init__",
          "__init__",
          "AmbiguityError.__str__",
          "__str__",
          "ValidationError.__init__",
          "__init__",
          "ValidationError.__str__",
          "__str__",
          "ResolutionError.__init__",
          "__init__",
          "ResolutionError.__str__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__"
        ],
        "core/compiler/validation.py": [
          "ValidationResult.summary",
          "summary",
          "ValidationResult.detailed_report",
          "detailed_report",
          "ResolutionPreview.display",
          "display",
          "ConversionReport.summary",
          "summary",
          "ConversionReport.detailed_report",
          "detailed_report",
          "ValidationEngine.__init__",
          "__init__",
          "ValidationEngine.validate_dag_compatibility",
          "validate_dag_compatibility",
          "summary",
          "detailed_report",
          "display",
          "summary",
          "detailed_report",
          "__init__",
          "validate_dag_compatibility"
        ],
        "core/base/enums.py": [
          "DependencyType.__eq__",
          "__eq__",
          "DependencyType.__hash__",
          "__hash__",
          "NodeType.__eq__",
          "__eq__",
          "NodeType.__hash__",
          "__hash__",
          "__eq__",
          "__hash__",
          "__eq__",
          "__hash__"
        ],
        "core/base/contract_base.py": [
          "ValidationResult.success",
          "success",
          "ValidationResult.error",
          "error",
          "ValidationResult.combine",
          "combine",
          "ValidationResult.add_error",
          "add_error",
          "ValidationResult.add_warning",
          "add_warning",
          "AlignmentResult.success",
          "success",
          "AlignmentResult.error",
          "error",
          "ScriptContract.validate_entry_point",
          "validate_entry_point",
          "ScriptContract.validate_input_paths",
          "validate_input_paths",
          "ScriptContract.validate_output_paths",
          "validate_output_paths",
          "ScriptContract.validate_arguments",
          "validate_arguments",
          "ScriptContract.validate_implementation",
          "validate_implementation",
          "ScriptContract._validate_against_analysis",
          "_validate_against_analysis",
          "ScriptAnalyzer.__init__",
          "__init__",
          "ScriptAnalyzer.ast_tree",
          "ast_tree",
          "ScriptAnalyzer.get_input_paths",
          "get_input_paths",
          "ScriptAnalyzer.get_output_paths",
          "get_output_paths",
          "ScriptAnalyzer.get_env_var_usage",
          "get_env_var_usage",
          "ScriptAnalyzer.get_argument_usage",
          "get_argument_usage",
          "success",
          "error",
          "combine",
          "add_error",
          "add_warning",
          "success",
          "error",
          "validate_entry_point",
          "validate_input_paths",
          "validate_output_paths",
          "validate_arguments",
          "validate_implementation",
          "_validate_against_analysis",
          "__init__",
          "ast_tree",
          "get_input_paths",
          "get_output_paths",
          "get_env_var_usage",
          "get_argument_usage"
        ],
        "core/base/specification_base.py": [
          "DependencySpec.validate_logical_name",
          "validate_logical_name",
          "DependencySpec.validate_dependency_type",
          "validate_dependency_type",
          "DependencySpec.validate_compatible_sources",
          "validate_compatible_sources",
          "DependencySpec.validate_semantic_keywords",
          "validate_semantic_keywords",
          "DependencySpec.matches_name_or_alias",
          "matches_name_or_alias",
          "OutputSpec.validate_logical_name",
          "validate_logical_name",
          "OutputSpec.validate_output_type",
          "validate_output_type",
          "OutputSpec.validate_aliases",
          "validate_aliases",
          "OutputSpec.validate_property_path",
          "validate_property_path",
          "OutputSpec.validate_aliases_no_conflict",
          "validate_aliases_no_conflict",
          "OutputSpec.matches_name_or_alias",
          "matches_name_or_alias",
          "StepSpecification.__init__",
          "__init__",
          "StepSpecification.validate_step_type",
          "validate_step_type",
          "StepSpecification.validate_node_type",
          "validate_node_type",
          "StepSpecification.validate_node_type_constraints",
          "validate_node_type_constraints",
          "StepSpecification._validate_output_aliases",
          "_validate_output_aliases",
          "StepSpecification.get_dependency",
          "get_dependency",
          "StepSpecification.get_output",
          "get_output",
          "StepSpecification.get_output_by_name_or_alias",
          "get_output_by_name_or_alias",
          "StepSpecification.list_all_output_names",
          "list_all_output_names",
          "StepSpecification.list_required_dependencies",
          "list_required_dependencies",
          "StepSpecification.list_optional_dependencies",
          "list_optional_dependencies",
          "StepSpecification.list_dependencies_by_type",
          "list_dependencies_by_type",
          "StepSpecification.list_outputs_by_type",
          "list_outputs_by_type",
          "StepSpecification.validate_specification",
          "validate_specification",
          "StepSpecification.validate_contract_alignment",
          "validate_contract_alignment",
          "StepSpecification.validate_script_compliance",
          "validate_script_compliance",
          "StepSpecification.__repr__",
          "__repr__",
          "StepSpecification.model_validate",
          "model_validate",
          "validate_logical_name",
          "validate_dependency_type",
          "validate_compatible_sources",
          "validate_semantic_keywords",
          "matches_name_or_alias",
          "validate_logical_name",
          "validate_output_type",
          "validate_aliases",
          "validate_property_path",
          "validate_aliases_no_conflict",
          "matches_name_or_alias",
          "__init__",
          "validate_step_type",
          "validate_node_type",
          "validate_node_type_constraints",
          "_validate_output_aliases",
          "get_dependency",
          "get_output",
          "get_output_by_name_or_alias",
          "list_all_output_names",
          "list_required_dependencies",
          "list_optional_dependencies",
          "list_dependencies_by_type",
          "list_outputs_by_type",
          "validate_specification",
          "validate_contract_alignment",
          "validate_script_compliance",
          "__repr__",
          "model_validate"
        ],
        "core/base/config_base.py": [
          "BasePipelineConfig.aws_region",
          "aws_region",
          "BasePipelineConfig.pipeline_name",
          "pipeline_name",
          "BasePipelineConfig.pipeline_description",
          "pipeline_description",
          "BasePipelineConfig.pipeline_s3_loc",
          "pipeline_s3_loc",
          "BasePipelineConfig.effective_source_dir",
          "effective_source_dir",
          "BasePipelineConfig.model_dump",
          "model_dump",
          "BasePipelineConfig.__str__",
          "__str__",
          "BasePipelineConfig._validate_custom_region",
          "_validate_custom_region",
          "BasePipelineConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "BasePipelineConfig.step_catalog",
          "step_catalog",
          "BasePipelineConfig._detect_workspace_dirs",
          "_detect_workspace_dirs",
          "BasePipelineConfig._derive_step_name",
          "_derive_step_name",
          "BasePipelineConfig.get_script_contract",
          "get_script_contract",
          "BasePipelineConfig.script_contract",
          "script_contract",
          "BasePipelineConfig.get_script_path",
          "get_script_path",
          "BasePipelineConfig.resolve_hybrid_path",
          "resolve_hybrid_path",
          "BasePipelineConfig.resolved_source_dir",
          "resolved_source_dir",
          "BasePipelineConfig.get_step_name",
          "get_step_name",
          "BasePipelineConfig.get_config_class_name",
          "get_config_class_name",
          "BasePipelineConfig._get_step_registry",
          "_get_step_registry",
          "BasePipelineConfig.from_base_config",
          "from_base_config",
          "BasePipelineConfig.categorize_fields",
          "categorize_fields",
          "BasePipelineConfig.print_config",
          "print_config",
          "BasePipelineConfig.get_public_init_fields",
          "get_public_init_fields",
          "aws_region",
          "pipeline_name",
          "pipeline_description",
          "pipeline_s3_loc",
          "effective_source_dir",
          "model_dump",
          "__str__",
          "_validate_custom_region",
          "initialize_derived_fields",
          "step_catalog",
          "_detect_workspace_dirs",
          "_derive_step_name",
          "get_script_contract",
          "script_contract",
          "get_script_path",
          "resolve_hybrid_path",
          "resolved_source_dir",
          "get_step_name",
          "get_config_class_name",
          "_get_step_registry",
          "from_base_config",
          "categorize_fields",
          "print_config",
          "get_public_init_fields"
        ],
        "core/base/builder_base.py": [
          "safe_value_for_logging",
          "StepBuilderBase.STEP_NAMES",
          "STEP_NAMES",
          "StepBuilderBase._get_workspace_context",
          "_get_workspace_context",
          "StepBuilderBase.__init__",
          "__init__",
          "StepBuilderBase._sanitize_name_for_sagemaker",
          "_sanitize_name_for_sagemaker",
          "StepBuilderBase._get_step_name",
          "_get_step_name",
          "StepBuilderBase._generate_job_name",
          "_generate_job_name",
          "StepBuilderBase.get_property_path",
          "get_property_path",
          "StepBuilderBase.get_all_property_paths",
          "get_all_property_paths",
          "StepBuilderBase.log_info",
          "log_info",
          "StepBuilderBase.log_debug",
          "log_debug",
          "StepBuilderBase.log_warning",
          "log_warning",
          "StepBuilderBase.log_error",
          "log_error",
          "StepBuilderBase._get_cache_config",
          "_get_cache_config",
          "StepBuilderBase._get_environment_variables",
          "_get_environment_variables",
          "StepBuilderBase._get_job_arguments",
          "_get_job_arguments",
          "StepBuilderBase.set_execution_prefix",
          "set_execution_prefix",
          "StepBuilderBase._get_base_output_path",
          "_get_base_output_path",
          "StepBuilderBase.validate_configuration",
          "validate_configuration",
          "StepBuilderBase.get_required_dependencies",
          "get_required_dependencies",
          "StepBuilderBase.get_optional_dependencies",
          "get_optional_dependencies",
          "StepBuilderBase.get_outputs",
          "get_outputs",
          "StepBuilderBase._get_inputs",
          "_get_inputs",
          "StepBuilderBase._get_outputs",
          "_get_outputs",
          "StepBuilderBase._get_context_name",
          "_get_context_name",
          "StepBuilderBase._get_registry_manager",
          "_get_registry_manager",
          "StepBuilderBase._get_registry",
          "_get_registry",
          "StepBuilderBase._get_dependency_resolver",
          "_get_dependency_resolver",
          "StepBuilderBase.extract_inputs_from_dependencies",
          "extract_inputs_from_dependencies",
          "StepBuilderBase._enhance_dependency_steps_with_specs",
          "_enhance_dependency_steps_with_specs",
          "StepBuilderBase.create_step",
          "create_step",
          "STEP_NAMES",
          "_get_workspace_context",
          "__init__",
          "_sanitize_name_for_sagemaker",
          "_get_step_name",
          "_generate_job_name",
          "get_property_path",
          "get_all_property_paths",
          "log_info",
          "log_debug",
          "log_warning",
          "log_error",
          "_get_cache_config",
          "_get_environment_variables",
          "_get_job_arguments",
          "set_execution_prefix",
          "_get_base_output_path",
          "validate_configuration",
          "get_required_dependencies",
          "get_optional_dependencies",
          "get_outputs",
          "_get_inputs",
          "_get_outputs",
          "_get_context_name",
          "_get_registry_manager",
          "_get_registry",
          "_get_dependency_resolver",
          "extract_inputs_from_dependencies",
          "_enhance_dependency_steps_with_specs",
          "create_step"
        ],
        "core/base/hyperparameters_base.py": [
          "ModelHyperparameters.input_tab_dim",
          "input_tab_dim",
          "ModelHyperparameters.num_classes",
          "num_classes",
          "ModelHyperparameters.is_binary",
          "is_binary",
          "ModelHyperparameters.validate_dimensions",
          "validate_dimensions",
          "ModelHyperparameters.categorize_fields",
          "categorize_fields",
          "ModelHyperparameters.__str__",
          "__str__",
          "ModelHyperparameters.print_hyperparam",
          "print_hyperparam",
          "ModelHyperparameters.get_public_init_fields",
          "get_public_init_fields",
          "ModelHyperparameters.from_base_hyperparam",
          "from_base_hyperparam",
          "ModelHyperparameters.get_config",
          "get_config",
          "ModelHyperparameters.serialize_config",
          "serialize_config",
          "input_tab_dim",
          "num_classes",
          "is_binary",
          "validate_dimensions",
          "categorize_fields",
          "__str__",
          "print_hyperparam",
          "get_public_init_fields",
          "from_base_hyperparam",
          "get_config",
          "serialize_config"
        ]
      },
      "test_functions_by_file": {
        "core/assembler/test_pipeline_builder_template.py": [
          "MockBasePipelineConfig.get_step_name",
          "get_step_name",
          "ConcretePipelineTemplate._validate_configuration",
          "_validate_configuration",
          "ConcretePipelineTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "ConcretePipelineTemplate._create_config_map",
          "_create_config_map",
          "ConcretePipelineTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "TestPipelineTemplateBase.config_data",
          "config_data",
          "TestPipelineTemplateBase.mock_base_config",
          "mock_base_config",
          "TestPipelineTemplateBase.mock_configs",
          "mock_configs",
          "TestPipelineTemplateBase.setup_mocks",
          "setup_mocks",
          "TestPipelineTemplateBase.test_initialization",
          "test_initialization",
          "TestPipelineTemplateBase.test_initialization_with_provided_components",
          "test_initialization_with_provided_components",
          "TestPipelineTemplateBase.test_config_loading",
          "test_config_loading",
          "TestPipelineTemplateBase.test_base_config_validation",
          "test_base_config_validation",
          "TestPipelineTemplateBase.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineTemplateBase.test_pipeline_name_generation",
          "test_pipeline_name_generation",
          "TestPipelineTemplateBase.test_pipeline_name_explicit_override",
          "test_pipeline_name_explicit_override",
          "TestPipelineTemplateBase.test_store_pipeline_metadata",
          "test_store_pipeline_metadata",
          "TestPipelineTemplateBase.test_create_with_components_class_method",
          "test_create_with_components_class_method",
          "TestPipelineTemplateBase.test_build_with_context_class_method",
          "test_build_with_context_class_method",
          "TestPipelineTemplateBase.test_build_in_thread_class_method",
          "test_build_in_thread_class_method",
          "TestPipelineTemplateBase.test_config_loading_error_handling",
          "test_config_loading_error_handling",
          "TestPipelineTemplateBase.test_pipeline_name_fallback_values",
          "test_pipeline_name_fallback_values",
          "TestPipelineTemplateBase.test_get_pipeline_parameters_default",
          "test_get_pipeline_parameters_default",
          "TestPipelineTemplateBase.test_store_pipeline_metadata_without_attributes",
          "test_store_pipeline_metadata_without_attributes",
          "TestPipelineTemplateBase.test_config_classes_validation",
          "test_config_classes_validation",
          "TestPipelineTemplateBase.test_initialization_partial_components",
          "test_initialization_partial_components",
          "TestPipelineAssembler.mock_dag",
          "mock_dag",
          "TestPipelineAssembler.mock_configs",
          "mock_configs",
          "TestPipelineAssembler.mock_step_catalog",
          "mock_step_catalog",
          "TestPipelineAssembler.mock_dependency_components",
          "mock_dependency_components",
          "TestPipelineAssembler.setup_assembler_mocks",
          "setup_assembler_mocks",
          "TestPipelineAssembler.test_assembler_initialization",
          "test_assembler_initialization",
          "TestPipelineAssembler.test_assembler_validation_missing_configs",
          "test_assembler_validation_missing_configs",
          "TestPipelineAssembler.test_assembler_validation_missing_builders",
          "test_assembler_validation_missing_builders",
          "TestPipelineAssembler.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineAssembler.test_create_with_components_class_method",
          "test_create_with_components_class_method",
          "get_step_name",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "config_data",
          "mock_base_config",
          "mock_configs",
          "setup_mocks",
          "test_initialization",
          "test_initialization_with_provided_components",
          "test_config_loading",
          "test_base_config_validation",
          "test_generate_pipeline",
          "test_pipeline_name_generation",
          "test_pipeline_name_explicit_override",
          "test_store_pipeline_metadata",
          "test_create_with_components_class_method",
          "test_build_with_context_class_method",
          "test_build_in_thread_class_method",
          "test_config_loading_error_handling",
          "test_pipeline_name_fallback_values",
          "test_get_pipeline_parameters_default",
          "test_store_pipeline_metadata_without_attributes",
          "test_config_classes_validation",
          "test_initialization_partial_components",
          "mock_dag",
          "mock_configs",
          "mock_step_catalog",
          "mock_dependency_components",
          "setup_assembler_mocks",
          "test_assembler_initialization",
          "test_assembler_validation_missing_configs",
          "test_assembler_validation_missing_builders",
          "test_generate_pipeline",
          "test_create_with_components_class_method",
          "InvalidTemplate._validate_configuration",
          "_validate_configuration",
          "InvalidTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "InvalidTemplate._create_config_map",
          "_create_config_map",
          "InvalidTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map"
        ],
        "core/assembler/test_pipeline_template_base.py": [
          "ConcretePipelineTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "ConcretePipelineTemplate._create_config_map",
          "_create_config_map",
          "ConcretePipelineTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "ConcretePipelineTemplate._validate_configuration",
          "_validate_configuration",
          "TestPipelineTemplateBase.setup_method",
          "setup_method",
          "TestPipelineTemplateBase.config_path",
          "config_path",
          "TestPipelineTemplateBase.mock_session",
          "mock_session",
          "TestPipelineTemplateBase.role",
          "role",
          "TestPipelineTemplateBase.mock_registry_manager",
          "mock_registry_manager",
          "TestPipelineTemplateBase.mock_dependency_resolver",
          "mock_dependency_resolver",
          "TestPipelineTemplateBase.test_init_without_pipeline_parameters",
          "test_init_without_pipeline_parameters",
          "TestPipelineTemplateBase.test_init_with_pipeline_parameters",
          "test_init_with_pipeline_parameters",
          "TestPipelineTemplateBase.test_set_pipeline_parameters",
          "test_set_pipeline_parameters",
          "TestPipelineTemplateBase.test_set_pipeline_parameters_with_none",
          "test_set_pipeline_parameters_with_none",
          "TestPipelineTemplateBase.test_get_pipeline_parameters_with_stored_parameters",
          "test_get_pipeline_parameters_with_stored_parameters",
          "TestPipelineTemplateBase.test_get_pipeline_parameters_fallback_when_none_stored",
          "test_get_pipeline_parameters_fallback_when_none_stored",
          "TestPipelineTemplateBase.test_get_pipeline_parameters_after_setting_parameters",
          "test_get_pipeline_parameters_after_setting_parameters",
          "TestPipelineTemplateBase.test_parameter_type_hints",
          "test_parameter_type_hints",
          "TestPipelineTemplateBase.test_parameter_logging",
          "test_parameter_logging",
          "TestPipelineTemplateBase.test_parameter_overwrite_behavior",
          "test_parameter_overwrite_behavior",
          "TestPipelineTemplateBase.test_parameter_immutability_protection",
          "test_parameter_immutability_protection",
          "TestPipelineTemplateBase.test_integration_with_subclass_parameter_methods",
          "test_integration_with_subclass_parameter_methods",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "setup_method",
          "config_path",
          "mock_session",
          "role",
          "mock_registry_manager",
          "mock_dependency_resolver",
          "test_init_without_pipeline_parameters",
          "test_init_with_pipeline_parameters",
          "test_set_pipeline_parameters",
          "test_set_pipeline_parameters_with_none",
          "test_get_pipeline_parameters_with_stored_parameters",
          "test_get_pipeline_parameters_fallback_when_none_stored",
          "test_get_pipeline_parameters_after_setting_parameters",
          "test_parameter_type_hints",
          "test_parameter_logging",
          "test_parameter_overwrite_behavior",
          "test_parameter_immutability_protection",
          "test_integration_with_subclass_parameter_methods",
          "SubclassWithParameterMethod._create_pipeline_dag",
          "_create_pipeline_dag",
          "SubclassWithParameterMethod._create_config_map",
          "_create_config_map",
          "SubclassWithParameterMethod._create_step_builder_map",
          "_create_step_builder_map",
          "SubclassWithParameterMethod._validate_configuration",
          "_validate_configuration",
          "SubclassWithParameterMethod.get_default_parameters",
          "get_default_parameters",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "get_default_parameters"
        ],
        "core/assembler/test_pipeline_assembler.py": [
          "MockConfig.__init__",
          "__init__",
          "MockStepBuilder.__init__",
          "__init__",
          "MockStepBuilder.validate_configuration",
          "validate_configuration",
          "MockStepBuilder._get_inputs",
          "_get_inputs",
          "MockStepBuilder._get_outputs",
          "_get_outputs",
          "MockStepBuilder.create_step",
          "create_step",
          "TestPipelineAssembler.nodes",
          "nodes",
          "TestPipelineAssembler.edges",
          "edges",
          "TestPipelineAssembler.dag",
          "dag",
          "TestPipelineAssembler.config_map",
          "config_map",
          "TestPipelineAssembler.mock_step_catalog",
          "mock_step_catalog",
          "TestPipelineAssembler.mock_session",
          "mock_session",
          "TestPipelineAssembler.role",
          "role",
          "TestPipelineAssembler.mock_registry_manager",
          "mock_registry_manager",
          "TestPipelineAssembler.mock_dependency_resolver",
          "mock_dependency_resolver",
          "TestPipelineAssembler.test_init_success",
          "test_init_success",
          "TestPipelineAssembler.test_init_missing_configs",
          "test_init_missing_configs",
          "TestPipelineAssembler.test_init_missing_step_builders",
          "test_init_missing_step_builders",
          "TestPipelineAssembler.test_init_invalid_dag_edges",
          "test_init_invalid_dag_edges",
          "TestPipelineAssembler.test_initialize_step_builders",
          "test_initialize_step_builders",
          "TestPipelineAssembler.test_propagate_messages",
          "test_propagate_messages",
          "TestPipelineAssembler.test_generate_outputs",
          "test_generate_outputs",
          "TestPipelineAssembler.test_instantiate_step",
          "test_instantiate_step",
          "TestPipelineAssembler.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineAssembler.test_generate_pipeline_with_cycle",
          "test_generate_pipeline_with_cycle",
          "TestPipelineAssembler.test_create_with_components",
          "test_create_with_components",
          "TestPipelineAssembler.test_get_registry_manager",
          "test_get_registry_manager",
          "TestPipelineAssembler.test_get_dependency_resolver",
          "test_get_dependency_resolver",
          "TestPipelineAssembler.test_step_instantiation_without_cradle_requests",
          "test_step_instantiation_without_cradle_requests",
          "TestPipelineAssembler.test_pipeline_regeneration",
          "test_pipeline_regeneration",
          "TestPipelineAssembler.test_logging_integration",
          "test_logging_integration",
          "TestPipelineAssembler.test_initialize_step_builders_with_pipeline_parameters",
          "test_initialize_step_builders_with_pipeline_parameters",
          "TestPipelineAssembler.test_initialize_step_builders_without_pipeline_parameters",
          "test_initialize_step_builders_without_pipeline_parameters",
          "TestPipelineAssembler.test_generate_outputs_with_join_pattern",
          "test_generate_outputs_with_join_pattern",
          "TestPipelineAssembler.test_generate_outputs_fallback_to_config",
          "test_generate_outputs_fallback_to_config",
          "TestPipelineAssembler.test_pipeline_parameters_storage",
          "test_pipeline_parameters_storage",
          "__init__",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "nodes",
          "edges",
          "dag",
          "config_map",
          "mock_step_catalog",
          "mock_session",
          "role",
          "mock_registry_manager",
          "mock_dependency_resolver",
          "test_init_success",
          "test_init_missing_configs",
          "test_init_missing_step_builders",
          "test_init_invalid_dag_edges",
          "test_initialize_step_builders",
          "test_propagate_messages",
          "test_generate_outputs",
          "test_instantiate_step",
          "test_generate_pipeline",
          "test_generate_pipeline_with_cycle",
          "test_create_with_components",
          "test_get_registry_manager",
          "test_get_dependency_resolver",
          "test_step_instantiation_without_cradle_requests",
          "test_pipeline_regeneration",
          "test_logging_integration",
          "test_initialize_step_builders_with_pipeline_parameters",
          "test_initialize_step_builders_without_pipeline_parameters",
          "test_generate_outputs_with_join_pattern",
          "test_generate_outputs_fallback_to_config",
          "test_pipeline_parameters_storage"
        ],
        "core/integration/test_pipeline_execution_temp_dir_integration.py": [
          "MockConfig.__init__",
          "__init__",
          "MockStepBuilder.__init__",
          "__init__",
          "MockStepBuilder.validate_configuration",
          "validate_configuration",
          "MockStepBuilder._get_inputs",
          "_get_inputs",
          "MockStepBuilder._get_outputs",
          "_get_outputs",
          "MockStepBuilder.create_step",
          "create_step",
          "TestPipelineExecutionTempDirIntegration.setup_method",
          "setup_method",
          "TestPipelineExecutionTempDirIntegration.test_end_to_end_parameter_flow_with_custom_execution_prefix",
          "test_end_to_end_parameter_flow_with_custom_execution_prefix",
          "TestPipelineExecutionTempDirIntegration.test_end_to_end_parameter_flow_with_assembler_integration",
          "test_end_to_end_parameter_flow_with_assembler_integration",
          "TestPipelineExecutionTempDirIntegration.test_step_builder_base_output_path_resolution_with_execution_prefix",
          "test_step_builder_base_output_path_resolution_with_execution_prefix",
          "TestPipelineExecutionTempDirIntegration.test_output_generation_with_join_pattern",
          "test_output_generation_with_join_pattern",
          "TestPipelineExecutionTempDirIntegration.test_backward_compatibility_without_parameters",
          "test_backward_compatibility_without_parameters",
          "TestPipelineExecutionTempDirIntegration.test_parameter_type_compatibility",
          "test_parameter_type_compatibility",
          "TestPipelineExecutionTempDirIntegration.test_multiple_parameter_handling",
          "test_multiple_parameter_handling",
          "TestPipelineExecutionTempDirIntegration.test_parameter_extraction_logic",
          "test_parameter_extraction_logic",
          "TestPipelineExecutionTempDirIntegration.test_error_handling_with_invalid_parameters",
          "test_error_handling_with_invalid_parameters",
          "TestPipelineExecutionTempDirIntegration.test_logging_integration",
          "test_logging_integration",
          "__init__",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "setup_method",
          "test_end_to_end_parameter_flow_with_custom_execution_prefix",
          "test_end_to_end_parameter_flow_with_assembler_integration",
          "test_step_builder_base_output_path_resolution_with_execution_prefix",
          "test_output_generation_with_join_pattern",
          "test_backward_compatibility_without_parameters",
          "test_parameter_type_compatibility",
          "test_multiple_parameter_handling",
          "test_parameter_extraction_logic",
          "test_error_handling_with_invalid_parameters",
          "test_logging_integration"
        ],
        "core/utils/test_hybrid_path_resolution.py": [
          "TestHybridPathResolver.setup_method",
          "setup_method",
          "TestHybridPathResolver.test_resolver_initialization",
          "test_resolver_initialization",
          "TestHybridPathResolver.test_empty_relative_path",
          "test_empty_relative_path",
          "TestThreeDeploymentScenarios.setup_method",
          "setup_method",
          "TestThreeDeploymentScenarios.test_scenario_1_lambda_mods_bundled_deployment",
          "test_scenario_1_lambda_mods_bundled_deployment",
          "TestThreeDeploymentScenarios.test_scenario_2_development_monorepo",
          "test_scenario_2_development_monorepo",
          "TestThreeDeploymentScenarios.test_scenario_3_pip_installed_separated",
          "test_scenario_3_pip_installed_separated",
          "TestThreeDeploymentScenarios.test_hybrid_resolution_strategy_progression",
          "test_hybrid_resolution_strategy_progression",
          "TestHybridPathResolverEdgeCases.setup_method",
          "setup_method",
          "TestHybridPathResolverEdgeCases.test_working_directory_discovery_direct",
          "test_working_directory_discovery_direct",
          "TestHybridPathResolverEdgeCases.test_working_directory_discovery_current_dir_match",
          "test_working_directory_discovery_current_dir_match",
          "TestHybridResolutionConfig.test_default_enabled",
          "test_default_enabled",
          "TestHybridResolutionConfig.test_default_mode",
          "test_default_mode",
          "TestHybridResolutionConfig.test_environment_variable_override",
          "test_environment_variable_override",
          "TestResolveHybridPath.test_disabled_resolution",
          "test_disabled_resolution",
          "TestResolveHybridPath.test_fallback_only_mode",
          "test_fallback_only_mode",
          "TestHybridResolutionMetrics.test_metrics_collection",
          "test_metrics_collection",
          "setup_method",
          "test_resolver_initialization",
          "test_empty_relative_path",
          "setup_method",
          "test_scenario_1_lambda_mods_bundled_deployment",
          "test_scenario_2_development_monorepo",
          "test_scenario_3_pip_installed_separated",
          "test_hybrid_resolution_strategy_progression",
          "setup_method",
          "test_working_directory_discovery_direct",
          "test_working_directory_discovery_current_dir_match",
          "test_default_enabled",
          "test_default_mode",
          "test_environment_variable_override",
          "test_disabled_resolution",
          "test_fallback_only_mode",
          "test_metrics_collection",
          "mock_package_discovery_func",
          "mock_wd_discovery_func"
        ],
        "core/config_portability/test_processing_config_portability.py": [
          "TestProcessingStepConfigHybridResolution.temp_cursus_structure",
          "temp_cursus_structure",
          "TestProcessingStepConfigHybridResolution.sample_config_data",
          "sample_config_data",
          "TestProcessingStepConfigHybridResolution.test_processing_config_inherits_hybrid_resolution",
          "test_processing_config_inherits_hybrid_resolution",
          "TestProcessingStepConfigHybridResolution.test_processing_source_dir_property",
          "test_processing_source_dir_property",
          "TestProcessingStepConfigHybridResolution.test_effective_source_dir_prioritizes_processing",
          "test_effective_source_dir_prioritizes_processing",
          "TestProcessingStepConfigHybridResolution.test_effective_source_dir_fallback_to_base",
          "test_effective_source_dir_fallback_to_base",
          "TestProcessingStepConfigHybridResolution.test_script_path_property",
          "test_script_path_property",
          "TestProcessingStepConfigHybridResolution.test_script_path_with_none_entry_point",
          "test_script_path_with_none_entry_point",
          "TestProcessingStepConfigHybridResolution.test_get_script_path_method",
          "test_get_script_path_method",
          "TestProcessingStepConfigHybridResolution.test_get_script_path_with_default",
          "test_get_script_path_with_default",
          "TestProcessingStepConfigHybridResolution.test_hybrid_resolution_with_processing_paths",
          "test_hybrid_resolution_with_processing_paths",
          "TestProcessingStepConfigHybridResolution.test_model_dump_includes_processing_fields",
          "test_model_dump_includes_processing_fields",
          "TestProcessingStepConfigHybridResolution.test_backward_compatibility",
          "test_backward_compatibility",
          "TestProcessingStepConfigHybridResolution.test_s3_path_handling",
          "test_s3_path_handling",
          "TestProcessingStepConfigHybridResolution.test_hybrid_resolution_integration",
          "test_hybrid_resolution_integration",
          "TestProcessingStepConfigEdgeCases.sample_config_data",
          "sample_config_data",
          "TestProcessingStepConfigEdgeCases.test_none_processing_source_dir",
          "test_none_processing_source_dir",
          "TestProcessingStepConfigEdgeCases.test_none_processing_entry_point",
          "test_none_processing_entry_point",
          "TestProcessingStepConfigEdgeCases.test_empty_string_processing_paths",
          "test_empty_string_processing_paths",
          "TestProcessingStepConfigEdgeCases.test_relative_processing_paths",
          "test_relative_processing_paths",
          "TestProcessingStepConfigEdgeCases.test_unicode_processing_paths",
          "test_unicode_processing_paths",
          "TestProcessingStepConfigEdgeCases.test_very_long_processing_paths",
          "test_very_long_processing_paths",
          "TestProcessingStepConfigEdgeCases.test_mixed_path_types",
          "test_mixed_path_types",
          "temp_cursus_structure",
          "sample_config_data",
          "test_processing_config_inherits_hybrid_resolution",
          "test_processing_source_dir_property",
          "test_effective_source_dir_prioritizes_processing",
          "test_effective_source_dir_fallback_to_base",
          "test_script_path_property",
          "test_script_path_with_none_entry_point",
          "test_get_script_path_method",
          "test_get_script_path_with_default",
          "test_hybrid_resolution_with_processing_paths",
          "test_model_dump_includes_processing_fields",
          "test_backward_compatibility",
          "test_s3_path_handling",
          "test_hybrid_resolution_integration",
          "sample_config_data",
          "test_none_processing_source_dir",
          "test_none_processing_entry_point",
          "test_empty_string_processing_paths",
          "test_relative_processing_paths",
          "test_unicode_processing_paths",
          "test_very_long_processing_paths",
          "test_mixed_path_types"
        ],
        "core/config_portability/test_base_config_portability.py": [
          "TestBasePipelineConfigHybridResolution.temp_cursus_structure",
          "temp_cursus_structure",
          "TestBasePipelineConfigHybridResolution.sample_config_data",
          "sample_config_data",
          "TestBasePipelineConfigHybridResolution.test_resolve_hybrid_path_method_exists",
          "test_resolve_hybrid_path_method_exists",
          "TestBasePipelineConfigHybridResolution.test_resolved_source_dir_property_exists",
          "test_resolved_source_dir_property_exists",
          "TestBasePipelineConfigHybridResolution.test_resolved_source_dir_with_none_source_dir",
          "test_resolved_source_dir_with_none_source_dir",
          "TestBasePipelineConfigHybridResolution.test_effective_source_dir_property",
          "test_effective_source_dir_property",
          "TestBasePipelineConfigHybridResolution.test_hybrid_path_resolution_with_s3_paths",
          "test_hybrid_path_resolution_with_s3_paths",
          "TestBasePipelineConfigHybridResolution.test_hybrid_path_resolution_with_relative_paths",
          "test_hybrid_path_resolution_with_relative_paths",
          "TestBasePipelineConfigHybridResolution.test_model_dump_includes_resolved_paths",
          "test_model_dump_includes_resolved_paths",
          "TestBasePipelineConfigHybridResolution.test_model_dump_excludes_none_paths",
          "test_model_dump_excludes_none_paths",
          "TestBasePipelineConfigHybridResolution.test_backward_compatibility",
          "test_backward_compatibility",
          "TestBasePipelineConfigHybridResolution.test_project_root_folder_required",
          "test_project_root_folder_required",
          "TestBasePipelineConfigHybridResolution.test_hybrid_resolution_integration",
          "test_hybrid_resolution_integration",
          "TestBasePipelineConfigEdgeCases.sample_config_data",
          "sample_config_data",
          "TestBasePipelineConfigEdgeCases.test_empty_string_source_dir",
          "test_empty_string_source_dir",
          "TestBasePipelineConfigEdgeCases.test_s3_path_source_dir",
          "test_s3_path_source_dir",
          "TestBasePipelineConfigEdgeCases.test_windows_absolute_path",
          "test_windows_absolute_path",
          "TestBasePipelineConfigEdgeCases.test_unicode_paths",
          "test_unicode_paths",
          "TestBasePipelineConfigEdgeCases.test_very_long_paths",
          "test_very_long_paths",
          "temp_cursus_structure",
          "sample_config_data",
          "test_resolve_hybrid_path_method_exists",
          "test_resolved_source_dir_property_exists",
          "test_resolved_source_dir_with_none_source_dir",
          "test_effective_source_dir_property",
          "test_hybrid_path_resolution_with_s3_paths",
          "test_hybrid_path_resolution_with_relative_paths",
          "test_model_dump_includes_resolved_paths",
          "test_model_dump_excludes_none_paths",
          "test_backward_compatibility",
          "test_project_root_folder_required",
          "test_hybrid_resolution_integration",
          "sample_config_data",
          "test_empty_string_source_dir",
          "test_s3_path_source_dir",
          "test_windows_absolute_path",
          "test_unicode_paths",
          "test_very_long_paths"
        ],
        "core/deps/test_semantic_matcher.py": [
          "TestSemanticMatcher.test_calculate_similarity_with_aliases",
          "test_calculate_similarity_with_aliases",
          "TestSemanticMatcher.test_weight_calculation",
          "test_weight_calculation",
          "TestSemanticMatcher.test_name_normalization",
          "test_name_normalization",
          "TestSemanticMatcher.test_individual_similarity_metrics",
          "test_individual_similarity_metrics",
          "TestSemanticMatcher.test_synonym_matching",
          "test_synonym_matching",
          "TestSemanticMatcher.test_find_best_matches",
          "test_find_best_matches",
          "TestSemanticMatcher.test_similarity_explanation",
          "test_similarity_explanation",
          "TestSemanticMatcher.test_edge_cases",
          "test_edge_cases",
          "TestSemanticMatcher.test_integration_with_dependency_resolver",
          "test_integration_with_dependency_resolver",
          "TestSemanticMatcher.test_direct_name_matching",
          "test_direct_name_matching",
          "TestSemanticMatcher.test_domain_specific_synonyms",
          "test_domain_specific_synonyms",
          "test_calculate_similarity_with_aliases",
          "test_weight_calculation",
          "test_name_normalization",
          "test_individual_similarity_metrics",
          "test_synonym_matching",
          "test_find_best_matches",
          "test_similarity_explanation",
          "test_edge_cases",
          "test_integration_with_dependency_resolver",
          "test_direct_name_matching",
          "test_domain_specific_synonyms"
        ],
        "core/deps/test_property_reference.py": [
          "TestPropertyReference.setup_method",
          "setup_method",
          "TestPropertyReference.test_init_and_validation",
          "test_init_and_validation",
          "TestPropertyReference.test_parse_property_path",
          "test_parse_property_path",
          "TestPropertyReference.test_to_sagemaker_property",
          "test_to_sagemaker_property",
          "TestPropertyReference.test_get_property_value",
          "test_get_property_value",
          "TestPropertyReference.test_to_runtime_property",
          "test_to_runtime_property",
          "TestPropertyReference.test_string_representation",
          "test_string_representation",
          "TestPropertyReference._create_mock_processing_step",
          "_create_mock_processing_step",
          "TestPropertyReference._create_mock_training_step",
          "_create_mock_training_step",
          "TestPropertyReference._create_mock_eval_step",
          "_create_mock_eval_step",
          "TestPropertyReference._create_mock_transform_step",
          "_create_mock_transform_step",
          "setup_method",
          "test_init_and_validation",
          "test_parse_property_path",
          "test_to_sagemaker_property",
          "test_get_property_value",
          "test_to_runtime_property",
          "test_string_representation",
          "_create_mock_processing_step",
          "_create_mock_training_step",
          "_create_mock_eval_step",
          "_create_mock_transform_step"
        ],
        "core/deps/test_global_state_isolation.py": [
          "TestWithoutIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithoutIsolation.test_registry_state_2",
          "test_registry_state_2",
          "TestWithManualIsolation.setup_method",
          "setup_method",
          "TestWithManualIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithManualIsolation.test_registry_state_2",
          "test_registry_state_2",
          "TestWithHelperIsolation.setup_method",
          "setup_method",
          "TestWithHelperIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithHelperIsolation.test_registry_state_2",
          "test_registry_state_2",
          "run_tests_individually",
          "run_tests_together",
          "test_registry_state_1",
          "test_registry_state_2",
          "setup_method",
          "test_registry_state_1",
          "test_registry_state_2",
          "setup_method",
          "test_registry_state_1",
          "test_registry_state_2"
        ],
        "core/deps/test_factory.py": [
          "TestFactoryFunctions.setup_method",
          "setup_method",
          "TestFactoryFunctions.test_create_pipeline_components_default",
          "test_create_pipeline_components_default",
          "TestFactoryFunctions.test_create_pipeline_components_custom_context",
          "test_create_pipeline_components_custom_context",
          "TestFactoryFunctions.test_create_pipeline_components_wiring",
          "test_create_pipeline_components_wiring",
          "TestFactoryFunctions.test_create_pipeline_components_isolation",
          "test_create_pipeline_components_isolation",
          "TestThreadLocalComponents.setup_method",
          "setup_method",
          "TestThreadLocalComponents.test_get_thread_components_single_thread",
          "test_get_thread_components_single_thread",
          "TestThreadLocalComponents.test_get_thread_components_multi_thread",
          "test_get_thread_components_multi_thread",
          "TestThreadLocalComponents.test_thread_components_persistence",
          "test_thread_components_persistence",
          "TestDependencyResolutionContext.setup_method",
          "setup_method",
          "TestDependencyResolutionContext.test_dependency_resolution_context_basic",
          "test_dependency_resolution_context_basic",
          "TestDependencyResolutionContext.test_dependency_resolution_context_cleanup",
          "test_dependency_resolution_context_cleanup",
          "TestDependencyResolutionContext.test_dependency_resolution_context_no_cleanup",
          "test_dependency_resolution_context_no_cleanup",
          "TestDependencyResolutionContext.test_dependency_resolution_context_exception_handling",
          "test_dependency_resolution_context_exception_handling",
          "TestDependencyResolutionContext.test_dependency_resolution_context_nested",
          "test_dependency_resolution_context_nested",
          "TestFactoryIntegration.setup_method",
          "setup_method",
          "TestFactoryIntegration.test_end_to_end_pipeline_creation",
          "test_end_to_end_pipeline_creation",
          "TestFactoryIntegration.test_multi_context_pipeline_isolation",
          "test_multi_context_pipeline_isolation",
          "setup_method",
          "test_create_pipeline_components_default",
          "test_create_pipeline_components_custom_context",
          "test_create_pipeline_components_wiring",
          "test_create_pipeline_components_isolation",
          "setup_method",
          "test_get_thread_components_single_thread",
          "test_get_thread_components_multi_thread",
          "test_thread_components_persistence",
          "setup_method",
          "test_dependency_resolution_context_basic",
          "test_dependency_resolution_context_cleanup",
          "test_dependency_resolution_context_no_cleanup",
          "test_dependency_resolution_context_exception_handling",
          "test_dependency_resolution_context_nested",
          "setup_method",
          "test_end_to_end_pipeline_creation",
          "test_multi_context_pipeline_isolation",
          "thread_worker"
        ],
        "core/deps/test_specification_registry.py": [
          "TestSpecificationRegistry.setup_method",
          "setup_method",
          "TestSpecificationRegistry.test_registry_initialization",
          "test_registry_initialization",
          "TestSpecificationRegistry.test_register_specification",
          "test_register_specification",
          "TestSpecificationRegistry.test_register_invalid_specification",
          "test_register_invalid_specification",
          "TestSpecificationRegistry.test_get_specifications_by_type",
          "test_get_specifications_by_type",
          "TestSpecificationRegistry.test_find_compatible_outputs",
          "test_find_compatible_outputs",
          "TestSpecificationRegistry.test_compatibility_checking",
          "test_compatibility_checking",
          "TestSpecificationRegistry.test_context_isolation",
          "test_context_isolation",
          "TestSpecificationRegistry.test_registry_string_representation",
          "test_registry_string_representation",
          "TestSpecificationRegistry.test_empty_registry_operations",
          "test_empty_registry_operations",
          "TestSpecificationRegistry.test_compatibility_scoring_algorithm",
          "test_compatibility_scoring_algorithm",
          "TestSpecificationRegistry.test_complex_pipeline_compatibility",
          "test_complex_pipeline_compatibility",
          "TestSpecificationRegistry.test_multiple_compatible_outputs",
          "test_multiple_compatible_outputs",
          "TestSpecificationRegistry.test_data_type_compatibility",
          "test_data_type_compatibility",
          "TestSpecificationRegistry.test_register_multiple_specifications",
          "test_register_multiple_specifications",
          "TestSpecificationRegistry.test_get_specification_detailed",
          "test_get_specification_detailed",
          "TestSpecificationRegistry.test_get_specification_by_type_detailed",
          "test_get_specification_by_type_detailed",
          "TestSpecificationRegistry.test_list_operations_detailed",
          "test_list_operations_detailed",
          "TestSpecificationRegistry.test_find_compatible_outputs_detailed",
          "test_find_compatible_outputs_detailed",
          "setup_method",
          "test_registry_initialization",
          "test_register_specification",
          "test_register_invalid_specification",
          "test_get_specifications_by_type",
          "test_find_compatible_outputs",
          "test_compatibility_checking",
          "test_context_isolation",
          "test_registry_string_representation",
          "test_empty_registry_operations",
          "test_compatibility_scoring_algorithm",
          "test_complex_pipeline_compatibility",
          "test_multiple_compatible_outputs",
          "test_data_type_compatibility",
          "test_register_multiple_specifications",
          "test_get_specification_detailed",
          "test_get_specification_by_type_detailed",
          "test_list_operations_detailed",
          "test_find_compatible_outputs_detailed"
        ],
        "core/deps/test_registry_manager.py": [
          "TestRegistryManagerCore.setup_method",
          "setup_method",
          "TestRegistryManagerCore.test_manager_initialization",
          "test_manager_initialization",
          "TestRegistryManagerCore.test_get_registry_creates_new",
          "test_get_registry_creates_new",
          "TestRegistryManagerCore.test_get_registry_returns_existing",
          "test_get_registry_returns_existing",
          "TestRegistryManagerCore.test_get_registry_no_create",
          "test_get_registry_no_create",
          "TestRegistryManagerCore.test_registry_isolation",
          "test_registry_isolation",
          "TestRegistryManagerCore.test_list_contexts",
          "test_list_contexts",
          "TestRegistryManagerCore.test_clear_context",
          "test_clear_context",
          "TestRegistryManagerCore.test_clear_all_contexts",
          "test_clear_all_contexts",
          "TestRegistryManagerCore.test_get_context_stats",
          "test_get_context_stats",
          "TestRegistryManagerCore.test_manager_string_representation",
          "test_manager_string_representation",
          "TestConvenienceFunctions.setup_method",
          "setup_method",
          "TestConvenienceFunctions.test_get_registry_function",
          "test_get_registry_function",
          "TestConvenienceFunctions.test_get_pipeline_registry_backward_compatibility",
          "test_get_pipeline_registry_backward_compatibility",
          "TestConvenienceFunctions.test_get_default_registry_backward_compatibility",
          "test_get_default_registry_backward_compatibility",
          "TestConvenienceFunctions.test_list_contexts_function",
          "test_list_contexts_function",
          "TestConvenienceFunctions.test_clear_context_function",
          "test_clear_context_function",
          "TestConvenienceFunctions.test_get_context_stats_function",
          "test_get_context_stats_function",
          "TestConvenienceFunctions.test_multiple_contexts_isolation",
          "test_multiple_contexts_isolation",
          "TestRegistryManagerErrorHandling.setup_method",
          "setup_method",
          "TestRegistryManagerErrorHandling.test_invalid_context_name_handling",
          "test_invalid_context_name_handling",
          "TestRegistryManagerErrorHandling.test_registry_operations_on_cleared_context",
          "test_registry_operations_on_cleared_context",
          "TestRegistryManagerErrorHandling.test_concurrent_access_safety",
          "test_concurrent_access_safety",
          "TestRegistryManagerMonitoring.setup_method",
          "setup_method",
          "TestRegistryManagerMonitoring.test_context_statistics_detailed",
          "test_context_statistics_detailed",
          "TestRegistryManagerMonitoring.test_memory_usage_monitoring",
          "test_memory_usage_monitoring",
          "setup_method",
          "test_manager_initialization",
          "test_get_registry_creates_new",
          "test_get_registry_returns_existing",
          "test_get_registry_no_create",
          "test_registry_isolation",
          "test_list_contexts",
          "test_clear_context",
          "test_clear_all_contexts",
          "test_get_context_stats",
          "test_manager_string_representation",
          "setup_method",
          "test_get_registry_function",
          "test_get_pipeline_registry_backward_compatibility",
          "test_get_default_registry_backward_compatibility",
          "test_list_contexts_function",
          "test_clear_context_function",
          "test_get_context_stats_function",
          "test_multiple_contexts_isolation",
          "setup_method",
          "test_invalid_context_name_handling",
          "test_registry_operations_on_cleared_context",
          "test_concurrent_access_safety",
          "setup_method",
          "test_context_statistics_detailed",
          "test_memory_usage_monitoring",
          "create_registry"
        ],
        "core/deps/test_helpers.py": [
          "reset_all_global_state",
          "isolated_test_setup"
        ],
        "core/deps/test_dependency_resolver.py": [
          "TestDependencyResolver.registry",
          "registry",
          "TestDependencyResolver.semantic_matcher",
          "semantic_matcher",
          "TestDependencyResolver.resolver",
          "resolver",
          "TestDependencyResolver.test_dependency_resolution_with_aliases",
          "test_dependency_resolution_with_aliases",
          "TestDependencyResolver.test_weight_calculation",
          "test_weight_calculation",
          "TestDependencyResolver.test_multiple_competing_candidates",
          "test_multiple_competing_candidates",
          "TestDependencyResolver.test_type_compatibility_matrix",
          "test_type_compatibility_matrix",
          "TestDependencyResolver.test_data_type_compatibility",
          "test_data_type_compatibility",
          "TestDependencyResolver.test_semantic_matching",
          "test_semantic_matching",
          "TestDependencyResolver.test_required_vs_optional_dependencies",
          "test_required_vs_optional_dependencies",
          "TestDependencyResolver.test_unresolvable_dependencies",
          "test_unresolvable_dependencies",
          "TestDependencyResolver.test_registry_isolation",
          "test_registry_isolation",
          "TestDependencyResolver.test_property_reference_functionality",
          "test_property_reference_functionality",
          "TestDependencyResolver.test_end_to_end_resolution",
          "test_end_to_end_resolution",
          "TestDependencyResolver.test_job_type_normalization",
          "test_job_type_normalization",
          "registry",
          "semantic_matcher",
          "resolver",
          "test_dependency_resolution_with_aliases",
          "test_weight_calculation",
          "test_multiple_competing_candidates",
          "test_type_compatibility_matrix",
          "test_data_type_compatibility",
          "test_semantic_matching",
          "test_required_vs_optional_dependencies",
          "test_unresolvable_dependencies",
          "test_registry_isolation",
          "test_property_reference_functionality",
          "test_end_to_end_resolution",
          "test_job_type_normalization"
        ],
        "core/config_fields/test_type_aware_serialization.py": [
          "TestTypeAwareSerialization.setUp",
          "setUp",
          "TestTypeAwareSerialization.test_basic_serialization",
          "test_basic_serialization",
          "TestTypeAwareSerialization.test_nested_serialization",
          "test_nested_serialization",
          "TestTypeAwareSerialization.test_generate_step_name_basic",
          "test_generate_step_name_basic",
          "TestTypeAwareSerialization.test_generate_step_name_job_type",
          "test_generate_step_name_job_type",
          "TestTypeAwareSerialization.test_generate_step_name_multiple_attributes",
          "test_generate_step_name_multiple_attributes",
          "TestTypeAwareSerialization.test_serialize_config_includes_step_name",
          "test_serialize_config_includes_step_name",
          "TestTypeAwareSerialization.test_serialize_deserialize_preserves_job_type",
          "test_serialize_deserialize_preserves_job_type",
          "TestTypeAwareSerialization.test_full_serialize_config_cycle",
          "test_full_serialize_config_cycle",
          "setUp",
          "test_basic_serialization",
          "test_nested_serialization",
          "test_generate_step_name_basic",
          "test_generate_step_name_job_type",
          "test_generate_step_name_multiple_attributes",
          "test_serialize_config_includes_step_name",
          "test_serialize_deserialize_preserves_job_type",
          "test_full_serialize_config_cycle"
        ],
        "core/config_fields/test_circular_reference_tracker.py": [
          "TestCircularReferenceTracker.setup_and_teardown",
          "setup_and_teardown",
          "TestCircularReferenceTracker.test_simple_object_tracking",
          "test_simple_object_tracking",
          "TestCircularReferenceTracker.test_nested_object_tracking",
          "test_nested_object_tracking",
          "TestCircularReferenceTracker.test_circular_reference_detection",
          "test_circular_reference_detection",
          "TestCircularReferenceTracker.test_max_depth_detection",
          "test_max_depth_detection",
          "TestCircularReferenceTracker.test_object_identification",
          "test_object_identification",
          "TestCircularReferenceTracker.test_integration_with_serializer_simulation",
          "test_integration_with_serializer_simulation",
          "TestCircularReferenceTracker.test_complex_nested_paths",
          "test_complex_nested_paths",
          "TestCircularReferenceTracker.test_actual_integration_with_serializer",
          "test_actual_integration_with_serializer",
          "TestCircularReferenceTracker.test_error_message_formatting",
          "test_error_message_formatting",
          "TestCircularReferenceTracker._format_cycle_error_manual",
          "_format_cycle_error_manual",
          "setup_and_teardown",
          "test_simple_object_tracking",
          "test_nested_object_tracking",
          "test_circular_reference_detection",
          "test_max_depth_detection",
          "test_object_identification",
          "test_integration_with_serializer_simulation",
          "test_complex_nested_paths",
          "test_actual_integration_with_serializer",
          "test_error_message_formatting",
          "_format_cycle_error_manual",
          "deserialize"
        ],
        "core/config_fields/test_config_field_categorizer.py": [
          "BaseTestConfig.__init__",
          "__init__",
          "TestConfigFieldCategorizer.setup_and_teardown",
          "setup_and_teardown",
          "TestConfigFieldCategorizer.test_init_categorizes_configs",
          "test_init_categorizes_configs",
          "TestConfigFieldCategorizer.test_is_special_field",
          "test_is_special_field",
          "TestConfigFieldCategorizer.test_is_likely_static",
          "test_is_likely_static",
          "TestConfigFieldCategorizer.test_categorize_field",
          "test_categorize_field",
          "TestConfigFieldCategorizer.test_categorize_fields_structure",
          "test_categorize_fields_structure",
          "TestConfigFieldCategorizer.test_place_field_shared",
          "test_place_field_shared",
          "TestConfigFieldCategorizer.test_place_field_specific",
          "test_place_field_specific",
          "TestConfigFieldCategorizer.test_get_categorized_fields",
          "test_get_categorized_fields",
          "TestConfigFieldCategorizer.test_end_to_end_categorization",
          "test_end_to_end_categorization",
          "__init__",
          "setup_and_teardown",
          "test_init_categorizes_configs",
          "test_is_special_field",
          "test_is_likely_static",
          "test_categorize_field",
          "test_categorize_fields_structure",
          "test_place_field_shared",
          "test_place_field_specific",
          "test_get_categorized_fields",
          "test_end_to_end_categorization",
          "mock_serialize_impl",
          "mock_serialize_impl",
          "mock_serialize_impl",
          "mock_serialize_impl"
        ],
        "core/config_fields/test_circular_reference_consolidated.py": [
          "TestLogHandler.__init__",
          "__init__",
          "TestLogHandler.emit",
          "emit",
          "TestCircularReferenceConsolidated.setUp",
          "setUp",
          "TestCircularReferenceConsolidated.tearDown",
          "tearDown",
          "TestCircularReferenceConsolidated.test_enhanced_placeholders_for_circular_refs",
          "test_enhanced_placeholders_for_circular_refs",
          "TestCircularReferenceConsolidated.test_list_items_avoid_false_positives",
          "test_list_items_avoid_false_positives",
          "TestCircularReferenceConsolidated.test_nested_complex_structure",
          "test_nested_complex_structure",
          "TestCircularReferenceConsolidated.test_true_circular_references_still_detected",
          "test_true_circular_references_still_detected",
          "TestCircularReferenceConsolidated.test_special_list_format_handling",
          "test_special_list_format_handling",
          "TestCircularReferenceConsolidated.test_type_metadata_handling_with_circular_refs",
          "test_type_metadata_handling_with_circular_refs",
          "TestCircularReferenceConsolidated.test_deep_nesting_without_circularity",
          "test_deep_nesting_without_circularity",
          "TestCircularReferenceConsolidated.test_circular_reference_error_messages",
          "test_circular_reference_error_messages",
          "TestCircularReferenceConsolidated.test_performance_with_large_structures",
          "test_performance_with_large_structures",
          "__init__",
          "emit",
          "setUp",
          "tearDown",
          "test_enhanced_placeholders_for_circular_refs",
          "test_list_items_avoid_false_positives",
          "test_nested_complex_structure",
          "test_true_circular_references_still_detected",
          "test_special_list_format_handling",
          "test_type_metadata_handling_with_circular_refs",
          "test_deep_nesting_without_circularity",
          "test_circular_reference_error_messages",
          "test_performance_with_large_structures"
        ],
        "core/config_fields/test_end_to_end_integration.py": [
          "TestEndToEndIntegration.setup_and_teardown",
          "setup_and_teardown",
          "TestEndToEndIntegration.create_test_configs",
          "create_test_configs",
          "TestEndToEndIntegration.test_end_to_end_config_workflow",
          "test_end_to_end_config_workflow",
          "TestEndToEndIntegration.test_config_round_trip_integrity",
          "test_config_round_trip_integrity",
          "TestEndToEndIntegration.test_shared_vs_specific_field_categorization",
          "test_shared_vs_specific_field_categorization",
          "TestEndToEndIntegration.test_hyperparameters_preservation",
          "test_hyperparameters_preservation",
          "TestEndToEndIntegration.test_metadata_completeness",
          "test_metadata_completeness",
          "TestEndToEndIntegration.test_error_handling",
          "test_error_handling",
          "TestEndToEndIntegration.test_performance_and_file_size",
          "test_performance_and_file_size",
          "TestEndToEndIntegration.test_json_structure_matches_expected_format",
          "test_json_structure_matches_expected_format",
          "TestEndToEndIntegration.test_field_sources_inverted_index_validation",
          "test_field_sources_inverted_index_validation",
          "setup_and_teardown",
          "create_test_configs",
          "test_end_to_end_config_workflow",
          "test_config_round_trip_integrity",
          "test_shared_vs_specific_field_categorization",
          "test_hyperparameters_preservation",
          "test_metadata_completeness",
          "test_error_handling",
          "test_performance_and_file_size",
          "test_json_structure_matches_expected_format",
          "test_field_sources_inverted_index_validation"
        ],
        "core/config_fields/test_bug_fixes_consolidated.py": [
          "TestBugFixesConsolidated.setUp",
          "setUp",
          "TestBugFixesConsolidated.tearDown",
          "tearDown",
          "TestBugFixesConsolidated.test_circular_reference_handling_in_data_sources",
          "test_circular_reference_handling_in_data_sources",
          "TestBugFixesConsolidated.test_special_list_format_handling",
          "test_special_list_format_handling",
          "TestBugFixesConsolidated.test_circular_reference_handling_in_hyperparameters",
          "test_circular_reference_handling_in_hyperparameters",
          "TestBugFixesConsolidated.test_payload_config_recursion_fix",
          "test_payload_config_recursion_fix",
          "TestBugFixesConsolidated.test_load_real_config_file",
          "test_load_real_config_file",
          "TestBugFixesConsolidated.test_additional_config_with_special_list",
          "test_additional_config_with_special_list",
          "TestBugFixesConsolidated.test_deep_recursion_prevention",
          "test_deep_recursion_prevention",
          "TestBugFixesConsolidated.test_memory_leak_prevention",
          "test_memory_leak_prevention",
          "TestBugFixesConsolidated.test_error_handling_improvements",
          "test_error_handling_improvements",
          "setUp",
          "tearDown",
          "test_circular_reference_handling_in_data_sources",
          "test_special_list_format_handling",
          "test_circular_reference_handling_in_hyperparameters",
          "test_payload_config_recursion_fix",
          "test_load_real_config_file",
          "test_additional_config_with_special_list",
          "test_deep_recursion_prevention",
          "test_memory_leak_prevention",
          "test_error_handling_improvements",
          "create_nested_config"
        ],
        "core/config_fields/test_config_class_detector.py": [
          "test_workspace_root",
          "TestModernConfigClassDetector.test_detect_from_json_returns_real_config_classes",
          "test_detect_from_json_returns_real_config_classes",
          "TestModernConfigClassDetector.test_detect_from_json_includes_common_config_classes",
          "test_detect_from_json_includes_common_config_classes",
          "TestModernConfigClassDetector.test_from_config_store_same_as_detect_from_json",
          "test_from_config_store_same_as_detect_from_json",
          "TestModernConfigClassDetector.test_build_complete_config_classes_function",
          "test_build_complete_config_classes_function",
          "TestModernConfigClassDetector.test_detect_config_classes_from_json_function",
          "test_detect_config_classes_from_json_function",
          "TestModernConfigClassDetector.test_field_constants_available",
          "test_field_constants_available",
          "TestModernConfigClassDetector.test_extract_class_names_legacy_compatibility",
          "test_extract_class_names_legacy_compatibility",
          "TestModernConfigClassDetector.test_extract_class_names_empty_data",
          "test_extract_class_names_empty_data",
          "TestModernConfigClassDetector.test_extract_class_names_partial_data",
          "test_extract_class_names_partial_data",
          "TestModernConfigClassDetector.test_extract_class_names_malformed_data",
          "test_extract_class_names_malformed_data",
          "TestModernConfigClassDetector.test_detect_from_json_with_mocked_catalog",
          "test_detect_from_json_with_mocked_catalog",
          "TestModernConfigClassDetector.test_detect_from_json_fallback_behavior",
          "test_detect_from_json_fallback_behavior",
          "TestModernConfigClassDetector.test_real_step_catalog_integration",
          "test_real_step_catalog_integration",
          "TestModernConfigClassDetector.test_performance_reasonable",
          "test_performance_reasonable",
          "TestModernConfigClassDetector.test_consistency_across_calls",
          "test_consistency_across_calls",
          "TestModernConfigClassDetector.test_adapter_backward_compatibility",
          "test_adapter_backward_compatibility",
          "TestModernConfigClassDetector.test_modern_vs_legacy_approach_comparison",
          "test_modern_vs_legacy_approach_comparison",
          "test_detect_from_json_returns_real_config_classes",
          "test_detect_from_json_includes_common_config_classes",
          "test_from_config_store_same_as_detect_from_json",
          "test_build_complete_config_classes_function",
          "test_detect_config_classes_from_json_function",
          "test_field_constants_available",
          "test_extract_class_names_legacy_compatibility",
          "test_extract_class_names_empty_data",
          "test_extract_class_names_partial_data",
          "test_extract_class_names_malformed_data",
          "test_detect_from_json_with_mocked_catalog",
          "test_detect_from_json_fallback_behavior",
          "test_real_step_catalog_integration",
          "test_performance_reasonable",
          "test_consistency_across_calls",
          "test_adapter_backward_compatibility",
          "test_modern_vs_legacy_approach_comparison"
        ],
        "core/config_fields/test_tier_registry.py": [
          "TestConfigFieldTierRegistry.setup_and_teardown",
          "setup_and_teardown",
          "TestConfigFieldTierRegistry.test_get_tier_method",
          "test_get_tier_method",
          "TestConfigFieldTierRegistry.test_register_field_method",
          "test_register_field_method",
          "TestConfigFieldTierRegistry.test_register_field_validation",
          "test_register_field_validation",
          "TestConfigFieldTierRegistry.test_register_fields_method",
          "test_register_fields_method",
          "TestConfigFieldTierRegistry.test_register_fields_validation",
          "test_register_fields_validation",
          "TestConfigFieldTierRegistry.test_get_fields_by_tier_method",
          "test_get_fields_by_tier_method",
          "TestConfigFieldTierRegistry.test_get_fields_by_tier_validation",
          "test_get_fields_by_tier_validation",
          "TestConfigFieldTierRegistry.test_reset_to_defaults_method",
          "test_reset_to_defaults_method",
          "TestConfigFieldTierRegistry.test_default_tier_assignments_validation",
          "test_default_tier_assignments_validation",
          "TestConfigFieldTierRegistry.test_tier_distribution",
          "test_tier_distribution",
          "TestConfigFieldTierRegistry.test_field_name_consistency",
          "test_field_name_consistency",
          "TestConfigFieldTierRegistry.test_registry_immutability_during_get_operations",
          "test_registry_immutability_during_get_operations",
          "TestConfigFieldTierRegistry.test_comprehensive_field_coverage",
          "test_comprehensive_field_coverage",
          "TestConfigFieldTierRegistry.test_api_methods_exist",
          "test_api_methods_exist",
          "TestConfigFieldTierRegistry.test_basic_functionality_integration",
          "test_basic_functionality_integration",
          "TestConfigFieldTierRegistry.test_context_aware_tier_classification",
          "test_context_aware_tier_classification",
          "TestConfigFieldTierRegistry.test_get_fields_by_tier_with_context",
          "test_get_fields_by_tier_with_context",
          "setup_and_teardown",
          "test_get_tier_method",
          "test_register_field_method",
          "test_register_field_validation",
          "test_register_fields_method",
          "test_register_fields_validation",
          "test_get_fields_by_tier_method",
          "test_get_fields_by_tier_validation",
          "test_reset_to_defaults_method",
          "test_default_tier_assignments_validation",
          "test_tier_distribution",
          "test_field_name_consistency",
          "test_registry_immutability_during_get_operations",
          "test_comprehensive_field_coverage",
          "test_api_methods_exist",
          "test_basic_functionality_integration",
          "test_context_aware_tier_classification",
          "test_get_fields_by_tier_with_context"
        ],
        "core/config_fields/test_config_merger.py": [
          "TestConfig.__init__",
          "__init__",
          "TestConfigMerger.setup_and_teardown",
          "setup_and_teardown",
          "TestConfigMerger.test_init_creates_categorizer",
          "test_init_creates_categorizer",
          "TestConfigMerger.test_merge_returns_simplified_structure",
          "test_merge_returns_simplified_structure",
          "TestConfigMerger.test_verify_merged_output_checks_structure",
          "test_verify_merged_output_checks_structure",
          "TestConfigMerger.test_check_mutual_exclusivity",
          "test_check_mutual_exclusivity",
          "TestConfigMerger.test_check_special_fields_placement",
          "test_check_special_fields_placement",
          "TestConfigMerger.test_config_types_format",
          "test_config_types_format",
          "TestConfigMerger.test_save_creates_correct_output_structure",
          "test_save_creates_correct_output_structure",
          "TestConfigMerger.test_load_from_simplified_structure",
          "test_load_from_simplified_structure",
          "TestConfigMerger.test_load_from_simplified_structure_with_legacy_data",
          "test_load_from_simplified_structure_with_legacy_data",
          "TestConfigMerger.test_merge_with_direction",
          "test_merge_with_direction",
          "TestConfigMerger.test_field_sources_generation_and_inclusion_in_metadata",
          "test_field_sources_generation_and_inclusion_in_metadata",
          "TestConfigMerger.test_field_sources_inverted_index_correctness",
          "test_field_sources_inverted_index_correctness",
          "__init__",
          "setup_and_teardown",
          "test_init_creates_categorizer",
          "test_merge_returns_simplified_structure",
          "test_verify_merged_output_checks_structure",
          "test_check_mutual_exclusivity",
          "test_check_special_fields_placement",
          "test_config_types_format",
          "test_save_creates_correct_output_structure",
          "test_load_from_simplified_structure",
          "test_load_from_simplified_structure_with_legacy_data",
          "test_merge_with_direction",
          "test_field_sources_generation_and_inclusion_in_metadata",
          "test_field_sources_inverted_index_correctness",
          "mock_generate_step_name",
          "mock_generate_step_name_2"
        ],
        "core/config_fields/test_type_aware_deserialization.py": [
          "build_complete_config_classes",
          "TestBaseConfig.validate_config",
          "validate_config",
          "TestProcessingConfig.validate_config",
          "validate_config",
          "TestTrainingConfig.validate_config",
          "validate_config",
          "TestTypeAwareDeserialization.setup_and_teardown",
          "setup_and_teardown",
          "TestTypeAwareDeserialization.test_type_preservation",
          "test_type_preservation",
          "TestTypeAwareDeserialization.test_type_metadata_in_serialized_output",
          "test_type_metadata_in_serialized_output",
          "TestTypeAwareDeserialization.test_config_types_format",
          "test_config_types_format",
          "TestTypeAwareDeserialization.test_custom_config_with_hyperparameters",
          "test_custom_config_with_hyperparameters",
          "TestTypeAwareDeserialization.test_config_types_format_with_custom_configs",
          "test_config_types_format_with_custom_configs",
          "TestTypeAwareDeserialization.test_multiple_config_scenarios",
          "test_multiple_config_scenarios",
          "TestTypeAwareDeserialization.test_fallback_behavior",
          "test_fallback_behavior",
          "validate_config",
          "validate_config",
          "validate_config",
          "setup_and_teardown",
          "test_type_preservation",
          "test_type_metadata_in_serialized_output",
          "test_config_types_format",
          "test_custom_config_with_hyperparameters",
          "test_config_types_format_with_custom_configs",
          "test_multiple_config_scenarios",
          "test_fallback_behavior"
        ],
        "core/config_fields/test_config_class_store.py": [
          "TestConfigClassStore.setup_and_teardown",
          "setup_and_teardown",
          "TestConfigClassStore.test_register_decorator_functionality",
          "test_register_decorator_functionality",
          "TestConfigClassStore.test_register_direct_functionality",
          "test_register_direct_functionality",
          "TestConfigClassStore.test_get_class_method",
          "test_get_class_method",
          "TestConfigClassStore.test_get_all_classes_method",
          "test_get_all_classes_method",
          "TestConfigClassStore.test_clear_method",
          "test_clear_method",
          "TestConfigClassStore.test_register_many_method",
          "test_register_many_method",
          "TestConfigClassStore.test_registered_names_method",
          "test_registered_names_method",
          "TestConfigClassStore.test_class_name_collision_handling",
          "test_class_name_collision_handling",
          "TestConfigClassStore.test_registry_persistence_across_operations",
          "test_registry_persistence_across_operations",
          "TestConfigClassStore.test_build_complete_config_classes_function",
          "test_build_complete_config_classes_function",
          "TestConfigClassStore.test_registry_thread_safety_simulation",
          "test_registry_thread_safety_simulation",
          "TestConfigClassStore.test_edge_cases",
          "test_edge_cases",
          "setup_and_teardown",
          "test_register_decorator_functionality",
          "test_register_direct_functionality",
          "test_get_class_method",
          "test_get_all_classes_method",
          "test_clear_method",
          "test_register_many_method",
          "test_registered_names_method",
          "test_class_name_collision_handling",
          "test_registry_persistence_across_operations",
          "test_build_complete_config_classes_function",
          "test_registry_thread_safety_simulation",
          "test_edge_cases"
        ],
        "core/config_fields/test_integration.py": [
          "TestIntegration.setup_and_teardown",
          "setup_and_teardown",
          "TestIntegration.test_end_to_end_workflow",
          "test_end_to_end_workflow",
          "TestIntegration.test_job_type_variants",
          "test_job_type_variants",
          "TestIntegration.test_serialize_deserialize_with_nesting",
          "test_serialize_deserialize_with_nesting",
          "setup_and_teardown",
          "test_end_to_end_workflow",
          "test_job_type_variants",
          "test_serialize_deserialize_with_nesting"
        ],
        "core/config_fields/test_load_configs_correctness.py": [
          "TestLoadConfigsCorrectness.project_root",
          "project_root",
          "TestLoadConfigsCorrectness.config_file_path",
          "config_file_path",
          "TestLoadConfigsCorrectness.config_file_data",
          "config_file_data",
          "TestLoadConfigsCorrectness.expected_config_types",
          "expected_config_types",
          "TestLoadConfigsCorrectness.config_classes",
          "config_classes",
          "TestLoadConfigsCorrectness.test_config_file_exists",
          "test_config_file_exists",
          "TestLoadConfigsCorrectness.test_config_file_structure",
          "test_config_file_structure",
          "TestLoadConfigsCorrectness.test_expected_config_count",
          "test_expected_config_count",
          "TestLoadConfigsCorrectness.test_config_class_availability",
          "test_config_class_availability",
          "TestLoadConfigsCorrectness.test_load_configs_basic_functionality",
          "test_load_configs_basic_functionality",
          "TestLoadConfigsCorrectness.test_load_configs_return_structure",
          "test_load_configs_return_structure",
          "TestLoadConfigsCorrectness.test_load_configs_completeness",
          "test_load_configs_completeness",
          "TestLoadConfigsCorrectness.test_load_configs_object_types",
          "test_load_configs_object_types",
          "TestLoadConfigsCorrectness.test_load_configs_object_attributes",
          "test_load_configs_object_attributes",
          "TestLoadConfigsCorrectness.test_load_configs_data_integrity",
          "test_load_configs_data_integrity",
          "TestLoadConfigsCorrectness.test_load_configs_specific_data",
          "test_load_configs_specific_data",
          "TestLoadConfigsCorrectness.test_load_configs_error_handling",
          "test_load_configs_error_handling",
          "TestLoadConfigsCorrectness.test_load_configs_performance",
          "test_load_configs_performance",
          "project_root",
          "config_file_path",
          "config_file_data",
          "expected_config_types",
          "config_classes",
          "test_config_file_exists",
          "test_config_file_structure",
          "test_expected_config_count",
          "test_config_class_availability",
          "test_load_configs_basic_functionality",
          "test_load_configs_return_structure",
          "test_load_configs_completeness",
          "test_load_configs_object_types",
          "test_load_configs_object_attributes",
          "test_load_configs_data_integrity",
          "test_load_configs_specific_data",
          "test_load_configs_error_handling",
          "test_load_configs_performance"
        ],
        "core/config_fields/test_constants.py": [
          "TestConstants.test_special_fields_to_keep_specific_completeness",
          "test_special_fields_to_keep_specific_completeness",
          "TestConstants.test_non_static_field_patterns_accuracy",
          "test_non_static_field_patterns_accuracy",
          "TestConstants.test_non_static_field_exceptions_validity",
          "test_non_static_field_exceptions_validity",
          "TestConstants.test_pattern_exception_logic",
          "test_pattern_exception_logic",
          "TestConstants.test_category_type_enum",
          "test_category_type_enum",
          "TestConstants.test_merge_direction_enum",
          "test_merge_direction_enum",
          "TestConstants.test_serialization_mode_enum",
          "test_serialization_mode_enum",
          "TestConstants.test_type_mapping_completeness",
          "test_type_mapping_completeness",
          "TestConstants.test_type_mapping_consistency",
          "test_type_mapping_consistency",
          "TestConstants.test_constants_immutability",
          "test_constants_immutability",
          "TestConstants.test_field_pattern_matching_logic",
          "test_field_pattern_matching_logic",
          "TestConstants.test_special_fields_coverage",
          "test_special_fields_coverage",
          "TestConstants.test_enum_completeness",
          "test_enum_completeness",
          "TestConstants.test_constants_documentation_alignment",
          "test_constants_documentation_alignment",
          "test_special_fields_to_keep_specific_completeness",
          "test_non_static_field_patterns_accuracy",
          "test_non_static_field_exceptions_validity",
          "test_pattern_exception_logic",
          "test_category_type_enum",
          "test_merge_direction_enum",
          "test_serialization_mode_enum",
          "test_type_mapping_completeness",
          "test_type_mapping_consistency",
          "test_constants_immutability",
          "test_field_pattern_matching_logic",
          "test_special_fields_coverage",
          "test_enum_completeness",
          "test_constants_documentation_alignment"
        ],
        "core/compiler/test_validation.py": [
          "TestValidationResult.test_validation_result_valid",
          "test_validation_result_valid",
          "TestValidationResult.test_validation_result_invalid",
          "test_validation_result_invalid",
          "TestValidationResult.test_detailed_report_valid",
          "test_detailed_report_valid",
          "TestValidationResult.test_detailed_report_invalid_with_recommendations",
          "test_detailed_report_invalid_with_recommendations",
          "TestResolutionPreview.test_resolution_preview_display",
          "test_resolution_preview_display",
          "TestConversionReport.test_conversion_report_summary",
          "test_conversion_report_summary",
          "TestConversionReport.test_conversion_report_detailed_report",
          "test_conversion_report_detailed_report",
          "TestValidationEngine.engine",
          "engine",
          "TestValidationEngine.mock_config1",
          "mock_config1",
          "TestValidationEngine.mock_config2",
          "mock_config2",
          "TestValidationEngine.available_configs",
          "available_configs",
          "TestValidationEngine.config_map",
          "config_map",
          "TestValidationEngine.builder_registry",
          "builder_registry",
          "TestValidationEngine.test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_success",
          "TestValidationEngine.test_validate_dag_compatibility_missing_configs",
          "test_validate_dag_compatibility_missing_configs",
          "TestValidationEngine.test_validate_dag_compatibility_unresolvable_builders",
          "test_validate_dag_compatibility_unresolvable_builders",
          "TestValidationEngine.test_validate_dag_compatibility_config_errors",
          "test_validate_dag_compatibility_config_errors",
          "TestValidationEngine.test_validate_dag_compatibility_with_job_type_variants",
          "test_validate_dag_compatibility_with_job_type_variants",
          "TestValidationEngine.test_validate_dag_compatibility_with_legacy_aliases",
          "test_validate_dag_compatibility_with_legacy_aliases",
          "test_validation_result_valid",
          "test_validation_result_invalid",
          "test_detailed_report_valid",
          "test_detailed_report_invalid_with_recommendations",
          "test_resolution_preview_display",
          "test_conversion_report_summary",
          "test_conversion_report_detailed_report",
          "engine",
          "mock_config1",
          "mock_config2",
          "available_configs",
          "config_map",
          "builder_registry",
          "test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_missing_configs",
          "test_validate_dag_compatibility_unresolvable_builders",
          "test_validate_dag_compatibility_config_errors",
          "test_validate_dag_compatibility_with_job_type_variants",
          "test_validate_dag_compatibility_with_legacy_aliases"
        ],
        "core/compiler/test_config_resolver.py": [
          "TestConfigResolver.resolver",
          "resolver",
          "TestConfigResolver.base_config",
          "base_config",
          "TestConfigResolver.data_load_config",
          "data_load_config",
          "TestConfigResolver.preprocessing_config",
          "preprocessing_config",
          "TestConfigResolver.training_config",
          "training_config",
          "TestConfigResolver.eval_config",
          "eval_config",
          "TestConfigResolver.configs",
          "configs",
          "TestConfigResolver.dag_nodes",
          "dag_nodes",
          "TestConfigResolver.test_direct_name_matching",
          "test_direct_name_matching",
          "TestConfigResolver.test_job_type_matching",
          "test_job_type_matching",
          "TestConfigResolver.test_semantic_matching",
          "test_semantic_matching",
          "TestConfigResolver.test_pattern_matching",
          "test_pattern_matching",
          "TestConfigResolver.test_resolve_config_map",
          "test_resolve_config_map",
          "TestConfigResolver.test_resolve_single_node_direct_match",
          "test_resolve_single_node_direct_match",
          "TestConfigResolver.test_resolve_single_node_no_match",
          "test_resolve_single_node_no_match",
          "TestConfigResolver.test_resolve_single_node_ambiguity",
          "test_resolve_single_node_ambiguity",
          "TestConfigResolver.test_preview_resolution",
          "test_preview_resolution",
          "resolver",
          "base_config",
          "data_load_config",
          "preprocessing_config",
          "training_config",
          "eval_config",
          "configs",
          "dag_nodes",
          "test_direct_name_matching",
          "test_job_type_matching",
          "test_semantic_matching",
          "test_pattern_matching",
          "test_resolve_config_map",
          "test_resolve_single_node_direct_match",
          "test_resolve_single_node_no_match",
          "test_resolve_single_node_ambiguity",
          "test_preview_resolution",
          "mock_direct_match",
          "mock_direct_match",
          "mock_job_type_match",
          "mock_semantic_match",
          "mock_pattern_match",
          "mock_direct_match",
          "mock_job_type_match",
          "mock_semantic_match",
          "mock_pattern_match",
          "mock_resolve_candidates"
        ],
        "core/compiler/test_exceptions.py": [
          "TestPipelineAPIExceptions.test_pipeline_api_error_base",
          "test_pipeline_api_error_base",
          "TestPipelineAPIExceptions.test_configuration_error_basic",
          "test_configuration_error_basic",
          "TestPipelineAPIExceptions.test_configuration_error_with_details",
          "test_configuration_error_with_details",
          "TestPipelineAPIExceptions.test_ambiguity_error_basic",
          "test_ambiguity_error_basic",
          "TestPipelineAPIExceptions.test_ambiguity_error_with_tuple_candidates",
          "test_ambiguity_error_with_tuple_candidates",
          "TestPipelineAPIExceptions.test_ambiguity_error_with_dict_candidates",
          "test_ambiguity_error_with_dict_candidates",
          "TestPipelineAPIExceptions.test_validation_error_basic",
          "test_validation_error_basic",
          "TestPipelineAPIExceptions.test_validation_error_with_details",
          "test_validation_error_with_details",
          "TestPipelineAPIExceptions.test_resolution_error_basic",
          "test_resolution_error_basic",
          "TestPipelineAPIExceptions.test_resolution_error_with_details",
          "test_resolution_error_with_details",
          "TestPipelineAPIExceptions.test_exception_inheritance",
          "test_exception_inheritance",
          "test_pipeline_api_error_base",
          "test_configuration_error_basic",
          "test_configuration_error_with_details",
          "test_ambiguity_error_basic",
          "test_ambiguity_error_with_tuple_candidates",
          "test_ambiguity_error_with_dict_candidates",
          "test_validation_error_basic",
          "test_validation_error_with_details",
          "test_resolution_error_basic",
          "test_resolution_error_with_details",
          "test_exception_inheritance",
          "MockConfig.__init__",
          "__init__",
          "__init__"
        ],
        "core/compiler/test_name_generator.py": [
          "TestNameGenerator.test_generate_random_word_length",
          "test_generate_random_word_length",
          "TestNameGenerator.test_validate_pipeline_name",
          "test_validate_pipeline_name",
          "TestNameGenerator.test_sanitize_pipeline_name",
          "test_sanitize_pipeline_name",
          "TestNameGenerator.test_generate_pipeline_name",
          "test_generate_pipeline_name",
          "test_generate_random_word_length",
          "test_validate_pipeline_name",
          "test_sanitize_pipeline_name",
          "test_generate_pipeline_name"
        ],
        "core/compiler/test_dynamic_template.py": [
          "TestDynamicPipelineTemplate.setup_method",
          "setup_method",
          "TestDynamicPipelineTemplate.test_init_stores_config_path",
          "test_init_stores_config_path",
          "TestDynamicPipelineTemplate.test_detect_config_classes",
          "test_detect_config_classes",
          "TestDynamicPipelineTemplate.test_create_pipeline_dag",
          "test_create_pipeline_dag",
          "TestDynamicPipelineTemplate.test_create_config_map",
          "test_create_config_map",
          "TestDynamicPipelineTemplate.test_create_step_builder_map",
          "test_create_step_builder_map",
          "TestDynamicPipelineTemplate.test_get_resolution_preview",
          "test_get_resolution_preview",
          "TestDynamicPipelineTemplate.test_get_step_dependencies",
          "test_get_step_dependencies",
          "TestDynamicPipelineTemplate.test_get_pipeline_parameters",
          "test_get_pipeline_parameters",
          "TestDynamicPipelineTemplate.test_init_with_pipeline_parameters",
          "test_init_with_pipeline_parameters",
          "TestDynamicPipelineTemplate.test_get_pipeline_parameters_with_custom_params",
          "test_get_pipeline_parameters_with_custom_params",
          "TestDynamicPipelineTemplate.test_get_pipeline_parameters_fallback_to_standard",
          "test_get_pipeline_parameters_fallback_to_standard",
          "TestDynamicPipelineTemplate.test_parameter_inheritance_from_base_class",
          "test_parameter_inheritance_from_base_class",
          "setup_method",
          "test_init_stores_config_path",
          "test_detect_config_classes",
          "test_create_pipeline_dag",
          "test_create_config_map",
          "test_create_step_builder_map",
          "test_get_resolution_preview",
          "test_get_step_dependencies",
          "test_get_pipeline_parameters",
          "test_init_with_pipeline_parameters",
          "test_get_pipeline_parameters_with_custom_params",
          "test_get_pipeline_parameters_fallback_to_standard",
          "test_parameter_inheritance_from_base_class"
        ],
        "core/compiler/test_dag_compiler.py": [
          "TestDagCompiler.setup_method",
          "setup_method",
          "TestDagCompiler.test_compile_with_custom_pipeline_name",
          "test_compile_with_custom_pipeline_name",
          "TestCompileDagToPipeline.setup_method",
          "setup_method",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_invalid_dag",
          "test_compile_dag_to_pipeline_invalid_dag",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_empty_dag",
          "test_compile_dag_to_pipeline_empty_dag",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_missing_config_file",
          "test_compile_dag_to_pipeline_missing_config_file",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_success",
          "test_compile_dag_to_pipeline_success",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_exception_handling",
          "test_compile_dag_to_pipeline_exception_handling",
          "TestPipelineDAGCompilerInit.setup_method",
          "setup_method",
          "TestPipelineDAGCompilerInit.test_compiler_init_success",
          "test_compiler_init_success",
          "TestPipelineDAGCompilerInit.test_compiler_init_missing_config_file",
          "test_compiler_init_missing_config_file",
          "TestPipelineDAGCompilerInit.test_compiler_init_with_custom_components",
          "test_compiler_init_with_custom_components",
          "TestPipelineDAGCompilerValidation.setup_method",
          "setup_method",
          "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_success",
          "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_config_resolution_failure",
          "test_validate_dag_compatibility_config_resolution_failure",
          "TestPipelineDAGCompilerValidation.test_preview_resolution_success",
          "test_preview_resolution_success",
          "TestPipelineDAGCompilerValidation.test_preview_resolution_exception_handling",
          "test_preview_resolution_exception_handling",
          "TestPipelineDAGCompilerCompilation.setup_method",
          "setup_method",
          "TestPipelineDAGCompilerCompilation.test_compile_success",
          "test_compile_success",
          "TestPipelineDAGCompilerCompilation.test_compile_with_custom_pipeline_name",
          "test_compile_with_custom_pipeline_name",
          "TestPipelineDAGCompilerCompilation.test_compile_exception_handling",
          "test_compile_exception_handling",
          "TestPipelineDAGCompilerCompilation.test_compile_with_report",
          "test_compile_with_report",
          "TestPipelineDAGCompilerUtilityMethods.setup_method",
          "setup_method",
          "TestPipelineDAGCompilerUtilityMethods.test_get_supported_step_types",
          "test_get_supported_step_types",
          "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_success",
          "test_validate_config_file_success",
          "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_failure",
          "test_validate_config_file_failure",
          "TestPipelineDAGCompilerUtilityMethods.test_get_last_template",
          "test_get_last_template",
          "TestPipelineDAGCompilerUtilityMethods.test_compiler_init_with_pipeline_parameters",
          "test_compiler_init_with_pipeline_parameters",
          "TestPipelineDAGCompilerUtilityMethods.test_compiler_init_with_default_parameters",
          "test_compiler_init_with_default_parameters",
          "TestPipelineDAGCompilerUtilityMethods.test_create_template_passes_parameters",
          "test_create_template_passes_parameters",
          "TestPipelineDAGCompilerUtilityMethods.test_parameter_fallback_import_handling",
          "test_parameter_fallback_import_handling",
          "setup_method",
          "test_compile_with_custom_pipeline_name",
          "setup_method",
          "test_compile_dag_to_pipeline_invalid_dag",
          "test_compile_dag_to_pipeline_empty_dag",
          "test_compile_dag_to_pipeline_missing_config_file",
          "test_compile_dag_to_pipeline_success",
          "test_compile_dag_to_pipeline_exception_handling",
          "setup_method",
          "test_compiler_init_success",
          "test_compiler_init_missing_config_file",
          "test_compiler_init_with_custom_components",
          "setup_method",
          "test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_config_resolution_failure",
          "test_preview_resolution_success",
          "test_preview_resolution_exception_handling",
          "setup_method",
          "test_compile_success",
          "test_compile_with_custom_pipeline_name",
          "test_compile_exception_handling",
          "test_compile_with_report",
          "setup_method",
          "test_get_supported_step_types",
          "test_validate_config_file_success",
          "test_validate_config_file_failure",
          "test_get_last_template",
          "test_compiler_init_with_pipeline_parameters",
          "test_compiler_init_with_default_parameters",
          "test_create_template_passes_parameters",
          "test_parameter_fallback_import_handling"
        ],
        "core/compiler/test_enhanced_config_resolver.py": [
          "TestEnhancedConfigResolver.setup_method",
          "setup_method",
          "TestEnhancedConfigResolver.test_parse_node_name",
          "test_parse_node_name",
          "TestEnhancedConfigResolver.test_direct_name_matching",
          "test_direct_name_matching",
          "TestEnhancedConfigResolver.test_direct_name_matching_with_metadata",
          "test_direct_name_matching_with_metadata",
          "TestEnhancedConfigResolver.test_job_type_matching_enhanced",
          "test_job_type_matching_enhanced",
          "TestEnhancedConfigResolver.test_resolve_config_map_exact_matches",
          "test_resolve_config_map_exact_matches",
          "TestEnhancedConfigResolver.test_resolve_config_map_with_metadata",
          "test_resolve_config_map_with_metadata",
          "TestEnhancedConfigResolver.test_resolve_single_node_prioritization",
          "test_resolve_single_node_prioritization",
          "TestEnhancedConfigResolver.test_preview_resolution",
          "test_preview_resolution",
          "TestEnhancedConfigResolver.test_ambiguity_detection",
          "test_ambiguity_detection",
          "setup_method",
          "test_parse_node_name",
          "test_direct_name_matching",
          "test_direct_name_matching_with_metadata",
          "test_job_type_matching_enhanced",
          "test_resolve_config_map_exact_matches",
          "test_resolve_config_map_with_metadata",
          "test_resolve_single_node_prioritization",
          "test_preview_resolution",
          "test_ambiguity_detection",
          "mock_job_type_enhanced"
        ],
        "core/base/test_hyperparameters_base.py": [
          "TestModelHyperparameters.valid_hyperparam_data",
          "valid_hyperparam_data",
          "TestModelHyperparameters.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestModelHyperparameters.test_init_with_all_fields",
          "test_init_with_all_fields",
          "TestModelHyperparameters.test_derived_properties",
          "test_derived_properties",
          "TestModelHyperparameters.test_binary_classification",
          "test_binary_classification",
          "TestModelHyperparameters.test_class_weights_default",
          "test_class_weights_default",
          "TestModelHyperparameters.test_class_weights_custom",
          "test_class_weights_custom",
          "TestModelHyperparameters.test_class_weights_validation_error",
          "test_class_weights_validation_error",
          "TestModelHyperparameters.test_batch_size_validation",
          "test_batch_size_validation",
          "TestModelHyperparameters.test_max_epochs_validation",
          "test_max_epochs_validation",
          "TestModelHyperparameters.test_categorize_fields",
          "test_categorize_fields",
          "TestModelHyperparameters.test_get_public_init_fields",
          "test_get_public_init_fields",
          "TestModelHyperparameters.test_from_base_hyperparam",
          "test_from_base_hyperparam",
          "TestModelHyperparameters.test_get_config",
          "test_get_config",
          "TestModelHyperparameters.test_serialize_config",
          "test_serialize_config",
          "TestModelHyperparameters.test_string_representation",
          "test_string_representation",
          "TestModelHyperparameters.test_print_hyperparam_method",
          "test_print_hyperparam_method",
          "TestModelHyperparameters.test_derived_fields_caching",
          "test_derived_fields_caching",
          "TestModelHyperparameters.test_extra_fields_allowed",
          "test_extra_fields_allowed",
          "TestModelHyperparameters.test_validate_assignment",
          "test_validate_assignment",
          "TestModelHyperparameters.test_empty_field_lists",
          "test_empty_field_lists",
          "TestModelHyperparameters.test_single_class_error",
          "test_single_class_error",
          "valid_hyperparam_data",
          "test_init_with_required_fields",
          "test_init_with_all_fields",
          "test_derived_properties",
          "test_binary_classification",
          "test_class_weights_default",
          "test_class_weights_custom",
          "test_class_weights_validation_error",
          "test_batch_size_validation",
          "test_max_epochs_validation",
          "test_categorize_fields",
          "test_get_public_init_fields",
          "test_from_base_hyperparam",
          "test_get_config",
          "test_serialize_config",
          "test_string_representation",
          "test_print_hyperparam_method",
          "test_derived_fields_caching",
          "test_extra_fields_allowed",
          "test_validate_assignment",
          "test_empty_field_lists",
          "test_single_class_error"
        ],
        "core/base/test_contract_base.py": [
          "TestValidationResult.test_init_valid",
          "test_init_valid",
          "TestValidationResult.test_init_invalid_with_errors",
          "test_init_invalid_with_errors",
          "TestValidationResult.test_success_class_method",
          "test_success_class_method",
          "TestValidationResult.test_error_class_method_with_list",
          "test_error_class_method_with_list",
          "TestValidationResult.test_error_class_method_with_string",
          "test_error_class_method_with_string",
          "TestValidationResult.test_combine_class_method",
          "test_combine_class_method",
          "TestValidationResult.test_combine_all_valid",
          "test_combine_all_valid",
          "TestScriptContract.valid_contract_data",
          "valid_contract_data",
          "TestScriptContract.test_init_with_valid_data",
          "test_init_with_valid_data",
          "TestScriptContract.test_init_with_minimal_data",
          "test_init_with_minimal_data",
          "TestScriptContract.test_validate_entry_point_invalid",
          "test_validate_entry_point_invalid",
          "TestScriptContract.test_validate_input_paths_invalid",
          "test_validate_input_paths_invalid",
          "TestScriptContract.test_validate_input_paths_generated_payload_samples",
          "test_validate_input_paths_generated_payload_samples",
          "TestScriptContract.test_validate_output_paths_invalid",
          "test_validate_output_paths_invalid",
          "TestScriptContract.test_validate_arguments_invalid_characters",
          "test_validate_arguments_invalid_characters",
          "TestScriptContract.test_validate_arguments_uppercase",
          "test_validate_arguments_uppercase",
          "TestScriptContract.test_validate_implementation_file_not_found",
          "test_validate_implementation_file_not_found",
          "TestScriptContract.test_validate_implementation_success",
          "test_validate_implementation_success",
          "TestScriptContract.test_validate_implementation_missing_paths",
          "test_validate_implementation_missing_paths",
          "TestScriptContract.test_validate_implementation_with_warnings",
          "test_validate_implementation_with_warnings",
          "TestScriptAnalyzer.sample_script",
          "sample_script",
          "TestScriptAnalyzer.test_get_input_paths",
          "test_get_input_paths",
          "TestScriptAnalyzer.test_get_output_paths",
          "test_get_output_paths",
          "TestScriptAnalyzer.test_get_env_var_usage",
          "test_get_env_var_usage",
          "TestScriptAnalyzer.test_get_argument_usage",
          "test_get_argument_usage",
          "TestScriptAnalyzer.test_ast_tree_lazy_loading",
          "test_ast_tree_lazy_loading",
          "TestScriptAnalyzer.test_caching_behavior",
          "test_caching_behavior",
          "test_init_valid",
          "test_init_invalid_with_errors",
          "test_success_class_method",
          "test_error_class_method_with_list",
          "test_error_class_method_with_string",
          "test_combine_class_method",
          "test_combine_all_valid",
          "valid_contract_data",
          "test_init_with_valid_data",
          "test_init_with_minimal_data",
          "test_validate_entry_point_invalid",
          "test_validate_input_paths_invalid",
          "test_validate_input_paths_generated_payload_samples",
          "test_validate_output_paths_invalid",
          "test_validate_arguments_invalid_characters",
          "test_validate_arguments_uppercase",
          "test_validate_implementation_file_not_found",
          "test_validate_implementation_success",
          "test_validate_implementation_missing_paths",
          "test_validate_implementation_with_warnings",
          "sample_script",
          "test_get_input_paths",
          "test_get_output_paths",
          "test_get_env_var_usage",
          "test_get_argument_usage",
          "test_ast_tree_lazy_loading",
          "test_caching_behavior"
        ],
        "core/base/test_config_base.py": [
          "TestBasePipelineConfig.valid_config_data",
          "valid_config_data",
          "TestBasePipelineConfig.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestBasePipelineConfig.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestBasePipelineConfig.test_derived_properties",
          "test_derived_properties",
          "TestBasePipelineConfig.test_region_validation",
          "test_region_validation",
          "TestBasePipelineConfig.test_source_dir_validation",
          "test_source_dir_validation",
          "TestBasePipelineConfig.test_model_dump_includes_derived_properties",
          "test_model_dump_includes_derived_properties",
          "TestBasePipelineConfig.test_categorize_fields",
          "test_categorize_fields",
          "TestBasePipelineConfig.test_get_public_init_fields",
          "test_get_public_init_fields",
          "TestBasePipelineConfig.test_from_base_config",
          "test_from_base_config",
          "TestBasePipelineConfig.test_get_step_name_class_method",
          "test_get_step_name_class_method",
          "TestBasePipelineConfig.test_get_config_class_name_class_method",
          "test_get_config_class_name_class_method",
          "TestBasePipelineConfig.test_get_script_contract_default",
          "test_get_script_contract_default",
          "TestBasePipelineConfig.test_get_script_path_default",
          "test_get_script_path_default",
          "TestBasePipelineConfig.test_string_representation",
          "test_string_representation",
          "TestBasePipelineConfig.test_print_config_method",
          "test_print_config_method",
          "TestBasePipelineConfig.test_region_mapping",
          "test_region_mapping",
          "TestBasePipelineConfig.test_derived_fields_caching",
          "test_derived_fields_caching",
          "TestBasePipelineConfig.test_extra_fields_allowed",
          "test_extra_fields_allowed",
          "valid_config_data",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_derived_properties",
          "test_region_validation",
          "test_source_dir_validation",
          "test_model_dump_includes_derived_properties",
          "test_categorize_fields",
          "test_get_public_init_fields",
          "test_from_base_config",
          "test_get_step_name_class_method",
          "test_get_config_class_name_class_method",
          "test_get_script_contract_default",
          "test_get_script_path_default",
          "test_string_representation",
          "test_print_config_method",
          "test_region_mapping",
          "test_derived_fields_caching",
          "test_extra_fields_allowed"
        ],
        "core/base/test_all_base.py": [
          "run_pytest_on_base_tests",
          "run_individual_test_modules",
          "run_with_coverage"
        ],
        "core/base/test_enums.py": [
          "TestDependencyType.test_enum_values",
          "test_enum_values",
          "TestDependencyType.test_enum_members",
          "test_enum_members",
          "TestDependencyType.test_enum_access_by_name",
          "test_enum_access_by_name",
          "TestDependencyType.test_enum_access_by_value",
          "test_enum_access_by_value",
          "TestDependencyType.test_equality_with_same_enum",
          "test_equality_with_same_enum",
          "TestDependencyType.test_equality_with_different_enum",
          "test_equality_with_different_enum",
          "TestDependencyType.test_equality_with_non_enum",
          "test_equality_with_non_enum",
          "TestDependencyType.test_hashability",
          "test_hashability",
          "TestDependencyType.test_hashability_in_set",
          "test_hashability_in_set",
          "TestDependencyType.test_hash_consistency",
          "test_hash_consistency",
          "TestDependencyType.test_string_representation",
          "test_string_representation",
          "TestDependencyType.test_iteration",
          "test_iteration",
          "TestNodeType.test_enum_values",
          "test_enum_values",
          "TestNodeType.test_enum_members",
          "test_enum_members",
          "TestNodeType.test_enum_access_by_name",
          "test_enum_access_by_name",
          "TestNodeType.test_enum_access_by_value",
          "test_enum_access_by_value",
          "TestNodeType.test_equality_with_same_enum",
          "test_equality_with_same_enum",
          "TestNodeType.test_equality_with_different_enum",
          "test_equality_with_different_enum",
          "TestNodeType.test_equality_with_non_enum",
          "test_equality_with_non_enum",
          "TestNodeType.test_hashability",
          "test_hashability",
          "TestNodeType.test_hashability_in_set",
          "test_hashability_in_set",
          "TestNodeType.test_hash_consistency",
          "test_hash_consistency",
          "TestNodeType.test_string_representation",
          "test_string_representation",
          "TestNodeType.test_iteration",
          "test_iteration",
          "TestNodeType.test_node_type_semantics",
          "test_node_type_semantics",
          "TestEnumInteraction.test_different_enums_not_equal",
          "test_different_enums_not_equal",
          "TestEnumInteraction.test_mixed_enum_dictionary",
          "test_mixed_enum_dictionary",
          "TestEnumInteraction.test_mixed_enum_set",
          "test_mixed_enum_set",
          "TestEnumInteraction.test_enum_type_checking",
          "test_enum_type_checking",
          "TestEnumEdgeCases.test_invalid_enum_value_dependency_type",
          "test_invalid_enum_value_dependency_type",
          "TestEnumEdgeCases.test_invalid_enum_value_node_type",
          "test_invalid_enum_value_node_type",
          "TestEnumEdgeCases.test_enum_comparison_with_none",
          "test_enum_comparison_with_none",
          "TestEnumEdgeCases.test_enum_boolean_context",
          "test_enum_boolean_context",
          "test_enum_values",
          "test_enum_members",
          "test_enum_access_by_name",
          "test_enum_access_by_value",
          "test_equality_with_same_enum",
          "test_equality_with_different_enum",
          "test_equality_with_non_enum",
          "test_hashability",
          "test_hashability_in_set",
          "test_hash_consistency",
          "test_string_representation",
          "test_iteration",
          "test_enum_values",
          "test_enum_members",
          "test_enum_access_by_name",
          "test_enum_access_by_value",
          "test_equality_with_same_enum",
          "test_equality_with_different_enum",
          "test_equality_with_non_enum",
          "test_hashability",
          "test_hashability_in_set",
          "test_hash_consistency",
          "test_string_representation",
          "test_iteration",
          "test_node_type_semantics",
          "test_different_enums_not_equal",
          "test_mixed_enum_dictionary",
          "test_mixed_enum_set",
          "test_enum_type_checking",
          "test_invalid_enum_value_dependency_type",
          "test_invalid_enum_value_node_type",
          "test_enum_comparison_with_none",
          "test_enum_boolean_context"
        ],
        "core/base/test_builder_base.py": [
          "MockConfig.__init__",
          "__init__",
          "ConcreteStepBuilder.validate_configuration",
          "validate_configuration",
          "ConcreteStepBuilder._get_inputs",
          "_get_inputs",
          "ConcreteStepBuilder._get_outputs",
          "_get_outputs",
          "ConcreteStepBuilder.create_step",
          "create_step",
          "TestStepBuilderBase.config",
          "config",
          "TestStepBuilderBase.mock_session",
          "mock_session",
          "TestStepBuilderBase.role",
          "role",
          "TestStepBuilderBase.mock_registry_manager",
          "mock_registry_manager",
          "TestStepBuilderBase.mock_dependency_resolver",
          "mock_dependency_resolver",
          "TestStepBuilderBase.mock_spec",
          "mock_spec",
          "TestStepBuilderBase.test_init_with_required_params",
          "test_init_with_required_params",
          "TestStepBuilderBase.test_init_with_optional_params",
          "test_init_with_optional_params",
          "TestStepBuilderBase.test_invalid_region_raises_error",
          "test_invalid_region_raises_error",
          "TestStepBuilderBase.test_sanitize_name_for_sagemaker",
          "test_sanitize_name_for_sagemaker",
          "TestStepBuilderBase.test_get_step_name",
          "test_get_step_name",
          "TestStepBuilderBase.test_generate_job_name",
          "test_generate_job_name",
          "TestStepBuilderBase.test_get_property_path",
          "test_get_property_path",
          "TestStepBuilderBase.test_get_all_property_paths",
          "test_get_all_property_paths",
          "TestStepBuilderBase.test_safe_logging_methods",
          "test_safe_logging_methods",
          "TestStepBuilderBase.test_get_cache_config",
          "test_get_cache_config",
          "TestStepBuilderBase.test_get_environment_variables_no_contract",
          "test_get_environment_variables_no_contract",
          "TestStepBuilderBase.test_get_environment_variables_with_contract",
          "test_get_environment_variables_with_contract",
          "TestStepBuilderBase.test_get_job_arguments_no_contract",
          "test_get_job_arguments_no_contract",
          "TestStepBuilderBase.test_get_job_arguments_with_contract",
          "test_get_job_arguments_with_contract",
          "TestStepBuilderBase.test_get_required_dependencies",
          "test_get_required_dependencies",
          "TestStepBuilderBase.test_get_optional_dependencies",
          "test_get_optional_dependencies",
          "TestStepBuilderBase.test_get_outputs",
          "test_get_outputs",
          "TestStepBuilderBase.test_get_context_name",
          "test_get_context_name",
          "TestStepBuilderBase.test_abstract_methods_must_be_implemented",
          "test_abstract_methods_must_be_implemented",
          "TestStepBuilderBase.test_region_mapping",
          "test_region_mapping",
          "TestStepBuilderBase.test_step_names_class_variable",
          "test_step_names_class_variable",
          "TestStepBuilderBase.test_common_properties_class_variable",
          "test_common_properties_class_variable",
          "TestStepBuilderBase.test_set_execution_prefix",
          "test_set_execution_prefix",
          "TestStepBuilderBase.test_get_base_output_path_with_execution_prefix",
          "test_get_base_output_path_with_execution_prefix",
          "TestStepBuilderBase.test_get_base_output_path_fallback_to_config",
          "test_get_base_output_path_fallback_to_config",
          "TestStepBuilderBase.test_execution_prefix_initialization",
          "test_execution_prefix_initialization",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "config",
          "mock_session",
          "role",
          "mock_registry_manager",
          "mock_dependency_resolver",
          "mock_spec",
          "test_init_with_required_params",
          "test_init_with_optional_params",
          "test_invalid_region_raises_error",
          "test_sanitize_name_for_sagemaker",
          "test_get_step_name",
          "test_generate_job_name",
          "test_get_property_path",
          "test_get_all_property_paths",
          "test_safe_logging_methods",
          "test_get_cache_config",
          "test_get_environment_variables_no_contract",
          "test_get_environment_variables_with_contract",
          "test_get_job_arguments_no_contract",
          "test_get_job_arguments_with_contract",
          "test_get_required_dependencies",
          "test_get_optional_dependencies",
          "test_get_outputs",
          "test_get_context_name",
          "test_abstract_methods_must_be_implemented",
          "test_region_mapping",
          "test_step_names_class_variable",
          "test_common_properties_class_variable",
          "test_set_execution_prefix",
          "test_get_base_output_path_with_execution_prefix",
          "test_get_base_output_path_fallback_to_config",
          "test_execution_prefix_initialization"
        ],
        "core/base/test_specification_base.py": [
          "TestOutputSpec.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestOutputSpec.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestOutputSpec.test_matches_name_or_alias",
          "test_matches_name_or_alias",
          "TestDependencySpec.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestDependencySpec.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestDependencySpec.test_matches_name_or_alias",
          "test_matches_name_or_alias",
          "TestValidationResult.test_init_valid",
          "test_init_valid",
          "TestValidationResult.test_init_invalid_with_errors",
          "test_init_invalid_with_errors",
          "TestValidationResult.test_add_error",
          "test_add_error",
          "TestValidationResult.test_add_warning",
          "test_add_warning",
          "TestAlignmentResult.test_init_valid",
          "test_init_valid",
          "TestAlignmentResult.test_init_invalid_with_details",
          "test_init_invalid_with_details",
          "TestStepSpecification.output_spec",
          "output_spec",
          "TestStepSpecification.dependency_spec",
          "dependency_spec",
          "TestStepSpecification.spec_data",
          "spec_data",
          "TestStepSpecification.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestStepSpecification.test_init_with_script_contract",
          "test_init_with_script_contract",
          "TestStepSpecification.test_get_output_by_name_or_alias",
          "test_get_output_by_name_or_alias",
          "TestStepSpecification.test_get_dependency",
          "test_get_dependency",
          "TestStepSpecification.test_validate_basic",
          "test_validate_basic",
          "TestStepSpecification.test_validate_empty_step_type",
          "test_validate_empty_step_type",
          "TestStepSpecification.test_validate_duplicate_output_names",
          "test_validate_duplicate_output_names",
          "TestStepSpecification.test_validate_contract_alignment_no_contract",
          "test_validate_contract_alignment_no_contract",
          "TestStepSpecification.test_validate_contract_alignment_with_contract",
          "test_validate_contract_alignment_with_contract",
          "TestStepSpecification.test_validate_contract_alignment_missing_inputs",
          "test_validate_contract_alignment_missing_inputs",
          "TestStepSpecification.test_validate_contract_alignment_missing_outputs",
          "test_validate_contract_alignment_missing_outputs",
          "TestStepSpecification.test_list_required_dependencies",
          "test_list_required_dependencies",
          "TestStepSpecification.test_list_optional_dependencies",
          "test_list_optional_dependencies",
          "TestStepSpecification.test_list_all_output_names",
          "test_list_all_output_names",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_matches_name_or_alias",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_matches_name_or_alias",
          "test_init_valid",
          "test_init_invalid_with_errors",
          "test_add_error",
          "test_add_warning",
          "test_init_valid",
          "test_init_invalid_with_details",
          "output_spec",
          "dependency_spec",
          "spec_data",
          "test_init_with_required_fields",
          "test_init_with_script_contract",
          "test_get_output_by_name_or_alias",
          "test_get_dependency",
          "test_validate_basic",
          "test_validate_empty_step_type",
          "test_validate_duplicate_output_names",
          "test_validate_contract_alignment_no_contract",
          "test_validate_contract_alignment_with_contract",
          "test_validate_contract_alignment_missing_inputs",
          "test_validate_contract_alignment_missing_outputs",
          "test_list_required_dependencies",
          "test_list_optional_dependencies",
          "test_list_all_output_names"
        ],
        "core/base/test_get_script_contract_simple.py": [
          "test_step_name_derivation",
          "test_step_catalog_contract_discovery",
          "test_registry_integration",
          "main"
        ]
      },
      "likely_tested_functions": [
        "PipelineTemplateBase.__init__",
        "__init__",
        "PipelineTemplateBase._load_configs",
        "_load_configs",
        "PipelineTemplateBase._get_base_config",
        "PipelineTemplateBase._initialize_components",
        "PipelineTemplateBase._validate_configuration",
        "_validate_configuration",
        "PipelineTemplateBase._create_pipeline_dag",
        "_create_pipeline_dag",
        "PipelineTemplateBase._create_config_map",
        "_create_config_map",
        "PipelineTemplateBase._create_step_builder_map",
        "_create_step_builder_map",
        "PipelineTemplateBase.set_pipeline_parameters",
        "set_pipeline_parameters",
        "PipelineTemplateBase._get_pipeline_parameters",
        "_get_pipeline_parameters",
        "PipelineTemplateBase.generate_pipeline",
        "generate_pipeline",
        "PipelineTemplateBase._get_pipeline_name",
        "PipelineTemplateBase._store_pipeline_metadata",
        "_store_pipeline_metadata",
        "PipelineTemplateBase.create_with_components",
        "create_with_components",
        "PipelineTemplateBase.build_with_context",
        "build_with_context",
        "PipelineTemplateBase.build_in_thread",
        "build_in_thread",
        "__init__",
        "_load_configs",
        "_validate_configuration",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "set_pipeline_parameters",
        "_get_pipeline_parameters",
        "generate_pipeline",
        "_store_pipeline_metadata",
        "create_with_components",
        "build_with_context",
        "build_in_thread",
        "PipelineAssembler.__init__",
        "__init__",
        "PipelineAssembler._initialize_step_builders",
        "_initialize_step_builders",
        "PipelineAssembler._propagate_messages",
        "_propagate_messages",
        "PipelineAssembler._generate_outputs",
        "_generate_outputs",
        "PipelineAssembler._instantiate_step",
        "_instantiate_step",
        "PipelineAssembler.create_with_components",
        "create_with_components",
        "PipelineAssembler._get_registry_manager",
        "_get_registry_manager",
        "PipelineAssembler._get_dependency_resolver",
        "_get_dependency_resolver",
        "PipelineAssembler.generate_pipeline",
        "generate_pipeline",
        "__init__",
        "_initialize_step_builders",
        "_propagate_messages",
        "_generate_outputs",
        "_instantiate_step",
        "create_with_components",
        "_get_registry_manager",
        "_get_dependency_resolver",
        "generate_pipeline",
        "HybridResolutionMetrics.__init__",
        "__init__",
        "HybridResolutionMetrics.record_strategy_1_success",
        "HybridResolutionMetrics.record_strategy_2_success",
        "HybridResolutionMetrics.record_failure",
        "HybridResolutionMetrics.get_metrics",
        "HybridResolutionConfig.is_hybrid_resolution_enabled",
        "HybridResolutionConfig.get_hybrid_resolution_mode",
        "HybridPathResolver.__init__",
        "__init__",
        "HybridPathResolver.resolve_path",
        "HybridPathResolver._package_location_discovery",
        "HybridPathResolver._working_directory_discovery",
        "_working_directory_discovery",
        "resolve_hybrid_path",
        "__init__",
        "__init__",
        "_working_directory_discovery",
        "SpecificationRegistry.__init__",
        "__init__",
        "SpecificationRegistry.register",
        "register",
        "SpecificationRegistry.get_specification",
        "get_specification",
        "SpecificationRegistry.get_specifications_by_type",
        "get_specifications_by_type",
        "SpecificationRegistry.list_step_names",
        "SpecificationRegistry.list_step_types",
        "SpecificationRegistry.find_compatible_outputs",
        "find_compatible_outputs",
        "SpecificationRegistry._are_compatible",
        "SpecificationRegistry._calculate_compatibility_score",
        "SpecificationRegistry.__repr__",
        "__init__",
        "register",
        "get_specification",
        "get_specifications_by_type",
        "find_compatible_outputs",
        "RegistryManager.__init__",
        "__init__",
        "RegistryManager._get_hybrid_manager",
        "RegistryManager._get_workspace_aware_context_name",
        "RegistryManager.get_registry",
        "get_registry",
        "RegistryManager.list_contexts",
        "list_contexts",
        "RegistryManager.clear_context",
        "clear_context",
        "RegistryManager.clear_all_contexts",
        "clear_all_contexts",
        "RegistryManager.get_context_stats",
        "get_context_stats",
        "RegistryManager.__repr__",
        "get_registry",
        "list_contexts",
        "clear_context",
        "get_context_stats",
        "get_pipeline_registry",
        "get_default_registry",
        "__init__",
        "get_registry",
        "list_contexts",
        "clear_context",
        "clear_all_contexts",
        "get_context_stats",
        "create_pipeline_components",
        "get_thread_components",
        "dependency_resolution_context",
        "UnifiedDependencyResolver.__init__",
        "__init__",
        "UnifiedDependencyResolver.register_specification",
        "register_specification",
        "__init__",
        "register_specification",
        "PropertyReference.validate_step_name",
        "PropertyReference.to_sagemaker_property",
        "to_sagemaker_property",
        "PropertyReference.to_runtime_property",
        "to_runtime_property",
        "PropertyReference._get_property_value",
        "_get_property_value",
        "PropertyReference._parse_property_path",
        "_parse_property_path",
        "PropertyReference.__str__",
        "PropertyReference.__repr__",
        "to_sagemaker_property",
        "to_runtime_property",
        "_get_property_value",
        "_parse_property_path",
        "SemanticMatcher.__init__",
        "__init__",
        "SemanticMatcher.calculate_similarity",
        "calculate_similarity",
        "SemanticMatcher.calculate_similarity_with_aliases",
        "calculate_similarity_with_aliases",
        "SemanticMatcher._normalize_name",
        "SemanticMatcher._calculate_string_similarity",
        "SemanticMatcher._calculate_token_similarity",
        "SemanticMatcher._calculate_semantic_similarity",
        "SemanticMatcher._calculate_substring_similarity",
        "SemanticMatcher._are_synonyms",
        "SemanticMatcher.find_best_matches",
        "find_best_matches",
        "SemanticMatcher.explain_similarity",
        "__init__",
        "calculate_similarity",
        "calculate_similarity_with_aliases",
        "find_best_matches",
        "ConfigFieldTierRegistryAdapter.get_tier",
        "get_tier",
        "ConfigFieldTierRegistryAdapter.register_field",
        "register_field",
        "ConfigFieldTierRegistryAdapter.register_fields",
        "register_fields",
        "ConfigFieldTierRegistryAdapter.get_fields_by_tier",
        "get_fields_by_tier",
        "ConfigFieldTierRegistryAdapter.reset_to_defaults",
        "reset_to_defaults",
        "get_tier",
        "register_field",
        "register_fields",
        "get_fields_by_tier",
        "reset_to_defaults",
        "StepCatalogAwareConfigFieldCategorizer.__init__",
        "__init__",
        "StepCatalogAwareConfigFieldCategorizer._categorize_field",
        "_categorize_field",
        "__init__",
        "_categorize_field",
        "ConfigMerger.__init__",
        "__init__",
        "ConfigMerger.merge",
        "merge",
        "ConfigMerger._verify_merged_output",
        "_verify_merged_output",
        "ConfigMerger._generate_step_name",
        "_generate_step_name",
        "ConfigMerger._check_mutual_exclusivity",
        "_check_mutual_exclusivity",
        "ConfigMerger._check_special_fields_placement",
        "_check_special_fields_placement",
        "ConfigMerger._check_required_fields",
        "ConfigMerger.save",
        "save",
        "ConfigMerger.load",
        "load",
        "ConfigMerger.merge_with_direction",
        "merge_with_direction",
        "load_configs",
        "__init__",
        "merge",
        "_verify_merged_output",
        "_generate_step_name",
        "_check_mutual_exclusivity",
        "_check_special_fields_placement",
        "save",
        "load",
        "merge_with_direction",
        "TypeAwareConfigSerializer.__init__",
        "__init__",
        "TypeAwareConfigSerializer.serialize",
        "serialize",
        "TypeAwareConfigSerializer.deserialize",
        "deserialize",
        "TypeAwareConfigSerializer.generate_step_name",
        "generate_step_name",
        "serialize_config",
        "__init__",
        "serialize",
        "deserialize",
        "generate_step_name",
        "build_complete_config_classes",
        "SimpleTierAwareTracker.__init__",
        "__init__",
        "SimpleTierAwareTracker.reset",
        "reset",
        "UnifiedConfigManager.__init__",
        "__init__",
        "UnifiedConfigManager.step_catalog",
        "step_catalog",
        "__init__",
        "reset",
        "__init__",
        "step_catalog",
        "ConfigClassDiscoveryCache.__init__",
        "__init__",
        "ConfigClassDiscoveryCache.get",
        "get",
        "ConfigClassDiscoveryCache.set",
        "set",
        "PerformanceOptimizer.__init__",
        "__init__",
        "__init__",
        "get",
        "set",
        "__init__",
        "decorator",
        "ConfigFieldCategorizer.__init__",
        "__init__",
        "ConfigFieldCategorizer._collect_field_info",
        "ConfigFieldCategorizer._is_special_field",
        "_is_special_field",
        "ConfigFieldCategorizer._is_likely_static",
        "_is_likely_static",
        "ConfigFieldCategorizer._categorize_fields",
        "_categorize_fields",
        "ConfigFieldCategorizer._categorize_field",
        "_categorize_field",
        "ConfigFieldCategorizer._place_field",
        "_place_field",
        "ConfigFieldCategorizer.get_category_for_field",
        "ConfigFieldCategorizer.get_categorized_fields",
        "get_categorized_fields",
        "ConfigFieldCategorizer.get_field_sources",
        "ConfigFieldCategorizer.print_categorization_stats",
        "__init__",
        "_is_special_field",
        "_is_likely_static",
        "_categorize_fields",
        "_categorize_field",
        "_place_field",
        "get_categorized_fields",
        "SimplifiedCircularReferenceTracker.__init__",
        "__init__",
        "SimplifiedCircularReferenceTracker.reset",
        "reset",
        "__init__",
        "reset",
        "generate_random_word",
        "validate_pipeline_name",
        "sanitize_pipeline_name",
        "generate_pipeline_name",
        "compile_dag_to_pipeline",
        "PipelineDAGCompiler.__init__",
        "__init__",
        "PipelineDAGCompiler.validate_dag_compatibility",
        "validate_dag_compatibility",
        "PipelineDAGCompiler.preview_resolution",
        "preview_resolution",
        "PipelineDAGCompiler.compile",
        "compile",
        "PipelineDAGCompiler.compile_with_report",
        "compile_with_report",
        "PipelineDAGCompiler.create_template",
        "create_template",
        "PipelineDAGCompiler.get_supported_step_types",
        "get_supported_step_types",
        "PipelineDAGCompiler.validate_config_file",
        "validate_config_file",
        "PipelineDAGCompiler.get_last_template",
        "get_last_template",
        "__init__",
        "validate_dag_compatibility",
        "preview_resolution",
        "compile",
        "compile_with_report",
        "create_template",
        "get_supported_step_types",
        "validate_config_file",
        "get_last_template",
        "DynamicPipelineTemplate.__init__",
        "__init__",
        "DynamicPipelineTemplate._detect_config_classes",
        "_detect_config_classes",
        "DynamicPipelineTemplate._create_pipeline_dag",
        "_create_pipeline_dag",
        "DynamicPipelineTemplate._create_config_map",
        "_create_config_map",
        "DynamicPipelineTemplate._create_step_builder_map",
        "_create_step_builder_map",
        "DynamicPipelineTemplate._validate_configuration",
        "_validate_configuration",
        "DynamicPipelineTemplate.get_resolution_preview",
        "get_resolution_preview",
        "DynamicPipelineTemplate._store_pipeline_metadata",
        "_store_pipeline_metadata",
        "DynamicPipelineTemplate.get_step_catalog_stats",
        "DynamicPipelineTemplate.validate_before_build",
        "DynamicPipelineTemplate.get_step_dependencies",
        "get_step_dependencies",
        "DynamicPipelineTemplate.get_execution_order",
        "__init__",
        "_detect_config_classes",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "_validate_configuration",
        "get_resolution_preview",
        "_store_pipeline_metadata",
        "get_step_dependencies",
        "ConfigurationError.__init__",
        "__init__",
        "AmbiguityError.__init__",
        "__init__",
        "ValidationError.__init__",
        "__init__",
        "ResolutionError.__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "ValidationResult.summary",
        "summary",
        "ValidationResult.detailed_report",
        "detailed_report",
        "ResolutionPreview.display",
        "display",
        "ConversionReport.summary",
        "summary",
        "ConversionReport.detailed_report",
        "detailed_report",
        "ValidationEngine.__init__",
        "__init__",
        "ValidationEngine.validate_dag_compatibility",
        "validate_dag_compatibility",
        "summary",
        "detailed_report",
        "display",
        "summary",
        "detailed_report",
        "__init__",
        "validate_dag_compatibility",
        "DependencyType.__eq__",
        "DependencyType.__hash__",
        "NodeType.__eq__",
        "NodeType.__hash__",
        "ValidationResult.success",
        "success",
        "ValidationResult.error",
        "error",
        "ValidationResult.combine",
        "combine",
        "ValidationResult.add_error",
        "add_error",
        "ValidationResult.add_warning",
        "add_warning",
        "AlignmentResult.success",
        "success",
        "AlignmentResult.error",
        "error",
        "ScriptContract.validate_entry_point",
        "validate_entry_point",
        "ScriptContract.validate_input_paths",
        "validate_input_paths",
        "ScriptContract.validate_output_paths",
        "validate_output_paths",
        "ScriptContract.validate_arguments",
        "validate_arguments",
        "ScriptContract.validate_implementation",
        "validate_implementation",
        "ScriptContract._validate_against_analysis",
        "ScriptAnalyzer.__init__",
        "__init__",
        "ScriptAnalyzer.ast_tree",
        "ast_tree",
        "ScriptAnalyzer.get_input_paths",
        "get_input_paths",
        "ScriptAnalyzer.get_output_paths",
        "get_output_paths",
        "ScriptAnalyzer.get_env_var_usage",
        "get_env_var_usage",
        "ScriptAnalyzer.get_argument_usage",
        "get_argument_usage",
        "success",
        "error",
        "combine",
        "add_error",
        "add_warning",
        "success",
        "error",
        "validate_entry_point",
        "validate_input_paths",
        "validate_output_paths",
        "validate_arguments",
        "validate_implementation",
        "__init__",
        "ast_tree",
        "get_input_paths",
        "get_output_paths",
        "get_env_var_usage",
        "get_argument_usage",
        "DependencySpec.validate_logical_name",
        "DependencySpec.validate_dependency_type",
        "DependencySpec.validate_compatible_sources",
        "DependencySpec.validate_semantic_keywords",
        "DependencySpec.matches_name_or_alias",
        "matches_name_or_alias",
        "OutputSpec.validate_logical_name",
        "OutputSpec.validate_output_type",
        "OutputSpec.validate_aliases",
        "OutputSpec.validate_property_path",
        "OutputSpec.validate_aliases_no_conflict",
        "OutputSpec.matches_name_or_alias",
        "matches_name_or_alias",
        "StepSpecification.__init__",
        "__init__",
        "StepSpecification.validate_step_type",
        "StepSpecification.validate_node_type",
        "StepSpecification.validate_node_type_constraints",
        "StepSpecification._validate_output_aliases",
        "StepSpecification.get_dependency",
        "get_dependency",
        "StepSpecification.get_output",
        "get_output",
        "StepSpecification.get_output_by_name_or_alias",
        "get_output_by_name_or_alias",
        "StepSpecification.list_all_output_names",
        "list_all_output_names",
        "StepSpecification.list_required_dependencies",
        "list_required_dependencies",
        "StepSpecification.list_optional_dependencies",
        "list_optional_dependencies",
        "StepSpecification.list_dependencies_by_type",
        "StepSpecification.list_outputs_by_type",
        "StepSpecification.validate_specification",
        "StepSpecification.validate_contract_alignment",
        "validate_contract_alignment",
        "StepSpecification.validate_script_compliance",
        "StepSpecification.__repr__",
        "StepSpecification.model_validate",
        "matches_name_or_alias",
        "matches_name_or_alias",
        "__init__",
        "get_dependency",
        "get_output",
        "get_output_by_name_or_alias",
        "list_all_output_names",
        "list_required_dependencies",
        "list_optional_dependencies",
        "validate_contract_alignment",
        "BasePipelineConfig.aws_region",
        "BasePipelineConfig.pipeline_name",
        "pipeline_name",
        "BasePipelineConfig.pipeline_description",
        "BasePipelineConfig.pipeline_s3_loc",
        "BasePipelineConfig.effective_source_dir",
        "effective_source_dir",
        "BasePipelineConfig.model_dump",
        "model_dump",
        "BasePipelineConfig.__str__",
        "BasePipelineConfig._validate_custom_region",
        "BasePipelineConfig.initialize_derived_fields",
        "BasePipelineConfig.step_catalog",
        "step_catalog",
        "BasePipelineConfig._detect_workspace_dirs",
        "BasePipelineConfig._derive_step_name",
        "BasePipelineConfig.get_script_contract",
        "get_script_contract",
        "BasePipelineConfig.script_contract",
        "script_contract",
        "BasePipelineConfig.get_script_path",
        "get_script_path",
        "BasePipelineConfig.resolve_hybrid_path",
        "resolve_hybrid_path",
        "BasePipelineConfig.resolved_source_dir",
        "resolved_source_dir",
        "BasePipelineConfig.get_step_name",
        "get_step_name",
        "BasePipelineConfig.get_config_class_name",
        "get_config_class_name",
        "BasePipelineConfig._get_step_registry",
        "BasePipelineConfig.from_base_config",
        "from_base_config",
        "BasePipelineConfig.categorize_fields",
        "categorize_fields",
        "BasePipelineConfig.print_config",
        "print_config",
        "BasePipelineConfig.get_public_init_fields",
        "get_public_init_fields",
        "pipeline_name",
        "effective_source_dir",
        "model_dump",
        "step_catalog",
        "get_script_contract",
        "script_contract",
        "get_script_path",
        "resolve_hybrid_path",
        "resolved_source_dir",
        "get_step_name",
        "get_config_class_name",
        "from_base_config",
        "categorize_fields",
        "print_config",
        "get_public_init_fields",
        "StepBuilderBase.STEP_NAMES",
        "STEP_NAMES",
        "StepBuilderBase._get_workspace_context",
        "StepBuilderBase.__init__",
        "__init__",
        "StepBuilderBase._sanitize_name_for_sagemaker",
        "_sanitize_name_for_sagemaker",
        "StepBuilderBase._get_step_name",
        "_get_step_name",
        "StepBuilderBase._generate_job_name",
        "_generate_job_name",
        "StepBuilderBase.get_property_path",
        "get_property_path",
        "StepBuilderBase.get_all_property_paths",
        "get_all_property_paths",
        "StepBuilderBase.log_info",
        "StepBuilderBase.log_debug",
        "StepBuilderBase.log_warning",
        "StepBuilderBase.log_error",
        "StepBuilderBase._get_cache_config",
        "_get_cache_config",
        "StepBuilderBase._get_environment_variables",
        "_get_environment_variables",
        "StepBuilderBase._get_job_arguments",
        "_get_job_arguments",
        "StepBuilderBase.set_execution_prefix",
        "set_execution_prefix",
        "StepBuilderBase._get_base_output_path",
        "_get_base_output_path",
        "StepBuilderBase.validate_configuration",
        "validate_configuration",
        "StepBuilderBase.get_required_dependencies",
        "get_required_dependencies",
        "StepBuilderBase.get_optional_dependencies",
        "get_optional_dependencies",
        "StepBuilderBase.get_outputs",
        "get_outputs",
        "StepBuilderBase._get_inputs",
        "_get_inputs",
        "StepBuilderBase._get_outputs",
        "_get_outputs",
        "StepBuilderBase._get_context_name",
        "_get_context_name",
        "StepBuilderBase._get_registry_manager",
        "_get_registry_manager",
        "StepBuilderBase._get_registry",
        "_get_registry",
        "StepBuilderBase._get_dependency_resolver",
        "_get_dependency_resolver",
        "StepBuilderBase.extract_inputs_from_dependencies",
        "StepBuilderBase._enhance_dependency_steps_with_specs",
        "StepBuilderBase.create_step",
        "create_step",
        "STEP_NAMES",
        "__init__",
        "_sanitize_name_for_sagemaker",
        "_get_step_name",
        "_generate_job_name",
        "get_property_path",
        "get_all_property_paths",
        "_get_cache_config",
        "_get_environment_variables",
        "_get_job_arguments",
        "set_execution_prefix",
        "_get_base_output_path",
        "validate_configuration",
        "get_required_dependencies",
        "get_optional_dependencies",
        "get_outputs",
        "_get_inputs",
        "_get_outputs",
        "_get_context_name",
        "_get_registry_manager",
        "_get_registry",
        "_get_dependency_resolver",
        "create_step",
        "ModelHyperparameters.input_tab_dim",
        "ModelHyperparameters.num_classes",
        "ModelHyperparameters.is_binary",
        "ModelHyperparameters.validate_dimensions",
        "ModelHyperparameters.categorize_fields",
        "categorize_fields",
        "ModelHyperparameters.__str__",
        "ModelHyperparameters.print_hyperparam",
        "print_hyperparam",
        "ModelHyperparameters.get_public_init_fields",
        "get_public_init_fields",
        "ModelHyperparameters.from_base_hyperparam",
        "from_base_hyperparam",
        "ModelHyperparameters.get_config",
        "get_config",
        "ModelHyperparameters.serialize_config",
        "serialize_config",
        "categorize_fields",
        "print_hyperparam",
        "get_public_init_fields",
        "from_base_hyperparam",
        "get_config",
        "serialize_config"
      ],
      "likely_untested_functions": [
        "_get_base_config",
        "_initialize_components",
        "_get_pipeline_name",
        "_get_base_config",
        "_initialize_components",
        "_get_pipeline_name",
        "safe_value_for_logging",
        "record_strategy_1_success",
        "record_strategy_2_success",
        "record_failure",
        "get_metrics",
        "is_hybrid_resolution_enabled",
        "get_hybrid_resolution_mode",
        "get_hybrid_resolution_metrics",
        "resolve_path",
        "_package_location_discovery",
        "record_strategy_1_success",
        "record_strategy_2_success",
        "record_failure",
        "get_metrics",
        "is_hybrid_resolution_enabled",
        "get_hybrid_resolution_mode",
        "resolve_path",
        "_package_location_discovery",
        "list_step_names",
        "list_step_types",
        "_are_compatible",
        "_calculate_compatibility_score",
        "__repr__",
        "list_step_names",
        "list_step_types",
        "_are_compatible",
        "_calculate_compatibility_score",
        "__repr__",
        "_get_hybrid_manager",
        "_get_workspace_aware_context_name",
        "__repr__",
        "integrate_with_pipeline_builder",
        "_get_hybrid_manager",
        "_get_workspace_aware_context_name",
        "__repr__",
        "new_init",
        "UnifiedDependencyResolver.resolve_all_dependencies",
        "resolve_all_dependencies",
        "UnifiedDependencyResolver.resolve_step_dependencies",
        "resolve_step_dependencies",
        "UnifiedDependencyResolver.resolve_with_scoring",
        "resolve_with_scoring",
        "UnifiedDependencyResolver._get_all_candidates_with_scores",
        "_get_all_candidates_with_scores",
        "UnifiedDependencyResolver._get_score_breakdown",
        "_get_score_breakdown",
        "UnifiedDependencyResolver._generate_resolution_details",
        "_generate_resolution_details",
        "UnifiedDependencyResolver._resolve_single_dependency",
        "_resolve_single_dependency",
        "UnifiedDependencyResolver._calculate_compatibility",
        "_calculate_compatibility",
        "UnifiedDependencyResolver._are_types_compatible",
        "_are_types_compatible",
        "UnifiedDependencyResolver._are_data_types_compatible",
        "_are_data_types_compatible",
        "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
        "_normalize_step_type_for_compatibility",
        "UnifiedDependencyResolver._calculate_keyword_match",
        "_calculate_keyword_match",
        "UnifiedDependencyResolver.get_resolution_report",
        "get_resolution_report",
        "UnifiedDependencyResolver.clear_cache",
        "clear_cache",
        "create_dependency_resolver",
        "resolve_all_dependencies",
        "resolve_step_dependencies",
        "resolve_with_scoring",
        "_get_all_candidates_with_scores",
        "_get_score_breakdown",
        "_generate_resolution_details",
        "_resolve_single_dependency",
        "_calculate_compatibility",
        "_are_types_compatible",
        "_are_data_types_compatible",
        "_normalize_step_type_for_compatibility",
        "_calculate_keyword_match",
        "get_resolution_report",
        "clear_cache",
        "validate_step_name",
        "__str__",
        "__repr__",
        "validate_step_name",
        "__str__",
        "__repr__",
        "_normalize_name",
        "_calculate_string_similarity",
        "_calculate_token_similarity",
        "_calculate_semantic_similarity",
        "_calculate_substring_similarity",
        "_are_synonyms",
        "explain_similarity",
        "_normalize_name",
        "_calculate_string_similarity",
        "_calculate_token_similarity",
        "_calculate_semantic_similarity",
        "_calculate_substring_similarity",
        "_are_synonyms",
        "explain_similarity",
        "StepCatalogAwareConfigFieldCategorizer._initialize_enhanced_mappings",
        "_initialize_enhanced_mappings",
        "StepCatalogAwareConfigFieldCategorizer._get_workspace_field_mappings",
        "_get_workspace_field_mappings",
        "StepCatalogAwareConfigFieldCategorizer._get_framework_field_mappings",
        "_get_framework_field_mappings",
        "StepCatalogAwareConfigFieldCategorizer._categorize_field_with_step_catalog_context",
        "_categorize_field_with_step_catalog_context",
        "StepCatalogAwareConfigFieldCategorizer.get_enhanced_categorization_info",
        "get_enhanced_categorization_info",
        "StepCatalogAwareConfigFieldCategorizer.categorize_with_enhanced_metadata",
        "categorize_with_enhanced_metadata",
        "create_step_catalog_aware_categorizer",
        "_initialize_enhanced_mappings",
        "_get_workspace_field_mappings",
        "_get_framework_field_mappings",
        "_categorize_field_with_step_catalog_context",
        "get_enhanced_categorization_info",
        "categorize_with_enhanced_metadata",
        "_check_required_fields",
        "merge_and_save_configs",
        "_check_required_fields",
        "TypeAwareConfigSerializer._deserialize_model",
        "_deserialize_model",
        "TypeAwareConfigSerializer._get_class_by_name",
        "_get_class_by_name",
        "TypeAwareConfigSerializer._generate_step_name_fallback",
        "_generate_step_name_fallback",
        "deserialize_config",
        "_deserialize_model",
        "_get_class_by_name",
        "_generate_step_name_fallback",
        "_map_region_to_aws_region",
        "_create_field_schema",
        "_format_edx_manifest_key",
        "_create_edx_manifest",
        "_create_edx_manifest_from_key",
        "_generate_transform_sql",
        "_get_all_fields",
        "create_cradle_data_load_config",
        "create_training_and_calibration_configs",
        "SimpleTierAwareTracker.enter_object",
        "enter_object",
        "SimpleTierAwareTracker.exit_object",
        "exit_object",
        "UnifiedConfigManager.get_config_classes",
        "get_config_classes",
        "UnifiedConfigManager.get_field_tiers",
        "get_field_tiers",
        "UnifiedConfigManager.serialize_with_tier_awareness",
        "serialize_with_tier_awareness",
        "UnifiedConfigManager._serialize_recursive",
        "_serialize_recursive",
        "UnifiedConfigManager._get_basic_config_classes",
        "_get_basic_config_classes",
        "UnifiedConfigManager._basic_field_categorization",
        "_basic_field_categorization",
        "get_unified_config_manager",
        "enter_object",
        "exit_object",
        "get_config_classes",
        "get_field_tiers",
        "serialize_with_tier_awareness",
        "_serialize_recursive",
        "_get_basic_config_classes",
        "_basic_field_categorization",
        "ConfigClassDiscoveryCache.invalidate",
        "invalidate",
        "ConfigClassDiscoveryCache.get_stats",
        "get_stats",
        "PerformanceOptimizer.cached_config_discovery",
        "cached_config_discovery",
        "PerformanceOptimizer.optimized_config_loading",
        "optimized_config_loading",
        "PerformanceOptimizer.optimized_serialization",
        "optimized_serialization",
        "PerformanceOptimizer.get_performance_stats",
        "get_performance_stats",
        "PerformanceOptimizer.clear_performance_stats",
        "clear_performance_stats",
        "PerformanceOptimizer.invalidate_cache",
        "invalidate_cache",
        "get_performance_optimizer",
        "performance_monitor",
        "cached_file_stat",
        "optimize_logging_for_production",
        "MemoryOptimizer.get_memory_usage",
        "get_memory_usage",
        "MemoryOptimizer.optimize_garbage_collection",
        "optimize_garbage_collection",
        "invalidate",
        "get_stats",
        "cached_config_discovery",
        "optimized_config_loading",
        "optimized_serialization",
        "get_performance_stats",
        "clear_performance_stats",
        "invalidate_cache",
        "get_memory_usage",
        "optimize_garbage_collection",
        "wrapper",
        "_collect_field_info",
        "get_category_for_field",
        "get_field_sources",
        "print_categorization_stats",
        "_collect_field_info",
        "get_category_for_field",
        "get_field_sources",
        "print_categorization_stats",
        "SimplifiedCircularReferenceTracker.enter_object",
        "enter_object",
        "SimplifiedCircularReferenceTracker.exit_object",
        "exit_object",
        "SimplifiedCircularReferenceTracker.get_current_path_str",
        "get_current_path_str",
        "SimplifiedCircularReferenceTracker._get_module_from_step_catalog",
        "_get_module_from_step_catalog",
        "SimplifiedCircularReferenceTracker._format_simple_cycle_error",
        "_format_simple_cycle_error",
        "enter_object",
        "exit_object",
        "get_current_path_str",
        "_get_module_from_step_catalog",
        "_format_simple_cycle_error",
        "get_step_catalog_stats",
        "validate_before_build",
        "get_execution_order",
        "get_step_catalog_stats",
        "validate_before_build",
        "get_execution_order",
        "ConfigurationError.__str__",
        "__str__",
        "AmbiguityError.__str__",
        "__str__",
        "ValidationError.__str__",
        "__str__",
        "ResolutionError.__str__",
        "__str__",
        "__str__",
        "__str__",
        "__str__",
        "__str__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "_validate_against_analysis",
        "_validate_against_analysis",
        "validate_logical_name",
        "validate_dependency_type",
        "validate_compatible_sources",
        "validate_semantic_keywords",
        "validate_logical_name",
        "validate_output_type",
        "validate_aliases",
        "validate_property_path",
        "validate_aliases_no_conflict",
        "validate_step_type",
        "validate_node_type",
        "validate_node_type_constraints",
        "_validate_output_aliases",
        "list_dependencies_by_type",
        "list_outputs_by_type",
        "validate_specification",
        "validate_script_compliance",
        "__repr__",
        "model_validate",
        "validate_logical_name",
        "validate_dependency_type",
        "validate_compatible_sources",
        "validate_semantic_keywords",
        "validate_logical_name",
        "validate_output_type",
        "validate_aliases",
        "validate_property_path",
        "validate_aliases_no_conflict",
        "validate_step_type",
        "validate_node_type",
        "validate_node_type_constraints",
        "_validate_output_aliases",
        "list_dependencies_by_type",
        "list_outputs_by_type",
        "validate_specification",
        "validate_script_compliance",
        "__repr__",
        "model_validate",
        "aws_region",
        "pipeline_description",
        "pipeline_s3_loc",
        "__str__",
        "_validate_custom_region",
        "initialize_derived_fields",
        "_detect_workspace_dirs",
        "_derive_step_name",
        "_get_step_registry",
        "aws_region",
        "pipeline_description",
        "pipeline_s3_loc",
        "__str__",
        "_validate_custom_region",
        "initialize_derived_fields",
        "_detect_workspace_dirs",
        "_derive_step_name",
        "_get_step_registry",
        "safe_value_for_logging",
        "_get_workspace_context",
        "log_info",
        "log_debug",
        "log_warning",
        "log_error",
        "extract_inputs_from_dependencies",
        "_enhance_dependency_steps_with_specs",
        "_get_workspace_context",
        "log_info",
        "log_debug",
        "log_warning",
        "log_error",
        "extract_inputs_from_dependencies",
        "_enhance_dependency_steps_with_specs",
        "input_tab_dim",
        "num_classes",
        "is_binary",
        "validate_dimensions",
        "__str__",
        "input_tab_dim",
        "num_classes",
        "is_binary",
        "validate_dimensions",
        "__str__"
      ]
    },
    "mods": {
      "component": "mods",
      "description": "MODS integration and execution documents",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "mods/exe_doc/cradle_helper.py",
        "mods/exe_doc/registration_helper.py",
        "mods/exe_doc/generator.py",
        "mods/exe_doc/utils.py",
        "mods/exe_doc/base.py"
      ],
      "test_files": [
        "mods/exe_doc/test_utils.py",
        "mods/exe_doc/test_generator.py",
        "mods/exe_doc/test_registration_helper.py",
        "mods/exe_doc/test_cradle_helper.py",
        "mods/exe_doc/test_generator_integration.py"
      ],
      "total_source_functions": 89,
      "tested_functions": 74,
      "untested_functions": 15,
      "coverage_percentage": 83.14606741573034,
      "total_source_lines": 1550,
      "total_test_lines": 1753,
      "test_to_source_ratio": 3.3820224719101124,
      "source_functions_by_file": {
        "mods/exe_doc/cradle_helper.py": [
          "CradleDataLoadingHelper.__init__",
          "__init__",
          "CradleDataLoadingHelper.can_handle_step",
          "can_handle_step",
          "CradleDataLoadingHelper.get_execution_step_name",
          "get_execution_step_name",
          "CradleDataLoadingHelper.extract_step_config",
          "extract_step_config",
          "CradleDataLoadingHelper._build_request",
          "_build_request",
          "CradleDataLoadingHelper._get_request_dict",
          "_get_request_dict",
          "__init__",
          "can_handle_step",
          "get_execution_step_name",
          "extract_step_config",
          "_build_request",
          "_get_request_dict"
        ],
        "mods/exe_doc/registration_helper.py": [
          "RegistrationHelper.__init__",
          "__init__",
          "RegistrationHelper.can_handle_step",
          "can_handle_step",
          "RegistrationHelper.get_execution_step_name",
          "get_execution_step_name",
          "RegistrationHelper.extract_step_config",
          "extract_step_config",
          "RegistrationHelper._get_image_uri",
          "_get_image_uri",
          "RegistrationHelper._create_execution_doc_config",
          "_create_execution_doc_config",
          "RegistrationHelper.create_execution_doc_config_with_related_configs",
          "create_execution_doc_config_with_related_configs",
          "RegistrationHelper.find_registration_step_patterns",
          "find_registration_step_patterns",
          "RegistrationHelper.validate_registration_config",
          "validate_registration_config",
          "__init__",
          "can_handle_step",
          "get_execution_step_name",
          "extract_step_config",
          "_get_image_uri",
          "_create_execution_doc_config",
          "create_execution_doc_config_with_related_configs",
          "find_registration_step_patterns",
          "validate_registration_config"
        ],
        "mods/exe_doc/generator.py": [
          "ExecutionDocumentGenerator.__init__",
          "__init__",
          "ExecutionDocumentGenerator.fill_execution_document",
          "fill_execution_document",
          "ExecutionDocumentGenerator._load_configs",
          "_load_configs",
          "ExecutionDocumentGenerator._get_config_for_step",
          "_get_config_for_step",
          "ExecutionDocumentGenerator._names_match",
          "_names_match",
          "ExecutionDocumentGenerator._identify_relevant_steps",
          "_identify_relevant_steps",
          "ExecutionDocumentGenerator._is_execution_doc_relevant",
          "_is_execution_doc_relevant",
          "ExecutionDocumentGenerator._filter_steps_by_helper",
          "_filter_steps_by_helper",
          "ExecutionDocumentGenerator._fill_cradle_configurations",
          "_fill_cradle_configurations",
          "ExecutionDocumentGenerator._fill_registration_configurations",
          "_fill_registration_configurations",
          "ExecutionDocumentGenerator._find_registration_step_nodes",
          "_find_registration_step_nodes",
          "__init__",
          "fill_execution_document",
          "_load_configs",
          "_get_config_for_step",
          "_names_match",
          "_identify_relevant_steps",
          "_is_execution_doc_relevant",
          "_filter_steps_by_helper",
          "_fill_cradle_configurations",
          "_fill_registration_configurations",
          "_find_registration_step_nodes"
        ],
        "mods/exe_doc/utils.py": [
          "determine_step_type",
          "_determine_step_type_fallback",
          "validate_execution_document_structure",
          "create_execution_document_template",
          "merge_execution_documents"
        ],
        "mods/exe_doc/base.py": [
          "ExecutionDocumentHelper.can_handle_step",
          "can_handle_step",
          "ExecutionDocumentHelper.extract_step_config",
          "extract_step_config",
          "can_handle_step",
          "extract_step_config"
        ]
      },
      "test_functions_by_file": {
        "mods/exe_doc/test_utils.py": [
          "TestDetermineStepType.test_cradle_step_type_from_registry",
          "test_cradle_step_type_from_registry",
          "TestDetermineStepType.test_registration_step_type_from_registry",
          "test_registration_step_type_from_registry",
          "TestDetermineStepType.test_step_name_resolution_fallback",
          "test_step_name_resolution_fallback",
          "TestDetermineStepType.test_fallback_to_legacy_logic",
          "test_fallback_to_legacy_logic",
          "TestDetermineStepType.test_fallback_logic_directly",
          "test_fallback_logic_directly",
          "TestDetermineStepType.test_fallback_default_step_type",
          "test_fallback_default_step_type",
          "TestValidateExecutionDocumentStructure.test_valid_execution_document",
          "test_valid_execution_document",
          "TestValidateExecutionDocumentStructure.test_invalid_document_not_dict",
          "test_invalid_document_not_dict",
          "TestValidateExecutionDocumentStructure.test_invalid_document_missing_key",
          "test_invalid_document_missing_key",
          "TestValidateExecutionDocumentStructure.test_invalid_document_wrong_value_type",
          "test_invalid_document_wrong_value_type",
          "TestCreateExecutionDocumentTemplate.test_create_template_single_step",
          "test_create_template_single_step",
          "TestCreateExecutionDocumentTemplate.test_create_template_multiple_steps",
          "test_create_template_multiple_steps",
          "TestCreateExecutionDocumentTemplate.test_create_template_empty_list",
          "test_create_template_empty_list",
          "TestMergeExecutionDocuments.test_merge_documents_no_overlap",
          "test_merge_documents_no_overlap",
          "TestMergeExecutionDocuments.test_merge_documents_with_overlap",
          "test_merge_documents_with_overlap",
          "TestMergeExecutionDocuments.test_merge_documents_invalid_base",
          "test_merge_documents_invalid_base",
          "TestMergeExecutionDocuments.test_merge_documents_invalid_additional",
          "test_merge_documents_invalid_additional",
          "test_cradle_step_type_from_registry",
          "test_registration_step_type_from_registry",
          "test_step_name_resolution_fallback",
          "test_fallback_to_legacy_logic",
          "test_fallback_logic_directly",
          "test_fallback_default_step_type",
          "test_valid_execution_document",
          "test_invalid_document_not_dict",
          "test_invalid_document_missing_key",
          "test_invalid_document_wrong_value_type",
          "test_create_template_single_step",
          "test_create_template_multiple_steps",
          "test_create_template_empty_list",
          "test_merge_documents_no_overlap",
          "test_merge_documents_with_overlap",
          "test_merge_documents_invalid_base",
          "test_merge_documents_invalid_additional"
        ],
        "mods/exe_doc/test_generator.py": [
          "MockHelper.__init__",
          "__init__",
          "MockHelper.can_handle_step",
          "can_handle_step",
          "MockHelper.extract_step_config",
          "extract_step_config",
          "TestExecutionDocumentGenerator.test_init_success",
          "test_init_success",
          "TestExecutionDocumentGenerator.test_init_with_optional_params",
          "test_init_with_optional_params",
          "TestExecutionDocumentGenerator.test_init_config_loading_failure",
          "test_init_config_loading_failure",
          "TestExecutionDocumentGenerator.test_identify_relevant_steps",
          "test_identify_relevant_steps",
          "TestExecutionDocumentGenerator.test_filter_steps_by_helper",
          "test_filter_steps_by_helper",
          "TestExecutionDocumentGenerator.test_fill_execution_document_invalid_structure",
          "test_fill_execution_document_invalid_structure",
          "TestExecutionDocumentGenerator.test_fill_execution_document_success",
          "test_fill_execution_document_success",
          "TestExecutionDocumentGenerator.test_get_config_for_step_resolver_success",
          "test_get_config_for_step_resolver_success",
          "TestExecutionDocumentGenerator.test_get_config_for_step_fallback_direct_match",
          "test_get_config_for_step_fallback_direct_match",
          "TestExecutionDocumentGenerator.test_get_config_for_step_fallback_pattern_match",
          "test_get_config_for_step_fallback_pattern_match",
          "TestExecutionDocumentGenerator.test_names_match",
          "test_names_match",
          "TestExecutionDocumentGenerator.test_is_execution_doc_relevant_with_helper",
          "test_is_execution_doc_relevant_with_helper",
          "TestExecutionDocumentGenerator.test_is_execution_doc_relevant_fallback",
          "test_is_execution_doc_relevant_fallback",
          "TestExecutionDocumentGenerator.test_optimized_architecture_flow",
          "test_optimized_architecture_flow",
          "TestExecutionDocumentGenerator.test_conditional_helper_processing",
          "test_conditional_helper_processing",
          "__init__",
          "can_handle_step",
          "extract_step_config",
          "test_init_success",
          "test_init_with_optional_params",
          "test_init_config_loading_failure",
          "test_identify_relevant_steps",
          "test_filter_steps_by_helper",
          "test_fill_execution_document_invalid_structure",
          "test_fill_execution_document_success",
          "test_get_config_for_step_resolver_success",
          "test_get_config_for_step_fallback_direct_match",
          "test_get_config_for_step_fallback_pattern_match",
          "test_names_match",
          "test_is_execution_doc_relevant_with_helper",
          "test_is_execution_doc_relevant_fallback",
          "test_optimized_architecture_flow",
          "test_conditional_helper_processing",
          "mock_resolve_config"
        ],
        "mods/exe_doc/test_registration_helper.py": [
          "TestRegistrationHelper.test_init_success",
          "test_init_success",
          "TestRegistrationHelper.test_can_handle_step_registration_config",
          "test_can_handle_step_registration_config",
          "TestRegistrationHelper.test_can_handle_step_registration_step_name",
          "test_can_handle_step_registration_step_name",
          "TestRegistrationHelper.test_can_handle_step_payload_config_excluded",
          "test_can_handle_step_payload_config_excluded",
          "TestRegistrationHelper.test_can_handle_step_non_registration_config",
          "test_can_handle_step_non_registration_config",
          "TestRegistrationHelper.test_extract_step_config_success",
          "test_extract_step_config_success",
          "TestRegistrationHelper.test_extract_step_config_failure",
          "test_extract_step_config_failure",
          "TestRegistrationHelper.test_get_image_uri_sagemaker_not_available",
          "test_get_image_uri_sagemaker_not_available",
          "TestRegistrationHelper.test_get_image_uri_missing_attributes",
          "test_get_image_uri_missing_attributes",
          "TestRegistrationHelper.test_get_image_uri_success",
          "test_get_image_uri_success",
          "TestRegistrationHelper.test_get_image_uri_retrieve_failure",
          "test_get_image_uri_retrieve_failure",
          "TestRegistrationHelper.test_create_execution_doc_config_basic",
          "test_create_execution_doc_config_basic",
          "TestRegistrationHelper.test_create_execution_doc_config_with_entry_point",
          "test_create_execution_doc_config_with_entry_point",
          "TestRegistrationHelper.test_create_execution_doc_config_with_all_fields",
          "test_create_execution_doc_config_with_all_fields",
          "TestRegistrationHelper.test_create_execution_doc_config_with_related_configs",
          "test_create_execution_doc_config_with_related_configs",
          "TestRegistrationHelper.test_create_execution_doc_config_with_related_configs_no_payload",
          "test_create_execution_doc_config_with_related_configs_no_payload",
          "TestRegistrationHelper.test_find_registration_step_patterns",
          "test_find_registration_step_patterns",
          "TestRegistrationHelper.test_find_registration_step_patterns_no_region",
          "test_find_registration_step_patterns_no_region",
          "TestRegistrationHelper.test_find_registration_step_patterns_empty",
          "test_find_registration_step_patterns_empty",
          "TestRegistrationHelper.test_validate_registration_config_success",
          "test_validate_registration_config_success",
          "TestRegistrationHelper.test_validate_registration_config_missing_fields",
          "test_validate_registration_config_missing_fields",
          "TestRegistrationHelper.test_validate_registration_config_empty_config",
          "test_validate_registration_config_empty_config",
          "TestRegistrationHelper._create_mock_registration_config",
          "_create_mock_registration_config",
          "TestRegistrationHelper._create_comprehensive_mock_config",
          "_create_comprehensive_mock_config",
          "TestRegistrationHelper._create_mock_payload_config",
          "_create_mock_payload_config",
          "TestRegistrationHelper._create_mock_package_config",
          "_create_mock_package_config",
          "test_init_success",
          "test_can_handle_step_registration_config",
          "test_can_handle_step_registration_step_name",
          "test_can_handle_step_payload_config_excluded",
          "test_can_handle_step_non_registration_config",
          "test_extract_step_config_success",
          "test_extract_step_config_failure",
          "test_get_image_uri_sagemaker_not_available",
          "test_get_image_uri_missing_attributes",
          "test_get_image_uri_success",
          "test_get_image_uri_retrieve_failure",
          "test_create_execution_doc_config_basic",
          "test_create_execution_doc_config_with_entry_point",
          "test_create_execution_doc_config_with_all_fields",
          "test_create_execution_doc_config_with_related_configs",
          "test_create_execution_doc_config_with_related_configs_no_payload",
          "test_find_registration_step_patterns",
          "test_find_registration_step_patterns_no_region",
          "test_find_registration_step_patterns_empty",
          "test_validate_registration_config_success",
          "test_validate_registration_config_missing_fields",
          "test_validate_registration_config_empty_config",
          "_create_mock_registration_config",
          "_create_comprehensive_mock_config",
          "_create_mock_payload_config",
          "_create_mock_package_config",
          "BasicRegistrationConfig.__init__",
          "__init__",
          "PartialConfig.__init__",
          "__init__",
          "__init__",
          "__init__"
        ],
        "mods/exe_doc/test_cradle_helper.py": [
          "TestCradleDataLoadingHelper.test_init_success",
          "test_init_success",
          "TestCradleDataLoadingHelper.test_can_handle_step_cradle_config",
          "test_can_handle_step_cradle_config",
          "TestCradleDataLoadingHelper.test_can_handle_step_non_cradle_config",
          "test_can_handle_step_non_cradle_config",
          "TestCradleDataLoadingHelper.test_can_handle_step_partial_match",
          "test_can_handle_step_partial_match",
          "TestCradleDataLoadingHelper.test_extract_step_config_success",
          "test_extract_step_config_success",
          "TestCradleDataLoadingHelper.test_extract_step_config_build_request_failure",
          "test_extract_step_config_build_request_failure",
          "TestCradleDataLoadingHelper.test_extract_step_config_get_request_dict_failure",
          "test_extract_step_config_get_request_dict_failure",
          "TestCradleDataLoadingHelper.test_build_request_models_not_available",
          "test_build_request_models_not_available",
          "TestCradleDataLoadingHelper.test_build_request_missing_required_attrs",
          "test_build_request_missing_required_attrs",
          "TestCradleDataLoadingHelper.test_build_request_success_mds",
          "test_build_request_success_mds",
          "TestCradleDataLoadingHelper.test_build_request_success_edx",
          "test_build_request_success_edx",
          "TestCradleDataLoadingHelper.test_build_request_success_andes",
          "test_build_request_success_andes",
          "TestCradleDataLoadingHelper.test_get_request_dict_coral_utils_not_available",
          "test_get_request_dict_coral_utils_not_available",
          "TestCradleDataLoadingHelper.test_get_request_dict_success",
          "test_get_request_dict_success",
          "TestCradleDataLoadingHelper.test_get_request_dict_conversion_failure",
          "test_get_request_dict_conversion_failure",
          "TestCradleDataLoadingHelper._create_mock_config_mds",
          "_create_mock_config_mds",
          "TestCradleDataLoadingHelper._create_mock_config_edx",
          "_create_mock_config_edx",
          "TestCradleDataLoadingHelper._create_mock_config_andes",
          "_create_mock_config_andes",
          "TestCradleDataLoadingHelper._create_mock_transform_spec",
          "_create_mock_transform_spec",
          "TestCradleDataLoadingHelper._create_mock_output_spec",
          "_create_mock_output_spec",
          "TestCradleDataLoadingHelper._create_mock_job_spec",
          "_create_mock_job_spec",
          "test_init_success",
          "test_can_handle_step_cradle_config",
          "test_can_handle_step_non_cradle_config",
          "test_can_handle_step_partial_match",
          "test_extract_step_config_success",
          "test_extract_step_config_build_request_failure",
          "test_extract_step_config_get_request_dict_failure",
          "test_build_request_models_not_available",
          "test_build_request_missing_required_attrs",
          "test_build_request_success_mds",
          "test_build_request_success_edx",
          "test_build_request_success_andes",
          "test_get_request_dict_coral_utils_not_available",
          "test_get_request_dict_success",
          "test_get_request_dict_conversion_failure",
          "_create_mock_config_mds",
          "_create_mock_config_edx",
          "_create_mock_config_andes",
          "_create_mock_transform_spec",
          "_create_mock_output_spec",
          "_create_mock_job_spec"
        ],
        "mods/exe_doc/test_generator_integration.py": [
          "TestExecutionDocumentGeneratorIntegration.project_root",
          "project_root",
          "TestExecutionDocumentGeneratorIntegration.config_path",
          "config_path",
          "TestExecutionDocumentGeneratorIntegration.sample_exe_doc_path",
          "sample_exe_doc_path",
          "TestExecutionDocumentGeneratorIntegration.expected_result_path",
          "expected_result_path",
          "TestExecutionDocumentGeneratorIntegration.sample_execution_document",
          "sample_execution_document",
          "TestExecutionDocumentGeneratorIntegration.expected_result",
          "expected_result",
          "TestExecutionDocumentGeneratorIntegration.xgboost_dag",
          "xgboost_dag",
          "TestExecutionDocumentGeneratorIntegration.test_fill_execution_document_integration",
          "test_fill_execution_document_integration",
          "TestExecutionDocumentGeneratorIntegration.test_fill_execution_document_cradle_data_mapping",
          "test_fill_execution_document_cradle_data_mapping",
          "TestExecutionDocumentGeneratorIntegration.test_fill_execution_document_registration_mapping",
          "test_fill_execution_document_registration_mapping",
          "TestExecutionDocumentGeneratorIntegration.test_dag_node_mapping",
          "test_dag_node_mapping",
          "TestExecutionDocumentGeneratorIntegration.test_error_handling_invalid_config_path",
          "test_error_handling_invalid_config_path",
          "TestExecutionDocumentGeneratorIntegration.test_error_handling_missing_helpers",
          "test_error_handling_missing_helpers",
          "TestExecutionDocumentGeneratorIntegration.test_step_type_assignment",
          "test_step_type_assignment",
          "TestExecutionDocumentGeneratorIntegration.test_save_actual_output",
          "test_save_actual_output",
          "TestExecutionDocumentGeneratorIntegration.test_debug_load_configs",
          "test_debug_load_configs",
          "project_root",
          "config_path",
          "sample_exe_doc_path",
          "expected_result_path",
          "sample_execution_document",
          "expected_result",
          "xgboost_dag",
          "test_fill_execution_document_integration",
          "test_fill_execution_document_cradle_data_mapping",
          "test_fill_execution_document_registration_mapping",
          "test_dag_node_mapping",
          "test_error_handling_invalid_config_path",
          "test_error_handling_missing_helpers",
          "test_step_type_assignment",
          "test_save_actual_output",
          "test_debug_load_configs"
        ]
      },
      "likely_tested_functions": [
        "CradleDataLoadingHelper.__init__",
        "__init__",
        "CradleDataLoadingHelper.can_handle_step",
        "can_handle_step",
        "CradleDataLoadingHelper.get_execution_step_name",
        "CradleDataLoadingHelper.extract_step_config",
        "extract_step_config",
        "CradleDataLoadingHelper._build_request",
        "_build_request",
        "CradleDataLoadingHelper._get_request_dict",
        "_get_request_dict",
        "__init__",
        "can_handle_step",
        "extract_step_config",
        "_build_request",
        "_get_request_dict",
        "RegistrationHelper.__init__",
        "__init__",
        "RegistrationHelper.can_handle_step",
        "can_handle_step",
        "RegistrationHelper.get_execution_step_name",
        "RegistrationHelper.extract_step_config",
        "extract_step_config",
        "RegistrationHelper._get_image_uri",
        "_get_image_uri",
        "RegistrationHelper._create_execution_doc_config",
        "_create_execution_doc_config",
        "RegistrationHelper.create_execution_doc_config_with_related_configs",
        "create_execution_doc_config_with_related_configs",
        "RegistrationHelper.find_registration_step_patterns",
        "find_registration_step_patterns",
        "RegistrationHelper.validate_registration_config",
        "validate_registration_config",
        "__init__",
        "can_handle_step",
        "extract_step_config",
        "_get_image_uri",
        "_create_execution_doc_config",
        "create_execution_doc_config_with_related_configs",
        "find_registration_step_patterns",
        "validate_registration_config",
        "ExecutionDocumentGenerator.__init__",
        "__init__",
        "ExecutionDocumentGenerator.fill_execution_document",
        "fill_execution_document",
        "ExecutionDocumentGenerator._load_configs",
        "_load_configs",
        "ExecutionDocumentGenerator._get_config_for_step",
        "_get_config_for_step",
        "ExecutionDocumentGenerator._names_match",
        "_names_match",
        "ExecutionDocumentGenerator._identify_relevant_steps",
        "_identify_relevant_steps",
        "ExecutionDocumentGenerator._is_execution_doc_relevant",
        "_is_execution_doc_relevant",
        "ExecutionDocumentGenerator._filter_steps_by_helper",
        "_filter_steps_by_helper",
        "ExecutionDocumentGenerator._fill_cradle_configurations",
        "ExecutionDocumentGenerator._fill_registration_configurations",
        "ExecutionDocumentGenerator._find_registration_step_nodes",
        "__init__",
        "fill_execution_document",
        "_load_configs",
        "_get_config_for_step",
        "_names_match",
        "_identify_relevant_steps",
        "_is_execution_doc_relevant",
        "_filter_steps_by_helper",
        "ExecutionDocumentHelper.can_handle_step",
        "can_handle_step",
        "ExecutionDocumentHelper.extract_step_config",
        "extract_step_config",
        "can_handle_step",
        "extract_step_config"
      ],
      "likely_untested_functions": [
        "get_execution_step_name",
        "get_execution_step_name",
        "get_execution_step_name",
        "get_execution_step_name",
        "_fill_cradle_configurations",
        "_fill_registration_configurations",
        "_find_registration_step_nodes",
        "_fill_cradle_configurations",
        "_fill_registration_configurations",
        "_find_registration_step_nodes",
        "determine_step_type",
        "_determine_step_type_fallback",
        "validate_execution_document_structure",
        "create_execution_document_template",
        "merge_execution_documents"
      ]
    },
    "pipeline_catalog": {
      "component": "pipeline_catalog",
      "description": "Pipeline catalog and registry management",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "pipeline_catalog/mods_api.py",
        "pipeline_catalog/utils.py",
        "pipeline_catalog/indexer.py",
        "pipeline_catalog/core/registry_validator.py",
        "pipeline_catalog/core/recommendation_engine.py",
        "pipeline_catalog/core/tag_discovery.py",
        "pipeline_catalog/core/catalog_registry.py",
        "pipeline_catalog/core/base_pipeline.py",
        "pipeline_catalog/core/connection_traverser.py",
        "pipeline_catalog/mods_pipelines/xgb_mods_e2e_comprehensive_new.py",
        "pipeline_catalog/pipelines/xgb_e2e_comprehensive.py",
        "pipeline_catalog/pipelines/xgb_training_evaluation.py",
        "pipeline_catalog/pipelines/xgb_training_simple.py",
        "pipeline_catalog/pipelines/xgb_training_calibrated.py",
        "pipeline_catalog/pipelines/pytorch_training_basic.py",
        "pipeline_catalog/pipelines/dummy_e2e_basic.py",
        "pipeline_catalog/pipelines/pytorch_e2e_standard.py",
        "pipeline_catalog/shared_dags/enhanced_metadata.py",
        "pipeline_catalog/shared_dags/registry_sync.py",
        "pipeline_catalog/pipeline_exe/generator.py",
        "pipeline_catalog/pipeline_exe/utils.py",
        "pipeline_catalog/shared_dags/dummy/e2e_basic_dag.py",
        "pipeline_catalog/shared_dags/xgboost/complete_e2e_dag.py",
        "pipeline_catalog/shared_dags/xgboost/simple_dag.py",
        "pipeline_catalog/shared_dags/xgboost/training_with_calibration_dag.py",
        "pipeline_catalog/shared_dags/xgboost/training_with_evaluation_dag.py",
        "pipeline_catalog/shared_dags/pytorch/standard_e2e_dag.py",
        "pipeline_catalog/shared_dags/pytorch/training_dag.py"
      ],
      "test_files": [
        "pipeline_catalog/test_indexer.py",
        "pipeline_catalog/test_pipeline_catalog_utils.py",
        "pipeline_catalog/core/test_connection_traverser.py",
        "pipeline_catalog/core/test_tag_discovery.py",
        "pipeline_catalog/core/test_registry_validator.py",
        "pipeline_catalog/core/test_recommendation_engine.py",
        "pipeline_catalog/core/test_catalog_registry.py",
        "pipeline_catalog/core/test_base_pipeline.py"
      ],
      "total_source_functions": 632,
      "tested_functions": 413,
      "untested_functions": 219,
      "coverage_percentage": 65.34810126582279,
      "total_source_lines": 10408,
      "total_test_lines": 5078,
      "test_to_source_ratio": 1.4018987341772151,
      "source_functions_by_file": {
        "pipeline_catalog/mods_api.py": [
          "create_mods_pipeline",
          "create_mods_pipeline_from_config",
          "get_mods_pipeline_factory",
          "create_mods_xgboost_e2e_comprehensive",
          "create_mods_pytorch_e2e_standard",
          "create_mods_dummy_e2e_basic",
          "create_mods_pipeline_by_name",
          "MODSEnhancedPipeline.__init__",
          "__init__",
          "MODSEnhancedPipeline.get_mods_metadata",
          "get_mods_metadata",
          "factory",
          "MODSTemplate",
          "__init__",
          "get_mods_metadata",
          "decorator"
        ],
        "pipeline_catalog/utils.py": [
          "PipelineCatalogManager.__init__",
          "__init__",
          "PipelineCatalogManager.discover_pipelines",
          "discover_pipelines",
          "PipelineCatalogManager._discover_pipelines_with_catalog",
          "_discover_pipelines_with_catalog",
          "PipelineCatalogManager._discover_pipelines_legacy",
          "_discover_pipelines_legacy",
          "PipelineCatalogManager.get_pipeline_connections",
          "get_pipeline_connections",
          "PipelineCatalogManager.find_path",
          "find_path",
          "PipelineCatalogManager.get_recommendations",
          "get_recommendations",
          "PipelineCatalogManager.validate_registry",
          "validate_registry",
          "PipelineCatalogManager.sync_pipeline",
          "sync_pipeline",
          "PipelineCatalogManager.get_registry_stats",
          "get_registry_stats",
          "create_catalog_manager",
          "discover_by_framework",
          "discover_by_tags",
          "get_pipeline_alternatives",
          "__init__",
          "discover_pipelines",
          "_discover_pipelines_with_catalog",
          "_discover_pipelines_legacy",
          "get_pipeline_connections",
          "find_path",
          "get_recommendations",
          "validate_registry",
          "sync_pipeline",
          "get_registry_stats"
        ],
        "pipeline_catalog/indexer.py": [
          "CatalogIndexer.__init__",
          "__init__",
          "CatalogIndexer.generate_index",
          "generate_index",
          "CatalogIndexer._find_python_files",
          "_find_python_files",
          "CatalogIndexer._process_pipeline_file",
          "_process_pipeline_file",
          "CatalogIndexer._extract_id",
          "_extract_id",
          "CatalogIndexer._extract_name",
          "_extract_name",
          "CatalogIndexer._detect_framework_from_path",
          "_detect_framework_from_path",
          "CatalogIndexer._determine_complexity",
          "_determine_complexity",
          "CatalogIndexer._extract_features",
          "_extract_features",
          "CatalogIndexer._extract_description",
          "_extract_description",
          "CatalogIndexer._extract_tags",
          "_extract_tags",
          "CatalogIndexer.update_index",
          "update_index",
          "CatalogIndexer._merge_indices",
          "_merge_indices",
          "CatalogIndexer.validate_index",
          "validate_index",
          "CatalogIndexer.save_index",
          "save_index",
          "__init__",
          "generate_index",
          "_find_python_files",
          "_process_pipeline_file",
          "_extract_id",
          "_extract_name",
          "_detect_framework_from_path",
          "_determine_complexity",
          "_extract_features",
          "_extract_description",
          "_extract_tags",
          "update_index",
          "_merge_indices",
          "validate_index",
          "save_index"
        ],
        "pipeline_catalog/core/registry_validator.py": [
          "AtomicityViolation.__init__",
          "__init__",
          "ConnectionError.__init__",
          "__init__",
          "MetadataError.__init__",
          "__init__",
          "TagConsistencyError.__init__",
          "__init__",
          "IndependenceError.__init__",
          "__init__",
          "ValidationReport.summary",
          "summary",
          "RegistryValidator.__init__",
          "__init__",
          "RegistryValidator.validate_atomicity",
          "validate_atomicity",
          "RegistryValidator.validate_connections",
          "validate_connections",
          "RegistryValidator.validate_metadata_completeness",
          "validate_metadata_completeness",
          "RegistryValidator.validate_tag_consistency",
          "validate_tag_consistency",
          "RegistryValidator.validate_independence_claims",
          "validate_independence_claims",
          "RegistryValidator.generate_validation_report",
          "generate_validation_report",
          "RegistryValidator.validate_zettelkasten_principles",
          "validate_zettelkasten_principles",
          "RegistryValidator._are_similar_tags",
          "_are_similar_tags",
          "RegistryValidator._generate_principle_recommendations",
          "_generate_principle_recommendations",
          "RegistryValidator.clear_cache",
          "clear_cache",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "summary",
          "__init__",
          "validate_atomicity",
          "validate_connections",
          "validate_metadata_completeness",
          "validate_tag_consistency",
          "validate_independence_claims",
          "generate_validation_report",
          "validate_zettelkasten_principles",
          "_are_similar_tags",
          "_generate_principle_recommendations",
          "clear_cache"
        ],
        "pipeline_catalog/core/recommendation_engine.py": [
          "PipelineRecommendationEngine.__init__",
          "__init__",
          "PipelineRecommendationEngine.recommend_for_use_case",
          "recommend_for_use_case",
          "PipelineRecommendationEngine.recommend_next_steps",
          "recommend_next_steps",
          "PipelineRecommendationEngine.recommend_alternatives",
          "recommend_alternatives",
          "PipelineRecommendationEngine.recommend_compositions",
          "recommend_compositions",
          "PipelineRecommendationEngine.get_learning_path",
          "get_learning_path",
          "PipelineRecommendationEngine._meets_constraints",
          "_meets_constraints",
          "PipelineRecommendationEngine._is_logical_progression",
          "_is_logical_progression",
          "PipelineRecommendationEngine._is_simpler",
          "_is_simpler",
          "PipelineRecommendationEngine._recommend_sequential_compositions",
          "_recommend_sequential_compositions",
          "PipelineRecommendationEngine._recommend_parallel_compositions",
          "_recommend_parallel_compositions",
          "PipelineRecommendationEngine._recommend_conditional_compositions",
          "_recommend_conditional_compositions",
          "PipelineRecommendationEngine._select_best_learning_candidate",
          "_select_best_learning_candidate",
          "PipelineRecommendationEngine.clear_cache",
          "clear_cache",
          "__init__",
          "recommend_for_use_case",
          "recommend_next_steps",
          "recommend_alternatives",
          "recommend_compositions",
          "get_learning_path",
          "_meets_constraints",
          "_is_logical_progression",
          "_is_simpler",
          "_recommend_sequential_compositions",
          "_recommend_parallel_compositions",
          "_recommend_conditional_compositions",
          "_select_best_learning_candidate",
          "clear_cache",
          "get_task_priority"
        ],
        "pipeline_catalog/core/tag_discovery.py": [
          "TagBasedDiscovery.__init__",
          "__init__",
          "TagBasedDiscovery.find_by_tags",
          "find_by_tags",
          "TagBasedDiscovery.find_by_framework",
          "find_by_framework",
          "TagBasedDiscovery.find_by_complexity",
          "find_by_complexity",
          "TagBasedDiscovery.find_by_task",
          "find_by_task",
          "TagBasedDiscovery.find_by_domain",
          "find_by_domain",
          "TagBasedDiscovery.find_by_pattern",
          "find_by_pattern",
          "TagBasedDiscovery.find_by_multiple_criteria",
          "find_by_multiple_criteria",
          "TagBasedDiscovery.search_by_text",
          "search_by_text",
          "TagBasedDiscovery.get_tag_clusters",
          "get_tag_clusters",
          "TagBasedDiscovery.suggest_similar_pipelines",
          "suggest_similar_pipelines",
          "TagBasedDiscovery.get_tag_statistics",
          "get_tag_statistics",
          "TagBasedDiscovery.find_undertagged_pipelines",
          "find_undertagged_pipelines",
          "TagBasedDiscovery.suggest_tags_for_pipeline",
          "suggest_tags_for_pipeline",
          "TagBasedDiscovery._get_tag_index",
          "_get_tag_index",
          "TagBasedDiscovery._get_pipeline_tags",
          "_get_pipeline_tags",
          "TagBasedDiscovery.clear_cache",
          "clear_cache",
          "__init__",
          "find_by_tags",
          "find_by_framework",
          "find_by_complexity",
          "find_by_task",
          "find_by_domain",
          "find_by_pattern",
          "find_by_multiple_criteria",
          "search_by_text",
          "get_tag_clusters",
          "suggest_similar_pipelines",
          "get_tag_statistics",
          "find_undertagged_pipelines",
          "suggest_tags_for_pipeline",
          "_get_tag_index",
          "_get_pipeline_tags",
          "clear_cache"
        ],
        "pipeline_catalog/core/catalog_registry.py": [
          "CatalogRegistry.__init__",
          "__init__",
          "CatalogRegistry.load_registry",
          "load_registry",
          "CatalogRegistry.save_registry",
          "save_registry",
          "CatalogRegistry.get_pipeline_node",
          "get_pipeline_node",
          "CatalogRegistry.get_all_pipelines",
          "get_all_pipelines",
          "CatalogRegistry.add_or_update_enhanced_node",
          "add_or_update_enhanced_node",
          "CatalogRegistry.add_or_update_node",
          "add_or_update_node",
          "CatalogRegistry.add_pipeline_node",
          "add_pipeline_node",
          "CatalogRegistry.remove_pipeline_node",
          "remove_pipeline_node",
          "CatalogRegistry.update_pipeline_node",
          "update_pipeline_node",
          "CatalogRegistry.get_pipelines_by_framework",
          "get_pipelines_by_framework",
          "CatalogRegistry.get_pipelines_by_complexity",
          "get_pipelines_by_complexity",
          "CatalogRegistry.get_pipeline_connections",
          "get_pipeline_connections",
          "CatalogRegistry.add_connection",
          "add_connection",
          "CatalogRegistry.remove_connection",
          "remove_connection",
          "CatalogRegistry.validate_registry_integrity",
          "validate_registry_integrity",
          "CatalogRegistry.get_registry_statistics",
          "get_registry_statistics",
          "CatalogRegistry._update_registry_metadata",
          "_update_registry_metadata",
          "CatalogRegistry._remove_from_tag_index",
          "_remove_from_tag_index",
          "CatalogRegistry._remove_connections_to_pipeline",
          "_remove_connections_to_pipeline",
          "CatalogRegistry._update_tag_index_for_pipeline",
          "_update_tag_index_for_pipeline",
          "CatalogRegistry._convert_zettelkasten_to_node_data",
          "_convert_zettelkasten_to_node_data",
          "CatalogRegistry.clear_cache",
          "clear_cache",
          "__init__",
          "load_registry",
          "save_registry",
          "get_pipeline_node",
          "get_all_pipelines",
          "add_or_update_enhanced_node",
          "add_or_update_node",
          "add_pipeline_node",
          "remove_pipeline_node",
          "update_pipeline_node",
          "get_pipelines_by_framework",
          "get_pipelines_by_complexity",
          "get_pipeline_connections",
          "add_connection",
          "remove_connection",
          "validate_registry_integrity",
          "get_registry_statistics",
          "_update_registry_metadata",
          "_remove_from_tag_index",
          "_remove_connections_to_pipeline",
          "_update_tag_index_for_pipeline",
          "_convert_zettelkasten_to_node_data",
          "clear_cache"
        ],
        "pipeline_catalog/core/base_pipeline.py": [
          "BasePipeline.__init__",
          "__init__",
          "BasePipeline.create_dag",
          "create_dag",
          "BasePipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "BasePipeline._initialize_step_catalog",
          "_initialize_step_catalog",
          "BasePipeline._initialize_compiler",
          "_initialize_compiler",
          "BasePipeline.generate_pipeline",
          "generate_pipeline",
          "BasePipeline.validate_dag_compatibility",
          "validate_dag_compatibility",
          "BasePipeline.preview_resolution",
          "preview_resolution",
          "BasePipeline.get_last_template",
          "get_last_template",
          "BasePipeline.sync_to_registry",
          "sync_to_registry",
          "BasePipeline.create_pipeline",
          "create_pipeline",
          "BasePipeline.save_execution_document",
          "save_execution_document",
          "BasePipeline.get_pipeline_config",
          "get_pipeline_config",
          "BasePipeline.update_pipeline_config",
          "update_pipeline_config",
          "BasePipeline.get_dag_info",
          "get_dag_info",
          "BasePipeline.get_pipeline_parameters",
          "get_pipeline_parameters",
          "BasePipeline.set_pipeline_parameters",
          "set_pipeline_parameters",
          "BasePipeline.create_pipeline_parameters",
          "create_pipeline_parameters",
          "BasePipeline.get_step_catalog_info",
          "get_step_catalog_info",
          "BasePipeline.validate_dag_steps_with_catalog",
          "validate_dag_steps_with_catalog",
          "BasePipeline.get_step_recommendations",
          "get_step_recommendations",
          "BasePipeline.get_enhanced_pipeline_metadata",
          "get_enhanced_pipeline_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata",
          "_initialize_step_catalog",
          "_initialize_compiler",
          "generate_pipeline",
          "validate_dag_compatibility",
          "preview_resolution",
          "get_last_template",
          "sync_to_registry",
          "create_pipeline",
          "save_execution_document",
          "get_pipeline_config",
          "update_pipeline_config",
          "get_dag_info",
          "get_pipeline_parameters",
          "set_pipeline_parameters",
          "create_pipeline_parameters",
          "get_step_catalog_info",
          "validate_dag_steps_with_catalog",
          "get_step_recommendations",
          "get_enhanced_pipeline_metadata"
        ],
        "pipeline_catalog/core/connection_traverser.py": [
          "ConnectionTraverser.__init__",
          "__init__",
          "ConnectionTraverser.get_alternatives",
          "get_alternatives",
          "ConnectionTraverser.get_related",
          "get_related",
          "ConnectionTraverser.get_compositions",
          "get_compositions",
          "ConnectionTraverser.get_all_connections",
          "get_all_connections",
          "ConnectionTraverser._get_connections_by_type",
          "_get_connections_by_type",
          "ConnectionTraverser.traverse_connection_path",
          "traverse_connection_path",
          "ConnectionTraverser.find_shortest_path",
          "find_shortest_path",
          "ConnectionTraverser.get_connection_subgraph",
          "get_connection_subgraph",
          "ConnectionTraverser.find_connection_clusters",
          "find_connection_clusters",
          "ConnectionTraverser.get_bidirectional_connections",
          "get_bidirectional_connections",
          "ConnectionTraverser.analyze_connection_patterns",
          "analyze_connection_patterns",
          "ConnectionTraverser.suggest_missing_connections",
          "suggest_missing_connections",
          "ConnectionTraverser.clear_cache",
          "clear_cache",
          "__init__",
          "get_alternatives",
          "get_related",
          "get_compositions",
          "get_all_connections",
          "_get_connections_by_type",
          "traverse_connection_path",
          "find_shortest_path",
          "get_connection_subgraph",
          "find_connection_clusters",
          "get_bidirectional_connections",
          "analyze_connection_patterns",
          "suggest_missing_connections",
          "clear_cache",
          "dfs",
          "collect_subgraph",
          "dfs_cluster"
        ],
        "pipeline_catalog/mods_pipelines/xgb_mods_e2e_comprehensive_new.py": [
          "create_xgboost_e2e_comprehensive_mods_pipeline"
        ],
        "pipeline_catalog/pipelines/xgb_e2e_comprehensive.py": [
          "XGBoostE2EComprehensivePipeline.__init__",
          "__init__",
          "XGBoostE2EComprehensivePipeline.create_dag",
          "create_dag",
          "XGBoostE2EComprehensivePipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/xgb_training_evaluation.py": [
          "XGBoostTrainingEvaluationPipeline.__init__",
          "__init__",
          "XGBoostTrainingEvaluationPipeline.create_dag",
          "create_dag",
          "XGBoostTrainingEvaluationPipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/xgb_training_simple.py": [
          "XGBoostTrainingSimplePipeline.__init__",
          "__init__",
          "XGBoostTrainingSimplePipeline.create_dag",
          "create_dag",
          "XGBoostTrainingSimplePipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/xgb_training_calibrated.py": [
          "XGBoostTrainingCalibratedPipeline.__init__",
          "__init__",
          "XGBoostTrainingCalibratedPipeline.create_dag",
          "create_dag",
          "XGBoostTrainingCalibratedPipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/pytorch_training_basic.py": [
          "PyTorchTrainingBasicPipeline.__init__",
          "__init__",
          "PyTorchTrainingBasicPipeline.create_dag",
          "create_dag",
          "PyTorchTrainingBasicPipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/dummy_e2e_basic.py": [
          "DummyE2EBasicPipeline.__init__",
          "__init__",
          "DummyE2EBasicPipeline.create_dag",
          "create_dag",
          "DummyE2EBasicPipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/pipelines/pytorch_e2e_standard.py": [
          "PyTorchE2EStandardPipeline.__init__",
          "__init__",
          "PyTorchE2EStandardPipeline.create_dag",
          "create_dag",
          "PyTorchE2EStandardPipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "__init__",
          "create_dag",
          "get_enhanced_dag_metadata"
        ],
        "pipeline_catalog/shared_dags/enhanced_metadata.py": [
          "ZettelkastenMetadata.validate_atomic_id",
          "validate_atomic_id",
          "ZettelkastenMetadata.validate_single_responsibility",
          "validate_single_responsibility",
          "ZettelkastenMetadata.set_default_pattern_tags",
          "set_default_pattern_tags",
          "ZettelkastenMetadata.add_connection",
          "add_connection",
          "ZettelkastenMetadata.get_all_tags",
          "get_all_tags",
          "ZettelkastenMetadata.get_flat_tags",
          "get_flat_tags",
          "EnhancedDAGMetadata.validate_complexity",
          "validate_complexity",
          "EnhancedDAGMetadata.validate_framework",
          "validate_framework",
          "EnhancedDAGMetadata.model_post_init",
          "model_post_init",
          "EnhancedDAGMetadata._create_default_zettelkasten_metadata",
          "_create_default_zettelkasten_metadata",
          "EnhancedDAGMetadata._generate_atomic_id",
          "_generate_atomic_id",
          "EnhancedDAGMetadata._validate",
          "_validate",
          "EnhancedDAGMetadata.to_registry_node",
          "to_registry_node",
          "EnhancedDAGMetadata._generate_title",
          "_generate_title",
          "EnhancedDAGMetadata._extract_dependencies",
          "_extract_dependencies",
          "EnhancedDAGMetadata._build_connections",
          "_build_connections",
          "EnhancedDAGMetadata.add_connection",
          "add_connection",
          "EnhancedDAGMetadata.update_tags",
          "update_tags",
          "EnhancedDAGMetadata.to_dict",
          "to_dict",
          "EnhancedDAGMetadata.to_legacy_dag_metadata",
          "to_legacy_dag_metadata",
          "DAGMetadataAdapter.from_legacy_dag_metadata",
          "from_legacy_dag_metadata",
          "DAGMetadataAdapter.to_legacy_dag_metadata",
          "to_legacy_dag_metadata",
          "validate_enhanced_dag_metadata",
          "validate_atomic_id",
          "validate_single_responsibility",
          "set_default_pattern_tags",
          "add_connection",
          "get_all_tags",
          "get_flat_tags",
          "validate_complexity",
          "validate_framework",
          "model_post_init",
          "_create_default_zettelkasten_metadata",
          "_generate_atomic_id",
          "_validate",
          "to_registry_node",
          "_generate_title",
          "_extract_dependencies",
          "_build_connections",
          "add_connection",
          "update_tags",
          "to_dict",
          "to_legacy_dag_metadata",
          "from_legacy_dag_metadata",
          "to_legacy_dag_metadata"
        ],
        "pipeline_catalog/shared_dags/registry_sync.py": [
          "DAGMetadataRegistrySync.__init__",
          "__init__",
          "DAGMetadataRegistrySync._ensure_registry_exists",
          "_ensure_registry_exists",
          "DAGMetadataRegistrySync._create_empty_registry",
          "_create_empty_registry",
          "DAGMetadataRegistrySync.load_registry",
          "load_registry",
          "DAGMetadataRegistrySync._save_registry",
          "_save_registry",
          "DAGMetadataRegistrySync._validate_registry_structure",
          "_validate_registry_structure",
          "DAGMetadataRegistrySync._validate_node_structure",
          "_validate_node_structure",
          "DAGMetadataRegistrySync.sync_metadata_to_registry",
          "sync_metadata_to_registry",
          "DAGMetadataRegistrySync.sync_registry_to_metadata",
          "sync_registry_to_metadata",
          "DAGMetadataRegistrySync._extract_zettelkasten_metadata_from_node",
          "_extract_zettelkasten_metadata_from_node",
          "DAGMetadataRegistrySync.validate_consistency",
          "validate_consistency",
          "DAGMetadataRegistrySync._update_registry_metadata",
          "_update_registry_metadata",
          "DAGMetadataRegistrySync._update_tag_index",
          "_update_tag_index",
          "DAGMetadataRegistrySync.remove_pipeline_from_registry",
          "remove_pipeline_from_registry",
          "DAGMetadataRegistrySync._remove_from_tag_index",
          "_remove_from_tag_index",
          "DAGMetadataRegistrySync.get_registry_statistics",
          "get_registry_statistics",
          "create_empty_registry",
          "validate_registry_file",
          "__init__",
          "_ensure_registry_exists",
          "_create_empty_registry",
          "load_registry",
          "_save_registry",
          "_validate_registry_structure",
          "_validate_node_structure",
          "sync_metadata_to_registry",
          "sync_registry_to_metadata",
          "_extract_zettelkasten_metadata_from_node",
          "validate_consistency",
          "_update_registry_metadata",
          "_update_tag_index",
          "remove_pipeline_from_registry",
          "_remove_from_tag_index",
          "get_registry_statistics"
        ],
        "pipeline_catalog/pipeline_exe/generator.py": [
          "generate_execution_document_for_pipeline"
        ],
        "pipeline_catalog/pipeline_exe/utils.py": [
          "_get_catalog_registry",
          "get_config_path_for_pipeline",
          "load_shared_dag_for_pipeline",
          "_snake_to_pascal_case",
          "_load_dag_from_shared_dags",
          "create_execution_doc_template_for_pipeline",
          "get_pipeline_metadata",
          "list_available_pipelines",
          "validate_pipeline_setup"
        ],
        "pipeline_catalog/shared_dags/dummy/e2e_basic_dag.py": [
          "create_dummy_e2e_basic_dag",
          "get_dag_metadata",
          "validate_dag_structure"
        ],
        "pipeline_catalog/shared_dags/xgboost/complete_e2e_dag.py": [
          "create_xgboost_complete_e2e_dag",
          "get_dag_metadata",
          "validate_dag_structure"
        ],
        "pipeline_catalog/shared_dags/xgboost/simple_dag.py": [
          "create_xgboost_simple_dag",
          "get_dag_metadata",
          "validate_dag"
        ],
        "pipeline_catalog/shared_dags/xgboost/training_with_calibration_dag.py": [
          "create_xgboost_training_with_calibration_dag",
          "get_dag_metadata",
          "validate_dag_structure"
        ],
        "pipeline_catalog/shared_dags/xgboost/training_with_evaluation_dag.py": [
          "create_xgboost_training_with_evaluation_dag",
          "get_dag_metadata",
          "validate_dag_structure"
        ],
        "pipeline_catalog/shared_dags/pytorch/standard_e2e_dag.py": [
          "create_pytorch_standard_e2e_dag",
          "get_dag_metadata",
          "validate_dag_structure"
        ],
        "pipeline_catalog/shared_dags/pytorch/training_dag.py": [
          "create_pytorch_training_dag",
          "get_dag_metadata",
          "validate_dag"
        ]
      },
      "test_functions_by_file": {
        "pipeline_catalog/test_indexer.py": [
          "TestCatalogIndexer.temp_catalog_root",
          "temp_catalog_root",
          "TestCatalogIndexer.sample_pipeline_content",
          "sample_pipeline_content",
          "TestCatalogIndexer.indexer",
          "indexer",
          "TestCatalogIndexer.test_init",
          "test_init",
          "TestCatalogIndexer.test_init_with_step_catalog_success",
          "test_init_with_step_catalog_success",
          "TestCatalogIndexer.test_find_python_files",
          "test_find_python_files",
          "TestCatalogIndexer.test_find_python_files_nonexistent_directory",
          "test_find_python_files_nonexistent_directory",
          "TestCatalogIndexer.test_extract_id_simple_file",
          "test_extract_id_simple_file",
          "TestCatalogIndexer.test_extract_id_nested_path",
          "test_extract_id_nested_path",
          "TestCatalogIndexer.test_extract_id_pipelines_directory",
          "test_extract_id_pipelines_directory",
          "TestCatalogIndexer.test_extract_name_from_docstring",
          "test_extract_name_from_docstring",
          "TestCatalogIndexer.test_extract_name_from_filename",
          "test_extract_name_from_filename",
          "TestCatalogIndexer.test_extract_name_fallback",
          "test_extract_name_fallback",
          "TestCatalogIndexer.test_detect_framework_from_path",
          "test_detect_framework_from_path",
          "TestCatalogIndexer.test_determine_complexity",
          "test_determine_complexity",
          "TestCatalogIndexer.test_extract_features",
          "test_extract_features",
          "TestCatalogIndexer.test_extract_features_empty_docstring",
          "test_extract_features_empty_docstring",
          "TestCatalogIndexer.test_extract_description",
          "test_extract_description",
          "TestCatalogIndexer.test_extract_description_no_paragraph",
          "test_extract_description_no_paragraph",
          "TestCatalogIndexer.test_extract_description_empty",
          "test_extract_description_empty",
          "TestCatalogIndexer.test_extract_tags",
          "test_extract_tags",
          "TestCatalogIndexer.test_extract_tags_deduplication",
          "test_extract_tags_deduplication",
          "TestCatalogIndexer.test_process_pipeline_file",
          "test_process_pipeline_file",
          "TestCatalogIndexer.test_process_pipeline_file_import_error",
          "test_process_pipeline_file_import_error",
          "TestCatalogIndexer.test_generate_index",
          "test_generate_index",
          "TestCatalogIndexer.test_generate_index_with_errors",
          "test_generate_index_with_errors",
          "TestCatalogIndexer.test_merge_indices",
          "test_merge_indices",
          "TestCatalogIndexer.test_validate_index_valid",
          "test_validate_index_valid",
          "TestCatalogIndexer.test_validate_index_missing_pipelines_key",
          "test_validate_index_missing_pipelines_key",
          "TestCatalogIndexer.test_validate_index_missing_required_fields",
          "test_validate_index_missing_required_fields",
          "TestCatalogIndexer.test_validate_index_duplicate_ids",
          "test_validate_index_duplicate_ids",
          "TestCatalogIndexer.test_save_index",
          "test_save_index",
          "TestCatalogIndexer.test_save_index_creates_directory",
          "test_save_index_creates_directory",
          "TestCatalogIndexer.test_save_index_error_handling",
          "test_save_index_error_handling",
          "TestCatalogIndexer.test_update_index_new_file",
          "test_update_index_new_file",
          "TestCatalogIndexer.test_update_index_existing_file",
          "test_update_index_existing_file",
          "TestCatalogIndexer.test_update_index_corrupted_existing_file",
          "test_update_index_corrupted_existing_file",
          "TestCatalogIndexer.test_integration_full_workflow",
          "test_integration_full_workflow",
          "temp_catalog_root",
          "sample_pipeline_content",
          "indexer",
          "test_init",
          "test_init_with_step_catalog_success",
          "test_find_python_files",
          "test_find_python_files_nonexistent_directory",
          "test_extract_id_simple_file",
          "test_extract_id_nested_path",
          "test_extract_id_pipelines_directory",
          "test_extract_name_from_docstring",
          "test_extract_name_from_filename",
          "test_extract_name_fallback",
          "test_detect_framework_from_path",
          "test_determine_complexity",
          "test_extract_features",
          "test_extract_features_empty_docstring",
          "test_extract_description",
          "test_extract_description_no_paragraph",
          "test_extract_description_empty",
          "test_extract_tags",
          "test_extract_tags_deduplication",
          "test_process_pipeline_file",
          "test_process_pipeline_file_import_error",
          "test_generate_index",
          "test_generate_index_with_errors",
          "test_merge_indices",
          "test_validate_index_valid",
          "test_validate_index_missing_pipelines_key",
          "test_validate_index_missing_required_fields",
          "test_validate_index_duplicate_ids",
          "test_save_index",
          "test_save_index_creates_directory",
          "test_save_index_error_handling",
          "test_update_index_new_file",
          "test_update_index_existing_file",
          "test_update_index_corrupted_existing_file",
          "test_integration_full_workflow"
        ],
        "pipeline_catalog/test_pipeline_catalog_utils.py": [
          "TestPipelineCatalogManager.temp_registry_file",
          "temp_registry_file",
          "TestPipelineCatalogManager.manager",
          "manager",
          "TestPipelineCatalogManager.test_init_with_registry_path",
          "test_init_with_registry_path",
          "TestPipelineCatalogManager.test_init_with_default_path",
          "test_init_with_default_path",
          "TestPipelineCatalogManager.test_discover_pipelines_by_framework",
          "test_discover_pipelines_by_framework",
          "TestPipelineCatalogManager.test_discover_pipelines_by_complexity",
          "test_discover_pipelines_by_complexity",
          "TestPipelineCatalogManager.test_discover_pipelines_by_tags",
          "test_discover_pipelines_by_tags",
          "TestPipelineCatalogManager.test_discover_pipelines_by_use_case",
          "test_discover_pipelines_by_use_case",
          "TestPipelineCatalogManager.test_discover_pipelines_no_criteria",
          "test_discover_pipelines_no_criteria",
          "TestPipelineCatalogManager.test_discover_pipelines_with_step_catalog_fallback",
          "test_discover_pipelines_with_step_catalog_fallback",
          "TestPipelineCatalogManager.test_discover_pipelines_catalog_integration",
          "test_discover_pipelines_catalog_integration",
          "TestPipelineCatalogManager.test_get_pipeline_connections",
          "test_get_pipeline_connections",
          "TestPipelineCatalogManager.test_find_path",
          "test_find_path",
          "TestPipelineCatalogManager.test_get_recommendations",
          "test_get_recommendations",
          "TestPipelineCatalogManager.test_validate_registry",
          "test_validate_registry",
          "TestPipelineCatalogManager.test_sync_pipeline_success",
          "test_sync_pipeline_success",
          "TestPipelineCatalogManager.test_sync_pipeline_failure",
          "test_sync_pipeline_failure",
          "TestPipelineCatalogManager.test_get_registry_stats",
          "test_get_registry_stats",
          "TestConvenienceFunctions.temp_registry_file",
          "temp_registry_file",
          "TestConvenienceFunctions.test_create_catalog_manager",
          "test_create_catalog_manager",
          "TestConvenienceFunctions.test_discover_by_framework",
          "test_discover_by_framework",
          "TestConvenienceFunctions.test_discover_by_tags",
          "test_discover_by_tags",
          "TestConvenienceFunctions.test_get_pipeline_alternatives",
          "test_get_pipeline_alternatives",
          "TestConvenienceFunctions.test_get_pipeline_alternatives_nonexistent",
          "test_get_pipeline_alternatives_nonexistent",
          "TestIntegrationScenarios.comprehensive_registry",
          "comprehensive_registry",
          "TestIntegrationScenarios.test_ml_workflow_discovery",
          "test_ml_workflow_discovery",
          "TestIntegrationScenarios.test_framework_comparison_workflow",
          "test_framework_comparison_workflow",
          "TestIntegrationScenarios.test_complexity_progression_workflow",
          "test_complexity_progression_workflow",
          "TestIntegrationScenarios.test_registry_health_check",
          "test_registry_health_check",
          "TestIntegrationScenarios.test_pipeline_relationship_exploration",
          "test_pipeline_relationship_exploration",
          "TestIntegrationScenarios.test_error_resilience",
          "test_error_resilience",
          "TestIntegrationScenarios.test_step_catalog_integration_fallback",
          "test_step_catalog_integration_fallback",
          "temp_registry_file",
          "manager",
          "test_init_with_registry_path",
          "test_init_with_default_path",
          "test_discover_pipelines_by_framework",
          "test_discover_pipelines_by_complexity",
          "test_discover_pipelines_by_tags",
          "test_discover_pipelines_by_use_case",
          "test_discover_pipelines_no_criteria",
          "test_discover_pipelines_with_step_catalog_fallback",
          "test_discover_pipelines_catalog_integration",
          "test_get_pipeline_connections",
          "test_find_path",
          "test_get_recommendations",
          "test_validate_registry",
          "test_sync_pipeline_success",
          "test_sync_pipeline_failure",
          "test_get_registry_stats",
          "temp_registry_file",
          "test_create_catalog_manager",
          "test_discover_by_framework",
          "test_discover_by_tags",
          "test_get_pipeline_alternatives",
          "test_get_pipeline_alternatives_nonexistent",
          "comprehensive_registry",
          "test_ml_workflow_discovery",
          "test_framework_comparison_workflow",
          "test_complexity_progression_workflow",
          "test_registry_health_check",
          "test_pipeline_relationship_exploration",
          "test_error_resilience",
          "test_step_catalog_integration_fallback"
        ],
        "pipeline_catalog/core/test_connection_traverser.py": [
          "TestConnectionTraverser.mock_registry",
          "mock_registry",
          "TestConnectionTraverser.sample_connections",
          "sample_connections",
          "TestConnectionTraverser.sample_nodes",
          "sample_nodes",
          "TestConnectionTraverser.traverser",
          "traverser",
          "TestConnectionTraverser.test_init",
          "test_init",
          "TestConnectionTraverser.test_get_alternatives",
          "test_get_alternatives",
          "TestConnectionTraverser.test_get_related",
          "test_get_related",
          "TestConnectionTraverser.test_get_compositions",
          "test_get_compositions",
          "TestConnectionTraverser.test_get_all_connections",
          "test_get_all_connections",
          "TestConnectionTraverser.test_get_all_connections_error",
          "test_get_all_connections_error",
          "TestConnectionTraverser.test_get_connections_by_type_error",
          "test_get_connections_by_type_error",
          "TestConnectionTraverser.test_traverse_connection_path_simple",
          "test_traverse_connection_path_simple",
          "TestConnectionTraverser.test_traverse_connection_path_max_depth",
          "test_traverse_connection_path_max_depth",
          "TestConnectionTraverser.test_traverse_connection_path_error",
          "test_traverse_connection_path_error",
          "TestConnectionTraverser.test_find_shortest_path_direct",
          "test_find_shortest_path_direct",
          "TestConnectionTraverser.test_find_shortest_path_same_node",
          "test_find_shortest_path_same_node",
          "TestConnectionTraverser.test_find_shortest_path_multi_hop",
          "test_find_shortest_path_multi_hop",
          "TestConnectionTraverser.test_find_shortest_path_no_path",
          "test_find_shortest_path_no_path",
          "TestConnectionTraverser.test_find_shortest_path_error",
          "test_find_shortest_path_error",
          "TestConnectionTraverser.test_get_connection_subgraph",
          "test_get_connection_subgraph",
          "TestConnectionTraverser.test_get_connection_subgraph_error",
          "test_get_connection_subgraph_error",
          "TestConnectionTraverser.test_find_connection_clusters",
          "test_find_connection_clusters",
          "TestConnectionTraverser.test_find_connection_clusters_error",
          "test_find_connection_clusters_error",
          "TestConnectionTraverser.test_get_bidirectional_connections",
          "test_get_bidirectional_connections",
          "TestConnectionTraverser.test_get_bidirectional_connections_error",
          "test_get_bidirectional_connections_error",
          "TestConnectionTraverser.test_analyze_connection_patterns",
          "test_analyze_connection_patterns",
          "TestConnectionTraverser.test_analyze_connection_patterns_error",
          "test_analyze_connection_patterns_error",
          "TestConnectionTraverser.test_suggest_missing_connections",
          "test_suggest_missing_connections",
          "TestConnectionTraverser.test_suggest_missing_connections_no_node",
          "test_suggest_missing_connections_no_node",
          "TestConnectionTraverser.test_suggest_missing_connections_error",
          "test_suggest_missing_connections_error",
          "TestConnectionTraverser.test_clear_cache",
          "test_clear_cache",
          "TestConnectionTraverser.test_pipeline_connection_model",
          "test_pipeline_connection_model",
          "TestConnectionTraverser.test_pipeline_connection_model_optional_source",
          "test_pipeline_connection_model_optional_source",
          "TestConnectionTraverser.test_complex_traversal_scenario",
          "test_complex_traversal_scenario",
          "TestConnectionTraverser.test_empty_registry_scenarios",
          "test_empty_registry_scenarios",
          "mock_registry",
          "sample_connections",
          "sample_nodes",
          "traverser",
          "test_init",
          "test_get_alternatives",
          "test_get_related",
          "test_get_compositions",
          "test_get_all_connections",
          "test_get_all_connections_error",
          "test_get_connections_by_type_error",
          "test_traverse_connection_path_simple",
          "test_traverse_connection_path_max_depth",
          "test_traverse_connection_path_error",
          "test_find_shortest_path_direct",
          "test_find_shortest_path_same_node",
          "test_find_shortest_path_multi_hop",
          "test_find_shortest_path_no_path",
          "test_find_shortest_path_error",
          "test_get_connection_subgraph",
          "test_get_connection_subgraph_error",
          "test_find_connection_clusters",
          "test_find_connection_clusters_error",
          "test_get_bidirectional_connections",
          "test_get_bidirectional_connections_error",
          "test_analyze_connection_patterns",
          "test_analyze_connection_patterns_error",
          "test_suggest_missing_connections",
          "test_suggest_missing_connections_no_node",
          "test_suggest_missing_connections_error",
          "test_clear_cache",
          "test_pipeline_connection_model",
          "test_pipeline_connection_model_optional_source",
          "test_complex_traversal_scenario",
          "test_empty_registry_scenarios",
          "mock_get_connections"
        ],
        "pipeline_catalog/core/test_tag_discovery.py": [
          "TestTagBasedDiscovery.mock_registry",
          "mock_registry",
          "TestTagBasedDiscovery.sample_tag_index",
          "sample_tag_index",
          "TestTagBasedDiscovery.sample_nodes",
          "sample_nodes",
          "TestTagBasedDiscovery.discovery",
          "discovery",
          "TestTagBasedDiscovery.test_init",
          "test_init",
          "TestTagBasedDiscovery.test_find_by_tags_any_mode",
          "test_find_by_tags_any_mode",
          "TestTagBasedDiscovery.test_find_by_tags_all_mode",
          "test_find_by_tags_all_mode",
          "TestTagBasedDiscovery.test_find_by_tags_exact_mode",
          "test_find_by_tags_exact_mode",
          "TestTagBasedDiscovery.test_find_by_tags_empty_list",
          "test_find_by_tags_empty_list",
          "TestTagBasedDiscovery.test_find_by_tags_invalid_mode",
          "test_find_by_tags_invalid_mode",
          "TestTagBasedDiscovery.test_find_by_tags_error",
          "test_find_by_tags_error",
          "TestTagBasedDiscovery.test_find_by_framework",
          "test_find_by_framework",
          "TestTagBasedDiscovery.test_find_by_framework_not_found",
          "test_find_by_framework_not_found",
          "TestTagBasedDiscovery.test_find_by_complexity",
          "test_find_by_complexity",
          "TestTagBasedDiscovery.test_find_by_task",
          "test_find_by_task",
          "TestTagBasedDiscovery.test_find_by_domain",
          "test_find_by_domain",
          "TestTagBasedDiscovery.test_find_by_pattern",
          "test_find_by_pattern",
          "TestTagBasedDiscovery.test_find_by_multiple_criteria",
          "test_find_by_multiple_criteria",
          "TestTagBasedDiscovery.test_find_by_multiple_criteria_no_criteria",
          "test_find_by_multiple_criteria_no_criteria",
          "TestTagBasedDiscovery.test_search_by_text",
          "test_search_by_text",
          "TestTagBasedDiscovery.test_search_by_text_empty_query",
          "test_search_by_text_empty_query",
          "TestTagBasedDiscovery.test_search_by_text_specific_fields",
          "test_search_by_text_specific_fields",
          "TestTagBasedDiscovery.test_get_tag_clusters",
          "test_get_tag_clusters",
          "TestTagBasedDiscovery.test_suggest_similar_pipelines",
          "test_suggest_similar_pipelines",
          "TestTagBasedDiscovery.test_suggest_similar_pipelines_no_tags",
          "test_suggest_similar_pipelines_no_tags",
          "TestTagBasedDiscovery.test_get_tag_statistics",
          "test_get_tag_statistics",
          "TestTagBasedDiscovery.test_get_tag_statistics_error",
          "test_get_tag_statistics_error",
          "TestTagBasedDiscovery.test_find_undertagged_pipelines",
          "test_find_undertagged_pipelines",
          "TestTagBasedDiscovery.test_suggest_tags_for_pipeline",
          "test_suggest_tags_for_pipeline",
          "TestTagBasedDiscovery.test_suggest_tags_for_pipeline_no_similar",
          "test_suggest_tags_for_pipeline_no_similar",
          "TestTagBasedDiscovery.test_get_tag_index_cache_valid",
          "test_get_tag_index_cache_valid",
          "TestTagBasedDiscovery.test_get_tag_index_cache_invalid",
          "test_get_tag_index_cache_invalid",
          "TestTagBasedDiscovery.test_get_pipeline_tags",
          "test_get_pipeline_tags",
          "TestTagBasedDiscovery.test_get_pipeline_tags_no_node",
          "test_get_pipeline_tags_no_node",
          "TestTagBasedDiscovery.test_get_pipeline_tags_no_tags",
          "test_get_pipeline_tags_no_tags",
          "TestTagBasedDiscovery.test_clear_cache",
          "test_clear_cache",
          "TestTagBasedDiscovery.test_error_handling_in_methods",
          "test_error_handling_in_methods",
          "TestTagBasedDiscovery.test_complex_tag_scenarios",
          "test_complex_tag_scenarios",
          "TestTagBasedDiscovery.test_jaccard_similarity_calculation",
          "test_jaccard_similarity_calculation",
          "TestTagBasedDiscovery.test_text_search_scoring",
          "test_text_search_scoring",
          "mock_registry",
          "sample_tag_index",
          "sample_nodes",
          "discovery",
          "test_init",
          "test_find_by_tags_any_mode",
          "test_find_by_tags_all_mode",
          "test_find_by_tags_exact_mode",
          "test_find_by_tags_empty_list",
          "test_find_by_tags_invalid_mode",
          "test_find_by_tags_error",
          "test_find_by_framework",
          "test_find_by_framework_not_found",
          "test_find_by_complexity",
          "test_find_by_task",
          "test_find_by_domain",
          "test_find_by_pattern",
          "test_find_by_multiple_criteria",
          "test_find_by_multiple_criteria_no_criteria",
          "test_search_by_text",
          "test_search_by_text_empty_query",
          "test_search_by_text_specific_fields",
          "test_get_tag_clusters",
          "test_suggest_similar_pipelines",
          "test_suggest_similar_pipelines_no_tags",
          "test_get_tag_statistics",
          "test_get_tag_statistics_error",
          "test_find_undertagged_pipelines",
          "test_suggest_tags_for_pipeline",
          "test_suggest_tags_for_pipeline_no_similar",
          "test_get_tag_index_cache_valid",
          "test_get_tag_index_cache_invalid",
          "test_get_pipeline_tags",
          "test_get_pipeline_tags_no_node",
          "test_get_pipeline_tags_no_tags",
          "test_clear_cache",
          "test_error_handling_in_methods",
          "test_complex_tag_scenarios",
          "test_jaccard_similarity_calculation",
          "test_text_search_scoring",
          "mock_get_pipeline_tags",
          "mock_find_by_tags",
          "mock_get_pipeline_tags",
          "mock_get_pipeline_tags",
          "mock_get_pipeline_tags",
          "mock_get_pipeline_tags",
          "mock_get_pipeline_tags",
          "mock_get_pipeline_tags"
        ],
        "pipeline_catalog/core/test_registry_validator.py": [
          "TestRegistryValidator.mock_registry",
          "mock_registry",
          "TestRegistryValidator.sample_valid_node",
          "sample_valid_node",
          "TestRegistryValidator.validator",
          "validator",
          "TestRegistryValidator.test_init",
          "test_init",
          "TestRegistryValidator.test_validate_atomicity_valid",
          "test_validate_atomicity_valid",
          "TestRegistryValidator.test_validate_atomicity_missing_responsibility",
          "test_validate_atomicity_missing_responsibility",
          "TestRegistryValidator.test_validate_atomicity_verbose_responsibility",
          "test_validate_atomicity_verbose_responsibility",
          "TestRegistryValidator.test_validate_atomicity_missing_interfaces",
          "test_validate_atomicity_missing_interfaces",
          "TestRegistryValidator.test_validate_atomicity_independence_contradiction",
          "test_validate_atomicity_independence_contradiction",
          "TestRegistryValidator.test_validate_connections_missing_target",
          "test_validate_connections_missing_target",
          "TestRegistryValidator.test_validate_connections_missing_annotation",
          "test_validate_connections_missing_annotation",
          "TestRegistryValidator.test_validate_connections_self_reference",
          "test_validate_connections_self_reference",
          "TestRegistryValidator.test_validate_connections_invalid_type",
          "test_validate_connections_invalid_type",
          "TestRegistryValidator.test_validate_connections_orphaned_tag_reference",
          "test_validate_connections_orphaned_tag_reference",
          "TestRegistryValidator.test_validate_metadata_completeness_missing_fields",
          "test_validate_metadata_completeness_missing_fields",
          "TestRegistryValidator.test_validate_metadata_completeness_missing_atomic_properties",
          "test_validate_metadata_completeness_missing_atomic_properties",
          "TestRegistryValidator.test_validate_metadata_completeness_missing_tags",
          "test_validate_metadata_completeness_missing_tags",
          "TestRegistryValidator.test_validate_tag_consistency_framework_mismatch",
          "test_validate_tag_consistency_framework_mismatch",
          "TestRegistryValidator.test_validate_tag_consistency_complexity_mismatch",
          "test_validate_tag_consistency_complexity_mismatch",
          "TestRegistryValidator.test_validate_independence_claims_side_effects_contradiction",
          "test_validate_independence_claims_side_effects_contradiction",
          "TestRegistryValidator.test_validate_independence_claims_many_dependencies",
          "test_validate_independence_claims_many_dependencies",
          "TestRegistryValidator.test_validate_independence_claims_complex_inputs",
          "test_validate_independence_claims_complex_inputs",
          "TestRegistryValidator.test_generate_validation_report_valid_registry",
          "test_generate_validation_report_valid_registry",
          "TestRegistryValidator.test_generate_validation_report_with_errors",
          "test_generate_validation_report_with_errors",
          "TestRegistryValidator.test_validate_zettelkasten_principles",
          "test_validate_zettelkasten_principles",
          "TestRegistryValidator.test_validate_zettelkasten_principles_empty_registry",
          "test_validate_zettelkasten_principles_empty_registry",
          "TestRegistryValidator.test_are_similar_tags",
          "test_are_similar_tags",
          "TestRegistryValidator.test_generate_principle_recommendations",
          "test_generate_principle_recommendations",
          "TestRegistryValidator.test_clear_cache",
          "test_clear_cache",
          "TestRegistryValidator.test_validation_issue_models",
          "test_validation_issue_models",
          "TestRegistryValidator.test_validation_report_summary",
          "test_validation_report_summary",
          "TestRegistryValidator.test_error_handling_in_validation_methods",
          "test_error_handling_in_validation_methods",
          "mock_registry",
          "sample_valid_node",
          "validator",
          "test_init",
          "test_validate_atomicity_valid",
          "test_validate_atomicity_missing_responsibility",
          "test_validate_atomicity_verbose_responsibility",
          "test_validate_atomicity_missing_interfaces",
          "test_validate_atomicity_independence_contradiction",
          "test_validate_connections_missing_target",
          "test_validate_connections_missing_annotation",
          "test_validate_connections_self_reference",
          "test_validate_connections_invalid_type",
          "test_validate_connections_orphaned_tag_reference",
          "test_validate_metadata_completeness_missing_fields",
          "test_validate_metadata_completeness_missing_atomic_properties",
          "test_validate_metadata_completeness_missing_tags",
          "test_validate_tag_consistency_framework_mismatch",
          "test_validate_tag_consistency_complexity_mismatch",
          "test_validate_independence_claims_side_effects_contradiction",
          "test_validate_independence_claims_many_dependencies",
          "test_validate_independence_claims_complex_inputs",
          "test_generate_validation_report_valid_registry",
          "test_generate_validation_report_with_errors",
          "test_validate_zettelkasten_principles",
          "test_validate_zettelkasten_principles_empty_registry",
          "test_are_similar_tags",
          "test_generate_principle_recommendations",
          "test_clear_cache",
          "test_validation_issue_models",
          "test_validation_report_summary",
          "test_error_handling_in_validation_methods"
        ],
        "pipeline_catalog/core/test_recommendation_engine.py": [
          "TestPipelineRecommendationEngine.mock_registry",
          "mock_registry",
          "TestPipelineRecommendationEngine.mock_traverser",
          "mock_traverser",
          "TestPipelineRecommendationEngine.mock_discovery",
          "mock_discovery",
          "TestPipelineRecommendationEngine.sample_nodes",
          "sample_nodes",
          "TestPipelineRecommendationEngine.engine",
          "engine",
          "TestPipelineRecommendationEngine.test_init",
          "test_init",
          "TestPipelineRecommendationEngine.test_recommend_for_use_case",
          "test_recommend_for_use_case",
          "TestPipelineRecommendationEngine.test_recommend_for_use_case_with_constraints",
          "test_recommend_for_use_case_with_constraints",
          "TestPipelineRecommendationEngine.test_recommend_for_use_case_error",
          "test_recommend_for_use_case_error",
          "TestPipelineRecommendationEngine.test_recommend_next_steps",
          "test_recommend_next_steps",
          "TestPipelineRecommendationEngine.test_recommend_next_steps_complexity_progression",
          "test_recommend_next_steps_complexity_progression",
          "TestPipelineRecommendationEngine.test_recommend_alternatives",
          "test_recommend_alternatives",
          "TestPipelineRecommendationEngine.test_recommend_alternatives_different_frameworks",
          "test_recommend_alternatives_different_frameworks",
          "TestPipelineRecommendationEngine.test_recommend_alternatives_with_reason",
          "test_recommend_alternatives_with_reason",
          "TestPipelineRecommendationEngine.test_recommend_compositions",
          "test_recommend_compositions",
          "TestPipelineRecommendationEngine.test_recommend_compositions_insufficient_pipelines",
          "test_recommend_compositions_insufficient_pipelines",
          "TestPipelineRecommendationEngine.test_get_learning_path",
          "test_get_learning_path",
          "TestPipelineRecommendationEngine.test_get_learning_path_specific_framework",
          "test_get_learning_path_specific_framework",
          "TestPipelineRecommendationEngine.test_meets_constraints",
          "test_meets_constraints",
          "TestPipelineRecommendationEngine.test_meets_constraints_no_node",
          "test_meets_constraints_no_node",
          "TestPipelineRecommendationEngine.test_is_logical_progression",
          "test_is_logical_progression",
          "TestPipelineRecommendationEngine.test_is_simpler",
          "test_is_simpler",
          "TestPipelineRecommendationEngine.test_recommend_sequential_compositions",
          "test_recommend_sequential_compositions",
          "TestPipelineRecommendationEngine.test_recommend_parallel_compositions",
          "test_recommend_parallel_compositions",
          "TestPipelineRecommendationEngine.test_recommend_conditional_compositions",
          "test_recommend_conditional_compositions",
          "TestPipelineRecommendationEngine.test_select_best_learning_candidate",
          "test_select_best_learning_candidate",
          "TestPipelineRecommendationEngine.test_select_best_learning_candidate_empty",
          "test_select_best_learning_candidate_empty",
          "TestPipelineRecommendationEngine.test_select_best_learning_candidate_single",
          "test_select_best_learning_candidate_single",
          "TestPipelineRecommendationEngine.test_clear_cache",
          "test_clear_cache",
          "TestPipelineRecommendationEngine.test_error_handling_in_methods",
          "test_error_handling_in_methods",
          "TestPipelineRecommendationEngine.test_recommendation_result_model",
          "test_recommendation_result_model",
          "TestPipelineRecommendationEngine.test_composition_recommendation_model",
          "test_composition_recommendation_model",
          "TestPipelineRecommendationEngine.test_complex_recommendation_scenario",
          "test_complex_recommendation_scenario",
          "TestPipelineRecommendationEngine.test_constraint_edge_cases",
          "test_constraint_edge_cases",
          "TestPipelineRecommendationEngine.test_learning_path_edge_cases",
          "test_learning_path_edge_cases",
          "mock_registry",
          "mock_traverser",
          "mock_discovery",
          "sample_nodes",
          "engine",
          "test_init",
          "test_recommend_for_use_case",
          "test_recommend_for_use_case_with_constraints",
          "test_recommend_for_use_case_error",
          "test_recommend_next_steps",
          "test_recommend_next_steps_complexity_progression",
          "test_recommend_alternatives",
          "test_recommend_alternatives_different_frameworks",
          "test_recommend_alternatives_with_reason",
          "test_recommend_compositions",
          "test_recommend_compositions_insufficient_pipelines",
          "test_get_learning_path",
          "test_get_learning_path_specific_framework",
          "test_meets_constraints",
          "test_meets_constraints_no_node",
          "test_is_logical_progression",
          "test_is_simpler",
          "test_recommend_sequential_compositions",
          "test_recommend_parallel_compositions",
          "test_recommend_conditional_compositions",
          "test_select_best_learning_candidate",
          "test_select_best_learning_candidate_empty",
          "test_select_best_learning_candidate_single",
          "test_clear_cache",
          "test_error_handling_in_methods",
          "test_recommendation_result_model",
          "test_composition_recommendation_model",
          "test_complex_recommendation_scenario",
          "test_constraint_edge_cases",
          "test_learning_path_edge_cases",
          "mock_meets_constraints"
        ],
        "pipeline_catalog/core/test_catalog_registry.py": [
          "TestCatalogRegistry.mock_sync",
          "mock_sync",
          "TestCatalogRegistry.mock_registry_data",
          "mock_registry_data",
          "TestCatalogRegistry.registry",
          "registry",
          "TestCatalogRegistry.test_init_default_path",
          "test_init_default_path",
          "TestCatalogRegistry.test_init_custom_path",
          "test_init_custom_path",
          "TestCatalogRegistry.test_load_registry_success",
          "test_load_registry_success",
          "TestCatalogRegistry.test_load_registry_failure",
          "test_load_registry_failure",
          "TestCatalogRegistry.test_save_registry",
          "test_save_registry",
          "TestCatalogRegistry.test_get_pipeline_node_exists",
          "test_get_pipeline_node_exists",
          "TestCatalogRegistry.test_get_pipeline_node_not_exists",
          "test_get_pipeline_node_not_exists",
          "TestCatalogRegistry.test_get_pipeline_node_load_error",
          "test_get_pipeline_node_load_error",
          "TestCatalogRegistry.test_get_all_pipelines",
          "test_get_all_pipelines",
          "TestCatalogRegistry.test_get_all_pipelines_empty_registry",
          "test_get_all_pipelines_empty_registry",
          "TestCatalogRegistry.test_get_all_pipelines_load_error",
          "test_get_all_pipelines_load_error",
          "TestCatalogRegistry.test_add_or_update_enhanced_node_success",
          "test_add_or_update_enhanced_node_success",
          "TestCatalogRegistry.test_add_or_update_enhanced_node_failure",
          "test_add_or_update_enhanced_node_failure",
          "TestCatalogRegistry.test_add_pipeline_node_success",
          "test_add_pipeline_node_success",
          "TestCatalogRegistry.test_add_pipeline_node_missing_fields",
          "test_add_pipeline_node_missing_fields",
          "TestCatalogRegistry.test_remove_pipeline_node_success",
          "test_remove_pipeline_node_success",
          "TestCatalogRegistry.test_remove_pipeline_node_not_exists",
          "test_remove_pipeline_node_not_exists",
          "TestCatalogRegistry.test_update_pipeline_node_success",
          "test_update_pipeline_node_success",
          "TestCatalogRegistry.test_update_pipeline_node_not_exists",
          "test_update_pipeline_node_not_exists",
          "TestCatalogRegistry.test_get_pipelines_by_framework",
          "test_get_pipelines_by_framework",
          "TestCatalogRegistry.test_get_pipelines_by_complexity",
          "test_get_pipelines_by_complexity",
          "TestCatalogRegistry.test_get_pipeline_connections",
          "test_get_pipeline_connections",
          "TestCatalogRegistry.test_get_pipeline_connections_not_exists",
          "test_get_pipeline_connections_not_exists",
          "TestCatalogRegistry.test_add_connection_success",
          "test_add_connection_success",
          "TestCatalogRegistry.test_add_connection_invalid_type",
          "test_add_connection_invalid_type",
          "TestCatalogRegistry.test_add_connection_source_not_exists",
          "test_add_connection_source_not_exists",
          "TestCatalogRegistry.test_add_connection_target_not_exists",
          "test_add_connection_target_not_exists",
          "TestCatalogRegistry.test_remove_connection_success",
          "test_remove_connection_success",
          "TestCatalogRegistry.test_remove_connection_not_exists",
          "test_remove_connection_not_exists",
          "TestCatalogRegistry.test_validate_registry_integrity_valid",
          "test_validate_registry_integrity_valid",
          "TestCatalogRegistry.test_validate_registry_integrity_orphaned_connection",
          "test_validate_registry_integrity_orphaned_connection",
          "TestCatalogRegistry.test_get_registry_statistics",
          "test_get_registry_statistics",
          "TestCatalogRegistry.test_clear_cache",
          "test_clear_cache",
          "TestCatalogRegistry.test_convert_zettelkasten_to_node_data",
          "test_convert_zettelkasten_to_node_data",
          "TestCatalogRegistry.test_add_or_update_node_legacy",
          "test_add_or_update_node_legacy",
          "TestCatalogRegistry.test_helper_methods_called",
          "test_helper_methods_called",
          "TestCatalogRegistry.test_remove_connections_to_pipeline",
          "test_remove_connections_to_pipeline",
          "mock_sync",
          "mock_registry_data",
          "registry",
          "test_init_default_path",
          "test_init_custom_path",
          "test_load_registry_success",
          "test_load_registry_failure",
          "test_save_registry",
          "test_get_pipeline_node_exists",
          "test_get_pipeline_node_not_exists",
          "test_get_pipeline_node_load_error",
          "test_get_all_pipelines",
          "test_get_all_pipelines_empty_registry",
          "test_get_all_pipelines_load_error",
          "test_add_or_update_enhanced_node_success",
          "test_add_or_update_enhanced_node_failure",
          "test_add_pipeline_node_success",
          "test_add_pipeline_node_missing_fields",
          "test_remove_pipeline_node_success",
          "test_remove_pipeline_node_not_exists",
          "test_update_pipeline_node_success",
          "test_update_pipeline_node_not_exists",
          "test_get_pipelines_by_framework",
          "test_get_pipelines_by_complexity",
          "test_get_pipeline_connections",
          "test_get_pipeline_connections_not_exists",
          "test_add_connection_success",
          "test_add_connection_invalid_type",
          "test_add_connection_source_not_exists",
          "test_add_connection_target_not_exists",
          "test_remove_connection_success",
          "test_remove_connection_not_exists",
          "test_validate_registry_integrity_valid",
          "test_validate_registry_integrity_orphaned_connection",
          "test_get_registry_statistics",
          "test_clear_cache",
          "test_convert_zettelkasten_to_node_data",
          "test_add_or_update_node_legacy",
          "test_helper_methods_called",
          "test_remove_connections_to_pipeline"
        ],
        "pipeline_catalog/core/test_base_pipeline.py": [
          "ConcretePipeline.create_dag",
          "create_dag",
          "ConcretePipeline.get_enhanced_dag_metadata",
          "get_enhanced_dag_metadata",
          "TestBasePipeline.mock_session",
          "mock_session",
          "TestBasePipeline.mock_dag_compiler",
          "mock_dag_compiler",
          "TestBasePipeline.temp_config_file",
          "temp_config_file",
          "TestBasePipeline.test_init_with_defaults",
          "test_init_with_defaults",
          "TestBasePipeline.test_init_with_config_file",
          "test_init_with_config_file",
          "TestBasePipeline.test_init_with_nonexistent_config",
          "test_init_with_nonexistent_config",
          "TestBasePipeline.test_init_with_custom_parameters",
          "test_init_with_custom_parameters",
          "TestBasePipeline.test_initialize_compiler",
          "test_initialize_compiler",
          "TestBasePipeline.test_generate_pipeline_with_validation",
          "test_generate_pipeline_with_validation",
          "TestBasePipeline.test_generate_pipeline_validation_failed",
          "test_generate_pipeline_validation_failed",
          "TestBasePipeline.test_validate_dag_compatibility",
          "test_validate_dag_compatibility",
          "TestBasePipeline.test_preview_resolution",
          "test_preview_resolution",
          "TestBasePipeline.test_get_last_template",
          "test_get_last_template",
          "TestBasePipeline.test_sync_to_registry_success",
          "test_sync_to_registry_success",
          "TestBasePipeline.test_sync_to_registry_failure",
          "test_sync_to_registry_failure",
          "TestBasePipeline.test_sync_to_registry_exception",
          "test_sync_to_registry_exception",
          "TestBasePipeline.test_create_pipeline_compatibility_method",
          "test_create_pipeline_compatibility_method",
          "TestBasePipeline.test_save_execution_document",
          "test_save_execution_document",
          "TestBasePipeline.test_get_pipeline_config",
          "test_get_pipeline_config",
          "TestBasePipeline.test_update_pipeline_config",
          "test_update_pipeline_config",
          "TestBasePipeline.test_get_dag_info",
          "test_get_dag_info",
          "TestBasePipeline.test_step_catalog_initialization_success",
          "test_step_catalog_initialization_success",
          "TestBasePipeline.test_step_catalog_initialization_failure",
          "test_step_catalog_initialization_failure",
          "TestBasePipeline.test_get_step_catalog_info_available",
          "test_get_step_catalog_info_available",
          "TestBasePipeline.test_get_step_catalog_info_unavailable",
          "test_get_step_catalog_info_unavailable",
          "TestBasePipeline.test_get_step_catalog_info_error",
          "test_get_step_catalog_info_error",
          "TestBasePipeline.test_validate_dag_steps_with_catalog_available",
          "test_validate_dag_steps_with_catalog_available",
          "TestBasePipeline.test_validate_dag_steps_with_catalog_unavailable",
          "test_validate_dag_steps_with_catalog_unavailable",
          "TestBasePipeline.test_validate_dag_steps_with_catalog_error",
          "test_validate_dag_steps_with_catalog_error",
          "TestBasePipeline.test_get_step_recommendations_supported_step",
          "test_get_step_recommendations_supported_step",
          "TestBasePipeline.test_get_step_recommendations_legacy_alias",
          "test_get_step_recommendations_legacy_alias",
          "TestBasePipeline.test_get_step_recommendations_unsupported_with_similar",
          "test_get_step_recommendations_unsupported_with_similar",
          "TestBasePipeline.test_get_step_recommendations_unavailable",
          "test_get_step_recommendations_unavailable",
          "TestBasePipeline.test_get_step_recommendations_error",
          "test_get_step_recommendations_error",
          "TestBasePipeline.test_get_enhanced_pipeline_metadata_with_catalog",
          "test_get_enhanced_pipeline_metadata_with_catalog",
          "TestBasePipeline.test_get_enhanced_pipeline_metadata_without_catalog",
          "test_get_enhanced_pipeline_metadata_without_catalog",
          "TestBasePipeline.test_compiler_receives_step_catalog",
          "test_compiler_receives_step_catalog",
          "TestBasePipeline.test_compiler_without_step_catalog",
          "test_compiler_without_step_catalog",
          "create_dag",
          "get_enhanced_dag_metadata",
          "mock_session",
          "mock_dag_compiler",
          "temp_config_file",
          "test_init_with_defaults",
          "test_init_with_config_file",
          "test_init_with_nonexistent_config",
          "test_init_with_custom_parameters",
          "test_initialize_compiler",
          "test_generate_pipeline_with_validation",
          "test_generate_pipeline_validation_failed",
          "test_validate_dag_compatibility",
          "test_preview_resolution",
          "test_get_last_template",
          "test_sync_to_registry_success",
          "test_sync_to_registry_failure",
          "test_sync_to_registry_exception",
          "test_create_pipeline_compatibility_method",
          "test_save_execution_document",
          "test_get_pipeline_config",
          "test_update_pipeline_config",
          "test_get_dag_info",
          "test_step_catalog_initialization_success",
          "test_step_catalog_initialization_failure",
          "test_get_step_catalog_info_available",
          "test_get_step_catalog_info_unavailable",
          "test_get_step_catalog_info_error",
          "test_validate_dag_steps_with_catalog_available",
          "test_validate_dag_steps_with_catalog_unavailable",
          "test_validate_dag_steps_with_catalog_error",
          "test_get_step_recommendations_supported_step",
          "test_get_step_recommendations_legacy_alias",
          "test_get_step_recommendations_unsupported_with_similar",
          "test_get_step_recommendations_unavailable",
          "test_get_step_recommendations_error",
          "test_get_enhanced_pipeline_metadata_with_catalog",
          "test_get_enhanced_pipeline_metadata_without_catalog",
          "test_compiler_receives_step_catalog",
          "test_compiler_without_step_catalog"
        ]
      },
      "likely_tested_functions": [
        "PipelineCatalogManager.__init__",
        "PipelineCatalogManager.discover_pipelines",
        "discover_pipelines",
        "PipelineCatalogManager._discover_pipelines_with_catalog",
        "PipelineCatalogManager._discover_pipelines_legacy",
        "PipelineCatalogManager.get_pipeline_connections",
        "get_pipeline_connections",
        "PipelineCatalogManager.find_path",
        "find_path",
        "PipelineCatalogManager.get_recommendations",
        "get_recommendations",
        "PipelineCatalogManager.validate_registry",
        "validate_registry",
        "PipelineCatalogManager.sync_pipeline",
        "sync_pipeline",
        "PipelineCatalogManager.get_registry_stats",
        "get_registry_stats",
        "create_catalog_manager",
        "discover_by_framework",
        "discover_by_tags",
        "get_pipeline_alternatives",
        "discover_pipelines",
        "get_pipeline_connections",
        "find_path",
        "get_recommendations",
        "validate_registry",
        "sync_pipeline",
        "get_registry_stats",
        "CatalogIndexer.__init__",
        "CatalogIndexer.generate_index",
        "generate_index",
        "CatalogIndexer._find_python_files",
        "_find_python_files",
        "CatalogIndexer._process_pipeline_file",
        "_process_pipeline_file",
        "CatalogIndexer._extract_id",
        "_extract_id",
        "CatalogIndexer._extract_name",
        "_extract_name",
        "CatalogIndexer._detect_framework_from_path",
        "_detect_framework_from_path",
        "CatalogIndexer._determine_complexity",
        "_determine_complexity",
        "CatalogIndexer._extract_features",
        "_extract_features",
        "CatalogIndexer._extract_description",
        "_extract_description",
        "CatalogIndexer._extract_tags",
        "_extract_tags",
        "CatalogIndexer.update_index",
        "update_index",
        "CatalogIndexer._merge_indices",
        "_merge_indices",
        "CatalogIndexer.validate_index",
        "validate_index",
        "CatalogIndexer.save_index",
        "save_index",
        "generate_index",
        "_find_python_files",
        "_process_pipeline_file",
        "_extract_id",
        "_extract_name",
        "_detect_framework_from_path",
        "_determine_complexity",
        "_extract_features",
        "_extract_description",
        "_extract_tags",
        "update_index",
        "_merge_indices",
        "validate_index",
        "save_index",
        "ValidationReport.summary",
        "summary",
        "RegistryValidator.__init__",
        "RegistryValidator.validate_atomicity",
        "validate_atomicity",
        "RegistryValidator.validate_connections",
        "validate_connections",
        "RegistryValidator.validate_metadata_completeness",
        "validate_metadata_completeness",
        "RegistryValidator.validate_tag_consistency",
        "validate_tag_consistency",
        "RegistryValidator.validate_independence_claims",
        "validate_independence_claims",
        "RegistryValidator.generate_validation_report",
        "generate_validation_report",
        "RegistryValidator.validate_zettelkasten_principles",
        "validate_zettelkasten_principles",
        "RegistryValidator._are_similar_tags",
        "_are_similar_tags",
        "RegistryValidator._generate_principle_recommendations",
        "_generate_principle_recommendations",
        "RegistryValidator.clear_cache",
        "clear_cache",
        "summary",
        "validate_atomicity",
        "validate_connections",
        "validate_metadata_completeness",
        "validate_tag_consistency",
        "validate_independence_claims",
        "generate_validation_report",
        "validate_zettelkasten_principles",
        "_are_similar_tags",
        "_generate_principle_recommendations",
        "clear_cache",
        "PipelineRecommendationEngine.__init__",
        "PipelineRecommendationEngine.recommend_for_use_case",
        "recommend_for_use_case",
        "PipelineRecommendationEngine.recommend_next_steps",
        "recommend_next_steps",
        "PipelineRecommendationEngine.recommend_alternatives",
        "recommend_alternatives",
        "PipelineRecommendationEngine.recommend_compositions",
        "recommend_compositions",
        "PipelineRecommendationEngine.get_learning_path",
        "get_learning_path",
        "PipelineRecommendationEngine._meets_constraints",
        "_meets_constraints",
        "PipelineRecommendationEngine._is_logical_progression",
        "_is_logical_progression",
        "PipelineRecommendationEngine._is_simpler",
        "_is_simpler",
        "PipelineRecommendationEngine._recommend_sequential_compositions",
        "_recommend_sequential_compositions",
        "PipelineRecommendationEngine._recommend_parallel_compositions",
        "_recommend_parallel_compositions",
        "PipelineRecommendationEngine._recommend_conditional_compositions",
        "_recommend_conditional_compositions",
        "PipelineRecommendationEngine._select_best_learning_candidate",
        "_select_best_learning_candidate",
        "PipelineRecommendationEngine.clear_cache",
        "clear_cache",
        "recommend_for_use_case",
        "recommend_next_steps",
        "recommend_alternatives",
        "recommend_compositions",
        "get_learning_path",
        "_meets_constraints",
        "_is_logical_progression",
        "_is_simpler",
        "_recommend_sequential_compositions",
        "_recommend_parallel_compositions",
        "_recommend_conditional_compositions",
        "_select_best_learning_candidate",
        "clear_cache",
        "TagBasedDiscovery.__init__",
        "TagBasedDiscovery.find_by_tags",
        "find_by_tags",
        "TagBasedDiscovery.find_by_framework",
        "find_by_framework",
        "TagBasedDiscovery.find_by_complexity",
        "find_by_complexity",
        "TagBasedDiscovery.find_by_task",
        "find_by_task",
        "TagBasedDiscovery.find_by_domain",
        "find_by_domain",
        "TagBasedDiscovery.find_by_pattern",
        "find_by_pattern",
        "TagBasedDiscovery.find_by_multiple_criteria",
        "find_by_multiple_criteria",
        "TagBasedDiscovery.search_by_text",
        "search_by_text",
        "TagBasedDiscovery.get_tag_clusters",
        "get_tag_clusters",
        "TagBasedDiscovery.suggest_similar_pipelines",
        "suggest_similar_pipelines",
        "TagBasedDiscovery.get_tag_statistics",
        "get_tag_statistics",
        "TagBasedDiscovery.find_undertagged_pipelines",
        "find_undertagged_pipelines",
        "TagBasedDiscovery.suggest_tags_for_pipeline",
        "suggest_tags_for_pipeline",
        "TagBasedDiscovery._get_tag_index",
        "_get_tag_index",
        "TagBasedDiscovery._get_pipeline_tags",
        "_get_pipeline_tags",
        "TagBasedDiscovery.clear_cache",
        "clear_cache",
        "find_by_tags",
        "find_by_framework",
        "find_by_complexity",
        "find_by_task",
        "find_by_domain",
        "find_by_pattern",
        "find_by_multiple_criteria",
        "search_by_text",
        "get_tag_clusters",
        "suggest_similar_pipelines",
        "get_tag_statistics",
        "find_undertagged_pipelines",
        "suggest_tags_for_pipeline",
        "_get_tag_index",
        "_get_pipeline_tags",
        "clear_cache",
        "CatalogRegistry.__init__",
        "CatalogRegistry.load_registry",
        "load_registry",
        "CatalogRegistry.save_registry",
        "save_registry",
        "CatalogRegistry.get_pipeline_node",
        "get_pipeline_node",
        "CatalogRegistry.get_all_pipelines",
        "get_all_pipelines",
        "CatalogRegistry.add_or_update_enhanced_node",
        "add_or_update_enhanced_node",
        "CatalogRegistry.add_or_update_node",
        "add_or_update_node",
        "CatalogRegistry.add_pipeline_node",
        "add_pipeline_node",
        "CatalogRegistry.remove_pipeline_node",
        "remove_pipeline_node",
        "CatalogRegistry.update_pipeline_node",
        "update_pipeline_node",
        "CatalogRegistry.get_pipelines_by_framework",
        "get_pipelines_by_framework",
        "CatalogRegistry.get_pipelines_by_complexity",
        "get_pipelines_by_complexity",
        "CatalogRegistry.get_pipeline_connections",
        "get_pipeline_connections",
        "CatalogRegistry.add_connection",
        "add_connection",
        "CatalogRegistry.remove_connection",
        "remove_connection",
        "CatalogRegistry.validate_registry_integrity",
        "validate_registry_integrity",
        "CatalogRegistry.get_registry_statistics",
        "get_registry_statistics",
        "CatalogRegistry._update_registry_metadata",
        "CatalogRegistry._remove_from_tag_index",
        "CatalogRegistry._remove_connections_to_pipeline",
        "_remove_connections_to_pipeline",
        "CatalogRegistry._update_tag_index_for_pipeline",
        "CatalogRegistry._convert_zettelkasten_to_node_data",
        "_convert_zettelkasten_to_node_data",
        "CatalogRegistry.clear_cache",
        "clear_cache",
        "load_registry",
        "save_registry",
        "get_pipeline_node",
        "get_all_pipelines",
        "add_or_update_enhanced_node",
        "add_or_update_node",
        "add_pipeline_node",
        "remove_pipeline_node",
        "update_pipeline_node",
        "get_pipelines_by_framework",
        "get_pipelines_by_complexity",
        "get_pipeline_connections",
        "add_connection",
        "remove_connection",
        "validate_registry_integrity",
        "get_registry_statistics",
        "_remove_connections_to_pipeline",
        "_convert_zettelkasten_to_node_data",
        "clear_cache",
        "BasePipeline.__init__",
        "BasePipeline.create_dag",
        "create_dag",
        "BasePipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "BasePipeline._initialize_step_catalog",
        "BasePipeline._initialize_compiler",
        "_initialize_compiler",
        "BasePipeline.generate_pipeline",
        "generate_pipeline",
        "BasePipeline.validate_dag_compatibility",
        "validate_dag_compatibility",
        "BasePipeline.preview_resolution",
        "preview_resolution",
        "BasePipeline.get_last_template",
        "get_last_template",
        "BasePipeline.sync_to_registry",
        "sync_to_registry",
        "BasePipeline.create_pipeline",
        "create_pipeline",
        "BasePipeline.save_execution_document",
        "save_execution_document",
        "BasePipeline.get_pipeline_config",
        "get_pipeline_config",
        "BasePipeline.update_pipeline_config",
        "update_pipeline_config",
        "BasePipeline.get_dag_info",
        "get_dag_info",
        "BasePipeline.get_pipeline_parameters",
        "BasePipeline.set_pipeline_parameters",
        "BasePipeline.create_pipeline_parameters",
        "BasePipeline.get_step_catalog_info",
        "get_step_catalog_info",
        "BasePipeline.validate_dag_steps_with_catalog",
        "validate_dag_steps_with_catalog",
        "BasePipeline.get_step_recommendations",
        "get_step_recommendations",
        "BasePipeline.get_enhanced_pipeline_metadata",
        "get_enhanced_pipeline_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "_initialize_compiler",
        "generate_pipeline",
        "validate_dag_compatibility",
        "preview_resolution",
        "get_last_template",
        "sync_to_registry",
        "create_pipeline",
        "save_execution_document",
        "get_pipeline_config",
        "update_pipeline_config",
        "get_dag_info",
        "get_step_catalog_info",
        "validate_dag_steps_with_catalog",
        "get_step_recommendations",
        "get_enhanced_pipeline_metadata",
        "ConnectionTraverser.__init__",
        "ConnectionTraverser.get_alternatives",
        "get_alternatives",
        "ConnectionTraverser.get_related",
        "get_related",
        "ConnectionTraverser.get_compositions",
        "get_compositions",
        "ConnectionTraverser.get_all_connections",
        "get_all_connections",
        "ConnectionTraverser._get_connections_by_type",
        "_get_connections_by_type",
        "ConnectionTraverser.traverse_connection_path",
        "traverse_connection_path",
        "ConnectionTraverser.find_shortest_path",
        "find_shortest_path",
        "ConnectionTraverser.get_connection_subgraph",
        "get_connection_subgraph",
        "ConnectionTraverser.find_connection_clusters",
        "find_connection_clusters",
        "ConnectionTraverser.get_bidirectional_connections",
        "get_bidirectional_connections",
        "ConnectionTraverser.analyze_connection_patterns",
        "analyze_connection_patterns",
        "ConnectionTraverser.suggest_missing_connections",
        "suggest_missing_connections",
        "ConnectionTraverser.clear_cache",
        "clear_cache",
        "get_alternatives",
        "get_related",
        "get_compositions",
        "get_all_connections",
        "_get_connections_by_type",
        "traverse_connection_path",
        "find_shortest_path",
        "get_connection_subgraph",
        "find_connection_clusters",
        "get_bidirectional_connections",
        "analyze_connection_patterns",
        "suggest_missing_connections",
        "clear_cache",
        "XGBoostE2EComprehensivePipeline.create_dag",
        "create_dag",
        "XGBoostE2EComprehensivePipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "XGBoostTrainingEvaluationPipeline.create_dag",
        "create_dag",
        "XGBoostTrainingEvaluationPipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "XGBoostTrainingSimplePipeline.create_dag",
        "create_dag",
        "XGBoostTrainingSimplePipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "XGBoostTrainingCalibratedPipeline.create_dag",
        "create_dag",
        "XGBoostTrainingCalibratedPipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "PyTorchTrainingBasicPipeline.create_dag",
        "create_dag",
        "PyTorchTrainingBasicPipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "DummyE2EBasicPipeline.create_dag",
        "create_dag",
        "DummyE2EBasicPipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "PyTorchE2EStandardPipeline.create_dag",
        "create_dag",
        "PyTorchE2EStandardPipeline.get_enhanced_dag_metadata",
        "get_enhanced_dag_metadata",
        "create_dag",
        "get_enhanced_dag_metadata",
        "ZettelkastenMetadata.add_connection",
        "add_connection",
        "EnhancedDAGMetadata._validate",
        "_validate",
        "EnhancedDAGMetadata.add_connection",
        "add_connection",
        "add_connection",
        "_validate",
        "add_connection",
        "DAGMetadataRegistrySync.load_registry",
        "load_registry",
        "DAGMetadataRegistrySync._save_registry",
        "_save_registry",
        "DAGMetadataRegistrySync.get_registry_statistics",
        "get_registry_statistics",
        "load_registry",
        "_save_registry",
        "get_registry_statistics",
        "validate_dag",
        "validate_dag"
      ],
      "likely_untested_functions": [
        "create_mods_pipeline",
        "create_mods_pipeline_from_config",
        "get_mods_pipeline_factory",
        "create_mods_xgboost_e2e_comprehensive",
        "create_mods_pytorch_e2e_standard",
        "create_mods_dummy_e2e_basic",
        "create_mods_pipeline_by_name",
        "MODSEnhancedPipeline.__init__",
        "__init__",
        "MODSEnhancedPipeline.get_mods_metadata",
        "get_mods_metadata",
        "factory",
        "MODSTemplate",
        "__init__",
        "get_mods_metadata",
        "decorator",
        "__init__",
        "_discover_pipelines_with_catalog",
        "_discover_pipelines_legacy",
        "__init__",
        "_discover_pipelines_with_catalog",
        "_discover_pipelines_legacy",
        "__init__",
        "__init__",
        "AtomicityViolation.__init__",
        "__init__",
        "ConnectionError.__init__",
        "__init__",
        "MetadataError.__init__",
        "__init__",
        "TagConsistencyError.__init__",
        "__init__",
        "IndependenceError.__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "get_task_priority",
        "__init__",
        "__init__",
        "__init__",
        "_update_registry_metadata",
        "_remove_from_tag_index",
        "_update_tag_index_for_pipeline",
        "__init__",
        "_update_registry_metadata",
        "_remove_from_tag_index",
        "_update_tag_index_for_pipeline",
        "__init__",
        "_initialize_step_catalog",
        "get_pipeline_parameters",
        "set_pipeline_parameters",
        "create_pipeline_parameters",
        "__init__",
        "_initialize_step_catalog",
        "get_pipeline_parameters",
        "set_pipeline_parameters",
        "create_pipeline_parameters",
        "__init__",
        "__init__",
        "dfs",
        "collect_subgraph",
        "dfs_cluster",
        "create_xgboost_e2e_comprehensive_mods_pipeline",
        "XGBoostE2EComprehensivePipeline.__init__",
        "__init__",
        "__init__",
        "XGBoostTrainingEvaluationPipeline.__init__",
        "__init__",
        "__init__",
        "XGBoostTrainingSimplePipeline.__init__",
        "__init__",
        "__init__",
        "XGBoostTrainingCalibratedPipeline.__init__",
        "__init__",
        "__init__",
        "PyTorchTrainingBasicPipeline.__init__",
        "__init__",
        "__init__",
        "DummyE2EBasicPipeline.__init__",
        "__init__",
        "__init__",
        "PyTorchE2EStandardPipeline.__init__",
        "__init__",
        "__init__",
        "ZettelkastenMetadata.validate_atomic_id",
        "validate_atomic_id",
        "ZettelkastenMetadata.validate_single_responsibility",
        "validate_single_responsibility",
        "ZettelkastenMetadata.set_default_pattern_tags",
        "set_default_pattern_tags",
        "ZettelkastenMetadata.get_all_tags",
        "get_all_tags",
        "ZettelkastenMetadata.get_flat_tags",
        "get_flat_tags",
        "EnhancedDAGMetadata.validate_complexity",
        "validate_complexity",
        "EnhancedDAGMetadata.validate_framework",
        "validate_framework",
        "EnhancedDAGMetadata.model_post_init",
        "model_post_init",
        "EnhancedDAGMetadata._create_default_zettelkasten_metadata",
        "_create_default_zettelkasten_metadata",
        "EnhancedDAGMetadata._generate_atomic_id",
        "_generate_atomic_id",
        "EnhancedDAGMetadata.to_registry_node",
        "to_registry_node",
        "EnhancedDAGMetadata._generate_title",
        "_generate_title",
        "EnhancedDAGMetadata._extract_dependencies",
        "_extract_dependencies",
        "EnhancedDAGMetadata._build_connections",
        "_build_connections",
        "EnhancedDAGMetadata.update_tags",
        "update_tags",
        "EnhancedDAGMetadata.to_dict",
        "to_dict",
        "EnhancedDAGMetadata.to_legacy_dag_metadata",
        "to_legacy_dag_metadata",
        "DAGMetadataAdapter.from_legacy_dag_metadata",
        "from_legacy_dag_metadata",
        "DAGMetadataAdapter.to_legacy_dag_metadata",
        "to_legacy_dag_metadata",
        "validate_enhanced_dag_metadata",
        "validate_atomic_id",
        "validate_single_responsibility",
        "set_default_pattern_tags",
        "get_all_tags",
        "get_flat_tags",
        "validate_complexity",
        "validate_framework",
        "model_post_init",
        "_create_default_zettelkasten_metadata",
        "_generate_atomic_id",
        "to_registry_node",
        "_generate_title",
        "_extract_dependencies",
        "_build_connections",
        "update_tags",
        "to_dict",
        "to_legacy_dag_metadata",
        "from_legacy_dag_metadata",
        "to_legacy_dag_metadata",
        "DAGMetadataRegistrySync.__init__",
        "__init__",
        "DAGMetadataRegistrySync._ensure_registry_exists",
        "_ensure_registry_exists",
        "DAGMetadataRegistrySync._create_empty_registry",
        "_create_empty_registry",
        "DAGMetadataRegistrySync._validate_registry_structure",
        "_validate_registry_structure",
        "DAGMetadataRegistrySync._validate_node_structure",
        "_validate_node_structure",
        "DAGMetadataRegistrySync.sync_metadata_to_registry",
        "sync_metadata_to_registry",
        "DAGMetadataRegistrySync.sync_registry_to_metadata",
        "sync_registry_to_metadata",
        "DAGMetadataRegistrySync._extract_zettelkasten_metadata_from_node",
        "_extract_zettelkasten_metadata_from_node",
        "DAGMetadataRegistrySync.validate_consistency",
        "validate_consistency",
        "DAGMetadataRegistrySync._update_registry_metadata",
        "_update_registry_metadata",
        "DAGMetadataRegistrySync._update_tag_index",
        "_update_tag_index",
        "DAGMetadataRegistrySync.remove_pipeline_from_registry",
        "remove_pipeline_from_registry",
        "DAGMetadataRegistrySync._remove_from_tag_index",
        "_remove_from_tag_index",
        "create_empty_registry",
        "validate_registry_file",
        "__init__",
        "_ensure_registry_exists",
        "_create_empty_registry",
        "_validate_registry_structure",
        "_validate_node_structure",
        "sync_metadata_to_registry",
        "sync_registry_to_metadata",
        "_extract_zettelkasten_metadata_from_node",
        "validate_consistency",
        "_update_registry_metadata",
        "_update_tag_index",
        "remove_pipeline_from_registry",
        "_remove_from_tag_index",
        "generate_execution_document_for_pipeline",
        "_get_catalog_registry",
        "get_config_path_for_pipeline",
        "load_shared_dag_for_pipeline",
        "_snake_to_pascal_case",
        "_load_dag_from_shared_dags",
        "create_execution_doc_template_for_pipeline",
        "get_pipeline_metadata",
        "list_available_pipelines",
        "validate_pipeline_setup",
        "create_dummy_e2e_basic_dag",
        "get_dag_metadata",
        "validate_dag_structure",
        "create_xgboost_complete_e2e_dag",
        "get_dag_metadata",
        "validate_dag_structure",
        "create_xgboost_simple_dag",
        "get_dag_metadata",
        "create_xgboost_training_with_calibration_dag",
        "get_dag_metadata",
        "validate_dag_structure",
        "create_xgboost_training_with_evaluation_dag",
        "get_dag_metadata",
        "validate_dag_structure",
        "create_pytorch_standard_e2e_dag",
        "get_dag_metadata",
        "validate_dag_structure",
        "create_pytorch_training_dag",
        "get_dag_metadata"
      ]
    },
    "processing": {
      "component": "processing",
      "description": "Data processing and transformation components",
      "source_exists": true,
      "test_exists": false,
      "source_files": [
        "processing/multiclass_label_processor.py",
        "processing/cs_processor.py",
        "processing/categorical_label_processor.py",
        "processing/bert_tokenize_processor.py",
        "processing/numerical_imputation_processor.py",
        "processing/bsm_dataloader.py",
        "processing/numerical_binning_processor.py",
        "processing/gensim_tokenize_processor.py",
        "processing/risk_table_processor.py",
        "processing/processors.py",
        "processing/bsm_processor.py",
        "processing/bsm_datasets.py"
      ],
      "test_files": [],
      "total_source_functions": 225,
      "tested_functions": 0,
      "untested_functions": 225,
      "coverage_percentage": 0.0,
      "total_source_lines": 1751,
      "total_test_lines": 0,
      "test_to_source_ratio": 0.0,
      "source_functions_by_file": {
        "processing/multiclass_label_processor.py": [
          "MultiClassLabelProcessor.__init__",
          "__init__",
          "MultiClassLabelProcessor.process",
          "process",
          "__init__",
          "process"
        ],
        "processing/cs_processor.py": [
          "CSChatSplitterProcessor.__init__",
          "__init__",
          "CSChatSplitterProcessor.process",
          "process",
          "CSChatSplitterProcessor._extract_embedded_messages",
          "_extract_embedded_messages",
          "CSChatSplitterProcessor._clean_content",
          "_clean_content",
          "CSAdapter.__init__",
          "__init__",
          "CSAdapter.process",
          "process",
          "__init__",
          "process",
          "_extract_embedded_messages",
          "_clean_content",
          "__init__",
          "process"
        ],
        "processing/categorical_label_processor.py": [
          "CategoricalLabelProcessor.__init__",
          "__init__",
          "CategoricalLabelProcessor.process",
          "process",
          "__init__",
          "process"
        ],
        "processing/bert_tokenize_processor.py": [
          "TokenizationProcessor.__init__",
          "__init__",
          "TokenizationProcessor.process",
          "process",
          "__init__",
          "process"
        ],
        "processing/numerical_imputation_processor.py": [
          "NumericalVariableImputationProcessor.__init__",
          "__init__",
          "NumericalVariableImputationProcessor.get_name",
          "get_name",
          "NumericalVariableImputationProcessor.__call__",
          "__call__",
          "NumericalVariableImputationProcessor.__rshift__",
          "__rshift__",
          "NumericalVariableImputationProcessor._validate_imputation_dict",
          "_validate_imputation_dict",
          "NumericalVariableImputationProcessor.fit",
          "fit",
          "NumericalVariableImputationProcessor.process",
          "process",
          "NumericalVariableImputationProcessor.transform",
          "transform",
          "NumericalVariableImputationProcessor.get_params",
          "get_params",
          "__init__",
          "get_name",
          "__call__",
          "__rshift__",
          "_validate_imputation_dict",
          "fit",
          "process",
          "transform",
          "get_params"
        ],
        "processing/bsm_dataloader.py": [
          "build_collate_batch",
          "collate_batch",
          "pad_nested"
        ],
        "processing/numerical_binning_processor.py": [
          "NumericalBinningProcessor.__init__",
          "__init__",
          "NumericalBinningProcessor.fit",
          "fit",
          "NumericalBinningProcessor.process",
          "process",
          "NumericalBinningProcessor.transform",
          "transform",
          "NumericalBinningProcessor.get_params",
          "get_params",
          "NumericalBinningProcessor.save_params",
          "save_params",
          "NumericalBinningProcessor.load_params",
          "load_params",
          "__init__",
          "fit",
          "process",
          "transform",
          "get_params",
          "save_params",
          "load_params"
        ],
        "processing/gensim_tokenize_processor.py": [
          "FastTextEmbeddingProcessor.__init__",
          "__init__",
          "FastTextEmbeddingProcessor.process",
          "process",
          "__init__",
          "process"
        ],
        "processing/risk_table_processor.py": [
          "RiskTableMappingProcessor.__init__",
          "__init__",
          "RiskTableMappingProcessor.get_name",
          "get_name",
          "RiskTableMappingProcessor._validate_risk_tables",
          "_validate_risk_tables",
          "RiskTableMappingProcessor.set_risk_tables",
          "set_risk_tables",
          "RiskTableMappingProcessor.fit",
          "fit",
          "RiskTableMappingProcessor.process",
          "process",
          "RiskTableMappingProcessor.transform",
          "transform",
          "RiskTableMappingProcessor.get_risk_tables",
          "get_risk_tables",
          "RiskTableMappingProcessor.save_risk_tables",
          "save_risk_tables",
          "RiskTableMappingProcessor.load_risk_tables",
          "load_risk_tables",
          "__init__",
          "get_name",
          "_validate_risk_tables",
          "set_risk_tables",
          "fit",
          "process",
          "transform",
          "get_risk_tables",
          "save_risk_tables",
          "load_risk_tables"
        ],
        "processing/processors.py": [
          "Processor.__init__",
          "__init__",
          "Processor.get_name",
          "get_name",
          "Processor.__call__",
          "__call__",
          "Processor.process",
          "process",
          "Processor.__rshift__",
          "__rshift__",
          "ComposedProcessor.__init__",
          "__init__",
          "ComposedProcessor.process",
          "process",
          "IdentityProcessor.__init__",
          "__init__",
          "IdentityProcessor.process",
          "process",
          "__init__",
          "get_name",
          "__call__",
          "process",
          "__rshift__",
          "__init__",
          "process",
          "__init__",
          "process"
        ],
        "processing/bsm_processor.py": [
          "TextNormalizationProcessor.__init__",
          "__init__",
          "TextNormalizationProcessor.process",
          "process",
          "TextUpperProcessor.__init__",
          "__init__",
          "TextUpperProcessor.process",
          "process",
          "DialogueSplitterProcessor.__init__",
          "__init__",
          "DialogueSplitterProcessor.process",
          "process",
          "DialogueChunkerProcessor.__init__",
          "__init__",
          "DialogueChunkerProcessor.process",
          "process",
          "EmojiRemoverProcessor.__init__",
          "__init__",
          "EmojiRemoverProcessor.process",
          "process",
          "HTMLNormalizerProcessor.__init__",
          "__init__",
          "HTMLNormalizerProcessor.process",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "_norm",
          "_remove",
          "_norm_single"
        ],
        "processing/bsm_datasets.py": [
          "BSMDataset.__init__",
          "__init__",
          "BSMDataset.load_data",
          "load_data",
          "BSMDataset.load_dataframe",
          "load_dataframe",
          "BSMDataset._postprocess_dataframe",
          "_postprocess_dataframe",
          "BSMDataset.fill_missing_value",
          "fill_missing_value",
          "BSMDataset.add_pipeline",
          "add_pipeline",
          "BSMDataset.__getitem__",
          "__getitem__",
          "BSMDataset.__len__",
          "__len__",
          "BSMDataset.set_text_field_name",
          "set_text_field_name",
          "BSMDataset.set_label_field_name",
          "set_label_field_name",
          "BSMDataset.set_cat_field_list",
          "set_cat_field_list",
          "BSMDataset.set_full_field_list",
          "set_full_field_list",
          "__init__",
          "load_data",
          "load_dataframe",
          "_postprocess_dataframe",
          "fill_missing_value",
          "add_pipeline",
          "__getitem__",
          "__len__",
          "set_text_field_name",
          "set_label_field_name",
          "set_cat_field_list",
          "set_full_field_list"
        ]
      },
      "test_functions_by_file": {},
      "likely_tested_functions": [],
      "likely_untested_functions": [
        "MultiClassLabelProcessor.__init__",
        "__init__",
        "MultiClassLabelProcessor.process",
        "process",
        "__init__",
        "process",
        "CSChatSplitterProcessor.__init__",
        "__init__",
        "CSChatSplitterProcessor.process",
        "process",
        "CSChatSplitterProcessor._extract_embedded_messages",
        "_extract_embedded_messages",
        "CSChatSplitterProcessor._clean_content",
        "_clean_content",
        "CSAdapter.__init__",
        "__init__",
        "CSAdapter.process",
        "process",
        "__init__",
        "process",
        "_extract_embedded_messages",
        "_clean_content",
        "__init__",
        "process",
        "CategoricalLabelProcessor.__init__",
        "__init__",
        "CategoricalLabelProcessor.process",
        "process",
        "__init__",
        "process",
        "TokenizationProcessor.__init__",
        "__init__",
        "TokenizationProcessor.process",
        "process",
        "__init__",
        "process",
        "NumericalVariableImputationProcessor.__init__",
        "__init__",
        "NumericalVariableImputationProcessor.get_name",
        "get_name",
        "NumericalVariableImputationProcessor.__call__",
        "__call__",
        "NumericalVariableImputationProcessor.__rshift__",
        "__rshift__",
        "NumericalVariableImputationProcessor._validate_imputation_dict",
        "_validate_imputation_dict",
        "NumericalVariableImputationProcessor.fit",
        "fit",
        "NumericalVariableImputationProcessor.process",
        "process",
        "NumericalVariableImputationProcessor.transform",
        "transform",
        "NumericalVariableImputationProcessor.get_params",
        "get_params",
        "__init__",
        "get_name",
        "__call__",
        "__rshift__",
        "_validate_imputation_dict",
        "fit",
        "process",
        "transform",
        "get_params",
        "build_collate_batch",
        "collate_batch",
        "pad_nested",
        "NumericalBinningProcessor.__init__",
        "__init__",
        "NumericalBinningProcessor.fit",
        "fit",
        "NumericalBinningProcessor.process",
        "process",
        "NumericalBinningProcessor.transform",
        "transform",
        "NumericalBinningProcessor.get_params",
        "get_params",
        "NumericalBinningProcessor.save_params",
        "save_params",
        "NumericalBinningProcessor.load_params",
        "load_params",
        "__init__",
        "fit",
        "process",
        "transform",
        "get_params",
        "save_params",
        "load_params",
        "FastTextEmbeddingProcessor.__init__",
        "__init__",
        "FastTextEmbeddingProcessor.process",
        "process",
        "__init__",
        "process",
        "RiskTableMappingProcessor.__init__",
        "__init__",
        "RiskTableMappingProcessor.get_name",
        "get_name",
        "RiskTableMappingProcessor._validate_risk_tables",
        "_validate_risk_tables",
        "RiskTableMappingProcessor.set_risk_tables",
        "set_risk_tables",
        "RiskTableMappingProcessor.fit",
        "fit",
        "RiskTableMappingProcessor.process",
        "process",
        "RiskTableMappingProcessor.transform",
        "transform",
        "RiskTableMappingProcessor.get_risk_tables",
        "get_risk_tables",
        "RiskTableMappingProcessor.save_risk_tables",
        "save_risk_tables",
        "RiskTableMappingProcessor.load_risk_tables",
        "load_risk_tables",
        "__init__",
        "get_name",
        "_validate_risk_tables",
        "set_risk_tables",
        "fit",
        "process",
        "transform",
        "get_risk_tables",
        "save_risk_tables",
        "load_risk_tables",
        "Processor.__init__",
        "__init__",
        "Processor.get_name",
        "get_name",
        "Processor.__call__",
        "__call__",
        "Processor.process",
        "process",
        "Processor.__rshift__",
        "__rshift__",
        "ComposedProcessor.__init__",
        "__init__",
        "ComposedProcessor.process",
        "process",
        "IdentityProcessor.__init__",
        "__init__",
        "IdentityProcessor.process",
        "process",
        "__init__",
        "get_name",
        "__call__",
        "process",
        "__rshift__",
        "__init__",
        "process",
        "__init__",
        "process",
        "TextNormalizationProcessor.__init__",
        "__init__",
        "TextNormalizationProcessor.process",
        "process",
        "TextUpperProcessor.__init__",
        "__init__",
        "TextUpperProcessor.process",
        "process",
        "DialogueSplitterProcessor.__init__",
        "__init__",
        "DialogueSplitterProcessor.process",
        "process",
        "DialogueChunkerProcessor.__init__",
        "__init__",
        "DialogueChunkerProcessor.process",
        "process",
        "EmojiRemoverProcessor.__init__",
        "__init__",
        "EmojiRemoverProcessor.process",
        "process",
        "HTMLNormalizerProcessor.__init__",
        "__init__",
        "HTMLNormalizerProcessor.process",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "_norm",
        "_remove",
        "_norm_single",
        "BSMDataset.__init__",
        "__init__",
        "BSMDataset.load_data",
        "load_data",
        "BSMDataset.load_dataframe",
        "load_dataframe",
        "BSMDataset._postprocess_dataframe",
        "_postprocess_dataframe",
        "BSMDataset.fill_missing_value",
        "fill_missing_value",
        "BSMDataset.add_pipeline",
        "add_pipeline",
        "BSMDataset.__getitem__",
        "__getitem__",
        "BSMDataset.__len__",
        "__len__",
        "BSMDataset.set_text_field_name",
        "set_text_field_name",
        "BSMDataset.set_label_field_name",
        "set_label_field_name",
        "BSMDataset.set_cat_field_list",
        "set_cat_field_list",
        "BSMDataset.set_full_field_list",
        "set_full_field_list",
        "__init__",
        "load_data",
        "load_dataframe",
        "_postprocess_dataframe",
        "fill_missing_value",
        "add_pipeline",
        "__getitem__",
        "__len__",
        "set_text_field_name",
        "set_label_field_name",
        "set_cat_field_list",
        "set_full_field_list"
      ]
    },
    "registry": {
      "component": "registry",
      "description": "Step and hyperparameter registry management",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "registry/step_names_original.py",
        "registry/validation_utils.py",
        "registry/hyperparameter_registry.py",
        "registry/exceptions.py",
        "registry/step_names.py",
        "registry/step_type_test_variants.py",
        "registry/hybrid/models.py",
        "registry/hybrid/setup.py",
        "registry/hybrid/utils.py",
        "registry/hybrid/manager.py"
      ],
      "test_files": [
        "registry/test_validation_utils.py",
        "registry/test_validation_utils_extended.py",
        "registry/test_step_names.py",
        "registry/test_exceptions.py",
        "registry/test_hyperparameter_registry.py",
        "registry/hybrid/test_utils.py",
        "registry/hybrid/test_setup.py",
        "registry/hybrid/test_models.py",
        "registry/hybrid/test_manager.py",
        "registry/hybrid/test_init.py"
      ],
      "total_source_functions": 231,
      "tested_functions": 119,
      "untested_functions": 112,
      "coverage_percentage": 51.515151515151516,
      "total_source_lines": 3732,
      "total_test_lines": 4121,
      "test_to_source_ratio": 3.2510822510822512,
      "source_functions_by_file": {
        "registry/step_names_original.py": [],
        "registry/validation_utils.py": [
          "validate_new_step_definition",
          "auto_correct_step_definition",
          "to_pascal_case",
          "get_validation_errors_with_suggestions",
          "register_step_with_validation",
          "create_validation_report",
          "get_performance_metrics",
          "reset_performance_metrics",
          "get_validation_status"
        ],
        "registry/hyperparameter_registry.py": [
          "get_all_hyperparameter_classes",
          "get_hyperparameter_class_by_model_type",
          "get_module_path",
          "get_all_hyperparameter_info",
          "validate_hyperparameter_class"
        ],
        "registry/exceptions.py": [
          "RegistryError.__init__",
          "__init__",
          "RegistryError.__str__",
          "__str__",
          "RegistryLoadError.__init__",
          "__init__",
          "RegistryLoadError.__str__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__"
        ],
        "registry/step_names.py": [
          "set_workspace_context",
          "get_workspace_context",
          "clear_workspace_context",
          "workspace_context",
          "_get_registry_manager",
          "_create_fallback_manager",
          "get_step_names",
          "STEP_NAMES",
          "get_config_step_registry",
          "get_builder_step_names",
          "get_spec_step_types",
          "get_config_class_name",
          "get_builder_step_name",
          "get_spec_step_type",
          "get_spec_step_type_with_job_type",
          "get_step_name_from_spec_type",
          "get_all_step_names",
          "validate_step_name",
          "validate_spec_type",
          "get_step_description",
          "list_all_step_info",
          "get_sagemaker_step_type",
          "get_steps_by_sagemaker_type",
          "get_all_sagemaker_step_types",
          "validate_sagemaker_step_type",
          "get_sagemaker_step_type_mapping",
          "get_canonical_name_from_file_name",
          "_calculate_name_similarity",
          "validate_file_name",
          "list_available_workspaces",
          "get_workspace_step_count",
          "has_workspace_conflicts",
          "_refresh_module_variables",
          "_set_workspace_context_with_refresh",
          "set_workspace_context",
          "add_new_step_with_validation",
          "validate_step_definition_data",
          "get_step_validation_suggestions",
          "auto_correct_step_data",
          "check_step_name_compliance",
          "get_validation_status",
          "FallbackManager.__init__",
          "__init__",
          "FallbackManager.create_legacy_step_names_dict",
          "create_legacy_step_names_dict",
          "FallbackManager.get_step_definition",
          "get_step_definition",
          "FallbackManager.has_step",
          "has_step",
          "FallbackManager.list_steps",
          "list_steps",
          "__init__",
          "create_legacy_step_names_dict",
          "get_step_definition",
          "has_step",
          "list_steps"
        ],
        "registry/step_type_test_variants.py": [
          "register_step_type_variant",
          "get_step_type_variant",
          "get_step_type_requirements",
          "get_all_step_types",
          "validate_step_type",
          "get_step_type_examples",
          "is_custom_step",
          "get_custom_step_test_level",
          "detect_framework_from_processor",
          "get_test_pattern_for_builder",
          "should_run_advanced_tests",
          "get_reference_examples_for_pattern",
          "_register_default_variants"
        ],
        "registry/hybrid/models.py": [
          "StepDefinition.validate_identifiers",
          "validate_identifiers",
          "StepDefinition.step_name",
          "step_name",
          "StepDefinition.to_legacy_format",
          "to_legacy_format",
          "StepResolutionResult.get_resolution_summary",
          "get_resolution_summary",
          "RegistryValidationResult.get_validation_summary",
          "get_validation_summary",
          "ConflictAnalysis.get_conflict_summary",
          "get_conflict_summary",
          "validate_identifiers",
          "step_name",
          "to_legacy_format",
          "get_resolution_summary",
          "get_validation_summary",
          "get_conflict_summary"
        ],
        "registry/hybrid/setup.py": [
          "create_workspace_registry",
          "_get_registry_template",
          "_get_standard_template",
          "_get_minimal_template",
          "create_workspace_structure",
          "create_workspace_documentation",
          "create_example_implementations",
          "validate_workspace_setup",
          "copy_registry_from_developer"
        ],
        "registry/hybrid/utils.py": [
          "load_registry_module",
          "get_step_names_from_module",
          "from_legacy_format",
          "to_legacy_format",
          "convert_registry_dict",
          "validate_registry_type",
          "validate_step_name",
          "validate_workspace_id",
          "validate_registry_data",
          "format_registry_error",
          "format_step_not_found_error",
          "format_registry_load_error",
          "format_validation_error"
        ],
        "registry/hybrid/manager.py": [
          "UnifiedRegistryManager.__init__",
          "__init__",
          "UnifiedRegistryManager._find_package_root",
          "_find_package_root",
          "UnifiedRegistryManager._load_core_registry",
          "_load_core_registry",
          "UnifiedRegistryManager._discover_and_load_workspaces",
          "_discover_and_load_workspaces",
          "UnifiedRegistryManager._load_workspace_registry",
          "_load_workspace_registry",
          "UnifiedRegistryManager.get_step_definition",
          "get_step_definition",
          "UnifiedRegistryManager._get_cached_definitions",
          "_get_cached_definitions",
          "UnifiedRegistryManager.get_all_step_definitions",
          "get_all_step_definitions",
          "UnifiedRegistryManager.get_local_only_definitions",
          "get_local_only_definitions",
          "UnifiedRegistryManager.get_step",
          "get_step",
          "UnifiedRegistryManager.list_steps",
          "list_steps",
          "UnifiedRegistryManager.list_all_steps",
          "list_all_steps",
          "UnifiedRegistryManager.has_step",
          "has_step",
          "UnifiedRegistryManager.get_step_count",
          "get_step_count",
          "UnifiedRegistryManager.add_workspace_registry",
          "add_workspace_registry",
          "UnifiedRegistryManager.remove_workspace_registry",
          "remove_workspace_registry",
          "UnifiedRegistryManager.get_step_conflicts",
          "get_step_conflicts",
          "UnifiedRegistryManager.get_registry_status",
          "get_registry_status",
          "UnifiedRegistryManager._get_cached_legacy_dict",
          "_get_cached_legacy_dict",
          "UnifiedRegistryManager.create_legacy_step_names_dict",
          "create_legacy_step_names_dict",
          "UnifiedRegistryManager._invalidate_cache",
          "_invalidate_cache",
          "UnifiedRegistryManager._invalidate_all_caches",
          "_invalidate_all_caches",
          "UnifiedRegistryManager.resolution_context",
          "resolution_context",
          "UnifiedRegistryManager.get_component_cache",
          "get_component_cache",
          "UnifiedRegistryManager.set_component_cache",
          "set_component_cache",
          "UnifiedRegistryManager.clear_component_cache",
          "clear_component_cache",
          "UnifiedRegistryManager.get_builder_class_cache",
          "get_builder_class_cache",
          "UnifiedRegistryManager.set_builder_class_cache",
          "set_builder_class_cache",
          "UnifiedRegistryManager.clear_builder_class_cache",
          "clear_builder_class_cache",
          "UnifiedRegistryManager.set_workspace_context",
          "set_workspace_context",
          "UnifiedRegistryManager.get_workspace_context",
          "get_workspace_context",
          "UnifiedRegistryManager.clear_workspace_context",
          "clear_workspace_context",
          "__init__",
          "_find_package_root",
          "_load_core_registry",
          "_discover_and_load_workspaces",
          "_load_workspace_registry",
          "get_step_definition",
          "_get_cached_definitions",
          "get_all_step_definitions",
          "get_local_only_definitions",
          "get_step",
          "list_steps",
          "list_all_steps",
          "has_step",
          "get_step_count",
          "add_workspace_registry",
          "remove_workspace_registry",
          "get_step_conflicts",
          "get_registry_status",
          "_get_cached_legacy_dict",
          "create_legacy_step_names_dict",
          "_invalidate_cache",
          "_invalidate_all_caches",
          "resolution_context",
          "get_component_cache",
          "set_component_cache",
          "clear_component_cache",
          "get_builder_class_cache",
          "set_builder_class_cache",
          "clear_builder_class_cache",
          "set_workspace_context",
          "get_workspace_context",
          "clear_workspace_context"
        ]
      },
      "test_functions_by_file": {
        "registry/test_validation_utils.py": [
          "TestValidateNewStepDefinition.test_valid_step_definition",
          "test_valid_step_definition",
          "TestValidateNewStepDefinition.test_missing_step_name",
          "test_missing_step_name",
          "TestValidateNewStepDefinition.test_invalid_step_name_format",
          "test_invalid_step_name_format",
          "TestValidateNewStepDefinition.test_invalid_config_class_name",
          "test_invalid_config_class_name",
          "TestValidateNewStepDefinition.test_invalid_builder_name",
          "test_invalid_builder_name",
          "TestValidateNewStepDefinition.test_invalid_sagemaker_step_type",
          "test_invalid_sagemaker_step_type",
          "TestValidateNewStepDefinition.test_multiple_validation_errors",
          "test_multiple_validation_errors",
          "TestValidateNewStepDefinition.test_optional_fields_validation",
          "test_optional_fields_validation",
          "TestAutoCorrectStepDefinition.test_auto_correct_step_name",
          "test_auto_correct_step_name",
          "TestAutoCorrectStepDefinition.test_auto_correct_config_class",
          "test_auto_correct_config_class",
          "TestAutoCorrectStepDefinition.test_auto_correct_builder_name",
          "test_auto_correct_builder_name",
          "TestAutoCorrectStepDefinition.test_auto_correct_multiple_fields",
          "test_auto_correct_multiple_fields",
          "TestAutoCorrectStepDefinition.test_auto_correct_preserves_valid_fields",
          "test_auto_correct_preserves_valid_fields",
          "TestToPascalCase.test_snake_case_conversion",
          "test_snake_case_conversion",
          "TestToPascalCase.test_kebab_case_conversion",
          "test_kebab_case_conversion",
          "TestToPascalCase.test_space_separated_conversion",
          "test_space_separated_conversion",
          "TestToPascalCase.test_mixed_separators",
          "test_mixed_separators",
          "TestToPascalCase.test_edge_cases",
          "test_edge_cases",
          "TestGetValidationErrorsWithSuggestions.test_no_errors_returns_empty_list",
          "test_no_errors_returns_empty_list",
          "TestGetValidationErrorsWithSuggestions.test_detailed_error_messages",
          "test_detailed_error_messages",
          "TestGetValidationErrorsWithSuggestions.test_pascal_case_examples",
          "test_pascal_case_examples",
          "TestGetValidationErrorsWithSuggestions.test_config_class_examples",
          "test_config_class_examples",
          "TestGetValidationErrorsWithSuggestions.test_builder_name_examples",
          "test_builder_name_examples",
          "TestRegisterStepWithValidation.test_register_valid_step_warn_mode",
          "test_register_valid_step_warn_mode",
          "TestRegisterStepWithValidation.test_register_duplicate_step_warn_mode",
          "test_register_duplicate_step_warn_mode",
          "TestRegisterStepWithValidation.test_register_duplicate_step_strict_mode",
          "test_register_duplicate_step_strict_mode",
          "TestRegisterStepWithValidation.test_register_invalid_step_strict_mode",
          "test_register_invalid_step_strict_mode",
          "TestRegisterStepWithValidation.test_register_invalid_step_auto_correct_mode",
          "test_register_invalid_step_auto_correct_mode",
          "TestRegisterStepWithValidation.test_register_invalid_step_warn_mode",
          "test_register_invalid_step_warn_mode",
          "TestValidationPatterns.test_pascal_case_pattern",
          "test_pascal_case_pattern",
          "TestValidationPatterns.test_valid_sagemaker_types",
          "test_valid_sagemaker_types",
          "test_valid_step_definition",
          "test_missing_step_name",
          "test_invalid_step_name_format",
          "test_invalid_config_class_name",
          "test_invalid_builder_name",
          "test_invalid_sagemaker_step_type",
          "test_multiple_validation_errors",
          "test_optional_fields_validation",
          "test_auto_correct_step_name",
          "test_auto_correct_config_class",
          "test_auto_correct_builder_name",
          "test_auto_correct_multiple_fields",
          "test_auto_correct_preserves_valid_fields",
          "test_snake_case_conversion",
          "test_kebab_case_conversion",
          "test_space_separated_conversion",
          "test_mixed_separators",
          "test_edge_cases",
          "test_no_errors_returns_empty_list",
          "test_detailed_error_messages",
          "test_pascal_case_examples",
          "test_config_class_examples",
          "test_builder_name_examples",
          "test_register_valid_step_warn_mode",
          "test_register_duplicate_step_warn_mode",
          "test_register_duplicate_step_strict_mode",
          "test_register_invalid_step_strict_mode",
          "test_register_invalid_step_auto_correct_mode",
          "test_register_invalid_step_warn_mode",
          "test_pascal_case_pattern",
          "test_valid_sagemaker_types"
        ],
        "registry/test_validation_utils_extended.py": [
          "TestCreateValidationReport.test_valid_step_report",
          "test_valid_step_report",
          "TestCreateValidationReport.test_invalid_step_report",
          "test_invalid_step_report",
          "TestCreateValidationReport.test_report_suggested_corrections",
          "test_report_suggested_corrections",
          "TestCreateValidationReport.test_report_partial_corrections",
          "test_report_partial_corrections",
          "TestCreateValidationReport.test_report_with_different_validation_modes",
          "test_report_with_different_validation_modes",
          "TestPerformanceMetrics.setup_method",
          "setup_method",
          "TestPerformanceMetrics.test_initial_performance_metrics",
          "test_initial_performance_metrics",
          "TestPerformanceMetrics.test_performance_tracking_after_validation",
          "test_performance_tracking_after_validation",
          "TestPerformanceMetrics.test_performance_tracking_multiple_validations",
          "test_performance_tracking_multiple_validations",
          "TestPerformanceMetrics.test_cache_performance_tracking",
          "test_cache_performance_tracking",
          "TestPerformanceMetrics.test_reset_performance_metrics",
          "test_reset_performance_metrics",
          "TestPerformanceMetrics.test_performance_target_assessment",
          "test_performance_target_assessment",
          "TestPerformanceMetrics.test_performance_warning_logging",
          "test_performance_warning_logging",
          "TestGetValidationStatus.test_validation_status_structure",
          "test_validation_status_structure",
          "TestGetValidationStatus.test_validation_functions_list",
          "test_validation_functions_list",
          "TestGetValidationStatus.test_supported_modes_list",
          "test_supported_modes_list",
          "TestGetValidationStatus.test_current_performance_integration",
          "test_current_performance_integration",
          "TestGetValidationStatus.test_implementation_details",
          "test_implementation_details",
          "TestEdgeCasesAndErrorHandling.test_empty_step_data_validation",
          "test_empty_step_data_validation",
          "TestEdgeCasesAndErrorHandling.test_none_values_in_step_data",
          "test_none_values_in_step_data",
          "TestEdgeCasesAndErrorHandling.test_auto_correction_with_empty_values",
          "test_auto_correction_with_empty_values",
          "TestEdgeCasesAndErrorHandling.test_pascal_case_with_special_characters",
          "test_pascal_case_with_special_characters",
          "TestEdgeCasesAndErrorHandling.test_very_long_step_names",
          "test_very_long_step_names",
          "TestEdgeCasesAndErrorHandling.test_unicode_characters_in_names",
          "test_unicode_characters_in_names",
          "TestEdgeCasesAndErrorHandling.test_concurrent_validation_calls",
          "test_concurrent_validation_calls",
          "TestIntegrationScenarios.test_typical_step_creation_workflow",
          "test_typical_step_creation_workflow",
          "TestIntegrationScenarios.test_batch_validation_scenario",
          "test_batch_validation_scenario",
          "TestIntegrationScenarios.test_performance_monitoring_scenario",
          "test_performance_monitoring_scenario",
          "TestIntegrationScenarios.test_error_recovery_scenario",
          "test_error_recovery_scenario",
          "test_valid_step_report",
          "test_invalid_step_report",
          "test_report_suggested_corrections",
          "test_report_partial_corrections",
          "test_report_with_different_validation_modes",
          "setup_method",
          "test_initial_performance_metrics",
          "test_performance_tracking_after_validation",
          "test_performance_tracking_multiple_validations",
          "test_cache_performance_tracking",
          "test_reset_performance_metrics",
          "test_performance_target_assessment",
          "test_performance_warning_logging",
          "test_validation_status_structure",
          "test_validation_functions_list",
          "test_supported_modes_list",
          "test_current_performance_integration",
          "test_implementation_details",
          "test_empty_step_data_validation",
          "test_none_values_in_step_data",
          "test_auto_correction_with_empty_values",
          "test_pascal_case_with_special_characters",
          "test_very_long_step_names",
          "test_unicode_characters_in_names",
          "test_concurrent_validation_calls",
          "test_typical_step_creation_workflow",
          "test_batch_validation_scenario",
          "test_performance_monitoring_scenario",
          "test_error_recovery_scenario",
          "validate_step"
        ],
        "registry/test_step_names.py": [
          "TestStepNames.test_step_names_structure",
          "test_step_names_structure",
          "TestStepNames.test_generated_registries",
          "test_generated_registries",
          "TestStepNames.test_get_config_class_name",
          "test_get_config_class_name",
          "TestStepNames.test_get_builder_step_name",
          "test_get_builder_step_name",
          "TestStepNames.test_get_spec_step_type",
          "test_get_spec_step_type",
          "TestStepNames.test_get_spec_step_type_with_job_type",
          "test_get_spec_step_type_with_job_type",
          "TestStepNames.test_get_step_name_from_spec_type",
          "test_get_step_name_from_spec_type",
          "TestStepNames.test_get_all_step_names",
          "test_get_all_step_names",
          "TestStepNames.test_validate_step_name",
          "test_validate_step_name",
          "TestStepNames.test_validate_spec_type",
          "test_validate_spec_type",
          "TestStepNames.test_get_step_description",
          "test_get_step_description",
          "TestStepNames.test_list_all_step_info",
          "test_list_all_step_info",
          "TestStepNames.test_registry_contains_expected_steps",
          "test_registry_contains_expected_steps",
          "TestStepNames.test_config_class_uniqueness",
          "test_config_class_uniqueness",
          "TestStepNames.test_spec_type_uniqueness",
          "test_spec_type_uniqueness",
          "TestStepNames.test_descriptions_are_present",
          "test_descriptions_are_present",
          "TestStepNames.test_job_type_capitalization",
          "test_job_type_capitalization",
          "TestStepNames.test_get_canonical_name_from_file_name",
          "test_get_canonical_name_from_file_name",
          "TestStepNames.test_get_canonical_name_from_file_name_with_job_types",
          "test_get_canonical_name_from_file_name_with_job_types",
          "TestStepNames.test_get_canonical_name_from_file_name_abbreviations",
          "test_get_canonical_name_from_file_name_abbreviations",
          "TestStepNames.test_get_canonical_name_from_file_name_invalid",
          "test_get_canonical_name_from_file_name_invalid",
          "TestStepNames.test_validate_file_name",
          "test_validate_file_name",
          "TestStepNames.test_xgboost_model_evaluation_registry_integration",
          "test_xgboost_model_evaluation_registry_integration",
          "TestWorkspaceContextManagement.setup_method",
          "setup_method",
          "TestWorkspaceContextManagement.teardown_method",
          "teardown_method",
          "TestWorkspaceContextManagement.test_workspace_context_basic_operations",
          "test_workspace_context_basic_operations",
          "TestWorkspaceContextManagement.test_workspace_context_environment_variable",
          "test_workspace_context_environment_variable",
          "TestWorkspaceContextManagement.test_workspace_context_manager",
          "test_workspace_context_manager",
          "TestWorkspaceContextManagement.test_workspace_aware_functions",
          "test_workspace_aware_functions",
          "TestWorkspaceContextManagement.test_workspace_aware_helper_functions",
          "test_workspace_aware_helper_functions",
          "TestRegistryManagerAndFallback.setup_method",
          "setup_method",
          "TestRegistryManagerAndFallback.teardown_method",
          "teardown_method",
          "TestRegistryManagerAndFallback.test_registry_manager_initialization",
          "test_registry_manager_initialization",
          "TestRegistryManagerAndFallback.test_fallback_manager_creation",
          "test_fallback_manager_creation",
          "TestRegistryManagerAndFallback.test_hybrid_registry_fallback_behavior",
          "test_hybrid_registry_fallback_behavior",
          "TestRegistryManagerAndFallback.test_workspace_management_functions",
          "test_workspace_management_functions",
          "TestBackwardCompatibility.setup_method",
          "setup_method",
          "TestBackwardCompatibility.teardown_method",
          "teardown_method",
          "TestBackwardCompatibility.test_module_level_variables_exist",
          "test_module_level_variables_exist",
          "TestBackwardCompatibility.test_original_function_signatures",
          "test_original_function_signatures",
          "TestBackwardCompatibility.test_error_messages_consistency",
          "test_error_messages_consistency",
          "TestBackwardCompatibility.test_data_structure_consistency",
          "test_data_structure_consistency",
          "TestEnhancedFunctionality.setup_method",
          "setup_method",
          "TestEnhancedFunctionality.teardown_method",
          "teardown_method",
          "TestEnhancedFunctionality.test_enhanced_file_name_resolution",
          "test_enhanced_file_name_resolution",
          "TestEnhancedFunctionality.test_workspace_aware_error_messages",
          "test_workspace_aware_error_messages",
          "TestEnhancedFunctionality.test_environment_variable_integration",
          "test_environment_variable_integration",
          "test_step_names_structure",
          "test_generated_registries",
          "test_get_config_class_name",
          "test_get_builder_step_name",
          "test_get_spec_step_type",
          "test_get_spec_step_type_with_job_type",
          "test_get_step_name_from_spec_type",
          "test_get_all_step_names",
          "test_validate_step_name",
          "test_validate_spec_type",
          "test_get_step_description",
          "test_list_all_step_info",
          "test_registry_contains_expected_steps",
          "test_config_class_uniqueness",
          "test_spec_type_uniqueness",
          "test_descriptions_are_present",
          "test_job_type_capitalization",
          "test_get_canonical_name_from_file_name",
          "test_get_canonical_name_from_file_name_with_job_types",
          "test_get_canonical_name_from_file_name_abbreviations",
          "test_get_canonical_name_from_file_name_invalid",
          "test_validate_file_name",
          "test_xgboost_model_evaluation_registry_integration",
          "setup_method",
          "teardown_method",
          "test_workspace_context_basic_operations",
          "test_workspace_context_environment_variable",
          "test_workspace_context_manager",
          "test_workspace_aware_functions",
          "test_workspace_aware_helper_functions",
          "setup_method",
          "teardown_method",
          "test_registry_manager_initialization",
          "test_fallback_manager_creation",
          "test_hybrid_registry_fallback_behavior",
          "test_workspace_management_functions",
          "setup_method",
          "teardown_method",
          "test_module_level_variables_exist",
          "test_original_function_signatures",
          "test_error_messages_consistency",
          "test_data_structure_consistency",
          "setup_method",
          "teardown_method",
          "test_enhanced_file_name_resolution",
          "test_workspace_aware_error_messages",
          "test_environment_variable_integration"
        ],
        "registry/test_exceptions.py": [
          "TestRegistryExceptions.test_registry_error_basic",
          "test_registry_error_basic",
          "TestRegistryExceptions.test_registry_error_with_unresolvable_types",
          "test_registry_error_with_unresolvable_types",
          "TestRegistryExceptions.test_registry_error_with_available_builders",
          "test_registry_error_with_available_builders",
          "TestRegistryExceptions.test_registry_error_with_both_parameters",
          "test_registry_error_with_both_parameters",
          "TestRegistryExceptions.test_registry_error_inheritance",
          "test_registry_error_inheritance",
          "TestRegistryExceptions.test_registry_error_empty_lists",
          "test_registry_error_empty_lists",
          "test_registry_error_basic",
          "test_registry_error_with_unresolvable_types",
          "test_registry_error_with_available_builders",
          "test_registry_error_with_both_parameters",
          "test_registry_error_inheritance",
          "test_registry_error_empty_lists"
        ],
        "registry/test_hyperparameter_registry.py": [
          "TestHyperparameterRegistry.test_hyperparameter_registry_structure",
          "test_hyperparameter_registry_structure",
          "TestHyperparameterRegistry.test_get_all_hyperparameter_classes",
          "test_get_all_hyperparameter_classes",
          "TestHyperparameterRegistry.test_get_hyperparameter_class_by_model_type",
          "test_get_hyperparameter_class_by_model_type",
          "TestHyperparameterRegistry.test_get_module_path",
          "test_get_module_path",
          "TestHyperparameterRegistry.test_get_all_hyperparameter_info",
          "test_get_all_hyperparameter_info",
          "TestHyperparameterRegistry.test_validate_hyperparameter_class",
          "test_validate_hyperparameter_class",
          "TestHyperparameterRegistry.test_registry_contains_expected_classes",
          "test_registry_contains_expected_classes",
          "TestHyperparameterRegistry.test_model_type_mappings",
          "test_model_type_mappings",
          "TestHyperparameterRegistry.test_module_paths_are_valid_format",
          "test_module_paths_are_valid_format",
          "TestHyperparameterRegistry.test_descriptions_are_present",
          "test_descriptions_are_present",
          "test_hyperparameter_registry_structure",
          "test_get_all_hyperparameter_classes",
          "test_get_hyperparameter_class_by_model_type",
          "test_get_module_path",
          "test_get_all_hyperparameter_info",
          "test_validate_hyperparameter_class",
          "test_registry_contains_expected_classes",
          "test_model_type_mappings",
          "test_module_paths_are_valid_format",
          "test_descriptions_are_present"
        ],
        "registry/hybrid/test_utils.py": [
          "TestRegistryLoading.test_load_registry_module_success",
          "test_load_registry_module_success",
          "TestRegistryLoading.test_load_registry_module_file_not_found",
          "test_load_registry_module_file_not_found",
          "TestRegistryLoading.test_load_registry_module_invalid_python",
          "test_load_registry_module_invalid_python",
          "TestRegistryLoading.test_get_step_names_from_module",
          "test_get_step_names_from_module",
          "TestRegistryLoading.test_get_step_names_from_module_missing",
          "test_get_step_names_from_module_missing",
          "TestStepDefinitionConversion.setUp",
          "setUp",
          "TestStepDefinitionConversion.test_from_legacy_format_basic",
          "test_from_legacy_format_basic",
          "TestStepDefinitionConversion.test_from_legacy_format_workspace",
          "test_from_legacy_format_workspace",
          "TestStepDefinitionConversion.test_to_legacy_format",
          "test_to_legacy_format",
          "TestStepDefinitionConversion.test_to_legacy_format_with_metadata",
          "test_to_legacy_format_with_metadata",
          "TestStepDefinitionConversion.test_convert_registry_dict",
          "test_convert_registry_dict",
          "TestValidationFunctions.test_validate_registry_type_valid",
          "test_validate_registry_type_valid",
          "TestValidationFunctions.test_validate_registry_type_invalid",
          "test_validate_registry_type_invalid",
          "TestValidationFunctions.test_validate_step_name_valid",
          "test_validate_step_name_valid",
          "TestValidationFunctions.test_validate_step_name_empty",
          "test_validate_step_name_empty",
          "TestValidationFunctions.test_validate_step_name_invalid_characters",
          "test_validate_step_name_invalid_characters",
          "TestValidationFunctions.test_validate_workspace_id_valid",
          "test_validate_workspace_id_valid",
          "TestValidationFunctions.test_validate_workspace_id_none",
          "test_validate_workspace_id_none",
          "TestValidationFunctions.test_validate_workspace_id_invalid",
          "test_validate_workspace_id_invalid",
          "TestValidationFunctions.test_validate_registry_data_success",
          "test_validate_registry_data_success",
          "TestValidationFunctions.test_validate_registry_data_with_workspace",
          "test_validate_registry_data_with_workspace",
          "TestValidationFunctions.test_validate_registry_data_invalid_type",
          "test_validate_registry_data_invalid_type",
          "TestValidationFunctions.test_validate_registry_data_invalid_step_name",
          "test_validate_registry_data_invalid_step_name",
          "TestErrorFormatting.test_format_registry_error_step_not_found",
          "test_format_registry_error_step_not_found",
          "TestErrorFormatting.test_format_registry_error_registry_load",
          "test_format_registry_error_registry_load",
          "TestErrorFormatting.test_format_registry_error_validation",
          "test_format_registry_error_validation",
          "TestErrorFormatting.test_format_step_not_found_error",
          "test_format_step_not_found_error",
          "TestErrorFormatting.test_format_registry_load_error",
          "test_format_registry_load_error",
          "TestErrorFormatting.test_format_validation_error",
          "test_format_validation_error",
          "TestErrorFormatting.test_format_registry_error_unknown_type",
          "test_format_registry_error_unknown_type",
          "TestRegistryLoadError.test_registry_load_error_creation",
          "test_registry_load_error_creation",
          "TestRegistryLoadError.test_registry_load_error_inheritance",
          "test_registry_load_error_inheritance",
          "test_load_registry_module_success",
          "test_load_registry_module_file_not_found",
          "test_load_registry_module_invalid_python",
          "test_get_step_names_from_module",
          "test_get_step_names_from_module_missing",
          "setUp",
          "test_from_legacy_format_basic",
          "test_from_legacy_format_workspace",
          "test_to_legacy_format",
          "test_to_legacy_format_with_metadata",
          "test_convert_registry_dict",
          "test_validate_registry_type_valid",
          "test_validate_registry_type_invalid",
          "test_validate_step_name_valid",
          "test_validate_step_name_empty",
          "test_validate_step_name_invalid_characters",
          "test_validate_workspace_id_valid",
          "test_validate_workspace_id_none",
          "test_validate_workspace_id_invalid",
          "test_validate_registry_data_success",
          "test_validate_registry_data_with_workspace",
          "test_validate_registry_data_invalid_type",
          "test_validate_registry_data_invalid_step_name",
          "test_format_registry_error_step_not_found",
          "test_format_registry_error_registry_load",
          "test_format_registry_error_validation",
          "test_format_step_not_found_error",
          "test_format_registry_load_error",
          "test_format_validation_error",
          "test_format_registry_error_unknown_type",
          "test_registry_load_error_creation",
          "test_registry_load_error_inheritance"
        ],
        "registry/hybrid/test_setup.py": [
          "TestWorkspaceRegistryCreation.setUp",
          "setUp",
          "TestWorkspaceRegistryCreation.tearDown",
          "tearDown",
          "TestWorkspaceRegistryCreation.test_create_workspace_registry_standard",
          "test_create_workspace_registry_standard",
          "TestWorkspaceRegistryCreation.test_create_workspace_registry_minimal",
          "test_create_workspace_registry_minimal",
          "TestWorkspaceRegistryCreation.test_create_workspace_registry_invalid_developer_id",
          "test_create_workspace_registry_invalid_developer_id",
          "TestWorkspaceRegistryCreation.test_create_workspace_registry_valid_developer_ids",
          "test_create_workspace_registry_valid_developer_ids",
          "TestRegistryTemplates.test_get_registry_template_standard",
          "test_get_registry_template_standard",
          "TestRegistryTemplates.test_get_registry_template_minimal",
          "test_get_registry_template_minimal",
          "TestRegistryTemplates.test_get_standard_template",
          "test_get_standard_template",
          "TestRegistryTemplates.test_get_minimal_template",
          "test_get_minimal_template",
          "TestWorkspaceStructure.setUp",
          "setUp",
          "TestWorkspaceStructure.tearDown",
          "tearDown",
          "TestWorkspaceStructure.test_create_workspace_structure",
          "test_create_workspace_structure",
          "TestWorkspaceDocumentation.setUp",
          "setUp",
          "TestWorkspaceDocumentation.tearDown",
          "tearDown",
          "TestWorkspaceDocumentation.test_create_workspace_documentation",
          "test_create_workspace_documentation",
          "TestExampleImplementations.setUp",
          "setUp",
          "TestExampleImplementations.tearDown",
          "tearDown",
          "TestExampleImplementations.test_create_example_implementations",
          "test_create_example_implementations",
          "TestWorkspaceValidation.setUp",
          "setUp",
          "TestWorkspaceValidation.tearDown",
          "tearDown",
          "TestWorkspaceValidation.test_validate_workspace_setup_success",
          "test_validate_workspace_setup_success",
          "TestWorkspaceValidation.test_validate_workspace_setup_missing_directory",
          "test_validate_workspace_setup_missing_directory",
          "TestWorkspaceValidation.test_validate_workspace_setup_missing_registry",
          "test_validate_workspace_setup_missing_registry",
          "TestWorkspaceValidation.test_validate_workspace_setup_invalid_registry",
          "test_validate_workspace_setup_invalid_registry",
          "TestRegistryCopying.setUp",
          "setUp",
          "TestRegistryCopying.tearDown",
          "tearDown",
          "TestRegistryCopying.test_copy_registry_from_developer_success",
          "test_copy_registry_from_developer_success",
          "TestRegistryCopying.test_copy_registry_from_developer_source_not_found",
          "test_copy_registry_from_developer_source_not_found",
          "TestRegistryCopying.test_copy_registry_from_developer_read_error",
          "test_copy_registry_from_developer_read_error",
          "setUp",
          "tearDown",
          "test_create_workspace_registry_standard",
          "test_create_workspace_registry_minimal",
          "test_create_workspace_registry_invalid_developer_id",
          "test_create_workspace_registry_valid_developer_ids",
          "test_get_registry_template_standard",
          "test_get_registry_template_minimal",
          "test_get_standard_template",
          "test_get_minimal_template",
          "setUp",
          "tearDown",
          "test_create_workspace_structure",
          "setUp",
          "tearDown",
          "test_create_workspace_documentation",
          "setUp",
          "tearDown",
          "test_create_example_implementations",
          "setUp",
          "tearDown",
          "test_validate_workspace_setup_success",
          "test_validate_workspace_setup_missing_directory",
          "test_validate_workspace_setup_missing_registry",
          "test_validate_workspace_setup_invalid_registry",
          "setUp",
          "tearDown",
          "test_copy_registry_from_developer_success",
          "test_copy_registry_from_developer_source_not_found",
          "test_copy_registry_from_developer_read_error"
        ],
        "registry/hybrid/test_models.py": [
          "TestStepDefinition.test_step_definition_creation_minimal",
          "test_step_definition_creation_minimal",
          "TestStepDefinition.test_step_definition_creation_full",
          "test_step_definition_creation_full",
          "TestStepDefinition.test_step_definition_validation_empty_name",
          "test_step_definition_validation_empty_name",
          "TestStepDefinition.test_step_definition_validation_invalid_registry_type",
          "test_step_definition_validation_invalid_registry_type",
          "TestStepDefinition.test_step_definition_to_legacy_format",
          "test_step_definition_to_legacy_format",
          "TestStepDefinition.test_step_definition_string_stripping",
          "test_step_definition_string_stripping",
          "TestRegistryType.test_registry_type_values",
          "test_registry_type_values",
          "TestResolutionMode.test_resolution_mode_values",
          "test_resolution_mode_values",
          "TestResolutionStrategy.test_resolution_strategy_values",
          "test_resolution_strategy_values",
          "TestConflictType.test_conflict_type_values",
          "test_conflict_type_values",
          "TestResolutionContext.test_resolution_context_creation_minimal",
          "test_resolution_context_creation_minimal",
          "TestResolutionContext.test_resolution_context_creation_full",
          "test_resolution_context_creation_full",
          "TestResolutionContext.test_resolution_context_validation_invalid_mode",
          "test_resolution_context_validation_invalid_mode",
          "TestResolutionContext.test_resolution_context_validation_valid_modes",
          "test_resolution_context_validation_valid_modes",
          "TestStepResolutionResult.test_step_resolution_result_success",
          "test_step_resolution_result_success",
          "TestStepResolutionResult.test_step_resolution_result_failure",
          "test_step_resolution_result_failure",
          "TestStepResolutionResult.test_step_resolution_result_with_conflicts",
          "test_step_resolution_result_with_conflicts",
          "TestRegistryValidationResult.test_registry_validation_result_success",
          "test_registry_validation_result_success",
          "TestRegistryValidationResult.test_registry_validation_result_with_issues",
          "test_registry_validation_result_with_issues",
          "TestConflictAnalysis.test_conflict_analysis_creation",
          "test_conflict_analysis_creation",
          "TestModelValidation.test_step_definition_extra_fields_forbidden",
          "test_step_definition_extra_fields_forbidden",
          "TestModelValidation.test_resolution_context_extra_fields_forbidden",
          "test_resolution_context_extra_fields_forbidden",
          "TestModelValidation.test_step_resolution_result_required_fields",
          "test_step_resolution_result_required_fields",
          "TestModelValidation.test_registry_validation_result_field_validation",
          "test_registry_validation_result_field_validation",
          "TestModelSerialization.test_step_definition_serialization",
          "test_step_definition_serialization",
          "TestModelSerialization.test_step_definition_deserialization",
          "test_step_definition_deserialization",
          "TestModelSerialization.test_resolution_context_json_serialization",
          "test_resolution_context_json_serialization",
          "TestModelSerialization.test_step_resolution_result_json_deserialization",
          "test_step_resolution_result_json_deserialization",
          "TestModelEquality.test_step_definition_equality",
          "test_step_definition_equality",
          "TestModelEquality.test_step_definition_inequality",
          "test_step_definition_inequality",
          "TestModelEquality.test_resolution_context_equality",
          "test_resolution_context_equality",
          "test_step_definition_creation_minimal",
          "test_step_definition_creation_full",
          "test_step_definition_validation_empty_name",
          "test_step_definition_validation_invalid_registry_type",
          "test_step_definition_to_legacy_format",
          "test_step_definition_string_stripping",
          "test_registry_type_values",
          "test_resolution_mode_values",
          "test_resolution_strategy_values",
          "test_conflict_type_values",
          "test_resolution_context_creation_minimal",
          "test_resolution_context_creation_full",
          "test_resolution_context_validation_invalid_mode",
          "test_resolution_context_validation_valid_modes",
          "test_step_resolution_result_success",
          "test_step_resolution_result_failure",
          "test_step_resolution_result_with_conflicts",
          "test_registry_validation_result_success",
          "test_registry_validation_result_with_issues",
          "test_conflict_analysis_creation",
          "test_step_definition_extra_fields_forbidden",
          "test_resolution_context_extra_fields_forbidden",
          "test_step_resolution_result_required_fields",
          "test_registry_validation_result_field_validation",
          "test_step_definition_serialization",
          "test_step_definition_deserialization",
          "test_resolution_context_json_serialization",
          "test_step_resolution_result_json_deserialization",
          "test_step_definition_equality",
          "test_step_definition_inequality",
          "test_resolution_context_equality"
        ],
        "registry/hybrid/test_manager.py": [
          "TestUnifiedRegistryManager.setUp",
          "setUp",
          "TestUnifiedRegistryManager.test_unified_registry_manager_initialization",
          "test_unified_registry_manager_initialization",
          "TestUnifiedRegistryManager.test_get_step_definition",
          "test_get_step_definition",
          "TestUnifiedRegistryManager.test_get_step_definition_nonexistent",
          "test_get_step_definition_nonexistent",
          "TestUnifiedRegistryManager.test_get_all_step_definitions",
          "test_get_all_step_definitions",
          "TestUnifiedRegistryManager.test_get_all_step_definitions_with_workspace",
          "test_get_all_step_definitions_with_workspace",
          "TestUnifiedRegistryManager.test_create_legacy_step_names_dict",
          "test_create_legacy_step_names_dict",
          "TestUnifiedRegistryManager.test_create_legacy_step_names_dict_with_workspace",
          "test_create_legacy_step_names_dict_with_workspace",
          "TestUnifiedRegistryManager.test_has_step",
          "test_has_step",
          "TestUnifiedRegistryManager.test_has_step_with_workspace",
          "test_has_step_with_workspace",
          "TestUnifiedRegistryManager.test_list_steps",
          "test_list_steps",
          "TestUnifiedRegistryManager.test_list_steps_with_workspace",
          "test_list_steps_with_workspace",
          "TestUnifiedRegistryManager.test_get_step_count",
          "test_get_step_count",
          "TestUnifiedRegistryManager.test_get_step_count_with_workspace",
          "test_get_step_count_with_workspace",
          "TestUnifiedRegistryManager.test_get_registry_status",
          "test_get_registry_status",
          "TestUnifiedRegistryManager.test_get_step_conflicts",
          "test_get_step_conflicts",
          "TestStepDefinition.test_step_definition_creation",
          "test_step_definition_creation",
          "TestStepDefinition.test_step_definition_with_workspace",
          "test_step_definition_with_workspace",
          "setUp",
          "test_unified_registry_manager_initialization",
          "test_get_step_definition",
          "test_get_step_definition_nonexistent",
          "test_get_all_step_definitions",
          "test_get_all_step_definitions_with_workspace",
          "test_create_legacy_step_names_dict",
          "test_create_legacy_step_names_dict_with_workspace",
          "test_has_step",
          "test_has_step_with_workspace",
          "test_list_steps",
          "test_list_steps_with_workspace",
          "test_get_step_count",
          "test_get_step_count_with_workspace",
          "test_get_registry_status",
          "test_get_step_conflicts",
          "test_step_definition_creation",
          "test_step_definition_with_workspace"
        ],
        "registry/hybrid/test_init.py": [
          "TestHybridRegistryImports.test_data_model_imports",
          "test_data_model_imports",
          "TestHybridRegistryImports.test_registry_management_imports",
          "test_registry_management_imports",
          "TestHybridRegistryImports.test_utility_function_imports",
          "test_utility_function_imports",
          "TestHybridRegistryImports.test_all_exports",
          "test_all_exports",
          "TestHybridRegistryImports.test_all_exports_are_importable",
          "test_all_exports_are_importable",
          "TestHybridRegistryImports.test_module_docstring",
          "test_module_docstring",
          "TestHybridRegistryImports.test_star_import",
          "test_star_import",
          "TestModuleStructure.test_module_categories",
          "test_module_categories",
          "TestModuleStructure.test_no_private_exports",
          "test_no_private_exports",
          "TestModuleStructure.test_import_error_handling",
          "test_import_error_handling",
          "TestBackwardCompatibility.test_legacy_import_patterns",
          "test_legacy_import_patterns",
          "TestBackwardCompatibility.test_module_level_access",
          "test_module_level_access",
          "TestBackwardCompatibility.test_attribute_access_consistency",
          "test_attribute_access_consistency",
          "TestModuleIntegrity.test_no_circular_imports",
          "test_no_circular_imports",
          "TestModuleIntegrity.test_module_completeness",
          "test_module_completeness",
          "TestModuleIntegrity.test_export_uniqueness",
          "test_export_uniqueness",
          "test_data_model_imports",
          "test_registry_management_imports",
          "test_utility_function_imports",
          "test_all_exports",
          "test_all_exports_are_importable",
          "test_module_docstring",
          "test_star_import",
          "test_module_categories",
          "test_no_private_exports",
          "test_import_error_handling",
          "test_legacy_import_patterns",
          "test_module_level_access",
          "test_attribute_access_consistency",
          "test_no_circular_imports",
          "test_module_completeness",
          "test_export_uniqueness"
        ]
      },
      "likely_tested_functions": [
        "reset_performance_metrics",
        "get_all_hyperparameter_classes",
        "get_hyperparameter_class_by_model_type",
        "get_module_path",
        "get_all_hyperparameter_info",
        "validate_hyperparameter_class",
        "RegistryLoadError.__init__",
        "RegistryLoadError.__str__",
        "workspace_context",
        "get_step_names",
        "STEP_NAMES",
        "get_config_class_name",
        "get_builder_step_name",
        "get_spec_step_type",
        "get_spec_step_type_with_job_type",
        "get_step_name_from_spec_type",
        "get_all_step_names",
        "validate_step_name",
        "validate_spec_type",
        "get_step_description",
        "list_all_step_info",
        "get_canonical_name_from_file_name",
        "validate_file_name",
        "FallbackManager.create_legacy_step_names_dict",
        "create_legacy_step_names_dict",
        "FallbackManager.get_step_definition",
        "get_step_definition",
        "FallbackManager.has_step",
        "has_step",
        "FallbackManager.list_steps",
        "list_steps",
        "create_legacy_step_names_dict",
        "get_step_definition",
        "has_step",
        "list_steps",
        "StepDefinition.validate_identifiers",
        "StepDefinition.step_name",
        "step_name",
        "StepDefinition.to_legacy_format",
        "to_legacy_format",
        "StepResolutionResult.get_resolution_summary",
        "RegistryValidationResult.get_validation_summary",
        "ConflictAnalysis.get_conflict_summary",
        "step_name",
        "to_legacy_format",
        "create_workspace_registry",
        "_get_registry_template",
        "_get_standard_template",
        "_get_minimal_template",
        "create_workspace_structure",
        "create_workspace_documentation",
        "create_example_implementations",
        "validate_workspace_setup",
        "copy_registry_from_developer",
        "load_registry_module",
        "get_step_names_from_module",
        "from_legacy_format",
        "to_legacy_format",
        "convert_registry_dict",
        "validate_registry_type",
        "validate_step_name",
        "validate_workspace_id",
        "validate_registry_data",
        "format_registry_error",
        "format_step_not_found_error",
        "format_registry_load_error",
        "format_validation_error",
        "UnifiedRegistryManager.__init__",
        "UnifiedRegistryManager._find_package_root",
        "UnifiedRegistryManager._load_core_registry",
        "UnifiedRegistryManager._discover_and_load_workspaces",
        "UnifiedRegistryManager._load_workspace_registry",
        "UnifiedRegistryManager.get_step_definition",
        "get_step_definition",
        "UnifiedRegistryManager._get_cached_definitions",
        "UnifiedRegistryManager.get_all_step_definitions",
        "get_all_step_definitions",
        "UnifiedRegistryManager.get_local_only_definitions",
        "UnifiedRegistryManager.get_step",
        "get_step",
        "UnifiedRegistryManager.list_steps",
        "list_steps",
        "UnifiedRegistryManager.list_all_steps",
        "UnifiedRegistryManager.has_step",
        "has_step",
        "UnifiedRegistryManager.get_step_count",
        "get_step_count",
        "UnifiedRegistryManager.add_workspace_registry",
        "UnifiedRegistryManager.remove_workspace_registry",
        "UnifiedRegistryManager.get_step_conflicts",
        "get_step_conflicts",
        "UnifiedRegistryManager.get_registry_status",
        "get_registry_status",
        "UnifiedRegistryManager._get_cached_legacy_dict",
        "UnifiedRegistryManager.create_legacy_step_names_dict",
        "create_legacy_step_names_dict",
        "UnifiedRegistryManager._invalidate_cache",
        "UnifiedRegistryManager._invalidate_all_caches",
        "UnifiedRegistryManager.resolution_context",
        "resolution_context",
        "UnifiedRegistryManager.get_component_cache",
        "UnifiedRegistryManager.set_component_cache",
        "UnifiedRegistryManager.clear_component_cache",
        "UnifiedRegistryManager.get_builder_class_cache",
        "UnifiedRegistryManager.set_builder_class_cache",
        "UnifiedRegistryManager.clear_builder_class_cache",
        "UnifiedRegistryManager.set_workspace_context",
        "UnifiedRegistryManager.get_workspace_context",
        "UnifiedRegistryManager.clear_workspace_context",
        "get_step_definition",
        "get_all_step_definitions",
        "get_step",
        "list_steps",
        "has_step",
        "get_step_count",
        "get_step_conflicts",
        "get_registry_status",
        "create_legacy_step_names_dict",
        "resolution_context"
      ],
      "likely_untested_functions": [
        "validate_new_step_definition",
        "auto_correct_step_definition",
        "to_pascal_case",
        "get_validation_errors_with_suggestions",
        "register_step_with_validation",
        "create_validation_report",
        "get_performance_metrics",
        "get_validation_status",
        "RegistryError.__init__",
        "__init__",
        "RegistryError.__str__",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__str__",
        "set_workspace_context",
        "get_workspace_context",
        "clear_workspace_context",
        "_get_registry_manager",
        "_create_fallback_manager",
        "get_config_step_registry",
        "get_builder_step_names",
        "get_spec_step_types",
        "get_sagemaker_step_type",
        "get_steps_by_sagemaker_type",
        "get_all_sagemaker_step_types",
        "validate_sagemaker_step_type",
        "get_sagemaker_step_type_mapping",
        "_calculate_name_similarity",
        "list_available_workspaces",
        "get_workspace_step_count",
        "has_workspace_conflicts",
        "_refresh_module_variables",
        "_set_workspace_context_with_refresh",
        "set_workspace_context",
        "add_new_step_with_validation",
        "validate_step_definition_data",
        "get_step_validation_suggestions",
        "auto_correct_step_data",
        "check_step_name_compliance",
        "get_validation_status",
        "FallbackManager.__init__",
        "__init__",
        "__init__",
        "register_step_type_variant",
        "get_step_type_variant",
        "get_step_type_requirements",
        "get_all_step_types",
        "validate_step_type",
        "get_step_type_examples",
        "is_custom_step",
        "get_custom_step_test_level",
        "detect_framework_from_processor",
        "get_test_pattern_for_builder",
        "should_run_advanced_tests",
        "get_reference_examples_for_pattern",
        "_register_default_variants",
        "validate_identifiers",
        "get_resolution_summary",
        "get_validation_summary",
        "get_conflict_summary",
        "validate_identifiers",
        "get_resolution_summary",
        "get_validation_summary",
        "get_conflict_summary",
        "__init__",
        "_find_package_root",
        "_load_core_registry",
        "_discover_and_load_workspaces",
        "_load_workspace_registry",
        "_get_cached_definitions",
        "get_local_only_definitions",
        "list_all_steps",
        "add_workspace_registry",
        "remove_workspace_registry",
        "_get_cached_legacy_dict",
        "_invalidate_cache",
        "_invalidate_all_caches",
        "get_component_cache",
        "set_component_cache",
        "clear_component_cache",
        "get_builder_class_cache",
        "set_builder_class_cache",
        "clear_builder_class_cache",
        "set_workspace_context",
        "get_workspace_context",
        "clear_workspace_context",
        "__init__",
        "_find_package_root",
        "_load_core_registry",
        "_discover_and_load_workspaces",
        "_load_workspace_registry",
        "_get_cached_definitions",
        "get_local_only_definitions",
        "list_all_steps",
        "add_workspace_registry",
        "remove_workspace_registry",
        "_get_cached_legacy_dict",
        "_invalidate_cache",
        "_invalidate_all_caches",
        "get_component_cache",
        "set_component_cache",
        "clear_component_cache",
        "get_builder_class_cache",
        "set_builder_class_cache",
        "clear_builder_class_cache",
        "set_workspace_context",
        "get_workspace_context",
        "clear_workspace_context"
      ]
    },
    "step_catalog": {
      "component": "step_catalog",
      "description": "Step catalog discovery and management",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "step_catalog/builder_discovery.py",
        "step_catalog/models.py",
        "step_catalog/step_catalog.py",
        "step_catalog/contract_discovery.py",
        "step_catalog/config_discovery.py",
        "step_catalog/spec_discovery.py",
        "step_catalog/mapping.py",
        "step_catalog/adapters/file_resolver.py",
        "step_catalog/adapters/workspace_discovery.py",
        "step_catalog/adapters/config_resolver.py",
        "step_catalog/adapters/legacy_wrappers.py",
        "step_catalog/adapters/config_class_detector.py",
        "step_catalog/adapters/contract_adapter.py"
      ],
      "test_files": [
        "step_catalog/test_spec_discovery.py",
        "step_catalog/test_expanded_discovery.py",
        "step_catalog/test_contract_discovery.py",
        "step_catalog/test_dual_search_space.py",
        "step_catalog/test_builder_discovery.py",
        "step_catalog/test_contract_discovery_debugging.py",
        "step_catalog/test_config_discovery.py",
        "step_catalog/test_models.py",
        "step_catalog/test_integration.py",
        "step_catalog/test_step_catalog.py",
        "step_catalog/test_mapping.py",
        "step_catalog/adapters/test_legacy_wrappers.py",
        "step_catalog/adapters/test_contract_adapter.py",
        "step_catalog/adapters/test_config_resolver.py",
        "step_catalog/adapters/test_file_resolver.py",
        "step_catalog/adapters/test_config_class_detector.py",
        "step_catalog/adapters/test_adapters.py",
        "step_catalog/adapters/test_workspace_discovery.py"
      ],
      "total_source_functions": 866,
      "tested_functions": 698,
      "untested_functions": 168,
      "coverage_percentage": 80.60046189376443,
      "total_source_lines": 7386,
      "total_test_lines": 11192,
      "test_to_source_ratio": 2.1778290993071594,
      "source_functions_by_file": {
        "step_catalog/builder_discovery.py": [
          "BuilderAutoDiscovery.__init__",
          "__init__",
          "BuilderAutoDiscovery._ensure_cursus_importable",
          "_ensure_cursus_importable",
          "BuilderAutoDiscovery._load_registry_info",
          "_load_registry_info",
          "BuilderAutoDiscovery._get_registry_builder_info",
          "_get_registry_builder_info",
          "BuilderAutoDiscovery.discover_builder_classes",
          "discover_builder_classes",
          "BuilderAutoDiscovery.load_builder_class",
          "load_builder_class",
          "BuilderAutoDiscovery._run_discovery",
          "_run_discovery",
          "BuilderAutoDiscovery._discover_package_builders",
          "_discover_package_builders",
          "BuilderAutoDiscovery._discover_workspace_builders",
          "_discover_workspace_builders",
          "BuilderAutoDiscovery._scan_builder_directory",
          "_scan_builder_directory",
          "BuilderAutoDiscovery._extract_builder_from_ast",
          "_extract_builder_from_ast",
          "BuilderAutoDiscovery._inherits_from_step_builder_base",
          "_inherits_from_step_builder_base",
          "BuilderAutoDiscovery._extract_step_name_from_builder_file",
          "_extract_step_name_from_builder_file",
          "BuilderAutoDiscovery._convert_parts_to_pascal_case_with_special_cases",
          "_convert_parts_to_pascal_case_with_special_cases",
          "BuilderAutoDiscovery._load_class_from_file",
          "_load_class_from_file",
          "BuilderAutoDiscovery._file_to_relative_module_path",
          "_file_to_relative_module_path",
          "BuilderAutoDiscovery._file_to_module_path",
          "_file_to_module_path",
          "BuilderAutoDiscovery.get_builder_info",
          "get_builder_info",
          "BuilderAutoDiscovery._get_workspace_for_step",
          "_get_workspace_for_step",
          "BuilderAutoDiscovery.list_available_builders",
          "list_available_builders",
          "BuilderAutoDiscovery.get_discovery_stats",
          "get_discovery_stats",
          "__init__",
          "_ensure_cursus_importable",
          "_load_registry_info",
          "_get_registry_builder_info",
          "discover_builder_classes",
          "load_builder_class",
          "_run_discovery",
          "_discover_package_builders",
          "_discover_workspace_builders",
          "_scan_builder_directory",
          "_extract_builder_from_ast",
          "_inherits_from_step_builder_base",
          "_extract_step_name_from_builder_file",
          "_convert_parts_to_pascal_case_with_special_cases",
          "_load_class_from_file",
          "_file_to_relative_module_path",
          "_file_to_module_path",
          "get_builder_info",
          "_get_workspace_for_step",
          "list_available_builders",
          "get_discovery_stats"
        ],
        "step_catalog/models.py": [
          "StepInfo.config_class",
          "config_class",
          "StepInfo.sagemaker_step_type",
          "sagemaker_step_type",
          "StepInfo.builder_step_name",
          "builder_step_name",
          "StepInfo.description",
          "description",
          "config_class",
          "sagemaker_step_type",
          "builder_step_name",
          "description"
        ],
        "step_catalog/step_catalog.py": [
          "StepCatalog.__init__",
          "__init__",
          "StepCatalog.get_step_info",
          "get_step_info",
          "StepCatalog.find_step_by_component",
          "find_step_by_component",
          "StepCatalog.list_available_steps",
          "list_available_steps",
          "StepCatalog.list_steps_with_specs",
          "list_steps_with_specs",
          "StepCatalog.list_steps_with_scripts",
          "list_steps_with_scripts",
          "StepCatalog.search_steps",
          "search_steps",
          "StepCatalog.discover_config_classes",
          "discover_config_classes",
          "StepCatalog.build_complete_config_classes",
          "build_complete_config_classes",
          "StepCatalog.discover_contracts_with_scripts",
          "discover_contracts_with_scripts",
          "StepCatalog.detect_framework",
          "detect_framework",
          "StepCatalog.discover_cross_workspace_components",
          "discover_cross_workspace_components",
          "StepCatalog.get_builder_class_path",
          "get_builder_class_path",
          "StepCatalog.load_builder_class",
          "load_builder_class",
          "StepCatalog.load_contract_class",
          "load_contract_class",
          "StepCatalog.load_spec_class",
          "load_spec_class",
          "StepCatalog.find_specs_by_contract",
          "find_specs_by_contract",
          "StepCatalog.serialize_spec",
          "serialize_spec",
          "StepCatalog.load_all_specifications",
          "load_all_specifications",
          "StepCatalog.get_spec_job_type_variants",
          "get_spec_job_type_variants",
          "StepCatalog.create_unified_specification",
          "create_unified_specification",
          "StepCatalog.validate_logical_names_smart",
          "validate_logical_names_smart",
          "StepCatalog.serialize_contract",
          "serialize_contract",
          "StepCatalog.find_contracts_by_entry_point",
          "find_contracts_by_entry_point",
          "StepCatalog.get_contract_entry_points",
          "get_contract_entry_points",
          "StepCatalog.validate_contract_script_mapping",
          "validate_contract_script_mapping",
          "StepCatalog.get_job_type_variants",
          "get_job_type_variants",
          "StepCatalog.resolve_pipeline_node",
          "resolve_pipeline_node",
          "StepCatalog._normalize_workspace_dirs",
          "_normalize_workspace_dirs",
          "StepCatalog._initialize_config_discovery",
          "_initialize_config_discovery",
          "StepCatalog._initialize_builder_discovery",
          "_initialize_builder_discovery",
          "StepCatalog._initialize_contract_discovery",
          "_initialize_contract_discovery",
          "StepCatalog._initialize_spec_discovery",
          "_initialize_spec_discovery",
          "StepCatalog._find_package_root",
          "_find_package_root",
          "StepCatalog._ensure_index_built",
          "_ensure_index_built",
          "StepCatalog._build_index",
          "_build_index",
          "StepCatalog._load_registry_data",
          "_load_registry_data",
          "StepCatalog._discover_package_components",
          "_discover_package_components",
          "StepCatalog._discover_workspace_components",
          "_discover_workspace_components",
          "StepCatalog._discover_workspace_components_in_dir",
          "_discover_workspace_components_in_dir",
          "StepCatalog._add_component_to_index",
          "_add_component_to_index",
          "StepCatalog._resolve_to_canonical_name_for_indexing",
          "_resolve_to_canonical_name_for_indexing",
          "StepCatalog._extract_step_name",
          "_extract_step_name",
          "StepCatalog._deduplicate_and_filter_concrete_steps",
          "_deduplicate_and_filter_concrete_steps",
          "StepCatalog._is_job_type_variant",
          "_is_job_type_variant",
          "StepCatalog._resolve_to_canonical_name",
          "_resolve_to_canonical_name",
          "StepCatalog.get_builder_for_config",
          "get_builder_for_config",
          "StepCatalog.get_builder_for_step_type",
          "get_builder_for_step_type",
          "StepCatalog.is_step_type_supported",
          "is_step_type_supported",
          "StepCatalog.validate_builder_availability",
          "validate_builder_availability",
          "StepCatalog.get_config_types_for_step_type",
          "get_config_types_for_step_type",
          "StepCatalog.list_supported_step_types",
          "list_supported_step_types",
          "StepCatalog.validate_step_name_with_registry",
          "validate_step_name_with_registry",
          "StepCatalog.get_builder_map",
          "get_builder_map",
          "StepCatalog._generate_fallback_builder_map",
          "_generate_fallback_builder_map",
          "StepCatalog.validate_dag_compatibility",
          "validate_dag_compatibility",
          "StepCatalog.get_step_builder_suggestions",
          "get_step_builder_suggestions",
          "StepCatalog.get_metrics_report",
          "get_metrics_report",
          "StepCatalog.get_all_builders",
          "get_all_builders",
          "StepCatalog.get_builders_by_step_type",
          "get_builders_by_step_type",
          "__init__",
          "get_step_info",
          "find_step_by_component",
          "list_available_steps",
          "list_steps_with_specs",
          "list_steps_with_scripts",
          "search_steps",
          "discover_config_classes",
          "build_complete_config_classes",
          "discover_contracts_with_scripts",
          "detect_framework",
          "discover_cross_workspace_components",
          "get_builder_class_path",
          "load_builder_class",
          "load_contract_class",
          "load_spec_class",
          "find_specs_by_contract",
          "serialize_spec",
          "load_all_specifications",
          "get_spec_job_type_variants",
          "create_unified_specification",
          "validate_logical_names_smart",
          "serialize_contract",
          "find_contracts_by_entry_point",
          "get_contract_entry_points",
          "validate_contract_script_mapping",
          "get_job_type_variants",
          "resolve_pipeline_node",
          "_normalize_workspace_dirs",
          "_initialize_config_discovery",
          "_initialize_builder_discovery",
          "_initialize_contract_discovery",
          "_initialize_spec_discovery",
          "_find_package_root",
          "_ensure_index_built",
          "_build_index",
          "_load_registry_data",
          "_discover_package_components",
          "_discover_workspace_components",
          "_discover_workspace_components_in_dir",
          "_add_component_to_index",
          "_resolve_to_canonical_name_for_indexing",
          "_extract_step_name",
          "_deduplicate_and_filter_concrete_steps",
          "_is_job_type_variant",
          "_resolve_to_canonical_name",
          "get_builder_for_config",
          "get_builder_for_step_type",
          "is_step_type_supported",
          "validate_builder_availability",
          "get_config_types_for_step_type",
          "list_supported_step_types",
          "validate_step_name_with_registry",
          "get_builder_map",
          "_generate_fallback_builder_map",
          "validate_dag_compatibility",
          "get_step_builder_suggestions",
          "get_metrics_report",
          "get_all_builders",
          "get_builders_by_step_type"
        ],
        "step_catalog/contract_discovery.py": [
          "ContractAutoDiscovery.__init__",
          "__init__",
          "ContractAutoDiscovery.discover_contract_classes",
          "discover_contract_classes",
          "ContractAutoDiscovery.load_contract_class",
          "load_contract_class",
          "ContractAutoDiscovery._pascal_to_snake_case",
          "_pascal_to_snake_case",
          "ContractAutoDiscovery._scan_contract_directory",
          "_scan_contract_directory",
          "ContractAutoDiscovery._is_contract_class",
          "_is_contract_class",
          "ContractAutoDiscovery._discover_workspace_contracts",
          "_discover_workspace_contracts",
          "ContractAutoDiscovery._file_to_relative_module_path",
          "_file_to_relative_module_path",
          "ContractAutoDiscovery._try_direct_import",
          "_try_direct_import",
          "ContractAutoDiscovery._discover_contract_objects_in_module",
          "_discover_contract_objects_in_module",
          "ContractAutoDiscovery._is_contract_object",
          "_is_contract_object",
          "ContractAutoDiscovery._try_workspace_contract_import",
          "_try_workspace_contract_import",
          "ContractAutoDiscovery._load_contract_from_file",
          "_load_contract_from_file",
          "ContractAutoDiscovery.serialize_contract",
          "serialize_contract",
          "ContractAutoDiscovery.find_contracts_by_entry_point",
          "find_contracts_by_entry_point",
          "ContractAutoDiscovery.get_contract_entry_points",
          "get_contract_entry_points",
          "ContractAutoDiscovery._is_contract_instance",
          "_is_contract_instance",
          "ContractAutoDiscovery._serialize_contract_inputs",
          "_serialize_contract_inputs",
          "ContractAutoDiscovery._serialize_contract_outputs",
          "_serialize_contract_outputs",
          "ContractAutoDiscovery._serialize_contract_arguments",
          "_serialize_contract_arguments",
          "ContractAutoDiscovery._find_contracts_by_entry_point_in_dir",
          "_find_contracts_by_entry_point_in_dir",
          "ContractAutoDiscovery._find_contracts_by_entry_point_in_workspace",
          "_find_contracts_by_entry_point_in_workspace",
          "ContractAutoDiscovery._contract_file_references_entry_point",
          "_contract_file_references_entry_point",
          "ContractAutoDiscovery._extract_entry_points_from_dir",
          "_extract_entry_points_from_dir",
          "ContractAutoDiscovery._extract_entry_points_from_workspace",
          "_extract_entry_points_from_workspace",
          "__init__",
          "discover_contract_classes",
          "load_contract_class",
          "_pascal_to_snake_case",
          "_scan_contract_directory",
          "_is_contract_class",
          "_discover_workspace_contracts",
          "_file_to_relative_module_path",
          "_try_direct_import",
          "_discover_contract_objects_in_module",
          "_is_contract_object",
          "_try_workspace_contract_import",
          "_load_contract_from_file",
          "serialize_contract",
          "find_contracts_by_entry_point",
          "get_contract_entry_points",
          "_is_contract_instance",
          "_serialize_contract_inputs",
          "_serialize_contract_outputs",
          "_serialize_contract_arguments",
          "_find_contracts_by_entry_point_in_dir",
          "_find_contracts_by_entry_point_in_workspace",
          "_contract_file_references_entry_point",
          "_extract_entry_points_from_dir",
          "_extract_entry_points_from_workspace"
        ],
        "step_catalog/config_discovery.py": [
          "ConfigAutoDiscovery.__init__",
          "__init__",
          "ConfigAutoDiscovery.discover_config_classes",
          "discover_config_classes",
          "ConfigAutoDiscovery.discover_hyperparameter_classes",
          "discover_hyperparameter_classes",
          "ConfigAutoDiscovery.build_complete_config_classes",
          "build_complete_config_classes",
          "ConfigAutoDiscovery._scan_config_directory",
          "_scan_config_directory",
          "ConfigAutoDiscovery._is_config_class",
          "_is_config_class",
          "ConfigAutoDiscovery._discover_workspace_configs",
          "_discover_workspace_configs",
          "ConfigAutoDiscovery._discover_workspace_hyperparams",
          "_discover_workspace_hyperparams",
          "ConfigAutoDiscovery._file_to_relative_module_path",
          "_file_to_relative_module_path",
          "ConfigAutoDiscovery._file_to_module_path",
          "_file_to_module_path",
          "ConfigAutoDiscovery._scan_hyperparams_directory",
          "_scan_hyperparams_directory",
          "ConfigAutoDiscovery._is_hyperparameter_class",
          "_is_hyperparameter_class",
          "__init__",
          "discover_config_classes",
          "discover_hyperparameter_classes",
          "build_complete_config_classes",
          "_scan_config_directory",
          "_is_config_class",
          "_discover_workspace_configs",
          "_discover_workspace_hyperparams",
          "_file_to_relative_module_path",
          "_file_to_module_path",
          "_scan_hyperparams_directory",
          "_is_hyperparameter_class"
        ],
        "step_catalog/spec_discovery.py": [
          "SpecAutoDiscovery.__init__",
          "__init__",
          "SpecAutoDiscovery.discover_spec_classes",
          "discover_spec_classes",
          "SpecAutoDiscovery.load_spec_class",
          "load_spec_class",
          "SpecAutoDiscovery._try_direct_import",
          "_try_direct_import",
          "SpecAutoDiscovery._extract_spec_from_module",
          "_extract_spec_from_module",
          "SpecAutoDiscovery._is_spec_instance",
          "_is_spec_instance",
          "SpecAutoDiscovery._scan_spec_directory",
          "_scan_spec_directory",
          "SpecAutoDiscovery._is_spec_assignment",
          "_is_spec_assignment",
          "SpecAutoDiscovery._discover_workspace_specs",
          "_discover_workspace_specs",
          "SpecAutoDiscovery._try_workspace_spec_import",
          "_try_workspace_spec_import",
          "SpecAutoDiscovery._load_spec_from_file",
          "_load_spec_from_file",
          "SpecAutoDiscovery.find_specs_by_contract",
          "find_specs_by_contract",
          "SpecAutoDiscovery.serialize_spec",
          "serialize_spec",
          "SpecAutoDiscovery.load_all_specifications",
          "load_all_specifications",
          "SpecAutoDiscovery.get_job_type_variants",
          "get_job_type_variants",
          "SpecAutoDiscovery._find_specs_by_contract_in_dir",
          "_find_specs_by_contract_in_dir",
          "SpecAutoDiscovery._find_specs_by_contract_in_workspace",
          "_find_specs_by_contract_in_workspace",
          "SpecAutoDiscovery._spec_file_references_contract",
          "_spec_file_references_contract",
          "SpecAutoDiscovery._find_job_type_variants_in_dir",
          "_find_job_type_variants_in_dir",
          "SpecAutoDiscovery._find_job_type_variants_in_workspace",
          "_find_job_type_variants_in_workspace",
          "SpecAutoDiscovery.create_unified_specification",
          "create_unified_specification",
          "SpecAutoDiscovery.validate_logical_names_smart",
          "validate_logical_names_smart",
          "SpecAutoDiscovery._apply_smart_specification_logic",
          "_apply_smart_specification_logic",
          "SpecAutoDiscovery._extract_job_type_from_spec_name_registry",
          "_extract_job_type_from_spec_name_registry",
          "SpecAutoDiscovery._select_primary_specification",
          "_select_primary_specification",
          "SpecAutoDiscovery._validate_smart_logical_names",
          "_validate_smart_logical_names",
          "SpecAutoDiscovery._file_to_relative_module_path",
          "_file_to_relative_module_path",
          "__init__",
          "discover_spec_classes",
          "load_spec_class",
          "_try_direct_import",
          "_extract_spec_from_module",
          "_is_spec_instance",
          "_scan_spec_directory",
          "_is_spec_assignment",
          "_discover_workspace_specs",
          "_try_workspace_spec_import",
          "_load_spec_from_file",
          "find_specs_by_contract",
          "serialize_spec",
          "load_all_specifications",
          "get_job_type_variants",
          "_find_specs_by_contract_in_dir",
          "_find_specs_by_contract_in_workspace",
          "_spec_file_references_contract",
          "_find_job_type_variants_in_dir",
          "_find_job_type_variants_in_workspace",
          "create_unified_specification",
          "validate_logical_names_smart",
          "_apply_smart_specification_logic",
          "_extract_job_type_from_spec_name_registry",
          "_select_primary_specification",
          "_validate_smart_logical_names",
          "_file_to_relative_module_path"
        ],
        "step_catalog/mapping.py": [
          "StepCatalogMapper.__init__",
          "__init__",
          "StepCatalogMapper.get_builder_for_config",
          "get_builder_for_config",
          "StepCatalogMapper.get_builder_for_step_type",
          "get_builder_for_step_type",
          "StepCatalogMapper.resolve_legacy_aliases",
          "resolve_legacy_aliases",
          "StepCatalogMapper.is_step_type_supported",
          "is_step_type_supported",
          "StepCatalogMapper.validate_builder_availability",
          "validate_builder_availability",
          "StepCatalogMapper.get_config_types_for_step_type",
          "get_config_types_for_step_type",
          "StepCatalogMapper.list_supported_step_types",
          "list_supported_step_types",
          "StepCatalogMapper._resolve_canonical_name_from_registry",
          "_resolve_canonical_name_from_registry",
          "StepCatalogMapper._extract_job_type",
          "_extract_job_type",
          "StepCatalogMapper._fallback_config_to_step_type",
          "_fallback_config_to_step_type",
          "StepCatalogMapper.get_registry_function",
          "get_registry_function",
          "StepCatalogMapper.validate_step_name_with_registry",
          "validate_step_name_with_registry",
          "PipelineConstructionInterface.__init__",
          "__init__",
          "PipelineConstructionInterface.get_builder_map",
          "get_builder_map",
          "PipelineConstructionInterface.validate_dag_compatibility",
          "validate_dag_compatibility",
          "PipelineConstructionInterface.get_step_builder_suggestions",
          "get_step_builder_suggestions",
          "__init__",
          "get_builder_for_config",
          "get_builder_for_step_type",
          "resolve_legacy_aliases",
          "is_step_type_supported",
          "validate_builder_availability",
          "get_config_types_for_step_type",
          "list_supported_step_types",
          "_resolve_canonical_name_from_registry",
          "_extract_job_type",
          "_fallback_config_to_step_type",
          "get_registry_function",
          "validate_step_name_with_registry",
          "__init__",
          "get_builder_map",
          "validate_dag_compatibility",
          "get_step_builder_suggestions"
        ],
        "step_catalog/adapters/file_resolver.py": [
          "FlexibleFileResolverAdapter.__init__",
          "__init__",
          "FlexibleFileResolverAdapter._refresh_cache",
          "_refresh_cache",
          "FlexibleFileResolverAdapter._extract_base_name",
          "_extract_base_name",
          "FlexibleFileResolverAdapter._normalize_name",
          "_normalize_name",
          "FlexibleFileResolverAdapter._calculate_similarity",
          "_calculate_similarity",
          "FlexibleFileResolverAdapter._find_best_match",
          "_find_best_match",
          "FlexibleFileResolverAdapter.refresh_cache",
          "refresh_cache",
          "FlexibleFileResolverAdapter._discover_all_files",
          "_discover_all_files",
          "FlexibleFileResolverAdapter._scan_directory",
          "_scan_directory",
          "FlexibleFileResolverAdapter.get_available_files_report",
          "get_available_files_report",
          "FlexibleFileResolverAdapter.extract_base_name_from_spec",
          "extract_base_name_from_spec",
          "FlexibleFileResolverAdapter.find_spec_constant_name",
          "find_spec_constant_name",
          "FlexibleFileResolverAdapter.find_specification_file",
          "find_specification_file",
          "FlexibleFileResolverAdapter.find_contract_file",
          "find_contract_file",
          "FlexibleFileResolverAdapter.find_spec_file",
          "find_spec_file",
          "FlexibleFileResolverAdapter.find_builder_file",
          "find_builder_file",
          "FlexibleFileResolverAdapter.find_config_file",
          "find_config_file",
          "FlexibleFileResolverAdapter.find_all_component_files",
          "find_all_component_files",
          "DeveloperWorkspaceFileResolverAdapter.__init__",
          "__init__",
          "DeveloperWorkspaceFileResolverAdapter._validate_workspace_structure",
          "_validate_workspace_structure",
          "DeveloperWorkspaceFileResolverAdapter._setup_workspace_paths",
          "_setup_workspace_paths",
          "DeveloperWorkspaceFileResolverAdapter._find_workspace_file",
          "_find_workspace_file",
          "DeveloperWorkspaceFileResolverAdapter.find_contract_file",
          "find_contract_file",
          "DeveloperWorkspaceFileResolverAdapter.find_spec_file",
          "find_spec_file",
          "DeveloperWorkspaceFileResolverAdapter.find_builder_file",
          "find_builder_file",
          "DeveloperWorkspaceFileResolverAdapter.find_config_file",
          "find_config_file",
          "DeveloperWorkspaceFileResolverAdapter.find_script_file",
          "find_script_file",
          "DeveloperWorkspaceFileResolverAdapter._find_file_in_directory",
          "_find_file_in_directory",
          "DeveloperWorkspaceFileResolverAdapter.get_workspace_info",
          "get_workspace_info",
          "DeveloperWorkspaceFileResolverAdapter.list_available_developers",
          "list_available_developers",
          "DeveloperWorkspaceFileResolverAdapter.switch_developer",
          "switch_developer",
          "HybridFileResolverAdapter.__init__",
          "__init__",
          "HybridFileResolverAdapter.resolve_file_pattern",
          "resolve_file_pattern",
          "__init__",
          "_refresh_cache",
          "_extract_base_name",
          "_normalize_name",
          "_calculate_similarity",
          "_find_best_match",
          "refresh_cache",
          "_discover_all_files",
          "_scan_directory",
          "get_available_files_report",
          "extract_base_name_from_spec",
          "find_spec_constant_name",
          "find_specification_file",
          "find_contract_file",
          "find_spec_file",
          "find_builder_file",
          "find_config_file",
          "find_all_component_files",
          "__init__",
          "_validate_workspace_structure",
          "_setup_workspace_paths",
          "_find_workspace_file",
          "find_contract_file",
          "find_spec_file",
          "find_builder_file",
          "find_config_file",
          "find_script_file",
          "_find_file_in_directory",
          "get_workspace_info",
          "list_available_developers",
          "switch_developer",
          "__init__",
          "resolve_file_pattern"
        ],
        "step_catalog/adapters/workspace_discovery.py": [
          "WorkspaceDiscoveryManagerAdapter.__init__",
          "__init__",
          "WorkspaceDiscoveryManagerAdapter.discover_workspaces",
          "discover_workspaces",
          "WorkspaceDiscoveryManagerAdapter._count_workspace_components",
          "_count_workspace_components",
          "WorkspaceDiscoveryManagerAdapter.discover_components",
          "discover_components",
          "WorkspaceDiscoveryManagerAdapter._discover_step_components",
          "_discover_step_components",
          "WorkspaceDiscoveryManagerAdapter._discover_filesystem_components",
          "_discover_filesystem_components",
          "WorkspaceDiscoveryManagerAdapter._find_workspace_path",
          "_find_workspace_path",
          "WorkspaceDiscoveryManagerAdapter._scan_component_directory",
          "_scan_component_directory",
          "WorkspaceDiscoveryManagerAdapter._extract_step_name_from_file",
          "_extract_step_name_from_file",
          "WorkspaceDiscoveryManagerAdapter.get_file_resolver",
          "get_file_resolver",
          "WorkspaceDiscoveryManagerAdapter.get_module_loader",
          "get_module_loader",
          "WorkspaceDiscoveryManagerAdapter.list_available_developers",
          "list_available_developers",
          "WorkspaceDiscoveryManagerAdapter.get_workspace_info",
          "get_workspace_info",
          "WorkspaceDiscoveryManagerAdapter.refresh_cache",
          "refresh_cache",
          "WorkspaceDiscoveryManagerAdapter.get_discovery_summary",
          "get_discovery_summary",
          "WorkspaceDiscoveryManagerAdapter.get_statistics",
          "get_statistics",
          "WorkspaceDiscoveryManagerAdapter._is_cache_valid",
          "_is_cache_valid",
          "__init__",
          "discover_workspaces",
          "_count_workspace_components",
          "discover_components",
          "_discover_step_components",
          "_discover_filesystem_components",
          "_find_workspace_path",
          "_scan_component_directory",
          "_extract_step_name_from_file",
          "get_file_resolver",
          "get_module_loader",
          "list_available_developers",
          "get_workspace_info",
          "refresh_cache",
          "get_discovery_summary",
          "get_statistics",
          "_is_cache_valid"
        ],
        "step_catalog/adapters/config_resolver.py": [
          "StepConfigResolverAdapter.__init__",
          "__init__",
          "StepConfigResolverAdapter.resolve_config_map",
          "resolve_config_map",
          "StepConfigResolverAdapter._direct_name_matching",
          "_direct_name_matching",
          "StepConfigResolverAdapter._job_type_matching",
          "_job_type_matching",
          "StepConfigResolverAdapter._calculate_config_type_confidence",
          "_calculate_config_type_confidence",
          "StepConfigResolverAdapter._semantic_matching",
          "_semantic_matching",
          "StepConfigResolverAdapter._pattern_matching",
          "_pattern_matching",
          "StepConfigResolverAdapter._config_class_to_step_type",
          "_config_class_to_step_type",
          "StepConfigResolverAdapter._calculate_job_type_boost",
          "_calculate_job_type_boost",
          "StepConfigResolverAdapter._resolve_single_node",
          "_resolve_single_node",
          "StepConfigResolverAdapter.resolve_config_for_step",
          "resolve_config_for_step",
          "StepConfigResolverAdapter.preview_resolution",
          "preview_resolution",
          "StepConfigResolverAdapter._parse_node_name",
          "_parse_node_name",
          "StepConfigResolverAdapter._job_type_matching_enhanced",
          "_job_type_matching_enhanced",
          "__init__",
          "resolve_config_map",
          "_direct_name_matching",
          "_job_type_matching",
          "_calculate_config_type_confidence",
          "_semantic_matching",
          "_pattern_matching",
          "_config_class_to_step_type",
          "_calculate_job_type_boost",
          "_resolve_single_node",
          "resolve_config_for_step",
          "preview_resolution",
          "_parse_node_name",
          "_job_type_matching_enhanced"
        ],
        "step_catalog/adapters/legacy_wrappers.py": [
          "LegacyDiscoveryWrapper.__init__",
          "__init__",
          "LegacyDiscoveryWrapper._refresh_cache",
          "_refresh_cache",
          "LegacyDiscoveryWrapper._extract_base_name",
          "_extract_base_name",
          "LegacyDiscoveryWrapper._normalize_name",
          "_normalize_name",
          "LegacyDiscoveryWrapper._calculate_similarity",
          "_calculate_similarity",
          "LegacyDiscoveryWrapper._find_best_match",
          "_find_best_match",
          "LegacyDiscoveryWrapper.refresh_cache",
          "refresh_cache",
          "LegacyDiscoveryWrapper._discover_all_files",
          "_discover_all_files",
          "LegacyDiscoveryWrapper._scan_directory",
          "_scan_directory",
          "LegacyDiscoveryWrapper.get_available_files_report",
          "get_available_files_report",
          "LegacyDiscoveryWrapper.extract_base_name_from_spec",
          "extract_base_name_from_spec",
          "LegacyDiscoveryWrapper.find_spec_constant_name",
          "find_spec_constant_name",
          "LegacyDiscoveryWrapper.find_specification_file",
          "find_specification_file",
          "LegacyDiscoveryWrapper.find_contract_file",
          "find_contract_file",
          "LegacyDiscoveryWrapper.find_spec_file",
          "find_spec_file",
          "LegacyDiscoveryWrapper.find_builder_file",
          "find_builder_file",
          "LegacyDiscoveryWrapper.find_config_file",
          "find_config_file",
          "LegacyDiscoveryWrapper.find_all_component_files",
          "find_all_component_files",
          "LegacyDiscoveryWrapper.get_step_info",
          "get_step_info",
          "LegacyDiscoveryWrapper.find_step_by_component",
          "find_step_by_component",
          "LegacyDiscoveryWrapper.list_available_steps",
          "list_available_steps",
          "LegacyDiscoveryWrapper.search_steps",
          "search_steps",
          "LegacyDiscoveryWrapper.discover_config_classes",
          "discover_config_classes",
          "LegacyDiscoveryWrapper.build_complete_config_classes",
          "build_complete_config_classes",
          "LegacyDiscoveryWrapper.get_job_type_variants",
          "get_job_type_variants",
          "LegacyDiscoveryWrapper.get_metrics_report",
          "get_metrics_report",
          "LegacyDiscoveryWrapper.discover_contracts_with_scripts",
          "discover_contracts_with_scripts",
          "LegacyDiscoveryWrapper.detect_framework",
          "detect_framework",
          "LegacyDiscoveryWrapper.discover_cross_workspace_components",
          "discover_cross_workspace_components",
          "LegacyDiscoveryWrapper.get_builder_class_path",
          "get_builder_class_path",
          "LegacyDiscoveryWrapper.load_builder_class",
          "load_builder_class",
          "LegacyDiscoveryWrapper.get_adapter",
          "get_adapter",
          "LegacyDiscoveryWrapper.get_unified_catalog",
          "get_unified_catalog",
          "build_complete_config_classes",
          "detect_config_classes_from_json",
          "__init__",
          "_refresh_cache",
          "_extract_base_name",
          "_normalize_name",
          "_calculate_similarity",
          "_find_best_match",
          "refresh_cache",
          "_discover_all_files",
          "_scan_directory",
          "get_available_files_report",
          "extract_base_name_from_spec",
          "find_spec_constant_name",
          "find_specification_file",
          "find_contract_file",
          "find_spec_file",
          "find_builder_file",
          "find_config_file",
          "find_all_component_files",
          "get_step_info",
          "find_step_by_component",
          "list_available_steps",
          "search_steps",
          "discover_config_classes",
          "build_complete_config_classes",
          "get_job_type_variants",
          "get_metrics_report",
          "discover_contracts_with_scripts",
          "detect_framework",
          "discover_cross_workspace_components",
          "get_builder_class_path",
          "load_builder_class",
          "get_adapter",
          "get_unified_catalog"
        ],
        "step_catalog/adapters/config_class_detector.py": [
          "ConfigClassDetectorAdapter.__init__",
          "__init__",
          "ConfigClassDetectorAdapter.detect_from_json",
          "detect_from_json",
          "ConfigClassDetectorAdapter._extract_class_names",
          "_extract_class_names",
          "ConfigClassDetectorAdapter.from_config_store",
          "from_config_store",
          "ConfigClassStoreAdapter.register",
          "register",
          "ConfigClassStoreAdapter.get_class",
          "get_class",
          "ConfigClassStoreAdapter.get_all_classes",
          "get_all_classes",
          "ConfigClassStoreAdapter.register_many",
          "register_many",
          "ConfigClassStoreAdapter.clear",
          "clear",
          "ConfigClassStoreAdapter.registered_names",
          "registered_names",
          "build_complete_config_classes",
          "detect_config_classes_from_json",
          "__init__",
          "detect_from_json",
          "_extract_class_names",
          "from_config_store",
          "register",
          "get_class",
          "get_all_classes",
          "register_many",
          "clear",
          "registered_names",
          "_register"
        ],
        "step_catalog/adapters/contract_adapter.py": [
          "ContractDiscoveryResult.__init__",
          "__init__",
          "ContractDiscoveryResult.__repr__",
          "__repr__",
          "ContractDiscoveryEngineAdapter.__init__",
          "__init__",
          "ContractDiscoveryEngineAdapter.discover_contracts_with_scripts",
          "discover_contracts_with_scripts",
          "ContractDiscoveryEngineAdapter.discover_all_contracts",
          "discover_all_contracts",
          "ContractDiscoveryEngineAdapter.extract_contract_reference_from_spec",
          "extract_contract_reference_from_spec",
          "ContractDiscoveryEngineAdapter.build_entry_point_mapping",
          "build_entry_point_mapping",
          "ContractDiscoveryManagerAdapter.__init__",
          "__init__",
          "ContractDiscoveryManagerAdapter.discover_contract",
          "discover_contract",
          "ContractDiscoveryManagerAdapter.get_contract_input_paths",
          "get_contract_input_paths",
          "ContractDiscoveryManagerAdapter.get_contract_output_paths",
          "get_contract_output_paths",
          "ContractDiscoveryManagerAdapter.get_contract_environ_vars",
          "get_contract_environ_vars",
          "ContractDiscoveryManagerAdapter.get_contract_job_args",
          "get_contract_job_args",
          "ContractDiscoveryManagerAdapter._adapt_path_for_local_testing",
          "_adapt_path_for_local_testing",
          "__init__",
          "__repr__",
          "__init__",
          "discover_contracts_with_scripts",
          "discover_all_contracts",
          "extract_contract_reference_from_spec",
          "build_entry_point_mapping",
          "__init__",
          "discover_contract",
          "get_contract_input_paths",
          "get_contract_output_paths",
          "get_contract_environ_vars",
          "get_contract_job_args",
          "_adapt_path_for_local_testing"
        ]
      },
      "test_functions_by_file": {
        "step_catalog/test_spec_discovery.py": [
          "TestSpecAutoDiscoveryInitialization.temp_workspace",
          "temp_workspace",
          "TestSpecAutoDiscoveryInitialization.test_init_package_only",
          "test_init_package_only",
          "TestSpecAutoDiscoveryInitialization.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestSpecDiscovery.discovery_with_specs",
          "discovery_with_specs",
          "TestSpecDiscovery.test_discover_spec_classes",
          "test_discover_spec_classes",
          "TestSpecDiscovery.test_load_spec_class_existing",
          "test_load_spec_class_existing",
          "TestSpecDiscovery.test_load_spec_class_nonexistent",
          "test_load_spec_class_nonexistent",
          "TestSpecDiscovery.test_is_spec_instance",
          "test_is_spec_instance",
          "TestSpecSerialization.mock_spec_instance",
          "mock_spec_instance",
          "TestSpecSerialization.test_serialize_spec",
          "test_serialize_spec",
          "TestSpecSerialization.test_serialize_spec_error_handling",
          "test_serialize_spec_error_handling",
          "TestSpecContractMapping.discovery_with_contract_mapping",
          "discovery_with_contract_mapping",
          "TestSpecContractMapping.test_find_specs_by_contract",
          "test_find_specs_by_contract",
          "TestSpecContractMapping.test_find_specs_by_contract_error_handling",
          "test_find_specs_by_contract_error_handling",
          "TestJobTypeVariants.discovery_with_variants",
          "discovery_with_variants",
          "TestJobTypeVariants.test_get_job_type_variants",
          "test_get_job_type_variants",
          "TestJobTypeVariants.test_get_job_type_variants_no_variants",
          "test_get_job_type_variants_no_variants",
          "TestUnifiedSpecification.discovery_with_unified_specs",
          "discovery_with_unified_specs",
          "TestUnifiedSpecification.test_create_unified_specification",
          "test_create_unified_specification",
          "TestUnifiedSpecification.test_create_unified_specification_no_specs",
          "test_create_unified_specification_no_specs",
          "TestSmartValidation.discovery_with_smart_validation",
          "discovery_with_smart_validation",
          "TestSmartValidation.test_validate_logical_names_smart",
          "test_validate_logical_names_smart",
          "TestSmartValidation.test_validate_logical_names_smart_error_handling",
          "test_validate_logical_names_smart_error_handling",
          "TestAllSpecificationsLoading.discovery_with_all_specs",
          "discovery_with_all_specs",
          "TestAllSpecificationsLoading.test_load_all_specifications",
          "test_load_all_specifications",
          "TestAllSpecificationsLoading.test_load_all_specifications_error_handling",
          "test_load_all_specifications_error_handling",
          "TestErrorHandlingAndResilience.test_graceful_degradation_on_import_error",
          "test_graceful_degradation_on_import_error",
          "TestErrorHandlingAndResilience.test_error_logging_in_spec_loading",
          "test_error_logging_in_spec_loading",
          "TestWorkspaceIntegration.discovery_with_workspaces",
          "discovery_with_workspaces",
          "TestWorkspaceIntegration.test_discover_workspace_specs",
          "test_discover_workspace_specs",
          "TestWorkspaceIntegration.test_load_workspace_specs",
          "test_load_workspace_specs",
          "temp_workspace",
          "test_init_package_only",
          "test_init_with_workspace_dirs",
          "discovery_with_specs",
          "test_discover_spec_classes",
          "test_load_spec_class_existing",
          "test_load_spec_class_nonexistent",
          "test_is_spec_instance",
          "mock_spec_instance",
          "test_serialize_spec",
          "test_serialize_spec_error_handling",
          "discovery_with_contract_mapping",
          "test_find_specs_by_contract",
          "test_find_specs_by_contract_error_handling",
          "discovery_with_variants",
          "test_get_job_type_variants",
          "test_get_job_type_variants_no_variants",
          "discovery_with_unified_specs",
          "test_create_unified_specification",
          "test_create_unified_specification_no_specs",
          "discovery_with_smart_validation",
          "test_validate_logical_names_smart",
          "test_validate_logical_names_smart_error_handling",
          "discovery_with_all_specs",
          "test_load_all_specifications",
          "test_load_all_specifications_error_handling",
          "test_graceful_degradation_on_import_error",
          "test_error_logging_in_spec_loading",
          "discovery_with_workspaces",
          "test_discover_workspace_specs",
          "test_load_workspace_specs"
        ],
        "step_catalog/test_expanded_discovery.py": [
          "TestExpandedDiscoveryMethods.mock_workspace_root",
          "mock_workspace_root",
          "TestExpandedDiscoveryMethods.catalog_with_test_data",
          "catalog_with_test_data",
          "TestExpandedDiscoveryMethods.test_discover_contracts_with_scripts",
          "test_discover_contracts_with_scripts",
          "TestExpandedDiscoveryMethods.test_discover_contracts_with_scripts_empty",
          "test_discover_contracts_with_scripts_empty",
          "TestExpandedDiscoveryMethods.test_detect_framework_from_registry",
          "test_detect_framework_from_registry",
          "TestExpandedDiscoveryMethods.test_detect_framework_from_step_name",
          "test_detect_framework_from_step_name",
          "TestExpandedDiscoveryMethods.test_detect_framework_not_found",
          "test_detect_framework_not_found",
          "TestExpandedDiscoveryMethods.test_discover_cross_workspace_components",
          "test_discover_cross_workspace_components",
          "TestExpandedDiscoveryMethods.test_discover_cross_workspace_components_filtered",
          "test_discover_cross_workspace_components_filtered",
          "TestExpandedDiscoveryMethods.test_get_builder_class_path_from_registry",
          "test_get_builder_class_path_from_registry",
          "TestExpandedDiscoveryMethods.test_get_builder_class_path_from_file",
          "test_get_builder_class_path_from_file",
          "TestExpandedDiscoveryMethods.test_get_builder_class_path_not_found",
          "test_get_builder_class_path_not_found",
          "TestExpandedDiscoveryMethods.test_load_builder_class_registry_based",
          "test_load_builder_class_registry_based",
          "TestExpandedDiscoveryMethods.test_load_builder_class_fallback_to_registry",
          "test_load_builder_class_fallback_to_registry",
          "TestExpandedDiscoveryMethods.test_load_builder_class_no_builder_discovery",
          "test_load_builder_class_no_builder_discovery",
          "TestExpandedDiscoveryMethods.test_load_builder_class_not_found",
          "test_load_builder_class_not_found",
          "TestExpandedDiscoveryMethods.test_load_builder_class_import_error",
          "test_load_builder_class_import_error",
          "TestExpandedDiscoveryMethods.test_error_handling_in_discovery_methods",
          "test_error_handling_in_discovery_methods",
          "TestExpandedDiscoveryIntegration.test_framework_detection_integration",
          "test_framework_detection_integration",
          "TestExpandedDiscoveryIntegration.test_cross_workspace_discovery_integration",
          "test_cross_workspace_discovery_integration",
          "mock_workspace_root",
          "catalog_with_test_data",
          "test_discover_contracts_with_scripts",
          "test_discover_contracts_with_scripts_empty",
          "test_detect_framework_from_registry",
          "test_detect_framework_from_step_name",
          "test_detect_framework_not_found",
          "test_discover_cross_workspace_components",
          "test_discover_cross_workspace_components_filtered",
          "test_get_builder_class_path_from_registry",
          "test_get_builder_class_path_from_file",
          "test_get_builder_class_path_not_found",
          "test_load_builder_class_registry_based",
          "test_load_builder_class_fallback_to_registry",
          "test_load_builder_class_no_builder_discovery",
          "test_load_builder_class_not_found",
          "test_load_builder_class_import_error",
          "test_error_handling_in_discovery_methods",
          "test_framework_detection_integration",
          "test_cross_workspace_discovery_integration"
        ],
        "step_catalog/test_contract_discovery.py": [
          "TestContractAutoDiscovery.temp_workspace",
          "temp_workspace",
          "TestContractAutoDiscovery.contract_discovery",
          "contract_discovery",
          "TestContractAutoDiscovery.test_init",
          "test_init",
          "TestContractAutoDiscovery.test_init_no_workspace",
          "test_init_no_workspace",
          "TestContractAutoDiscovery.test_pascal_to_snake_case_conversion",
          "test_pascal_to_snake_case_conversion",
          "TestContractAutoDiscovery.test_is_contract_object_naming_patterns",
          "test_is_contract_object_naming_patterns",
          "TestContractAutoDiscovery.test_is_contract_object_by_attributes",
          "test_is_contract_object_by_attributes",
          "TestContractAutoDiscovery.test_discover_contract_objects_in_module",
          "test_discover_contract_objects_in_module",
          "TestContractAutoDiscovery.test_discover_contract_objects_error_handling",
          "test_discover_contract_objects_error_handling",
          "TestContractAutoDiscovery.test_try_direct_import_success",
          "test_try_direct_import_success",
          "TestContractAutoDiscovery.test_try_direct_import_import_error",
          "test_try_direct_import_import_error",
          "TestContractAutoDiscovery.test_try_direct_import_no_contracts_found",
          "test_try_direct_import_no_contracts_found",
          "TestContractAutoDiscovery.test_try_direct_import_beyond_top_level_package_error",
          "test_try_direct_import_beyond_top_level_package_error",
          "TestContractAutoDiscovery.test_load_contract_class_direct_success",
          "test_load_contract_class_direct_success",
          "TestContractAutoDiscovery.test_load_contract_class_snake_case_conversion",
          "test_load_contract_class_snake_case_conversion",
          "TestContractAutoDiscovery.test_load_contract_class_workspace_fallback",
          "test_load_contract_class_workspace_fallback",
          "TestContractAutoDiscovery.test_load_contract_class_not_found",
          "test_load_contract_class_not_found",
          "TestContractAutoDiscovery.test_load_contract_class_no_workspace_dirs",
          "test_load_contract_class_no_workspace_dirs",
          "TestContractAutoDiscovery.test_try_workspace_contract_import_success",
          "test_try_workspace_contract_import_success",
          "TestContractAutoDiscovery.test_try_workspace_contract_import_no_projects_dir",
          "test_try_workspace_contract_import_no_projects_dir",
          "TestContractAutoDiscovery.test_load_contract_from_file_success",
          "test_load_contract_from_file_success",
          "TestContractAutoDiscovery.test_load_contract_from_file_fallback_search",
          "test_load_contract_from_file_fallback_search",
          "TestContractAutoDiscovery.test_load_contract_from_file_no_spec",
          "test_load_contract_from_file_no_spec",
          "TestContractAutoDiscovery.test_load_contract_from_file_execution_error",
          "test_load_contract_from_file_execution_error",
          "TestContractAutoDiscovery.test_discover_contract_classes_empty_directories",
          "test_discover_contract_classes_empty_directories",
          "TestContractAutoDiscovery.test_discover_contract_classes_core_only",
          "test_discover_contract_classes_core_only",
          "TestContractAutoDiscovery.test_discover_contract_classes_with_workspace",
          "test_discover_contract_classes_with_workspace",
          "TestContractAutoDiscovery.test_error_handling_in_load_contract_class",
          "test_error_handling_in_load_contract_class",
          "TestContractAutoDiscovery.test_logging_behavior",
          "test_logging_behavior",
          "TestContractAutoDiscoveryIntegration.test_xgboost_training_contract_discovery",
          "test_xgboost_training_contract_discovery",
          "TestContractAutoDiscoveryIntegration.test_xgboost_model_eval_contract_discovery",
          "test_xgboost_model_eval_contract_discovery",
          "TestContractAutoDiscoveryIntegration.test_contract_discovery_with_naming_variations",
          "test_contract_discovery_with_naming_variations",
          "TestContractAutoDiscoveryIntegration.test_relative_import_path_correctness",
          "test_relative_import_path_correctness",
          "TestContractAutoDiscoveryIntegration.test_automatic_contract_object_detection_realistic",
          "test_automatic_contract_object_detection_realistic",
          "TestContractAutoDiscoveryIntegration.test_complete_workflow_simulation",
          "test_complete_workflow_simulation",
          "TestContractAutoDiscoveryIntegration.test_edge_cases_and_error_scenarios",
          "test_edge_cases_and_error_scenarios",
          "TestContractAutoDiscoveryIntegration.test_performance_considerations",
          "test_performance_considerations",
          "temp_workspace",
          "contract_discovery",
          "test_init",
          "test_init_no_workspace",
          "test_pascal_to_snake_case_conversion",
          "test_is_contract_object_naming_patterns",
          "test_is_contract_object_by_attributes",
          "test_discover_contract_objects_in_module",
          "test_discover_contract_objects_error_handling",
          "test_try_direct_import_success",
          "test_try_direct_import_import_error",
          "test_try_direct_import_no_contracts_found",
          "test_try_direct_import_beyond_top_level_package_error",
          "test_load_contract_class_direct_success",
          "test_load_contract_class_snake_case_conversion",
          "test_load_contract_class_workspace_fallback",
          "test_load_contract_class_not_found",
          "test_load_contract_class_no_workspace_dirs",
          "test_try_workspace_contract_import_success",
          "test_try_workspace_contract_import_no_projects_dir",
          "test_load_contract_from_file_success",
          "test_load_contract_from_file_fallback_search",
          "test_load_contract_from_file_no_spec",
          "test_load_contract_from_file_execution_error",
          "test_discover_contract_classes_empty_directories",
          "test_discover_contract_classes_core_only",
          "test_discover_contract_classes_with_workspace",
          "test_error_handling_in_load_contract_class",
          "test_logging_behavior",
          "test_xgboost_training_contract_discovery",
          "test_xgboost_model_eval_contract_discovery",
          "test_contract_discovery_with_naming_variations",
          "test_relative_import_path_correctness",
          "test_automatic_contract_object_detection_realistic",
          "test_complete_workflow_simulation",
          "test_edge_cases_and_error_scenarios",
          "test_performance_considerations",
          "create_non_contract_mock",
          "SimpleObject.__init__",
          "__init__",
          "MockModule.__init__",
          "__init__",
          "MockContract.__init__",
          "__init__",
          "MockModule.__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "MockModule.__init__",
          "__init__",
          "__init__"
        ],
        "step_catalog/test_dual_search_space.py": [
          "TestDualSearchSpaceArchitecture.temp_package_root",
          "temp_package_root",
          "TestDualSearchSpaceArchitecture.temp_workspace_dirs",
          "temp_workspace_dirs",
          "TestDualSearchSpaceArchitecture.test_package_only_discovery",
          "test_package_only_discovery",
          "TestDualSearchSpaceArchitecture.test_single_workspace_directory",
          "test_single_workspace_directory",
          "TestDualSearchSpaceArchitecture.test_multiple_workspace_directories",
          "test_multiple_workspace_directories",
          "TestDualSearchSpaceArchitecture.test_package_root_detection_deployment_agnostic",
          "test_package_root_detection_deployment_agnostic",
          "TestDualSearchSpaceArchitecture.test_separation_of_concerns_enforcement",
          "test_separation_of_concerns_enforcement",
          "TestDualSearchSpaceArchitecture.test_workspace_directory_validation",
          "test_workspace_directory_validation",
          "TestConfigAutoDiscoveryDualSpace.temp_dual_structure",
          "temp_dual_structure",
          "TestConfigAutoDiscoveryDualSpace.test_package_discovery_only",
          "test_package_discovery_only",
          "TestConfigAutoDiscoveryDualSpace.test_workspace_discovery_with_package",
          "test_workspace_discovery_with_package",
          "TestConfigAutoDiscoveryDualSpace.test_workspace_override_precedence",
          "test_workspace_override_precedence",
          "TestConfigAutoDiscoveryDualSpace.test_multiple_workspace_directories",
          "test_multiple_workspace_directories",
          "TestConfigAutoDiscoveryDualSpace.test_project_specific_discovery",
          "test_project_specific_discovery",
          "TestConfigAutoDiscoveryDualSpace.test_hyperparameter_discovery_dual_space",
          "test_hyperparameter_discovery_dual_space",
          "TestSearchSpaceIntegration.test_step_catalog_config_discovery_integration",
          "test_step_catalog_config_discovery_integration",
          "TestSearchSpaceIntegration.test_backward_compatibility_preservation",
          "test_backward_compatibility_preservation",
          "TestSearchSpaceIntegration.test_error_handling_in_dual_space",
          "test_error_handling_in_dual_space",
          "TestDeploymentScenarios.test_pypi_deployment_simulation",
          "test_pypi_deployment_simulation",
          "TestDeploymentScenarios.test_source_deployment_simulation",
          "test_source_deployment_simulation",
          "TestDeploymentScenarios.test_submodule_deployment_simulation",
          "test_submodule_deployment_simulation",
          "temp_package_root",
          "temp_workspace_dirs",
          "test_package_only_discovery",
          "test_single_workspace_directory",
          "test_multiple_workspace_directories",
          "test_package_root_detection_deployment_agnostic",
          "test_separation_of_concerns_enforcement",
          "test_workspace_directory_validation",
          "temp_dual_structure",
          "test_package_discovery_only",
          "test_workspace_discovery_with_package",
          "test_workspace_override_precedence",
          "test_multiple_workspace_directories",
          "test_project_specific_discovery",
          "test_hyperparameter_discovery_dual_space",
          "test_step_catalog_config_discovery_integration",
          "test_backward_compatibility_preservation",
          "test_error_handling_in_dual_space",
          "test_pypi_deployment_simulation",
          "test_source_deployment_simulation",
          "test_submodule_deployment_simulation"
        ],
        "step_catalog/test_builder_discovery.py": [
          "TestBuilderAutoDiscovery.mock_package_root",
          "mock_package_root",
          "TestBuilderAutoDiscovery.mock_workspace_dirs",
          "mock_workspace_dirs",
          "TestBuilderAutoDiscovery.builder_discovery",
          "builder_discovery",
          "TestBuilderAutoDiscovery.test_initialization",
          "test_initialization",
          "TestBuilderAutoDiscovery.test_initialization_no_workspace",
          "test_initialization_no_workspace",
          "TestBuilderAutoDiscovery.test_get_registry_builder_info",
          "test_get_registry_builder_info",
          "TestBuilderAutoDiscovery.test_discover_builder_classes",
          "test_discover_builder_classes",
          "TestBuilderAutoDiscovery.test_discover_builder_classes_with_project_id",
          "test_discover_builder_classes_with_project_id",
          "TestBuilderAutoDiscovery.test_extract_step_name_from_builder_file",
          "test_extract_step_name_from_builder_file",
          "TestBuilderAutoDiscovery.test_load_class_from_file",
          "test_load_class_from_file",
          "TestBuilderAutoDiscovery.test_get_builder_info_cached",
          "test_get_builder_info_cached",
          "TestBuilderAutoDiscovery.test_get_builder_info_not_found",
          "test_get_builder_info_not_found",
          "TestBuilderAutoDiscovery.test_load_builder_class_success",
          "test_load_builder_class_success",
          "TestBuilderAutoDiscovery.test_load_builder_class_not_found",
          "test_load_builder_class_not_found",
          "TestBuilderAutoDiscovery.test_load_builder_class_load_error",
          "test_load_builder_class_load_error",
          "TestBuilderAutoDiscovery.test_load_class_from_file_success",
          "test_load_class_from_file_success",
          "TestBuilderAutoDiscovery.test_load_class_from_file_not_found",
          "test_load_class_from_file_not_found",
          "TestBuilderAutoDiscovery.test_load_class_from_file_import_error",
          "test_load_class_from_file_import_error",
          "TestBuilderAutoDiscovery.test_error_handling_and_logging",
          "test_error_handling_and_logging",
          "TestBuilderAutoDiscoveryIntegration.test_end_to_end_discovery_and_loading",
          "test_end_to_end_discovery_and_loading",
          "TestBuilderAutoDiscoveryIntegration.test_workspace_priority_over_package",
          "test_workspace_priority_over_package",
          "TestBuilderAutoDiscoveryIntegration.test_multiple_workspaces",
          "test_multiple_workspaces",
          "TestBuilderAutoDiscoveryIntegration.test_list_available_builders",
          "test_list_available_builders",
          "TestBuilderAutoDiscoveryIntegration.test_get_discovery_stats",
          "test_get_discovery_stats",
          "mock_package_root",
          "mock_workspace_dirs",
          "builder_discovery",
          "test_initialization",
          "test_initialization_no_workspace",
          "test_get_registry_builder_info",
          "test_discover_builder_classes",
          "test_discover_builder_classes_with_project_id",
          "test_extract_step_name_from_builder_file",
          "test_load_class_from_file",
          "test_get_builder_info_cached",
          "test_get_builder_info_not_found",
          "test_load_builder_class_success",
          "test_load_builder_class_not_found",
          "test_load_builder_class_load_error",
          "test_load_class_from_file_success",
          "test_load_class_from_file_not_found",
          "test_load_class_from_file_import_error",
          "test_error_handling_and_logging",
          "test_end_to_end_discovery_and_loading",
          "test_workspace_priority_over_package",
          "test_multiple_workspaces",
          "test_list_available_builders",
          "test_get_discovery_stats"
        ],
        "step_catalog/test_contract_discovery_debugging.py": [
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_1_initial_failure",
          "test_debugging_step_1_initial_failure",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_2_manual_import_verification",
          "test_debugging_step_2_manual_import_verification",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_3_contract_object_discovery_verification",
          "test_debugging_step_3_contract_object_discovery_verification",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_4_try_direct_import_method_isolation",
          "test_debugging_step_4_try_direct_import_method_isolation",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_5_pascal_case_conversion_testing",
          "test_debugging_step_5_pascal_case_conversion_testing",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_6_end_to_end_integration_test",
          "test_debugging_step_6_end_to_end_integration_test",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_7_pipeline_dag_resolver_integration",
          "test_debugging_step_7_pipeline_dag_resolver_integration",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_step_8_error_scenarios_documentation",
          "test_debugging_step_8_error_scenarios_documentation",
          "TestContractAutoDiscoveryDebuggingProcess.test_debugging_lessons_learned_summary",
          "test_debugging_lessons_learned_summary",
          "TestDebuggingProcessValidation.test_relative_import_path_regression_prevention",
          "test_relative_import_path_regression_prevention",
          "TestDebuggingProcessValidation.test_contract_discovery_robustness_validation",
          "test_contract_discovery_robustness_validation",
          "TestDebuggingProcessValidation.test_error_handling_completeness_validation",
          "test_error_handling_completeness_validation",
          "test_debugging_step_1_initial_failure",
          "test_debugging_step_2_manual_import_verification",
          "test_debugging_step_3_contract_object_discovery_verification",
          "test_debugging_step_4_try_direct_import_method_isolation",
          "test_debugging_step_5_pascal_case_conversion_testing",
          "test_debugging_step_6_end_to_end_integration_test",
          "test_debugging_step_7_pipeline_dag_resolver_integration",
          "test_debugging_step_8_error_scenarios_documentation",
          "test_debugging_lessons_learned_summary",
          "test_relative_import_path_regression_prevention",
          "test_contract_discovery_robustness_validation",
          "test_error_handling_completeness_validation",
          "mock_import_side_effect"
        ],
        "step_catalog/test_config_discovery.py": [
          "TestConfigAutoDiscovery.temp_workspace",
          "temp_workspace",
          "TestConfigAutoDiscovery.config_discovery",
          "config_discovery",
          "TestConfigAutoDiscovery.test_init",
          "test_init",
          "TestConfigAutoDiscovery.test_discover_config_classes_empty_directories",
          "test_discover_config_classes_empty_directories",
          "TestConfigAutoDiscovery.test_discover_config_classes_core_only",
          "test_discover_config_classes_core_only",
          "TestConfigAutoDiscovery.test_discover_config_classes_with_workspace",
          "test_discover_config_classes_with_workspace",
          "TestConfigAutoDiscovery.test_discover_config_classes_workspace_override",
          "test_discover_config_classes_workspace_override",
          "TestConfigAutoDiscovery.test_build_complete_config_classes_with_store",
          "test_build_complete_config_classes_with_store",
          "TestConfigAutoDiscovery.test_build_complete_config_classes_import_error",
          "test_build_complete_config_classes_import_error",
          "TestConfigAutoDiscovery.test_scan_config_directory_nonexistent",
          "test_scan_config_directory_nonexistent",
          "TestConfigAutoDiscovery.test_scan_config_directory_with_files",
          "test_scan_config_directory_with_files",
          "TestConfigAutoDiscovery.test_is_config_class_by_inheritance",
          "test_is_config_class_by_inheritance",
          "TestConfigAutoDiscovery.test_is_config_class_by_naming",
          "test_is_config_class_by_naming",
          "TestConfigAutoDiscovery.test_is_config_class_attribute_inheritance",
          "test_is_config_class_attribute_inheritance",
          "TestConfigAutoDiscovery.test_file_to_module_path_with_src",
          "test_file_to_module_path_with_src",
          "TestConfigAutoDiscovery.test_file_to_module_path_without_src",
          "test_file_to_module_path_without_src",
          "TestConfigAutoDiscovery.test_file_to_module_path_short_path",
          "test_file_to_module_path_short_path",
          "TestConfigAutoDiscovery.test_error_handling_in_scan_directory",
          "test_error_handling_in_scan_directory",
          "TestConfigAutoDiscovery.test_error_handling_in_import",
          "test_error_handling_in_import",
          "TestConfigAutoDiscovery.test_logging_behavior",
          "test_logging_behavior",
          "TestConfigAutoDiscoveryIntegration.test_real_config_class_detection",
          "test_real_config_class_detection",
          "TestConfigAutoDiscoveryIntegration.test_module_path_conversion_realistic",
          "test_module_path_conversion_realistic",
          "TestConfigAutoDiscoveryIntegration.test_complete_workflow_simulation",
          "test_complete_workflow_simulation",
          "temp_workspace",
          "config_discovery",
          "test_init",
          "test_discover_config_classes_empty_directories",
          "test_discover_config_classes_core_only",
          "test_discover_config_classes_with_workspace",
          "test_discover_config_classes_workspace_override",
          "test_build_complete_config_classes_with_store",
          "test_build_complete_config_classes_import_error",
          "test_scan_config_directory_nonexistent",
          "test_scan_config_directory_with_files",
          "test_is_config_class_by_inheritance",
          "test_is_config_class_by_naming",
          "test_is_config_class_attribute_inheritance",
          "test_file_to_module_path_with_src",
          "test_file_to_module_path_without_src",
          "test_file_to_module_path_short_path",
          "test_error_handling_in_scan_directory",
          "test_error_handling_in_import",
          "test_logging_behavior",
          "test_real_config_class_detection",
          "test_module_path_conversion_realistic",
          "test_complete_workflow_simulation"
        ],
        "step_catalog/test_models.py": [
          "TestFileMetadata.test_file_metadata_creation",
          "test_file_metadata_creation",
          "TestFileMetadata.test_file_metadata_immutable",
          "test_file_metadata_immutable",
          "TestFileMetadata.test_file_metadata_validation",
          "test_file_metadata_validation",
          "TestStepInfo.test_step_info_creation",
          "test_step_info_creation",
          "TestStepInfo.test_step_info_with_file_components",
          "test_step_info_with_file_components",
          "TestStepInfo.test_step_info_properties",
          "test_step_info_properties",
          "TestStepInfo.test_step_info_properties_with_none_values",
          "test_step_info_properties_with_none_values",
          "TestStepInfo.test_step_info_properties_with_missing_keys",
          "test_step_info_properties_with_missing_keys",
          "TestStepInfo.test_step_info_defaults",
          "test_step_info_defaults",
          "TestStepSearchResult.test_search_result_creation",
          "test_search_result_creation",
          "TestStepSearchResult.test_search_result_immutable",
          "test_search_result_immutable",
          "TestStepSearchResult.test_search_result_defaults",
          "test_search_result_defaults",
          "TestStepSearchResult.test_search_result_score_validation",
          "test_search_result_score_validation",
          "TestStepSearchResult.test_search_result_match_reasons",
          "test_search_result_match_reasons",
          "TestModelIntegration.test_step_info_with_multiple_components",
          "test_step_info_with_multiple_components",
          "TestModelIntegration.test_search_result_with_step_info_components",
          "test_search_result_with_step_info_components",
          "TestModelIntegration.test_model_serialization_compatibility",
          "test_model_serialization_compatibility",
          "test_file_metadata_creation",
          "test_file_metadata_immutable",
          "test_file_metadata_validation",
          "test_step_info_creation",
          "test_step_info_with_file_components",
          "test_step_info_properties",
          "test_step_info_properties_with_none_values",
          "test_step_info_properties_with_missing_keys",
          "test_step_info_defaults",
          "test_search_result_creation",
          "test_search_result_immutable",
          "test_search_result_defaults",
          "test_search_result_score_validation",
          "test_search_result_match_reasons",
          "test_step_info_with_multiple_components",
          "test_search_result_with_step_info_components",
          "test_model_serialization_compatibility"
        ],
        "step_catalog/test_integration.py": [
          "TestModuleIntegration.test_module_imports",
          "test_module_imports",
          "TestModuleIntegration.test_factory_function_basic",
          "test_factory_function_basic",
          "TestModuleIntegration.test_factory_function_with_feature_flags",
          "test_factory_function_with_feature_flags",
          "TestModuleIntegration.test_factory_function_environment_variable",
          "test_factory_function_environment_variable",
          "TestEndToEndWorkflow.realistic_workspace",
          "realistic_workspace",
          "TestEndToEndWorkflow.test_complete_discovery_workflow",
          "test_complete_discovery_workflow",
          "TestEndToEndWorkflow.test_performance_and_metrics",
          "test_performance_and_metrics",
          "TestEndToEndWorkflow.test_error_resilience",
          "test_error_resilience",
          "TestBackwardCompatibility.test_existing_api_compatibility",
          "test_existing_api_compatibility",
          "TestBackwardCompatibility.test_data_model_compatibility",
          "test_data_model_compatibility",
          "test_module_imports",
          "test_factory_function_basic",
          "test_factory_function_with_feature_flags",
          "test_factory_function_environment_variable",
          "realistic_workspace",
          "test_complete_discovery_workflow",
          "test_performance_and_metrics",
          "test_error_resilience",
          "test_existing_api_compatibility",
          "test_data_model_compatibility"
        ],
        "step_catalog/test_step_catalog.py": [
          "TestStepCatalogInitialization.temp_workspace",
          "temp_workspace",
          "TestStepCatalogInitialization.test_init_package_only",
          "test_init_package_only",
          "TestStepCatalogInitialization.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestStepCatalogInitialization.test_init_with_multiple_workspace_dirs",
          "test_init_with_multiple_workspace_dirs",
          "TestStepCatalogInitialization.test_metrics_initialization",
          "test_metrics_initialization",
          "TestUS1QueryByStepName.catalog_with_mock_index",
          "catalog_with_mock_index",
          "TestUS1QueryByStepName.test_get_step_info_existing_step",
          "test_get_step_info_existing_step",
          "TestUS1QueryByStepName.test_get_step_info_nonexistent_step",
          "test_get_step_info_nonexistent_step",
          "TestUS1QueryByStepName.test_get_step_info_with_job_type",
          "test_get_step_info_with_job_type",
          "TestUS1QueryByStepName.test_get_step_info_metrics_update",
          "test_get_step_info_metrics_update",
          "TestUS1QueryByStepName.test_get_step_info_error_handling",
          "test_get_step_info_error_handling",
          "TestUS2ReverseLookup.catalog_with_components",
          "catalog_with_components",
          "TestUS2ReverseLookup.test_find_step_by_component_existing",
          "test_find_step_by_component_existing",
          "TestUS2ReverseLookup.test_find_step_by_component_nonexistent",
          "test_find_step_by_component_nonexistent",
          "TestUS2ReverseLookup.test_find_step_by_component_error_handling",
          "test_find_step_by_component_error_handling",
          "TestUS3MultiWorkspaceDiscovery.catalog_with_workspaces",
          "catalog_with_workspaces",
          "TestUS3MultiWorkspaceDiscovery.test_list_available_steps_all",
          "test_list_available_steps_all",
          "TestUS3MultiWorkspaceDiscovery.test_list_available_steps_by_workspace",
          "test_list_available_steps_by_workspace",
          "TestUS3MultiWorkspaceDiscovery.test_list_available_steps_by_job_type",
          "test_list_available_steps_by_job_type",
          "TestUS3MultiWorkspaceDiscovery.test_list_available_steps_error_handling",
          "test_list_available_steps_error_handling",
          "TestUS4EfficientScaling.catalog_with_search_data",
          "catalog_with_search_data",
          "TestUS4EfficientScaling.test_search_steps_exact_match",
          "test_search_steps_exact_match",
          "TestUS4EfficientScaling.test_search_steps_fuzzy_match",
          "test_search_steps_fuzzy_match",
          "TestUS4EfficientScaling.test_search_steps_with_job_type_filter",
          "test_search_steps_with_job_type_filter",
          "TestUS4EfficientScaling.test_search_steps_components_available",
          "test_search_steps_components_available",
          "TestUS4EfficientScaling.test_search_steps_sorting",
          "test_search_steps_sorting",
          "TestUS4EfficientScaling.test_search_steps_error_handling",
          "test_search_steps_error_handling",
          "TestUS5ConfigAutoDiscovery.catalog_with_config_discovery",
          "catalog_with_config_discovery",
          "TestUS5ConfigAutoDiscovery.test_discover_config_classes",
          "test_discover_config_classes",
          "TestUS5ConfigAutoDiscovery.test_build_complete_config_classes",
          "test_build_complete_config_classes",
          "TestNewDiscoveryMethods.catalog_with_script_components",
          "catalog_with_script_components",
          "TestNewDiscoveryMethods.test_list_steps_with_scripts_basic",
          "test_list_steps_with_scripts_basic",
          "TestNewDiscoveryMethods.test_list_steps_with_scripts_with_workspace_filter",
          "test_list_steps_with_scripts_with_workspace_filter",
          "TestNewDiscoveryMethods.test_list_steps_with_scripts_with_job_type_filter",
          "test_list_steps_with_scripts_with_job_type_filter",
          "TestNewDiscoveryMethods.test_list_steps_with_scripts_error_handling",
          "test_list_steps_with_scripts_error_handling",
          "TestNewDiscoveryMethods.test_list_steps_with_scripts_sorted_output",
          "test_list_steps_with_scripts_sorted_output",
          "TestDeduplicationFunctionality.catalog_with_deduplication",
          "catalog_with_deduplication",
          "TestDeduplicationFunctionality.test_deduplicate_and_filter_concrete_steps",
          "test_deduplicate_and_filter_concrete_steps",
          "TestDeduplicationFunctionality.test_is_job_type_variant",
          "test_is_job_type_variant",
          "TestDeduplicationFunctionality.test_resolve_to_canonical_name",
          "test_resolve_to_canonical_name",
          "TestDeduplicationFunctionality.test_resolve_to_canonical_name_for_indexing",
          "test_resolve_to_canonical_name_for_indexing",
          "TestAdditionalUtilityMethods.catalog_with_variants",
          "catalog_with_variants",
          "TestAdditionalUtilityMethods.test_get_job_type_variants",
          "test_get_job_type_variants",
          "TestAdditionalUtilityMethods.test_get_job_type_variants_no_variants",
          "test_get_job_type_variants_no_variants",
          "TestAdditionalUtilityMethods.test_resolve_pipeline_node",
          "test_resolve_pipeline_node",
          "TestAdditionalUtilityMethods.test_get_metrics_report",
          "test_get_metrics_report",
          "TestIndexBuilding.catalog_for_indexing",
          "catalog_for_indexing",
          "TestIndexBuilding.test_ensure_index_built_lazy_loading",
          "test_ensure_index_built_lazy_loading",
          "TestIndexBuilding.test_ensure_index_built_already_built",
          "test_ensure_index_built_already_built",
          "TestIndexBuilding.test_build_index_with_registry",
          "test_build_index_with_registry",
          "TestIndexBuilding.test_build_index_registry_import_error",
          "test_build_index_registry_import_error",
          "TestIndexBuilding.test_extract_step_name_script",
          "test_extract_step_name_script",
          "TestIndexBuilding.test_extract_step_name_contract",
          "test_extract_step_name_contract",
          "TestIndexBuilding.test_extract_step_name_spec",
          "test_extract_step_name_spec",
          "TestIndexBuilding.test_extract_step_name_builder",
          "test_extract_step_name_builder",
          "TestIndexBuilding.test_extract_step_name_config",
          "test_extract_step_name_config",
          "TestErrorHandlingAndResilience.catalog_with_error_conditions",
          "catalog_with_error_conditions",
          "TestErrorHandlingAndResilience.test_graceful_degradation_on_index_build_failure",
          "test_graceful_degradation_on_index_build_failure",
          "TestErrorHandlingAndResilience.test_error_logging_in_component_discovery",
          "test_error_logging_in_component_discovery",
          "TestErrorHandlingAndResilience.test_metrics_update_on_error",
          "test_metrics_update_on_error",
          "TestFactoryFunction.test_create_step_catalog_import",
          "test_create_step_catalog_import",
          "TestFactoryFunction.test_create_step_catalog_with_feature_flag",
          "test_create_step_catalog_with_feature_flag",
          "TestFactoryFunction.test_create_step_catalog_environment_variable",
          "test_create_step_catalog_environment_variable",
          "TestLegacyAliasesSupport.catalog_with_aliases",
          "catalog_with_aliases",
          "TestLegacyAliasesSupport.test_legacy_alias_resolution_in_get_step_info",
          "test_legacy_alias_resolution_in_get_step_info",
          "TestLegacyAliasesSupport.test_legacy_alias_resolution_in_search",
          "test_legacy_alias_resolution_in_search",
          "TestLegacyAliasesSupport.test_legacy_alias_in_supported_types",
          "test_legacy_alias_in_supported_types",
          "TestPerformanceAndScaling.large_catalog",
          "large_catalog",
          "TestPerformanceAndScaling.test_large_scale_step_type_listing",
          "test_large_scale_step_type_listing",
          "TestPerformanceAndScaling.test_large_scale_builder_availability_validation",
          "test_large_scale_builder_availability_validation",
          "TestPerformanceAndScaling.test_search_performance_with_large_catalog",
          "test_search_performance_with_large_catalog",
          "TestIntegrationScenarios.test_complete_workflow_simulation",
          "test_complete_workflow_simulation",
          "TestIntegrationScenarios.test_multi_workspace_realistic_scenario",
          "test_multi_workspace_realistic_scenario",
          "temp_workspace",
          "test_init_package_only",
          "test_init_with_workspace_dirs",
          "test_init_with_multiple_workspace_dirs",
          "test_metrics_initialization",
          "catalog_with_mock_index",
          "test_get_step_info_existing_step",
          "test_get_step_info_nonexistent_step",
          "test_get_step_info_with_job_type",
          "test_get_step_info_metrics_update",
          "test_get_step_info_error_handling",
          "catalog_with_components",
          "test_find_step_by_component_existing",
          "test_find_step_by_component_nonexistent",
          "test_find_step_by_component_error_handling",
          "catalog_with_workspaces",
          "test_list_available_steps_all",
          "test_list_available_steps_by_workspace",
          "test_list_available_steps_by_job_type",
          "test_list_available_steps_error_handling",
          "catalog_with_search_data",
          "test_search_steps_exact_match",
          "test_search_steps_fuzzy_match",
          "test_search_steps_with_job_type_filter",
          "test_search_steps_components_available",
          "test_search_steps_sorting",
          "test_search_steps_error_handling",
          "catalog_with_config_discovery",
          "test_discover_config_classes",
          "test_build_complete_config_classes",
          "catalog_with_script_components",
          "test_list_steps_with_scripts_basic",
          "test_list_steps_with_scripts_with_workspace_filter",
          "test_list_steps_with_scripts_with_job_type_filter",
          "test_list_steps_with_scripts_error_handling",
          "test_list_steps_with_scripts_sorted_output",
          "catalog_with_deduplication",
          "test_deduplicate_and_filter_concrete_steps",
          "test_is_job_type_variant",
          "test_resolve_to_canonical_name",
          "test_resolve_to_canonical_name_for_indexing",
          "catalog_with_variants",
          "test_get_job_type_variants",
          "test_get_job_type_variants_no_variants",
          "test_resolve_pipeline_node",
          "test_get_metrics_report",
          "catalog_for_indexing",
          "test_ensure_index_built_lazy_loading",
          "test_ensure_index_built_already_built",
          "test_build_index_with_registry",
          "test_build_index_registry_import_error",
          "test_extract_step_name_script",
          "test_extract_step_name_contract",
          "test_extract_step_name_spec",
          "test_extract_step_name_builder",
          "test_extract_step_name_config",
          "catalog_with_error_conditions",
          "test_graceful_degradation_on_index_build_failure",
          "test_error_logging_in_component_discovery",
          "test_metrics_update_on_error",
          "test_create_step_catalog_import",
          "test_create_step_catalog_with_feature_flag",
          "test_create_step_catalog_environment_variable",
          "catalog_with_aliases",
          "test_legacy_alias_resolution_in_get_step_info",
          "test_legacy_alias_resolution_in_search",
          "test_legacy_alias_in_supported_types",
          "large_catalog",
          "test_large_scale_step_type_listing",
          "test_large_scale_builder_availability_validation",
          "test_search_performance_with_large_catalog",
          "test_complete_workflow_simulation",
          "test_multi_workspace_realistic_scenario"
        ],
        "step_catalog/test_mapping.py": [
          "TestStepCatalogMapper.mapping_instance",
          "mapping_instance",
          "TestStepCatalogMapper.mock_step_catalog",
          "mock_step_catalog",
          "TestStepCatalogMapper.test_initialization",
          "test_initialization",
          "TestStepCatalogMapper.test_legacy_aliases_defined",
          "test_legacy_aliases_defined",
          "TestStepCatalogMapper.test_get_builder_for_config_with_valid_config",
          "test_get_builder_for_config_with_valid_config",
          "TestStepCatalogMapper.test_get_builder_for_config_with_none",
          "test_get_builder_for_config_with_none",
          "TestStepCatalogMapper.test_get_builder_for_config_with_unknown_config",
          "test_get_builder_for_config_with_unknown_config",
          "TestStepCatalogMapper.test_get_builder_for_step_type_direct",
          "test_get_builder_for_step_type_direct",
          "TestStepCatalogMapper.test_get_builder_for_step_type_with_legacy_alias",
          "test_get_builder_for_step_type_with_legacy_alias",
          "TestStepCatalogMapper.test_get_builder_for_step_type_with_none",
          "test_get_builder_for_step_type_with_none",
          "TestStepCatalogMapper.test_get_builder_for_step_type_with_empty_string",
          "test_get_builder_for_step_type_with_empty_string",
          "TestStepCatalogMapper.test_fallback_config_to_step_type",
          "test_fallback_config_to_step_type",
          "TestStepCatalogMapper.test_legacy_alias_resolution",
          "test_legacy_alias_resolution",
          "TestStepCatalogMapper.test_is_step_type_supported",
          "test_is_step_type_supported",
          "TestStepCatalogMapper.test_validate_builder_availability",
          "test_validate_builder_availability",
          "TestPipelineConstructionInterface.pipeline_interface",
          "pipeline_interface",
          "TestPipelineConstructionInterface.mock_step_catalog_with_data",
          "mock_step_catalog_with_data",
          "TestPipelineConstructionInterface.test_initialization",
          "test_initialization",
          "TestPipelineConstructionInterface.test_get_builder_map",
          "test_get_builder_map",
          "TestPipelineConstructionInterface.test_get_builder_map_with_none_builders",
          "test_get_builder_map_with_none_builders",
          "TestPipelineConstructionInterface.test_validate_dag_compatibility",
          "test_validate_dag_compatibility",
          "TestPipelineConstructionInterface.test_get_step_builder_suggestions",
          "test_get_step_builder_suggestions",
          "TestIntegrationScenarios.test_full_config_to_builder_resolution_flow",
          "test_full_config_to_builder_resolution_flow",
          "TestIntegrationScenarios.test_legacy_alias_resolution_flow",
          "test_legacy_alias_resolution_flow",
          "TestIntegrationScenarios.test_pipeline_interface_with_mapping_integration",
          "test_pipeline_interface_with_mapping_integration",
          "TestErrorHandlingAndEdgeCases.test_mapping_with_malformed_config_names",
          "test_mapping_with_malformed_config_names",
          "TestErrorHandlingAndEdgeCases.test_pipeline_interface_with_catalog_errors",
          "test_pipeline_interface_with_catalog_errors",
          "TestErrorHandlingAndEdgeCases.test_builder_resolution_with_import_errors",
          "test_builder_resolution_with_import_errors",
          "TestErrorHandlingAndEdgeCases.test_mapping_thread_safety",
          "test_mapping_thread_safety",
          "TestPerformanceCharacteristics.test_large_scale_step_type_resolution",
          "test_large_scale_step_type_resolution",
          "TestPerformanceCharacteristics.test_config_name_transformation_performance",
          "test_config_name_transformation_performance",
          "mapping_instance",
          "mock_step_catalog",
          "test_initialization",
          "test_legacy_aliases_defined",
          "test_get_builder_for_config_with_valid_config",
          "test_get_builder_for_config_with_none",
          "test_get_builder_for_config_with_unknown_config",
          "test_get_builder_for_step_type_direct",
          "test_get_builder_for_step_type_with_legacy_alias",
          "test_get_builder_for_step_type_with_none",
          "test_get_builder_for_step_type_with_empty_string",
          "test_fallback_config_to_step_type",
          "test_legacy_alias_resolution",
          "test_is_step_type_supported",
          "test_validate_builder_availability",
          "pipeline_interface",
          "mock_step_catalog_with_data",
          "test_initialization",
          "test_get_builder_map",
          "test_get_builder_map_with_none_builders",
          "test_validate_dag_compatibility",
          "test_get_step_builder_suggestions",
          "test_full_config_to_builder_resolution_flow",
          "test_legacy_alias_resolution_flow",
          "test_pipeline_interface_with_mapping_integration",
          "test_mapping_with_malformed_config_names",
          "test_pipeline_interface_with_catalog_errors",
          "test_builder_resolution_with_import_errors",
          "test_mapping_thread_safety",
          "test_large_scale_step_type_resolution",
          "test_config_name_transformation_performance",
          "mock_get_builder",
          "mock_get_step_info",
          "worker",
          "mock_get_builder"
        ],
        "step_catalog/adapters/test_legacy_wrappers.py": [
          "TestLegacyDiscoveryWrapper.temp_workspace",
          "temp_workspace",
          "TestLegacyDiscoveryWrapper.test_init",
          "test_init",
          "TestLegacyDiscoveryWrapper.test_refresh_cache_success",
          "test_refresh_cache_success",
          "TestLegacyDiscoveryWrapper.test_refresh_cache_error_handling",
          "test_refresh_cache_error_handling",
          "TestLegacyDiscoveryWrapper.test_extract_base_name",
          "test_extract_base_name",
          "TestLegacyDiscoveryWrapper.test_normalize_name",
          "test_normalize_name",
          "TestLegacyDiscoveryWrapper.test_calculate_similarity",
          "test_calculate_similarity",
          "TestLegacyDiscoveryWrapper.test_find_best_match_direct_catalog",
          "test_find_best_match_direct_catalog",
          "TestLegacyDiscoveryWrapper.test_find_best_match_fuzzy_matching",
          "test_find_best_match_fuzzy_matching",
          "TestLegacyDiscoveryWrapper.test_find_best_match_no_match",
          "test_find_best_match_no_match",
          "TestLegacyDiscoveryWrapper.test_get_available_files_report",
          "test_get_available_files_report",
          "TestLegacyDiscoveryWrapper.test_extract_base_name_from_spec",
          "test_extract_base_name_from_spec",
          "TestLegacyDiscoveryWrapper.test_find_spec_constant_name",
          "test_find_spec_constant_name",
          "TestLegacyDiscoveryWrapper.test_find_spec_constant_name_no_spec",
          "test_find_spec_constant_name_no_spec",
          "TestLegacyDiscoveryWrapper.test_find_specification_file_legacy_alias",
          "test_find_specification_file_legacy_alias",
          "TestLegacyDiscoveryWrapper.test_find_contract_file",
          "test_find_contract_file",
          "TestLegacyDiscoveryWrapper.test_find_contract_file_not_found",
          "test_find_contract_file_not_found",
          "TestLegacyDiscoveryWrapper.test_find_spec_file",
          "test_find_spec_file",
          "TestLegacyDiscoveryWrapper.test_find_builder_file",
          "test_find_builder_file",
          "TestLegacyDiscoveryWrapper.test_find_config_file",
          "test_find_config_file",
          "TestLegacyDiscoveryWrapper.test_find_all_component_files",
          "test_find_all_component_files",
          "TestLegacyDiscoveryWrapper.test_find_all_component_files_error",
          "test_find_all_component_files_error",
          "TestLegacyDiscoveryWrapper.test_delegation_methods",
          "test_delegation_methods",
          "TestLegacyDiscoveryWrapper.test_get_adapter",
          "test_get_adapter",
          "TestLegacyDiscoveryWrapper.test_get_unified_catalog",
          "test_get_unified_catalog",
          "TestLegacyFunctions.test_build_complete_config_classes_success",
          "test_build_complete_config_classes_success",
          "TestLegacyFunctions.test_build_complete_config_classes_error_fallback",
          "test_build_complete_config_classes_error_fallback",
          "TestLegacyFunctions.test_detect_config_classes_from_json",
          "test_detect_config_classes_from_json",
          "TestIntegrationScenarios.temp_workspace",
          "temp_workspace",
          "TestIntegrationScenarios.test_complete_legacy_wrapper_workflow",
          "test_complete_legacy_wrapper_workflow",
          "TestIntegrationScenarios.test_adapter_integration",
          "test_adapter_integration",
          "TestErrorHandlingAndEdgeCases.temp_workspace",
          "temp_workspace",
          "TestErrorHandlingAndEdgeCases.test_wrapper_with_catalog_failure",
          "test_wrapper_with_catalog_failure",
          "TestErrorHandlingAndEdgeCases.test_similarity_calculation_edge_cases",
          "test_similarity_calculation_edge_cases",
          "TestErrorHandlingAndEdgeCases.test_name_normalization_edge_cases",
          "test_name_normalization_edge_cases",
          "temp_workspace",
          "test_init",
          "test_refresh_cache_success",
          "test_refresh_cache_error_handling",
          "test_extract_base_name",
          "test_normalize_name",
          "test_calculate_similarity",
          "test_find_best_match_direct_catalog",
          "test_find_best_match_fuzzy_matching",
          "test_find_best_match_no_match",
          "test_get_available_files_report",
          "test_extract_base_name_from_spec",
          "test_find_spec_constant_name",
          "test_find_spec_constant_name_no_spec",
          "test_find_specification_file_legacy_alias",
          "test_find_contract_file",
          "test_find_contract_file_not_found",
          "test_find_spec_file",
          "test_find_builder_file",
          "test_find_config_file",
          "test_find_all_component_files",
          "test_find_all_component_files_error",
          "test_delegation_methods",
          "test_get_adapter",
          "test_get_unified_catalog",
          "test_build_complete_config_classes_success",
          "test_build_complete_config_classes_error_fallback",
          "test_detect_config_classes_from_json",
          "temp_workspace",
          "test_complete_legacy_wrapper_workflow",
          "test_adapter_integration",
          "temp_workspace",
          "test_wrapper_with_catalog_failure",
          "test_similarity_calculation_edge_cases",
          "test_name_normalization_edge_cases"
        ],
        "step_catalog/adapters/test_contract_adapter.py": [
          "TestContractDiscoveryResult.test_init_success",
          "test_init_success",
          "TestContractDiscoveryResult.test_init_failure",
          "test_init_failure",
          "TestContractDiscoveryResult.test_init_defaults",
          "test_init_defaults",
          "TestContractDiscoveryResult.test_repr_success",
          "test_repr_success",
          "TestContractDiscoveryResult.test_repr_failure",
          "test_repr_failure",
          "TestContractDiscoveryEngineAdapter.temp_workspace",
          "temp_workspace",
          "TestContractDiscoveryEngineAdapter.test_init",
          "test_init",
          "TestContractDiscoveryEngineAdapter.test_discover_contracts_with_scripts_success",
          "test_discover_contracts_with_scripts_success",
          "TestContractDiscoveryEngineAdapter.test_discover_contracts_with_scripts_error",
          "test_discover_contracts_with_scripts_error",
          "TestContractDiscoveryEngineAdapter.test_discover_all_contracts_success",
          "test_discover_all_contracts_success",
          "TestContractDiscoveryEngineAdapter.test_discover_all_contracts_error",
          "test_discover_all_contracts_error",
          "TestContractDiscoveryEngineAdapter.test_extract_contract_reference_from_spec_success",
          "test_extract_contract_reference_from_spec_success",
          "TestContractDiscoveryEngineAdapter.test_extract_contract_reference_from_spec_no_step",
          "test_extract_contract_reference_from_spec_no_step",
          "TestContractDiscoveryEngineAdapter.test_extract_contract_reference_from_spec_no_contract",
          "test_extract_contract_reference_from_spec_no_contract",
          "TestContractDiscoveryEngineAdapter.test_extract_contract_reference_from_spec_error",
          "test_extract_contract_reference_from_spec_error",
          "TestContractDiscoveryEngineAdapter.test_build_entry_point_mapping_success",
          "test_build_entry_point_mapping_success",
          "TestContractDiscoveryEngineAdapter.test_build_entry_point_mapping_error",
          "test_build_entry_point_mapping_error",
          "TestContractDiscoveryManagerAdapter.temp_workspace",
          "temp_workspace",
          "TestContractDiscoveryManagerAdapter.test_init_with_test_data_dir",
          "test_init_with_test_data_dir",
          "TestContractDiscoveryManagerAdapter.test_init_with_workspace_root",
          "test_init_with_workspace_root",
          "TestContractDiscoveryManagerAdapter.test_init_with_defaults",
          "test_init_with_defaults",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_success_with_path",
          "test_discover_contract_success_with_path",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_success_without_path",
          "test_discover_contract_success_without_path",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_not_found",
          "test_discover_contract_not_found",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_caching",
          "test_discover_contract_caching",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_with_canonical_name",
          "test_discover_contract_with_canonical_name",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_error",
          "test_discover_contract_error",
          "TestContractDiscoveryManagerAdapter.test_get_contract_input_paths_success",
          "test_get_contract_input_paths_success",
          "TestContractDiscoveryManagerAdapter.test_get_contract_input_paths_no_paths",
          "test_get_contract_input_paths_no_paths",
          "TestContractDiscoveryManagerAdapter.test_get_contract_input_paths_error",
          "test_get_contract_input_paths_error",
          "TestContractDiscoveryManagerAdapter.test_get_contract_output_paths_success",
          "test_get_contract_output_paths_success",
          "TestContractDiscoveryManagerAdapter.test_get_contract_output_paths_no_paths",
          "test_get_contract_output_paths_no_paths",
          "TestContractDiscoveryManagerAdapter.test_get_contract_environ_vars_success",
          "test_get_contract_environ_vars_success",
          "TestContractDiscoveryManagerAdapter.test_get_contract_environ_vars_no_vars",
          "test_get_contract_environ_vars_no_vars",
          "TestContractDiscoveryManagerAdapter.test_get_contract_environ_vars_error",
          "test_get_contract_environ_vars_error",
          "TestContractDiscoveryManagerAdapter.test_get_contract_job_args_success",
          "test_get_contract_job_args_success",
          "TestContractDiscoveryManagerAdapter.test_get_contract_job_args_from_metadata",
          "test_get_contract_job_args_from_metadata",
          "TestContractDiscoveryManagerAdapter.test_get_contract_job_args_no_args",
          "test_get_contract_job_args_no_args",
          "TestContractDiscoveryManagerAdapter.test_get_contract_job_args_error",
          "test_get_contract_job_args_error",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_sagemaker_input",
          "test_adapt_path_for_local_testing_sagemaker_input",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_sagemaker_output",
          "test_adapt_path_for_local_testing_sagemaker_output",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_processing_input",
          "test_adapt_path_for_local_testing_processing_input",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_processing_output",
          "test_adapt_path_for_local_testing_processing_output",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_custom_path",
          "test_adapt_path_for_local_testing_custom_path",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing_error",
          "test_adapt_path_for_local_testing_error",
          "TestIntegrationScenarios.temp_workspace",
          "temp_workspace",
          "TestIntegrationScenarios.test_complete_contract_discovery_workflow",
          "test_complete_contract_discovery_workflow",
          "TestIntegrationScenarios.test_manager_adapter_contract_analysis_workflow",
          "test_manager_adapter_contract_analysis_workflow",
          "TestErrorHandlingAndEdgeCases.temp_workspace",
          "temp_workspace",
          "TestErrorHandlingAndEdgeCases.test_engine_adapter_with_catalog_failure",
          "test_engine_adapter_with_catalog_failure",
          "TestErrorHandlingAndEdgeCases.test_manager_adapter_with_invalid_contract",
          "test_manager_adapter_with_invalid_contract",
          "TestErrorHandlingAndEdgeCases.test_path_adaptation_edge_cases",
          "test_path_adaptation_edge_cases",
          "test_init_success",
          "test_init_failure",
          "test_init_defaults",
          "test_repr_success",
          "test_repr_failure",
          "temp_workspace",
          "test_init",
          "test_discover_contracts_with_scripts_success",
          "test_discover_contracts_with_scripts_error",
          "test_discover_all_contracts_success",
          "test_discover_all_contracts_error",
          "test_extract_contract_reference_from_spec_success",
          "test_extract_contract_reference_from_spec_no_step",
          "test_extract_contract_reference_from_spec_no_contract",
          "test_extract_contract_reference_from_spec_error",
          "test_build_entry_point_mapping_success",
          "test_build_entry_point_mapping_error",
          "temp_workspace",
          "test_init_with_test_data_dir",
          "test_init_with_workspace_root",
          "test_init_with_defaults",
          "test_discover_contract_success_with_path",
          "test_discover_contract_success_without_path",
          "test_discover_contract_not_found",
          "test_discover_contract_caching",
          "test_discover_contract_with_canonical_name",
          "test_discover_contract_error",
          "test_get_contract_input_paths_success",
          "test_get_contract_input_paths_no_paths",
          "test_get_contract_input_paths_error",
          "test_get_contract_output_paths_success",
          "test_get_contract_output_paths_no_paths",
          "test_get_contract_environ_vars_success",
          "test_get_contract_environ_vars_no_vars",
          "test_get_contract_environ_vars_error",
          "test_get_contract_job_args_success",
          "test_get_contract_job_args_from_metadata",
          "test_get_contract_job_args_no_args",
          "test_get_contract_job_args_error",
          "test_adapt_path_for_local_testing_sagemaker_input",
          "test_adapt_path_for_local_testing_sagemaker_output",
          "test_adapt_path_for_local_testing_processing_input",
          "test_adapt_path_for_local_testing_processing_output",
          "test_adapt_path_for_local_testing_custom_path",
          "test_adapt_path_for_local_testing_error",
          "temp_workspace",
          "test_complete_contract_discovery_workflow",
          "test_manager_adapter_contract_analysis_workflow",
          "temp_workspace",
          "test_engine_adapter_with_catalog_failure",
          "test_manager_adapter_with_invalid_contract",
          "test_path_adaptation_edge_cases"
        ],
        "step_catalog/adapters/test_config_resolver.py": [
          "TestStepConfigResolverAdapter.temp_workspace",
          "temp_workspace",
          "TestStepConfigResolverAdapter.mock_configs",
          "mock_configs",
          "TestStepConfigResolverAdapter.test_init_without_workspace",
          "test_init_without_workspace",
          "TestStepConfigResolverAdapter.test_init_with_workspace_and_threshold",
          "test_init_with_workspace_and_threshold",
          "TestStepConfigResolverAdapter.test_constants",
          "test_constants",
          "TestStepConfigResolverAdapter.test_resolve_config_map_direct_matching",
          "test_resolve_config_map_direct_matching",
          "TestStepConfigResolverAdapter.test_resolve_config_map_catalog_fallback",
          "test_resolve_config_map_catalog_fallback",
          "TestStepConfigResolverAdapter.test_resolve_config_map_last_resort",
          "test_resolve_config_map_last_resort",
          "TestStepConfigResolverAdapter.test_resolve_config_map_error_handling",
          "test_resolve_config_map_error_handling",
          "TestStepConfigResolverAdapter.test_direct_name_matching_exact_match",
          "test_direct_name_matching_exact_match",
          "TestStepConfigResolverAdapter.test_direct_name_matching_case_insensitive",
          "test_direct_name_matching_case_insensitive",
          "TestStepConfigResolverAdapter.test_direct_name_matching_metadata_mapping",
          "test_direct_name_matching_metadata_mapping",
          "TestStepConfigResolverAdapter.test_direct_name_matching_with_job_type",
          "test_direct_name_matching_with_job_type",
          "TestStepConfigResolverAdapter.test_direct_name_matching_no_match",
          "test_direct_name_matching_no_match",
          "TestStepConfigResolverAdapter.test_job_type_matching",
          "test_job_type_matching",
          "TestStepConfigResolverAdapter.test_job_type_matching_no_job_type_detected",
          "test_job_type_matching_no_job_type_detected",
          "TestStepConfigResolverAdapter.test_calculate_config_type_confidence",
          "test_calculate_config_type_confidence",
          "TestStepConfigResolverAdapter.test_semantic_matching",
          "test_semantic_matching",
          "TestStepConfigResolverAdapter.test_pattern_matching",
          "test_pattern_matching",
          "TestStepConfigResolverAdapter.test_config_class_to_step_type_with_catalog",
          "test_config_class_to_step_type_with_catalog",
          "TestStepConfigResolverAdapter.test_config_class_to_step_type_legacy_fallback",
          "test_config_class_to_step_type_legacy_fallback",
          "TestStepConfigResolverAdapter.test_config_class_to_step_type_special_cases",
          "test_config_class_to_step_type_special_cases",
          "TestStepConfigResolverAdapter.test_calculate_job_type_boost",
          "test_calculate_job_type_boost",
          "TestStepConfigResolverAdapter.test_calculate_job_type_boost_no_job_type",
          "test_calculate_job_type_boost_no_job_type",
          "TestStepConfigResolverAdapter.test_resolve_single_node_direct_match",
          "test_resolve_single_node_direct_match",
          "TestStepConfigResolverAdapter.test_resolve_single_node_no_match",
          "test_resolve_single_node_no_match",
          "TestStepConfigResolverAdapter.test_resolve_single_node_best_match",
          "test_resolve_single_node_best_match",
          "TestStepConfigResolverAdapter.test_resolve_config_for_step_success",
          "test_resolve_config_for_step_success",
          "TestStepConfigResolverAdapter.test_resolve_config_for_step_fallback",
          "test_resolve_config_for_step_fallback",
          "TestStepConfigResolverAdapter.test_resolve_config_for_step_error",
          "test_resolve_config_for_step_error",
          "TestStepConfigResolverAdapter.test_preview_resolution_success",
          "test_preview_resolution_success",
          "TestStepConfigResolverAdapter.test_preview_resolution_with_errors",
          "test_preview_resolution_with_errors",
          "TestStepConfigResolverAdapter.test_preview_resolution_error_handling",
          "test_preview_resolution_error_handling",
          "TestStepConfigResolverAdapter.test_parse_node_name_config_first_pattern",
          "test_parse_node_name_config_first_pattern",
          "TestStepConfigResolverAdapter.test_parse_node_name_job_first_pattern",
          "test_parse_node_name_job_first_pattern",
          "TestStepConfigResolverAdapter.test_parse_node_name_caching",
          "test_parse_node_name_caching",
          "TestStepConfigResolverAdapter.test_parse_node_name_no_pattern_match",
          "test_parse_node_name_no_pattern_match",
          "TestStepConfigResolverAdapter.test_job_type_matching_enhanced",
          "test_job_type_matching_enhanced",
          "TestStepConfigResolverAdapter.test_job_type_matching_enhanced_with_config_type",
          "test_job_type_matching_enhanced_with_config_type",
          "TestStepConfigResolverAdapter.test_job_type_matching_enhanced_no_match",
          "test_job_type_matching_enhanced_no_match",
          "TestIntegrationScenarios.realistic_configs",
          "realistic_configs",
          "TestIntegrationScenarios.test_complete_dag_resolution_workflow",
          "test_complete_dag_resolution_workflow",
          "TestIntegrationScenarios.test_metadata_driven_resolution",
          "test_metadata_driven_resolution",
          "TestIntegrationScenarios.test_mixed_resolution_strategies",
          "test_mixed_resolution_strategies",
          "TestIntegrationScenarios.test_error_resilience_in_production_scenario",
          "test_error_resilience_in_production_scenario",
          "TestErrorHandlingAndEdgeCases.mock_configs",
          "mock_configs",
          "TestErrorHandlingAndEdgeCases.test_empty_configs_dict",
          "test_empty_configs_dict",
          "TestErrorHandlingAndEdgeCases.test_empty_dag_nodes_list",
          "test_empty_dag_nodes_list",
          "TestErrorHandlingAndEdgeCases.test_config_without_required_attributes",
          "test_config_without_required_attributes",
          "TestErrorHandlingAndEdgeCases.test_malformed_metadata",
          "test_malformed_metadata",
          "TestErrorHandlingAndEdgeCases.test_very_long_node_names",
          "test_very_long_node_names",
          "TestErrorHandlingAndEdgeCases.test_special_characters_in_node_names",
          "test_special_characters_in_node_names",
          "temp_workspace",
          "mock_configs",
          "test_init_without_workspace",
          "test_init_with_workspace_and_threshold",
          "test_constants",
          "test_resolve_config_map_direct_matching",
          "test_resolve_config_map_catalog_fallback",
          "test_resolve_config_map_last_resort",
          "test_resolve_config_map_error_handling",
          "test_direct_name_matching_exact_match",
          "test_direct_name_matching_case_insensitive",
          "test_direct_name_matching_metadata_mapping",
          "test_direct_name_matching_with_job_type",
          "test_direct_name_matching_no_match",
          "test_job_type_matching",
          "test_job_type_matching_no_job_type_detected",
          "test_calculate_config_type_confidence",
          "test_semantic_matching",
          "test_pattern_matching",
          "test_config_class_to_step_type_with_catalog",
          "test_config_class_to_step_type_legacy_fallback",
          "test_config_class_to_step_type_special_cases",
          "test_calculate_job_type_boost",
          "test_calculate_job_type_boost_no_job_type",
          "test_resolve_single_node_direct_match",
          "test_resolve_single_node_no_match",
          "test_resolve_single_node_best_match",
          "test_resolve_config_for_step_success",
          "test_resolve_config_for_step_fallback",
          "test_resolve_config_for_step_error",
          "test_preview_resolution_success",
          "test_preview_resolution_with_errors",
          "test_preview_resolution_error_handling",
          "test_parse_node_name_config_first_pattern",
          "test_parse_node_name_job_first_pattern",
          "test_parse_node_name_caching",
          "test_parse_node_name_no_pattern_match",
          "test_job_type_matching_enhanced",
          "test_job_type_matching_enhanced_with_config_type",
          "test_job_type_matching_enhanced_no_match",
          "realistic_configs",
          "test_complete_dag_resolution_workflow",
          "test_metadata_driven_resolution",
          "test_mixed_resolution_strategies",
          "test_error_resilience_in_production_scenario",
          "mock_configs",
          "test_empty_configs_dict",
          "test_empty_dag_nodes_list",
          "test_config_without_required_attributes",
          "test_malformed_metadata",
          "test_very_long_node_names",
          "test_special_characters_in_node_names",
          "XGBoostTrainingConfig.__init__",
          "__init__",
          "__init__"
        ],
        "step_catalog/adapters/test_file_resolver.py": [
          "TestFlexibleFileResolverAdapter.temp_workspace",
          "temp_workspace",
          "TestFlexibleFileResolverAdapter.test_init",
          "test_init",
          "TestFlexibleFileResolverAdapter.test_refresh_cache_success",
          "test_refresh_cache_success",
          "TestFlexibleFileResolverAdapter.test_refresh_cache_error_handling",
          "test_refresh_cache_error_handling",
          "TestFlexibleFileResolverAdapter.test_extract_base_name",
          "test_extract_base_name",
          "TestFlexibleFileResolverAdapter.test_normalize_name",
          "test_normalize_name",
          "TestFlexibleFileResolverAdapter.test_calculate_similarity",
          "test_calculate_similarity",
          "TestFlexibleFileResolverAdapter.test_find_best_match_direct_catalog",
          "test_find_best_match_direct_catalog",
          "TestFlexibleFileResolverAdapter.test_find_best_match_fuzzy_matching",
          "test_find_best_match_fuzzy_matching",
          "TestFlexibleFileResolverAdapter.test_find_best_match_no_match",
          "test_find_best_match_no_match",
          "TestFlexibleFileResolverAdapter.test_get_available_files_report",
          "test_get_available_files_report",
          "TestFlexibleFileResolverAdapter.test_extract_base_name_from_spec",
          "test_extract_base_name_from_spec",
          "TestFlexibleFileResolverAdapter.test_find_spec_constant_name",
          "test_find_spec_constant_name",
          "TestFlexibleFileResolverAdapter.test_find_spec_constant_name_no_spec",
          "test_find_spec_constant_name_no_spec",
          "TestFlexibleFileResolverAdapter.test_find_specification_file_legacy_alias",
          "test_find_specification_file_legacy_alias",
          "TestFlexibleFileResolverAdapter.test_find_contract_file",
          "test_find_contract_file",
          "TestFlexibleFileResolverAdapter.test_find_contract_file_not_found",
          "test_find_contract_file_not_found",
          "TestFlexibleFileResolverAdapter.test_find_spec_file",
          "test_find_spec_file",
          "TestFlexibleFileResolverAdapter.test_find_builder_file",
          "test_find_builder_file",
          "TestFlexibleFileResolverAdapter.test_find_config_file",
          "test_find_config_file",
          "TestFlexibleFileResolverAdapter.test_find_all_component_files",
          "test_find_all_component_files",
          "TestFlexibleFileResolverAdapter.test_find_all_component_files_error",
          "test_find_all_component_files_error",
          "TestDeveloperWorkspaceFileResolverAdapter.temp_workspace",
          "temp_workspace",
          "TestDeveloperWorkspaceFileResolverAdapter.test_init_with_workspace_root",
          "test_init_with_workspace_root",
          "TestDeveloperWorkspaceFileResolverAdapter.test_init_without_workspace_root",
          "test_init_without_workspace_root",
          "TestDeveloperWorkspaceFileResolverAdapter.test_init_with_project_id_alias",
          "test_init_with_project_id_alias",
          "TestDeveloperWorkspaceFileResolverAdapter.test_validate_workspace_structure_invalid_root",
          "test_validate_workspace_structure_invalid_root",
          "TestDeveloperWorkspaceFileResolverAdapter.test_validate_workspace_structure_invalid_developer",
          "test_validate_workspace_structure_invalid_developer",
          "TestDeveloperWorkspaceFileResolverAdapter.test_setup_workspace_paths",
          "test_setup_workspace_paths",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_workspace_file_catalog_lookup",
          "test_find_workspace_file_catalog_lookup",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_workspace_file_directory_fallback",
          "test_find_workspace_file_directory_fallback",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_workspace_file_shared_fallback",
          "test_find_workspace_file_shared_fallback",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_contract_file",
          "test_find_contract_file",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_spec_file",
          "test_find_spec_file",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_builder_file",
          "test_find_builder_file",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_config_file",
          "test_find_config_file",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_script_file",
          "test_find_script_file",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_file_in_directory_contract_patterns",
          "test_find_file_in_directory_contract_patterns",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_file_in_directory_spec_patterns",
          "test_find_file_in_directory_spec_patterns",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_file_in_directory_builder_patterns",
          "test_find_file_in_directory_builder_patterns",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_file_in_directory_not_found",
          "test_find_file_in_directory_not_found",
          "TestDeveloperWorkspaceFileResolverAdapter.test_find_file_in_directory_nonexistent_dir",
          "test_find_file_in_directory_nonexistent_dir",
          "TestDeveloperWorkspaceFileResolverAdapter.test_get_workspace_info",
          "test_get_workspace_info",
          "TestDeveloperWorkspaceFileResolverAdapter.test_get_workspace_info_single_mode",
          "test_get_workspace_info_single_mode",
          "TestDeveloperWorkspaceFileResolverAdapter.test_get_workspace_info_error",
          "test_get_workspace_info_error",
          "TestDeveloperWorkspaceFileResolverAdapter.test_list_available_developers",
          "test_list_available_developers",
          "TestDeveloperWorkspaceFileResolverAdapter.test_list_available_developers_single_mode",
          "test_list_available_developers_single_mode",
          "TestDeveloperWorkspaceFileResolverAdapter.test_list_available_developers_error",
          "test_list_available_developers_error",
          "TestDeveloperWorkspaceFileResolverAdapter.test_switch_developer",
          "test_switch_developer",
          "TestDeveloperWorkspaceFileResolverAdapter.test_switch_developer_single_mode",
          "test_switch_developer_single_mode",
          "TestDeveloperWorkspaceFileResolverAdapter.test_switch_developer_nonexistent",
          "test_switch_developer_nonexistent",
          "TestHybridFileResolverAdapter.temp_workspace",
          "temp_workspace",
          "TestHybridFileResolverAdapter.test_init",
          "test_init",
          "TestHybridFileResolverAdapter.test_resolve_file_pattern_success",
          "test_resolve_file_pattern_success",
          "TestHybridFileResolverAdapter.test_resolve_file_pattern_no_matches",
          "test_resolve_file_pattern_no_matches",
          "TestHybridFileResolverAdapter.test_resolve_file_pattern_error_handling",
          "test_resolve_file_pattern_error_handling",
          "TestIntegrationScenarios.temp_workspace",
          "temp_workspace",
          "TestIntegrationScenarios.test_complete_file_resolution_workflow",
          "test_complete_file_resolution_workflow",
          "TestIntegrationScenarios.test_workspace_fallback_mechanism",
          "test_workspace_fallback_mechanism",
          "TestErrorHandlingAndEdgeCases.temp_workspace",
          "temp_workspace",
          "TestErrorHandlingAndEdgeCases.test_flexible_adapter_with_catalog_failure",
          "test_flexible_adapter_with_catalog_failure",
          "TestErrorHandlingAndEdgeCases.test_workspace_adapter_with_invalid_paths",
          "test_workspace_adapter_with_invalid_paths",
          "TestErrorHandlingAndEdgeCases.test_name_normalization_edge_cases",
          "test_name_normalization_edge_cases",
          "TestErrorHandlingAndEdgeCases.test_similarity_calculation_edge_cases",
          "test_similarity_calculation_edge_cases",
          "temp_workspace",
          "test_init",
          "test_refresh_cache_success",
          "test_refresh_cache_error_handling",
          "test_extract_base_name",
          "test_normalize_name",
          "test_calculate_similarity",
          "test_find_best_match_direct_catalog",
          "test_find_best_match_fuzzy_matching",
          "test_find_best_match_no_match",
          "test_get_available_files_report",
          "test_extract_base_name_from_spec",
          "test_find_spec_constant_name",
          "test_find_spec_constant_name_no_spec",
          "test_find_specification_file_legacy_alias",
          "test_find_contract_file",
          "test_find_contract_file_not_found",
          "test_find_spec_file",
          "test_find_builder_file",
          "test_find_config_file",
          "test_find_all_component_files",
          "test_find_all_component_files_error",
          "temp_workspace",
          "test_init_with_workspace_root",
          "test_init_without_workspace_root",
          "test_init_with_project_id_alias",
          "test_validate_workspace_structure_invalid_root",
          "test_validate_workspace_structure_invalid_developer",
          "test_setup_workspace_paths",
          "test_find_workspace_file_catalog_lookup",
          "test_find_workspace_file_directory_fallback",
          "test_find_workspace_file_shared_fallback",
          "test_find_contract_file",
          "test_find_spec_file",
          "test_find_builder_file",
          "test_find_config_file",
          "test_find_script_file",
          "test_find_file_in_directory_contract_patterns",
          "test_find_file_in_directory_spec_patterns",
          "test_find_file_in_directory_builder_patterns",
          "test_find_file_in_directory_not_found",
          "test_find_file_in_directory_nonexistent_dir",
          "test_get_workspace_info",
          "test_get_workspace_info_single_mode",
          "test_get_workspace_info_error",
          "test_list_available_developers",
          "test_list_available_developers_single_mode",
          "test_list_available_developers_error",
          "test_switch_developer",
          "test_switch_developer_single_mode",
          "test_switch_developer_nonexistent",
          "temp_workspace",
          "test_init",
          "test_resolve_file_pattern_success",
          "test_resolve_file_pattern_no_matches",
          "test_resolve_file_pattern_error_handling",
          "temp_workspace",
          "test_complete_file_resolution_workflow",
          "test_workspace_fallback_mechanism",
          "temp_workspace",
          "test_flexible_adapter_with_catalog_failure",
          "test_workspace_adapter_with_invalid_paths",
          "test_name_normalization_edge_cases",
          "test_similarity_calculation_edge_cases"
        ],
        "step_catalog/adapters/test_config_class_detector.py": [
          "TestConfigClassDetectorAdapter.temp_workspace",
          "temp_workspace",
          "TestConfigClassDetectorAdapter.test_init_without_workspace",
          "test_init_without_workspace",
          "TestConfigClassDetectorAdapter.test_init_with_workspace",
          "test_init_with_workspace",
          "TestConfigClassDetectorAdapter.test_constants",
          "test_constants",
          "TestConfigClassDetectorAdapter.test_detect_from_json_success",
          "test_detect_from_json_success",
          "TestConfigClassDetectorAdapter.test_detect_from_json_error_handling",
          "test_detect_from_json_error_handling",
          "TestConfigClassDetectorAdapter.test_extract_class_names_from_metadata",
          "test_extract_class_names_from_metadata",
          "TestConfigClassDetectorAdapter.test_extract_class_names_from_configuration",
          "test_extract_class_names_from_configuration",
          "TestConfigClassDetectorAdapter.test_extract_class_names_combined_sources",
          "test_extract_class_names_combined_sources",
          "TestConfigClassDetectorAdapter.test_extract_class_names_empty_data",
          "test_extract_class_names_empty_data",
          "TestConfigClassDetectorAdapter.test_extract_class_names_invalid_structure",
          "test_extract_class_names_invalid_structure",
          "TestConfigClassDetectorAdapter.test_extract_class_names_error_handling",
          "test_extract_class_names_error_handling",
          "TestConfigClassDetectorAdapter.test_from_config_store",
          "test_from_config_store",
          "TestConfigClassStoreAdapter.setup_method",
          "setup_method",
          "TestConfigClassStoreAdapter.teardown_method",
          "teardown_method",
          "TestConfigClassStoreAdapter.test_register_class_directly",
          "test_register_class_directly",
          "TestConfigClassStoreAdapter.test_register_class_as_decorator",
          "test_register_class_as_decorator",
          "TestConfigClassStoreAdapter.test_register_class_overwrite_warning",
          "test_register_class_overwrite_warning",
          "TestConfigClassStoreAdapter.test_get_class_existing",
          "test_get_class_existing",
          "TestConfigClassStoreAdapter.test_get_class_nonexistent",
          "test_get_class_nonexistent",
          "TestConfigClassStoreAdapter.test_get_all_classes",
          "test_get_all_classes",
          "TestConfigClassStoreAdapter.test_register_many",
          "test_register_many",
          "TestConfigClassStoreAdapter.test_clear",
          "test_clear",
          "TestConfigClassStoreAdapter.test_registered_names",
          "test_registered_names",
          "TestLegacyFunctions.test_build_complete_config_classes_success",
          "test_build_complete_config_classes_success",
          "TestLegacyFunctions.test_build_complete_config_classes_error_fallback",
          "test_build_complete_config_classes_error_fallback",
          "TestLegacyFunctions.test_detect_config_classes_from_json",
          "test_detect_config_classes_from_json",
          "TestIntegrationScenarios.test_complete_workflow_with_step_catalog",
          "test_complete_workflow_with_step_catalog",
          "TestIntegrationScenarios.test_mixed_registry_and_catalog_usage",
          "test_mixed_registry_and_catalog_usage",
          "TestIntegrationScenarios.test_error_resilience_workflow",
          "test_error_resilience_workflow",
          "TestErrorHandlingAndEdgeCases.test_adapter_with_none_workspace",
          "test_adapter_with_none_workspace",
          "TestErrorHandlingAndEdgeCases.test_detect_from_json_with_empty_path",
          "test_detect_from_json_with_empty_path",
          "TestErrorHandlingAndEdgeCases.test_registry_with_invalid_class",
          "test_registry_with_invalid_class",
          "TestErrorHandlingAndEdgeCases.test_extract_class_names_with_nested_exceptions",
          "test_extract_class_names_with_nested_exceptions",
          "temp_workspace",
          "test_init_without_workspace",
          "test_init_with_workspace",
          "test_constants",
          "test_detect_from_json_success",
          "test_detect_from_json_error_handling",
          "test_extract_class_names_from_metadata",
          "test_extract_class_names_from_configuration",
          "test_extract_class_names_combined_sources",
          "test_extract_class_names_empty_data",
          "test_extract_class_names_invalid_structure",
          "test_extract_class_names_error_handling",
          "test_from_config_store",
          "setup_method",
          "teardown_method",
          "test_register_class_directly",
          "test_register_class_as_decorator",
          "test_register_class_overwrite_warning",
          "test_get_class_existing",
          "test_get_class_nonexistent",
          "test_get_all_classes",
          "test_register_many",
          "test_clear",
          "test_registered_names",
          "test_build_complete_config_classes_success",
          "test_build_complete_config_classes_error_fallback",
          "test_detect_config_classes_from_json",
          "test_complete_workflow_with_step_catalog",
          "test_mixed_registry_and_catalog_usage",
          "test_error_resilience_workflow",
          "test_adapter_with_none_workspace",
          "test_detect_from_json_with_empty_path",
          "test_registry_with_invalid_class",
          "test_extract_class_names_with_nested_exceptions",
          "ErrorDict.__getitem__",
          "__getitem__",
          "MockInvalidObj.__init__",
          "__init__",
          "ErrorDict.__getitem__",
          "__getitem__",
          "__getitem__",
          "__init__",
          "__getitem__",
          "ErrorConfigTypes.values",
          "values",
          "values"
        ],
        "step_catalog/adapters/test_adapters.py": [
          "mock_workspace_root",
          "mock_step_info",
          "TestContractDiscoveryEngineAdapter.test_discover_all_contracts",
          "test_discover_all_contracts",
          "TestContractDiscoveryEngineAdapter.test_discover_contracts_with_scripts",
          "test_discover_contracts_with_scripts",
          "TestContractDiscoveryEngineAdapter.test_extract_contract_reference_from_spec",
          "test_extract_contract_reference_from_spec",
          "TestContractDiscoveryEngineAdapter.test_build_entry_point_mapping",
          "test_build_entry_point_mapping",
          "TestContractDiscoveryManagerAdapter.test_discover_contract",
          "test_discover_contract",
          "TestContractDiscoveryManagerAdapter.test_discover_contract_not_found",
          "test_discover_contract_not_found",
          "TestContractDiscoveryManagerAdapter.test_get_contract_input_paths",
          "test_get_contract_input_paths",
          "TestContractDiscoveryManagerAdapter.test_adapt_path_for_local_testing",
          "test_adapt_path_for_local_testing",
          "TestFlexibleFileResolverAdapter.test_find_contract_file",
          "test_find_contract_file",
          "TestFlexibleFileResolverAdapter.test_find_spec_file",
          "test_find_spec_file",
          "TestFlexibleFileResolverAdapter.test_find_builder_file",
          "test_find_builder_file",
          "TestFlexibleFileResolverAdapter.test_find_all_component_files",
          "test_find_all_component_files",
          "TestDeveloperWorkspaceFileResolverAdapter.test_workspace_aware_contract_discovery",
          "test_workspace_aware_contract_discovery",
          "TestDeveloperWorkspaceFileResolverAdapter.test_fallback_to_core",
          "test_fallback_to_core",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_workspaces",
          "test_discover_workspaces",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components",
          "test_discover_components",
          "TestWorkspaceDiscoveryManagerAdapter.test_enhanced_discover_components_functionality",
          "test_enhanced_discover_components_functionality",
          "TestHybridFileResolverAdapter.test_resolve_file_pattern",
          "test_resolve_file_pattern",
          "TestLegacyDiscoveryWrapper.test_initialization",
          "test_initialization",
          "TestLegacyDiscoveryWrapper.test_get_adapter",
          "test_get_adapter",
          "TestLegacyDiscoveryWrapper.test_get_nonexistent_adapter",
          "test_get_nonexistent_adapter",
          "TestLegacyDiscoveryWrapper.test_get_unified_catalog",
          "test_get_unified_catalog",
          "TestAdapterErrorHandling.test_contract_discovery_engine_error_handling",
          "test_contract_discovery_engine_error_handling",
          "TestAdapterErrorHandling.test_flexible_file_resolver_error_handling",
          "test_flexible_file_resolver_error_handling",
          "TestAdapterErrorHandling.test_workspace_discovery_manager_error_handling",
          "test_workspace_discovery_manager_error_handling",
          "TestAdapterIntegration.test_contract_discovery_engine_integration",
          "test_contract_discovery_engine_integration",
          "test_discover_all_contracts",
          "test_discover_contracts_with_scripts",
          "test_extract_contract_reference_from_spec",
          "test_build_entry_point_mapping",
          "test_discover_contract",
          "test_discover_contract_not_found",
          "test_get_contract_input_paths",
          "test_adapt_path_for_local_testing",
          "test_find_contract_file",
          "test_find_spec_file",
          "test_find_builder_file",
          "test_find_all_component_files",
          "test_workspace_aware_contract_discovery",
          "test_fallback_to_core",
          "test_discover_workspaces",
          "test_discover_components",
          "test_enhanced_discover_components_functionality",
          "test_resolve_file_pattern",
          "test_initialization",
          "test_get_adapter",
          "test_get_nonexistent_adapter",
          "test_get_unified_catalog",
          "test_contract_discovery_engine_error_handling",
          "test_flexible_file_resolver_error_handling",
          "test_workspace_discovery_manager_error_handling",
          "test_contract_discovery_engine_integration"
        ],
        "step_catalog/adapters/test_workspace_discovery.py": [
          "TestWorkspaceDiscoveryManagerAdapter.temp_workspace",
          "temp_workspace",
          "TestWorkspaceDiscoveryManagerAdapter.test_init",
          "test_init",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_workspaces_success",
          "test_discover_workspaces_success",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_workspaces_error_handling",
          "test_discover_workspaces_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_count_workspace_components",
          "test_count_workspace_components",
          "TestWorkspaceDiscoveryManagerAdapter.test_count_workspace_components_nonexistent",
          "test_count_workspace_components_nonexistent",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components_no_constraints",
          "test_discover_components_no_constraints",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components_with_workspace_ids",
          "test_discover_components_with_workspace_ids",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components_with_developer_id",
          "test_discover_components_with_developer_id",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components_no_workspace_root",
          "test_discover_components_no_workspace_root",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_components_error_handling",
          "test_discover_components_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_step_components",
          "test_discover_step_components",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_step_components_error_handling",
          "test_discover_step_components_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_filesystem_components",
          "test_discover_filesystem_components",
          "TestWorkspaceDiscoveryManagerAdapter.test_discover_filesystem_components_core_workspace",
          "test_discover_filesystem_components_core_workspace",
          "TestWorkspaceDiscoveryManagerAdapter.test_find_workspace_path",
          "test_find_workspace_path",
          "TestWorkspaceDiscoveryManagerAdapter.test_find_workspace_path_error_handling",
          "test_find_workspace_path_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_scan_component_directory",
          "test_scan_component_directory",
          "TestWorkspaceDiscoveryManagerAdapter.test_scan_component_directory_no_duplicates",
          "test_scan_component_directory_no_duplicates",
          "TestWorkspaceDiscoveryManagerAdapter.test_scan_component_directory_error_handling",
          "test_scan_component_directory_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_extract_step_name_from_file",
          "test_extract_step_name_from_file",
          "TestWorkspaceDiscoveryManagerAdapter.test_extract_step_name_from_file_error_handling",
          "test_extract_step_name_from_file_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_file_resolver",
          "test_get_file_resolver",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_file_resolver_no_workspace_root",
          "test_get_file_resolver_no_workspace_root",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_module_loader",
          "test_get_module_loader",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_module_loader_no_workspace_root",
          "test_get_module_loader_no_workspace_root",
          "TestWorkspaceDiscoveryManagerAdapter.test_list_available_developers",
          "test_list_available_developers",
          "TestWorkspaceDiscoveryManagerAdapter.test_list_available_developers_error_handling",
          "test_list_available_developers_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_workspace_info_specific_workspace",
          "test_get_workspace_info_specific_workspace",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_workspace_info_nonexistent_workspace",
          "test_get_workspace_info_nonexistent_workspace",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_workspace_info_all_workspaces",
          "test_get_workspace_info_all_workspaces",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_workspace_info_error_handling",
          "test_get_workspace_info_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_refresh_cache",
          "test_refresh_cache",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_discovery_summary",
          "test_get_discovery_summary",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_discovery_summary_error_handling",
          "test_get_discovery_summary_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_statistics",
          "test_get_statistics",
          "TestWorkspaceDiscoveryManagerAdapter.test_get_statistics_error_handling",
          "test_get_statistics_error_handling",
          "TestWorkspaceDiscoveryManagerAdapter.test_is_cache_valid",
          "test_is_cache_valid",
          "TestIntegrationScenarios.comprehensive_workspace",
          "comprehensive_workspace",
          "TestIntegrationScenarios.test_complete_workspace_discovery_workflow",
          "test_complete_workspace_discovery_workflow",
          "TestIntegrationScenarios.test_workspace_discovery_with_filesystem_fallback",
          "test_workspace_discovery_with_filesystem_fallback",
          "TestErrorHandlingAndEdgeCases.temp_workspace",
          "temp_workspace",
          "TestErrorHandlingAndEdgeCases.test_adapter_with_catalog_failure",
          "test_adapter_with_catalog_failure",
          "TestErrorHandlingAndEdgeCases.test_component_discovery_with_invalid_step_info",
          "test_component_discovery_with_invalid_step_info",
          "TestErrorHandlingAndEdgeCases.test_filesystem_discovery_with_permission_errors",
          "test_filesystem_discovery_with_permission_errors",
          "TestErrorHandlingAndEdgeCases.test_cache_operations_with_time_manipulation",
          "test_cache_operations_with_time_manipulation",
          "TestErrorHandlingAndEdgeCases.test_step_name_extraction_edge_cases",
          "test_step_name_extraction_edge_cases",
          "TestErrorHandlingAndEdgeCases.test_workspace_info_with_complex_paths",
          "test_workspace_info_with_complex_paths",
          "TestPerformanceAndScalability.large_workspace",
          "large_workspace",
          "TestPerformanceAndScalability.test_large_workspace_discovery_performance",
          "test_large_workspace_discovery_performance",
          "TestPerformanceAndScalability.test_component_discovery_with_many_files",
          "test_component_discovery_with_many_files",
          "TestPerformanceAndScalability.test_cache_efficiency_with_repeated_operations",
          "test_cache_efficiency_with_repeated_operations",
          "temp_workspace",
          "test_init",
          "test_discover_workspaces_success",
          "test_discover_workspaces_error_handling",
          "test_count_workspace_components",
          "test_count_workspace_components_nonexistent",
          "test_discover_components_no_constraints",
          "test_discover_components_with_workspace_ids",
          "test_discover_components_with_developer_id",
          "test_discover_components_no_workspace_root",
          "test_discover_components_error_handling",
          "test_discover_step_components",
          "test_discover_step_components_error_handling",
          "test_discover_filesystem_components",
          "test_discover_filesystem_components_core_workspace",
          "test_find_workspace_path",
          "test_find_workspace_path_error_handling",
          "test_scan_component_directory",
          "test_scan_component_directory_no_duplicates",
          "test_scan_component_directory_error_handling",
          "test_extract_step_name_from_file",
          "test_extract_step_name_from_file_error_handling",
          "test_get_file_resolver",
          "test_get_file_resolver_no_workspace_root",
          "test_get_module_loader",
          "test_get_module_loader_no_workspace_root",
          "test_list_available_developers",
          "test_list_available_developers_error_handling",
          "test_get_workspace_info_specific_workspace",
          "test_get_workspace_info_nonexistent_workspace",
          "test_get_workspace_info_all_workspaces",
          "test_get_workspace_info_error_handling",
          "test_refresh_cache",
          "test_get_discovery_summary",
          "test_get_discovery_summary_error_handling",
          "test_get_statistics",
          "test_get_statistics_error_handling",
          "test_is_cache_valid",
          "comprehensive_workspace",
          "test_complete_workspace_discovery_workflow",
          "test_workspace_discovery_with_filesystem_fallback",
          "temp_workspace",
          "test_adapter_with_catalog_failure",
          "test_component_discovery_with_invalid_step_info",
          "test_filesystem_discovery_with_permission_errors",
          "test_cache_operations_with_time_manipulation",
          "test_step_name_extraction_edge_cases",
          "test_workspace_info_with_complex_paths",
          "large_workspace",
          "test_large_workspace_discovery_performance",
          "test_component_discovery_with_many_files",
          "test_cache_efficiency_with_repeated_operations",
          "ErrorList.__iter__",
          "__iter__",
          "ErrorList.__iter__",
          "__iter__",
          "__iter__",
          "__iter__"
        ]
      },
      "likely_tested_functions": [
        "BuilderAutoDiscovery.__init__",
        "__init__",
        "BuilderAutoDiscovery._ensure_cursus_importable",
        "BuilderAutoDiscovery._load_registry_info",
        "BuilderAutoDiscovery._get_registry_builder_info",
        "_get_registry_builder_info",
        "BuilderAutoDiscovery.discover_builder_classes",
        "discover_builder_classes",
        "BuilderAutoDiscovery.load_builder_class",
        "load_builder_class",
        "BuilderAutoDiscovery._run_discovery",
        "BuilderAutoDiscovery._discover_package_builders",
        "BuilderAutoDiscovery._discover_workspace_builders",
        "BuilderAutoDiscovery._scan_builder_directory",
        "BuilderAutoDiscovery._extract_builder_from_ast",
        "BuilderAutoDiscovery._inherits_from_step_builder_base",
        "BuilderAutoDiscovery._extract_step_name_from_builder_file",
        "_extract_step_name_from_builder_file",
        "BuilderAutoDiscovery._convert_parts_to_pascal_case_with_special_cases",
        "BuilderAutoDiscovery._load_class_from_file",
        "_load_class_from_file",
        "BuilderAutoDiscovery._file_to_relative_module_path",
        "BuilderAutoDiscovery._file_to_module_path",
        "_file_to_module_path",
        "BuilderAutoDiscovery.get_builder_info",
        "get_builder_info",
        "BuilderAutoDiscovery._get_workspace_for_step",
        "BuilderAutoDiscovery.list_available_builders",
        "list_available_builders",
        "BuilderAutoDiscovery.get_discovery_stats",
        "get_discovery_stats",
        "__init__",
        "_get_registry_builder_info",
        "discover_builder_classes",
        "load_builder_class",
        "_extract_step_name_from_builder_file",
        "_load_class_from_file",
        "_file_to_module_path",
        "get_builder_info",
        "list_available_builders",
        "get_discovery_stats",
        "StepInfo.config_class",
        "config_class",
        "StepInfo.sagemaker_step_type",
        "StepInfo.builder_step_name",
        "StepInfo.description",
        "config_class",
        "StepCatalog.__init__",
        "__init__",
        "StepCatalog.get_step_info",
        "get_step_info",
        "StepCatalog.find_step_by_component",
        "find_step_by_component",
        "StepCatalog.list_available_steps",
        "list_available_steps",
        "StepCatalog.list_steps_with_specs",
        "StepCatalog.list_steps_with_scripts",
        "list_steps_with_scripts",
        "StepCatalog.search_steps",
        "search_steps",
        "StepCatalog.discover_config_classes",
        "discover_config_classes",
        "StepCatalog.build_complete_config_classes",
        "build_complete_config_classes",
        "StepCatalog.discover_contracts_with_scripts",
        "discover_contracts_with_scripts",
        "StepCatalog.detect_framework",
        "detect_framework",
        "StepCatalog.discover_cross_workspace_components",
        "discover_cross_workspace_components",
        "StepCatalog.get_builder_class_path",
        "get_builder_class_path",
        "StepCatalog.load_builder_class",
        "load_builder_class",
        "StepCatalog.load_contract_class",
        "load_contract_class",
        "StepCatalog.load_spec_class",
        "load_spec_class",
        "StepCatalog.find_specs_by_contract",
        "find_specs_by_contract",
        "StepCatalog.serialize_spec",
        "serialize_spec",
        "StepCatalog.load_all_specifications",
        "load_all_specifications",
        "StepCatalog.get_spec_job_type_variants",
        "StepCatalog.create_unified_specification",
        "create_unified_specification",
        "StepCatalog.validate_logical_names_smart",
        "validate_logical_names_smart",
        "StepCatalog.serialize_contract",
        "StepCatalog.find_contracts_by_entry_point",
        "StepCatalog.get_contract_entry_points",
        "StepCatalog.validate_contract_script_mapping",
        "StepCatalog.get_job_type_variants",
        "get_job_type_variants",
        "StepCatalog.resolve_pipeline_node",
        "resolve_pipeline_node",
        "StepCatalog._normalize_workspace_dirs",
        "StepCatalog._initialize_config_discovery",
        "StepCatalog._initialize_builder_discovery",
        "StepCatalog._initialize_contract_discovery",
        "StepCatalog._initialize_spec_discovery",
        "StepCatalog._find_package_root",
        "StepCatalog._ensure_index_built",
        "_ensure_index_built",
        "StepCatalog._build_index",
        "_build_index",
        "StepCatalog._load_registry_data",
        "StepCatalog._discover_package_components",
        "StepCatalog._discover_workspace_components",
        "StepCatalog._discover_workspace_components_in_dir",
        "StepCatalog._add_component_to_index",
        "StepCatalog._resolve_to_canonical_name_for_indexing",
        "_resolve_to_canonical_name_for_indexing",
        "StepCatalog._extract_step_name",
        "_extract_step_name",
        "StepCatalog._deduplicate_and_filter_concrete_steps",
        "_deduplicate_and_filter_concrete_steps",
        "StepCatalog._is_job_type_variant",
        "_is_job_type_variant",
        "StepCatalog._resolve_to_canonical_name",
        "_resolve_to_canonical_name",
        "StepCatalog.get_builder_for_config",
        "get_builder_for_config",
        "StepCatalog.get_builder_for_step_type",
        "get_builder_for_step_type",
        "StepCatalog.is_step_type_supported",
        "is_step_type_supported",
        "StepCatalog.validate_builder_availability",
        "validate_builder_availability",
        "StepCatalog.get_config_types_for_step_type",
        "StepCatalog.list_supported_step_types",
        "StepCatalog.validate_step_name_with_registry",
        "StepCatalog.get_builder_map",
        "get_builder_map",
        "StepCatalog._generate_fallback_builder_map",
        "StepCatalog.validate_dag_compatibility",
        "validate_dag_compatibility",
        "StepCatalog.get_step_builder_suggestions",
        "get_step_builder_suggestions",
        "StepCatalog.get_metrics_report",
        "get_metrics_report",
        "StepCatalog.get_all_builders",
        "StepCatalog.get_builders_by_step_type",
        "__init__",
        "get_step_info",
        "find_step_by_component",
        "list_available_steps",
        "list_steps_with_scripts",
        "search_steps",
        "discover_config_classes",
        "build_complete_config_classes",
        "discover_contracts_with_scripts",
        "detect_framework",
        "discover_cross_workspace_components",
        "get_builder_class_path",
        "load_builder_class",
        "load_contract_class",
        "load_spec_class",
        "find_specs_by_contract",
        "serialize_spec",
        "load_all_specifications",
        "create_unified_specification",
        "validate_logical_names_smart",
        "get_job_type_variants",
        "resolve_pipeline_node",
        "_ensure_index_built",
        "_build_index",
        "_resolve_to_canonical_name_for_indexing",
        "_extract_step_name",
        "_deduplicate_and_filter_concrete_steps",
        "_is_job_type_variant",
        "_resolve_to_canonical_name",
        "get_builder_for_config",
        "get_builder_for_step_type",
        "is_step_type_supported",
        "validate_builder_availability",
        "get_builder_map",
        "validate_dag_compatibility",
        "get_step_builder_suggestions",
        "get_metrics_report",
        "ContractAutoDiscovery.__init__",
        "__init__",
        "ContractAutoDiscovery.discover_contract_classes",
        "discover_contract_classes",
        "ContractAutoDiscovery.load_contract_class",
        "load_contract_class",
        "ContractAutoDiscovery._pascal_to_snake_case",
        "_pascal_to_snake_case",
        "ContractAutoDiscovery._scan_contract_directory",
        "ContractAutoDiscovery._is_contract_class",
        "ContractAutoDiscovery._discover_workspace_contracts",
        "ContractAutoDiscovery._file_to_relative_module_path",
        "ContractAutoDiscovery._try_direct_import",
        "_try_direct_import",
        "ContractAutoDiscovery._discover_contract_objects_in_module",
        "_discover_contract_objects_in_module",
        "ContractAutoDiscovery._is_contract_object",
        "_is_contract_object",
        "ContractAutoDiscovery._try_workspace_contract_import",
        "_try_workspace_contract_import",
        "ContractAutoDiscovery._load_contract_from_file",
        "_load_contract_from_file",
        "ContractAutoDiscovery.serialize_contract",
        "ContractAutoDiscovery.find_contracts_by_entry_point",
        "ContractAutoDiscovery.get_contract_entry_points",
        "ContractAutoDiscovery._is_contract_instance",
        "ContractAutoDiscovery._serialize_contract_inputs",
        "ContractAutoDiscovery._serialize_contract_outputs",
        "ContractAutoDiscovery._serialize_contract_arguments",
        "ContractAutoDiscovery._find_contracts_by_entry_point_in_dir",
        "ContractAutoDiscovery._find_contracts_by_entry_point_in_workspace",
        "ContractAutoDiscovery._contract_file_references_entry_point",
        "ContractAutoDiscovery._extract_entry_points_from_dir",
        "ContractAutoDiscovery._extract_entry_points_from_workspace",
        "__init__",
        "discover_contract_classes",
        "load_contract_class",
        "_pascal_to_snake_case",
        "_try_direct_import",
        "_discover_contract_objects_in_module",
        "_is_contract_object",
        "_try_workspace_contract_import",
        "_load_contract_from_file",
        "ConfigAutoDiscovery.__init__",
        "__init__",
        "ConfigAutoDiscovery.discover_config_classes",
        "discover_config_classes",
        "ConfigAutoDiscovery.discover_hyperparameter_classes",
        "ConfigAutoDiscovery.build_complete_config_classes",
        "build_complete_config_classes",
        "ConfigAutoDiscovery._scan_config_directory",
        "_scan_config_directory",
        "ConfigAutoDiscovery._is_config_class",
        "_is_config_class",
        "ConfigAutoDiscovery._discover_workspace_configs",
        "ConfigAutoDiscovery._discover_workspace_hyperparams",
        "ConfigAutoDiscovery._file_to_relative_module_path",
        "ConfigAutoDiscovery._file_to_module_path",
        "_file_to_module_path",
        "ConfigAutoDiscovery._scan_hyperparams_directory",
        "ConfigAutoDiscovery._is_hyperparameter_class",
        "__init__",
        "discover_config_classes",
        "build_complete_config_classes",
        "_scan_config_directory",
        "_is_config_class",
        "_file_to_module_path",
        "SpecAutoDiscovery.__init__",
        "__init__",
        "SpecAutoDiscovery.discover_spec_classes",
        "discover_spec_classes",
        "SpecAutoDiscovery.load_spec_class",
        "load_spec_class",
        "SpecAutoDiscovery._try_direct_import",
        "_try_direct_import",
        "SpecAutoDiscovery._extract_spec_from_module",
        "SpecAutoDiscovery._is_spec_instance",
        "_is_spec_instance",
        "SpecAutoDiscovery._scan_spec_directory",
        "SpecAutoDiscovery._is_spec_assignment",
        "SpecAutoDiscovery._discover_workspace_specs",
        "_discover_workspace_specs",
        "SpecAutoDiscovery._try_workspace_spec_import",
        "SpecAutoDiscovery._load_spec_from_file",
        "SpecAutoDiscovery.find_specs_by_contract",
        "find_specs_by_contract",
        "SpecAutoDiscovery.serialize_spec",
        "serialize_spec",
        "SpecAutoDiscovery.load_all_specifications",
        "load_all_specifications",
        "SpecAutoDiscovery.get_job_type_variants",
        "get_job_type_variants",
        "SpecAutoDiscovery._find_specs_by_contract_in_dir",
        "SpecAutoDiscovery._find_specs_by_contract_in_workspace",
        "SpecAutoDiscovery._spec_file_references_contract",
        "SpecAutoDiscovery._find_job_type_variants_in_dir",
        "SpecAutoDiscovery._find_job_type_variants_in_workspace",
        "SpecAutoDiscovery.create_unified_specification",
        "create_unified_specification",
        "SpecAutoDiscovery.validate_logical_names_smart",
        "validate_logical_names_smart",
        "SpecAutoDiscovery._apply_smart_specification_logic",
        "SpecAutoDiscovery._extract_job_type_from_spec_name_registry",
        "SpecAutoDiscovery._select_primary_specification",
        "SpecAutoDiscovery._validate_smart_logical_names",
        "SpecAutoDiscovery._file_to_relative_module_path",
        "__init__",
        "discover_spec_classes",
        "load_spec_class",
        "_try_direct_import",
        "_is_spec_instance",
        "_discover_workspace_specs",
        "find_specs_by_contract",
        "serialize_spec",
        "load_all_specifications",
        "get_job_type_variants",
        "create_unified_specification",
        "validate_logical_names_smart",
        "StepCatalogMapper.__init__",
        "__init__",
        "StepCatalogMapper.get_builder_for_config",
        "get_builder_for_config",
        "StepCatalogMapper.get_builder_for_step_type",
        "get_builder_for_step_type",
        "StepCatalogMapper.resolve_legacy_aliases",
        "StepCatalogMapper.is_step_type_supported",
        "is_step_type_supported",
        "StepCatalogMapper.validate_builder_availability",
        "validate_builder_availability",
        "StepCatalogMapper.get_config_types_for_step_type",
        "StepCatalogMapper.list_supported_step_types",
        "StepCatalogMapper._resolve_canonical_name_from_registry",
        "StepCatalogMapper._extract_job_type",
        "StepCatalogMapper._fallback_config_to_step_type",
        "_fallback_config_to_step_type",
        "StepCatalogMapper.get_registry_function",
        "StepCatalogMapper.validate_step_name_with_registry",
        "PipelineConstructionInterface.__init__",
        "__init__",
        "PipelineConstructionInterface.get_builder_map",
        "get_builder_map",
        "PipelineConstructionInterface.validate_dag_compatibility",
        "validate_dag_compatibility",
        "PipelineConstructionInterface.get_step_builder_suggestions",
        "get_step_builder_suggestions",
        "__init__",
        "get_builder_for_config",
        "get_builder_for_step_type",
        "is_step_type_supported",
        "validate_builder_availability",
        "_fallback_config_to_step_type",
        "__init__",
        "get_builder_map",
        "validate_dag_compatibility",
        "get_step_builder_suggestions",
        "FlexibleFileResolverAdapter.__init__",
        "__init__",
        "FlexibleFileResolverAdapter._refresh_cache",
        "_refresh_cache",
        "FlexibleFileResolverAdapter._extract_base_name",
        "_extract_base_name",
        "FlexibleFileResolverAdapter._normalize_name",
        "_normalize_name",
        "FlexibleFileResolverAdapter._calculate_similarity",
        "_calculate_similarity",
        "FlexibleFileResolverAdapter._find_best_match",
        "_find_best_match",
        "FlexibleFileResolverAdapter.refresh_cache",
        "refresh_cache",
        "FlexibleFileResolverAdapter._discover_all_files",
        "FlexibleFileResolverAdapter._scan_directory",
        "_scan_directory",
        "FlexibleFileResolverAdapter.get_available_files_report",
        "get_available_files_report",
        "FlexibleFileResolverAdapter.extract_base_name_from_spec",
        "extract_base_name_from_spec",
        "FlexibleFileResolverAdapter.find_spec_constant_name",
        "find_spec_constant_name",
        "FlexibleFileResolverAdapter.find_specification_file",
        "find_specification_file",
        "FlexibleFileResolverAdapter.find_contract_file",
        "find_contract_file",
        "FlexibleFileResolverAdapter.find_spec_file",
        "find_spec_file",
        "FlexibleFileResolverAdapter.find_builder_file",
        "find_builder_file",
        "FlexibleFileResolverAdapter.find_config_file",
        "find_config_file",
        "FlexibleFileResolverAdapter.find_all_component_files",
        "find_all_component_files",
        "DeveloperWorkspaceFileResolverAdapter.__init__",
        "__init__",
        "DeveloperWorkspaceFileResolverAdapter._validate_workspace_structure",
        "_validate_workspace_structure",
        "DeveloperWorkspaceFileResolverAdapter._setup_workspace_paths",
        "_setup_workspace_paths",
        "DeveloperWorkspaceFileResolverAdapter._find_workspace_file",
        "_find_workspace_file",
        "DeveloperWorkspaceFileResolverAdapter.find_contract_file",
        "find_contract_file",
        "DeveloperWorkspaceFileResolverAdapter.find_spec_file",
        "find_spec_file",
        "DeveloperWorkspaceFileResolverAdapter.find_builder_file",
        "find_builder_file",
        "DeveloperWorkspaceFileResolverAdapter.find_config_file",
        "find_config_file",
        "DeveloperWorkspaceFileResolverAdapter.find_script_file",
        "find_script_file",
        "DeveloperWorkspaceFileResolverAdapter._find_file_in_directory",
        "_find_file_in_directory",
        "DeveloperWorkspaceFileResolverAdapter.get_workspace_info",
        "get_workspace_info",
        "DeveloperWorkspaceFileResolverAdapter.list_available_developers",
        "list_available_developers",
        "DeveloperWorkspaceFileResolverAdapter.switch_developer",
        "switch_developer",
        "HybridFileResolverAdapter.__init__",
        "__init__",
        "HybridFileResolverAdapter.resolve_file_pattern",
        "resolve_file_pattern",
        "__init__",
        "_refresh_cache",
        "_extract_base_name",
        "_normalize_name",
        "_calculate_similarity",
        "_find_best_match",
        "refresh_cache",
        "_scan_directory",
        "get_available_files_report",
        "extract_base_name_from_spec",
        "find_spec_constant_name",
        "find_specification_file",
        "find_contract_file",
        "find_spec_file",
        "find_builder_file",
        "find_config_file",
        "find_all_component_files",
        "__init__",
        "_validate_workspace_structure",
        "_setup_workspace_paths",
        "_find_workspace_file",
        "find_contract_file",
        "find_spec_file",
        "find_builder_file",
        "find_config_file",
        "find_script_file",
        "_find_file_in_directory",
        "get_workspace_info",
        "list_available_developers",
        "switch_developer",
        "__init__",
        "resolve_file_pattern",
        "WorkspaceDiscoveryManagerAdapter.__init__",
        "__init__",
        "WorkspaceDiscoveryManagerAdapter.discover_workspaces",
        "discover_workspaces",
        "WorkspaceDiscoveryManagerAdapter._count_workspace_components",
        "_count_workspace_components",
        "WorkspaceDiscoveryManagerAdapter.discover_components",
        "discover_components",
        "WorkspaceDiscoveryManagerAdapter._discover_step_components",
        "_discover_step_components",
        "WorkspaceDiscoveryManagerAdapter._discover_filesystem_components",
        "_discover_filesystem_components",
        "WorkspaceDiscoveryManagerAdapter._find_workspace_path",
        "_find_workspace_path",
        "WorkspaceDiscoveryManagerAdapter._scan_component_directory",
        "_scan_component_directory",
        "WorkspaceDiscoveryManagerAdapter._extract_step_name_from_file",
        "_extract_step_name_from_file",
        "WorkspaceDiscoveryManagerAdapter.get_file_resolver",
        "get_file_resolver",
        "WorkspaceDiscoveryManagerAdapter.get_module_loader",
        "get_module_loader",
        "WorkspaceDiscoveryManagerAdapter.list_available_developers",
        "list_available_developers",
        "WorkspaceDiscoveryManagerAdapter.get_workspace_info",
        "get_workspace_info",
        "WorkspaceDiscoveryManagerAdapter.refresh_cache",
        "refresh_cache",
        "WorkspaceDiscoveryManagerAdapter.get_discovery_summary",
        "get_discovery_summary",
        "WorkspaceDiscoveryManagerAdapter.get_statistics",
        "get_statistics",
        "WorkspaceDiscoveryManagerAdapter._is_cache_valid",
        "_is_cache_valid",
        "__init__",
        "discover_workspaces",
        "_count_workspace_components",
        "discover_components",
        "_discover_step_components",
        "_discover_filesystem_components",
        "_find_workspace_path",
        "_scan_component_directory",
        "_extract_step_name_from_file",
        "get_file_resolver",
        "get_module_loader",
        "list_available_developers",
        "get_workspace_info",
        "refresh_cache",
        "get_discovery_summary",
        "get_statistics",
        "_is_cache_valid",
        "StepConfigResolverAdapter.__init__",
        "__init__",
        "StepConfigResolverAdapter.resolve_config_map",
        "resolve_config_map",
        "StepConfigResolverAdapter._direct_name_matching",
        "_direct_name_matching",
        "StepConfigResolverAdapter._job_type_matching",
        "_job_type_matching",
        "StepConfigResolverAdapter._calculate_config_type_confidence",
        "_calculate_config_type_confidence",
        "StepConfigResolverAdapter._semantic_matching",
        "_semantic_matching",
        "StepConfigResolverAdapter._pattern_matching",
        "_pattern_matching",
        "StepConfigResolverAdapter._config_class_to_step_type",
        "_config_class_to_step_type",
        "StepConfigResolverAdapter._calculate_job_type_boost",
        "_calculate_job_type_boost",
        "StepConfigResolverAdapter._resolve_single_node",
        "_resolve_single_node",
        "StepConfigResolverAdapter.resolve_config_for_step",
        "resolve_config_for_step",
        "StepConfigResolverAdapter.preview_resolution",
        "preview_resolution",
        "StepConfigResolverAdapter._parse_node_name",
        "_parse_node_name",
        "StepConfigResolverAdapter._job_type_matching_enhanced",
        "_job_type_matching_enhanced",
        "__init__",
        "resolve_config_map",
        "_direct_name_matching",
        "_job_type_matching",
        "_calculate_config_type_confidence",
        "_semantic_matching",
        "_pattern_matching",
        "_config_class_to_step_type",
        "_calculate_job_type_boost",
        "_resolve_single_node",
        "resolve_config_for_step",
        "preview_resolution",
        "_parse_node_name",
        "_job_type_matching_enhanced",
        "LegacyDiscoveryWrapper.__init__",
        "__init__",
        "LegacyDiscoveryWrapper._refresh_cache",
        "_refresh_cache",
        "LegacyDiscoveryWrapper._extract_base_name",
        "_extract_base_name",
        "LegacyDiscoveryWrapper._normalize_name",
        "_normalize_name",
        "LegacyDiscoveryWrapper._calculate_similarity",
        "_calculate_similarity",
        "LegacyDiscoveryWrapper._find_best_match",
        "_find_best_match",
        "LegacyDiscoveryWrapper.refresh_cache",
        "refresh_cache",
        "LegacyDiscoveryWrapper._discover_all_files",
        "LegacyDiscoveryWrapper._scan_directory",
        "_scan_directory",
        "LegacyDiscoveryWrapper.get_available_files_report",
        "get_available_files_report",
        "LegacyDiscoveryWrapper.extract_base_name_from_spec",
        "extract_base_name_from_spec",
        "LegacyDiscoveryWrapper.find_spec_constant_name",
        "find_spec_constant_name",
        "LegacyDiscoveryWrapper.find_specification_file",
        "find_specification_file",
        "LegacyDiscoveryWrapper.find_contract_file",
        "find_contract_file",
        "LegacyDiscoveryWrapper.find_spec_file",
        "find_spec_file",
        "LegacyDiscoveryWrapper.find_builder_file",
        "find_builder_file",
        "LegacyDiscoveryWrapper.find_config_file",
        "find_config_file",
        "LegacyDiscoveryWrapper.find_all_component_files",
        "find_all_component_files",
        "LegacyDiscoveryWrapper.get_step_info",
        "get_step_info",
        "LegacyDiscoveryWrapper.find_step_by_component",
        "find_step_by_component",
        "LegacyDiscoveryWrapper.list_available_steps",
        "list_available_steps",
        "LegacyDiscoveryWrapper.search_steps",
        "search_steps",
        "LegacyDiscoveryWrapper.discover_config_classes",
        "discover_config_classes",
        "LegacyDiscoveryWrapper.build_complete_config_classes",
        "build_complete_config_classes",
        "LegacyDiscoveryWrapper.get_job_type_variants",
        "get_job_type_variants",
        "LegacyDiscoveryWrapper.get_metrics_report",
        "get_metrics_report",
        "LegacyDiscoveryWrapper.discover_contracts_with_scripts",
        "discover_contracts_with_scripts",
        "LegacyDiscoveryWrapper.detect_framework",
        "detect_framework",
        "LegacyDiscoveryWrapper.discover_cross_workspace_components",
        "discover_cross_workspace_components",
        "LegacyDiscoveryWrapper.get_builder_class_path",
        "get_builder_class_path",
        "LegacyDiscoveryWrapper.load_builder_class",
        "load_builder_class",
        "LegacyDiscoveryWrapper.get_adapter",
        "get_adapter",
        "LegacyDiscoveryWrapper.get_unified_catalog",
        "get_unified_catalog",
        "build_complete_config_classes",
        "detect_config_classes_from_json",
        "__init__",
        "_refresh_cache",
        "_extract_base_name",
        "_normalize_name",
        "_calculate_similarity",
        "_find_best_match",
        "refresh_cache",
        "_scan_directory",
        "get_available_files_report",
        "extract_base_name_from_spec",
        "find_spec_constant_name",
        "find_specification_file",
        "find_contract_file",
        "find_spec_file",
        "find_builder_file",
        "find_config_file",
        "find_all_component_files",
        "get_step_info",
        "find_step_by_component",
        "list_available_steps",
        "search_steps",
        "discover_config_classes",
        "build_complete_config_classes",
        "get_job_type_variants",
        "get_metrics_report",
        "discover_contracts_with_scripts",
        "detect_framework",
        "discover_cross_workspace_components",
        "get_builder_class_path",
        "load_builder_class",
        "get_adapter",
        "get_unified_catalog",
        "ConfigClassDetectorAdapter.__init__",
        "__init__",
        "ConfigClassDetectorAdapter.detect_from_json",
        "detect_from_json",
        "ConfigClassDetectorAdapter._extract_class_names",
        "_extract_class_names",
        "ConfigClassDetectorAdapter.from_config_store",
        "from_config_store",
        "ConfigClassStoreAdapter.register",
        "register",
        "ConfigClassStoreAdapter.get_class",
        "get_class",
        "ConfigClassStoreAdapter.get_all_classes",
        "get_all_classes",
        "ConfigClassStoreAdapter.register_many",
        "register_many",
        "ConfigClassStoreAdapter.clear",
        "clear",
        "ConfigClassStoreAdapter.registered_names",
        "registered_names",
        "build_complete_config_classes",
        "detect_config_classes_from_json",
        "__init__",
        "detect_from_json",
        "_extract_class_names",
        "from_config_store",
        "register",
        "get_class",
        "get_all_classes",
        "register_many",
        "clear",
        "registered_names",
        "_register",
        "ContractDiscoveryResult.__init__",
        "__init__",
        "ContractDiscoveryResult.__repr__",
        "ContractDiscoveryEngineAdapter.__init__",
        "__init__",
        "ContractDiscoveryEngineAdapter.discover_contracts_with_scripts",
        "discover_contracts_with_scripts",
        "ContractDiscoveryEngineAdapter.discover_all_contracts",
        "discover_all_contracts",
        "ContractDiscoveryEngineAdapter.extract_contract_reference_from_spec",
        "extract_contract_reference_from_spec",
        "ContractDiscoveryEngineAdapter.build_entry_point_mapping",
        "build_entry_point_mapping",
        "ContractDiscoveryManagerAdapter.__init__",
        "__init__",
        "ContractDiscoveryManagerAdapter.discover_contract",
        "discover_contract",
        "ContractDiscoveryManagerAdapter.get_contract_input_paths",
        "get_contract_input_paths",
        "ContractDiscoveryManagerAdapter.get_contract_output_paths",
        "get_contract_output_paths",
        "ContractDiscoveryManagerAdapter.get_contract_environ_vars",
        "get_contract_environ_vars",
        "ContractDiscoveryManagerAdapter.get_contract_job_args",
        "get_contract_job_args",
        "ContractDiscoveryManagerAdapter._adapt_path_for_local_testing",
        "_adapt_path_for_local_testing",
        "__init__",
        "__init__",
        "discover_contracts_with_scripts",
        "discover_all_contracts",
        "extract_contract_reference_from_spec",
        "build_entry_point_mapping",
        "__init__",
        "discover_contract",
        "get_contract_input_paths",
        "get_contract_output_paths",
        "get_contract_environ_vars",
        "get_contract_job_args",
        "_adapt_path_for_local_testing"
      ],
      "likely_untested_functions": [
        "_ensure_cursus_importable",
        "_load_registry_info",
        "_run_discovery",
        "_discover_package_builders",
        "_discover_workspace_builders",
        "_scan_builder_directory",
        "_extract_builder_from_ast",
        "_inherits_from_step_builder_base",
        "_convert_parts_to_pascal_case_with_special_cases",
        "_file_to_relative_module_path",
        "_get_workspace_for_step",
        "_ensure_cursus_importable",
        "_load_registry_info",
        "_run_discovery",
        "_discover_package_builders",
        "_discover_workspace_builders",
        "_scan_builder_directory",
        "_extract_builder_from_ast",
        "_inherits_from_step_builder_base",
        "_convert_parts_to_pascal_case_with_special_cases",
        "_file_to_relative_module_path",
        "_get_workspace_for_step",
        "sagemaker_step_type",
        "builder_step_name",
        "description",
        "sagemaker_step_type",
        "builder_step_name",
        "description",
        "list_steps_with_specs",
        "get_spec_job_type_variants",
        "serialize_contract",
        "find_contracts_by_entry_point",
        "get_contract_entry_points",
        "validate_contract_script_mapping",
        "_normalize_workspace_dirs",
        "_initialize_config_discovery",
        "_initialize_builder_discovery",
        "_initialize_contract_discovery",
        "_initialize_spec_discovery",
        "_find_package_root",
        "_load_registry_data",
        "_discover_package_components",
        "_discover_workspace_components",
        "_discover_workspace_components_in_dir",
        "_add_component_to_index",
        "get_config_types_for_step_type",
        "list_supported_step_types",
        "validate_step_name_with_registry",
        "_generate_fallback_builder_map",
        "get_all_builders",
        "get_builders_by_step_type",
        "list_steps_with_specs",
        "get_spec_job_type_variants",
        "serialize_contract",
        "find_contracts_by_entry_point",
        "get_contract_entry_points",
        "validate_contract_script_mapping",
        "_normalize_workspace_dirs",
        "_initialize_config_discovery",
        "_initialize_builder_discovery",
        "_initialize_contract_discovery",
        "_initialize_spec_discovery",
        "_find_package_root",
        "_load_registry_data",
        "_discover_package_components",
        "_discover_workspace_components",
        "_discover_workspace_components_in_dir",
        "_add_component_to_index",
        "get_config_types_for_step_type",
        "list_supported_step_types",
        "validate_step_name_with_registry",
        "_generate_fallback_builder_map",
        "get_all_builders",
        "get_builders_by_step_type",
        "_scan_contract_directory",
        "_is_contract_class",
        "_discover_workspace_contracts",
        "_file_to_relative_module_path",
        "serialize_contract",
        "find_contracts_by_entry_point",
        "get_contract_entry_points",
        "_is_contract_instance",
        "_serialize_contract_inputs",
        "_serialize_contract_outputs",
        "_serialize_contract_arguments",
        "_find_contracts_by_entry_point_in_dir",
        "_find_contracts_by_entry_point_in_workspace",
        "_contract_file_references_entry_point",
        "_extract_entry_points_from_dir",
        "_extract_entry_points_from_workspace",
        "_scan_contract_directory",
        "_is_contract_class",
        "_discover_workspace_contracts",
        "_file_to_relative_module_path",
        "serialize_contract",
        "find_contracts_by_entry_point",
        "get_contract_entry_points",
        "_is_contract_instance",
        "_serialize_contract_inputs",
        "_serialize_contract_outputs",
        "_serialize_contract_arguments",
        "_find_contracts_by_entry_point_in_dir",
        "_find_contracts_by_entry_point_in_workspace",
        "_contract_file_references_entry_point",
        "_extract_entry_points_from_dir",
        "_extract_entry_points_from_workspace",
        "discover_hyperparameter_classes",
        "_discover_workspace_configs",
        "_discover_workspace_hyperparams",
        "_file_to_relative_module_path",
        "_scan_hyperparams_directory",
        "_is_hyperparameter_class",
        "discover_hyperparameter_classes",
        "_discover_workspace_configs",
        "_discover_workspace_hyperparams",
        "_file_to_relative_module_path",
        "_scan_hyperparams_directory",
        "_is_hyperparameter_class",
        "_extract_spec_from_module",
        "_scan_spec_directory",
        "_is_spec_assignment",
        "_try_workspace_spec_import",
        "_load_spec_from_file",
        "_find_specs_by_contract_in_dir",
        "_find_specs_by_contract_in_workspace",
        "_spec_file_references_contract",
        "_find_job_type_variants_in_dir",
        "_find_job_type_variants_in_workspace",
        "_apply_smart_specification_logic",
        "_extract_job_type_from_spec_name_registry",
        "_select_primary_specification",
        "_validate_smart_logical_names",
        "_file_to_relative_module_path",
        "_extract_spec_from_module",
        "_scan_spec_directory",
        "_is_spec_assignment",
        "_try_workspace_spec_import",
        "_load_spec_from_file",
        "_find_specs_by_contract_in_dir",
        "_find_specs_by_contract_in_workspace",
        "_spec_file_references_contract",
        "_find_job_type_variants_in_dir",
        "_find_job_type_variants_in_workspace",
        "_apply_smart_specification_logic",
        "_extract_job_type_from_spec_name_registry",
        "_select_primary_specification",
        "_validate_smart_logical_names",
        "_file_to_relative_module_path",
        "resolve_legacy_aliases",
        "get_config_types_for_step_type",
        "list_supported_step_types",
        "_resolve_canonical_name_from_registry",
        "_extract_job_type",
        "get_registry_function",
        "validate_step_name_with_registry",
        "resolve_legacy_aliases",
        "get_config_types_for_step_type",
        "list_supported_step_types",
        "_resolve_canonical_name_from_registry",
        "_extract_job_type",
        "get_registry_function",
        "validate_step_name_with_registry",
        "_discover_all_files",
        "_discover_all_files",
        "_discover_all_files",
        "_discover_all_files",
        "__repr__",
        "__repr__"
      ]
    },
    "steps": {
      "component": "steps",
      "description": "Pipeline step builders, configs, and specifications",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "steps/builders/builder_xgboost_model_eval_step.py",
        "steps/builders/builder_xgboost_model_step.py",
        "steps/builders/builder_risk_table_mapping_step.py",
        "steps/builders/builder_currency_conversion_step.py",
        "steps/builders/builder_dummy_training_step.py",
        "steps/builders/builder_stratified_sampling_step.py",
        "steps/builders/builder_xgboost_training_step.py",
        "steps/builders/builder_tabular_preprocessing_step.py",
        "steps/builders/builder_xgboost_model_inference_step.py",
        "steps/builders/builder_model_metrics_computation_step.py",
        "steps/builders/builder_model_wiki_generator_step.py",
        "steps/builders/builder_model_calibration_step.py",
        "steps/builders/builder_registration_step.py",
        "steps/builders/builder_package_step.py",
        "steps/builders/s3_utils.py",
        "steps/builders/builder_missing_value_imputation_step.py",
        "steps/builders/builder_payload_step.py",
        "steps/builders/builder_cradle_data_loading_step.py",
        "steps/builders/builder_batch_transform_step.py",
        "steps/builders/builder_pytorch_training_step.py",
        "steps/builders/builder_pytorch_model_step.py",
        "steps/specs/missing_value_imputation_validation_spec.py",
        "steps/specs/model_wiki_generator_spec.py",
        "steps/specs/currency_conversion_training_spec.py",
        "steps/specs/cradle_data_loading_validation_spec.py",
        "steps/specs/model_calibration_training_spec.py",
        "steps/specs/tabular_preprocessing_testing_spec.py",
        "steps/specs/xgboost_model_spec.py",
        "steps/specs/tabular_preprocessing_calibration_spec.py",
        "steps/specs/registration_spec.py",
        "steps/specs/xgboost_model_eval_spec.py",
        "steps/specs/risk_table_mapping_testing_spec.py",
        "steps/specs/stratified_sampling_spec.py",
        "steps/specs/batch_transform_validation_spec.py",
        "steps/specs/missing_value_imputation_calibration_spec.py",
        "steps/specs/dummy_training_spec.py",
        "steps/specs/missing_value_imputation_spec.py",
        "steps/specs/model_calibration_spec.py",
        "steps/specs/currency_conversion_spec.py",
        "steps/specs/tabular_preprocessing_validation_spec.py",
        "steps/specs/payload_spec.py",
        "steps/specs/currency_conversion_calibration_spec.py",
        "steps/specs/batch_transform_testing_spec.py",
        "steps/specs/model_calibration_validation_spec.py",
        "steps/specs/stratified_sampling_calibration_spec.py",
        "steps/specs/tabular_preprocessing_training_spec.py",
        "steps/specs/xgboost_training_spec.py",
        "steps/specs/risk_table_mapping_calibration_spec.py",
        "steps/specs/missing_value_imputation_testing_spec.py",
        "steps/specs/cradle_data_loading_testing_spec.py",
        "steps/specs/tabular_preprocessing_spec.py",
        "steps/specs/batch_transform_calibration_spec.py",
        "steps/specs/batch_transform_training_spec.py",
        "steps/specs/missing_value_imputation_training_spec.py",
        "steps/specs/cradle_data_loading_spec.py",
        "steps/specs/cradle_data_loading_training_spec.py",
        "steps/specs/model_calibration_calibration_spec.py",
        "steps/specs/xgboost_model_inference_spec.py",
        "steps/specs/pytorch_training_spec.py",
        "steps/specs/stratified_sampling_training_spec.py",
        "steps/specs/package_spec.py",
        "steps/specs/risk_table_mapping_validation_spec.py",
        "steps/specs/cradle_data_loading_calibration_spec.py",
        "steps/specs/stratified_sampling_testing_spec.py",
        "steps/specs/pytorch_model_spec.py",
        "steps/specs/model_metrics_computation_spec.py",
        "steps/specs/model_calibration_testing_spec.py",
        "steps/specs/risk_table_mapping_training_spec.py",
        "steps/specs/stratified_sampling_validation_spec.py",
        "steps/specs/currency_conversion_validation_spec.py",
        "steps/specs/currency_conversion_testing_spec.py",
        "steps/contracts/training_script_contract.py",
        "steps/contracts/missing_value_imputation_contract.py",
        "steps/contracts/model_calibration_contract.py",
        "steps/contracts/mims_registration_contract.py",
        "steps/contracts/pytorch_training_contract.py",
        "steps/contracts/tabular_preprocessing_contract.py",
        "steps/contracts/xgboost_model_inference_contract.py",
        "steps/contracts/payload_contract.py",
        "steps/contracts/contract_validator.py",
        "steps/contracts/cradle_data_loading_contract.py",
        "steps/contracts/package_contract.py",
        "steps/contracts/model_wiki_generator_contract.py",
        "steps/contracts/model_metrics_computation_contract.py",
        "steps/contracts/xgboost_training_contract.py",
        "steps/contracts/stratified_sampling_contract.py",
        "steps/contracts/risk_table_mapping_contract.py",
        "steps/contracts/dummy_training_contract.py",
        "steps/contracts/xgboost_model_eval_contract.py",
        "steps/contracts/currency_conversion_contract.py",
        "steps/configs/config_model_wiki_generator_step.py",
        "steps/configs/config_payload_step.py",
        "steps/configs/config_cradle_data_loading_step.py",
        "steps/configs/config_model_metrics_computation_step.py",
        "steps/configs/config_xgboost_model_eval_step.py",
        "steps/configs/config_risk_table_mapping_step.py",
        "steps/configs/config_dummy_training_step.py",
        "steps/configs/config_model_calibration_step.py",
        "steps/configs/config_pytorch_training_step.py",
        "steps/configs/config_tabular_preprocessing_step.py",
        "steps/configs/config_registration_step.py",
        "steps/configs/config_pytorch_model_step.py",
        "steps/configs/config_missing_value_imputation_step.py",
        "steps/configs/config_xgboost_training_step.py",
        "steps/configs/config_xgboost_model_step.py",
        "steps/configs/config_xgboost_model_inference_step.py",
        "steps/configs/utils.py",
        "steps/configs/config_stratified_sampling_step.py",
        "steps/configs/config_processing_step_base.py",
        "steps/configs/config_package_step.py",
        "steps/configs/config_currency_conversion_step.py",
        "steps/configs/config_batch_transform_step.py",
        "steps/scripts/package.py",
        "steps/scripts/missing_value_imputation.py",
        "steps/scripts/xgboost_training.py",
        "steps/scripts/xgboost_model_inference.py",
        "steps/scripts/currency_conversion.py",
        "steps/scripts/pytorch_training.py",
        "steps/scripts/tabular_preprocessing.py",
        "steps/scripts/model_calibration.py",
        "steps/scripts/model_metrics_computation.py",
        "steps/scripts/dummy_training.py",
        "steps/scripts/model_wiki_generator.py",
        "steps/scripts/payload.py",
        "steps/scripts/xgboost_model_eval.py",
        "steps/scripts/stratified_sampling.py",
        "steps/scripts/risk_table_mapping.py",
        "steps/hyperparams/hyperparameters_bsm.py",
        "steps/hyperparams/hyperparameters_xgboost.py"
      ],
      "test_files": [
        "steps/test_sagemaker_step_type_implementation.py",
        "steps/builders/test_transform_step_builders.py",
        "steps/builders/test_createmodel_step_builders.py",
        "steps/builders/test_processing_step_builders.py",
        "steps/builders/test_training_step_builders.py",
        "steps/builders/test_dynamic_universal.py",
        "steps/specs/test_output_spec_aliases.py",
        "steps/specs/test_node_type_validation.py",
        "steps/configs/test_hybrid_config_validation.py",
        "steps/configs/test_utils.py",
        "steps/configs/test_utils_basic_serialization.py",
        "steps/configs/test_modernized_path_resolution.py",
        "steps/configs/test_field_sources.py",
        "steps/configs/test_config_inheritance.py",
        "steps/configs/test_utils_flattened_structure.py",
        "steps/scripts/test_package.py",
        "steps/scripts/test_model_wiki_generator.py",
        "steps/scripts/test_risk_table_mapping.py",
        "steps/scripts/test_xgboost_model_eval.py",
        "steps/scripts/test_currency_conversion.py",
        "steps/scripts/test_tabular_preprocessing.py",
        "steps/scripts/test_payload.py",
        "steps/scripts/test_dummy_training.py",
        "steps/scripts/test_xgboost_training.py",
        "steps/scripts/test_model_calibration.py",
        "steps/scripts/test_stratified_sampling.py",
        "steps/builders/legacy/test_registry_integration.py",
        "steps/builders/legacy/test_hybrid_integration.py",
        "steps/builders/legacy/test_real_builders.py"
      ],
      "total_source_functions": 1594,
      "tested_functions": 603,
      "untested_functions": 991,
      "coverage_percentage": 37.82936010037641,
      "total_source_lines": 31009,
      "total_test_lines": 10981,
      "test_to_source_ratio": 0.7478042659974906,
      "source_functions_by_file": {
        "steps/builders/builder_xgboost_model_eval_step.py": [
          "XGBoostModelEvalStepBuilder.__init__",
          "__init__",
          "XGBoostModelEvalStepBuilder.validate_configuration",
          "validate_configuration",
          "XGBoostModelEvalStepBuilder._create_processor",
          "_create_processor",
          "XGBoostModelEvalStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "XGBoostModelEvalStepBuilder._get_inputs",
          "_get_inputs",
          "XGBoostModelEvalStepBuilder._get_outputs",
          "_get_outputs",
          "XGBoostModelEvalStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "XGBoostModelEvalStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_xgboost_model_step.py": [
          "XGBoostModelStepBuilder.__init__",
          "__init__",
          "XGBoostModelStepBuilder.validate_configuration",
          "validate_configuration",
          "XGBoostModelStepBuilder._get_image_uri",
          "_get_image_uri",
          "XGBoostModelStepBuilder._create_model",
          "_create_model",
          "XGBoostModelStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "XGBoostModelStepBuilder._get_inputs",
          "_get_inputs",
          "XGBoostModelStepBuilder._get_outputs",
          "_get_outputs",
          "XGBoostModelStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_get_image_uri",
          "_create_model",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/builders/builder_risk_table_mapping_step.py": [
          "RiskTableMappingStepBuilder.__init__",
          "__init__",
          "RiskTableMappingStepBuilder.validate_configuration",
          "validate_configuration",
          "RiskTableMappingStepBuilder._create_processor",
          "_create_processor",
          "RiskTableMappingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "RiskTableMappingStepBuilder._get_inputs",
          "_get_inputs",
          "RiskTableMappingStepBuilder._get_outputs",
          "_get_outputs",
          "RiskTableMappingStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "RiskTableMappingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_currency_conversion_step.py": [
          "CurrencyConversionStepBuilder.__init__",
          "__init__",
          "CurrencyConversionStepBuilder.validate_configuration",
          "validate_configuration",
          "CurrencyConversionStepBuilder._create_processor",
          "_create_processor",
          "CurrencyConversionStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "CurrencyConversionStepBuilder._get_inputs",
          "_get_inputs",
          "CurrencyConversionStepBuilder._get_outputs",
          "_get_outputs",
          "CurrencyConversionStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "CurrencyConversionStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_dummy_training_step.py": [
          "DummyTrainingStepBuilder.__init__",
          "__init__",
          "DummyTrainingStepBuilder.validate_configuration",
          "validate_configuration",
          "DummyTrainingStepBuilder._get_processor",
          "_get_processor",
          "DummyTrainingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "DummyTrainingStepBuilder._get_inputs",
          "_get_inputs",
          "DummyTrainingStepBuilder._get_outputs",
          "_get_outputs",
          "DummyTrainingStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "DummyTrainingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_get_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_stratified_sampling_step.py": [
          "StratifiedSamplingStepBuilder.__init__",
          "__init__",
          "StratifiedSamplingStepBuilder.validate_configuration",
          "validate_configuration",
          "StratifiedSamplingStepBuilder._create_processor",
          "_create_processor",
          "StratifiedSamplingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "StratifiedSamplingStepBuilder._get_inputs",
          "_get_inputs",
          "StratifiedSamplingStepBuilder._get_outputs",
          "_get_outputs",
          "StratifiedSamplingStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "StratifiedSamplingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_xgboost_training_step.py": [
          "XGBoostTrainingStepBuilder.__init__",
          "__init__",
          "XGBoostTrainingStepBuilder.validate_configuration",
          "validate_configuration",
          "XGBoostTrainingStepBuilder._create_estimator",
          "_create_estimator",
          "XGBoostTrainingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "XGBoostTrainingStepBuilder._create_data_channels_from_source",
          "_create_data_channels_from_source",
          "XGBoostTrainingStepBuilder._get_inputs",
          "_get_inputs",
          "XGBoostTrainingStepBuilder._get_outputs",
          "_get_outputs",
          "XGBoostTrainingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_estimator",
          "_get_environment_variables",
          "_create_data_channels_from_source",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/builders/builder_tabular_preprocessing_step.py": [
          "TabularPreprocessingStepBuilder.__init__",
          "__init__",
          "TabularPreprocessingStepBuilder.validate_configuration",
          "validate_configuration",
          "TabularPreprocessingStepBuilder._create_processor",
          "_create_processor",
          "TabularPreprocessingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "TabularPreprocessingStepBuilder._get_inputs",
          "_get_inputs",
          "TabularPreprocessingStepBuilder._get_outputs",
          "_get_outputs",
          "TabularPreprocessingStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "TabularPreprocessingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_xgboost_model_inference_step.py": [
          "XGBoostModelInferenceStepBuilder.__init__",
          "__init__",
          "XGBoostModelInferenceStepBuilder.validate_configuration",
          "validate_configuration",
          "XGBoostModelInferenceStepBuilder._create_processor",
          "_create_processor",
          "XGBoostModelInferenceStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "XGBoostModelInferenceStepBuilder._get_inputs",
          "_get_inputs",
          "XGBoostModelInferenceStepBuilder._get_outputs",
          "_get_outputs",
          "XGBoostModelInferenceStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "XGBoostModelInferenceStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_model_metrics_computation_step.py": [
          "ModelMetricsComputationStepBuilder.__init__",
          "__init__",
          "ModelMetricsComputationStepBuilder.validate_configuration",
          "validate_configuration",
          "ModelMetricsComputationStepBuilder._is_pipeline_variable",
          "_is_pipeline_variable",
          "ModelMetricsComputationStepBuilder._detect_circular_references",
          "_detect_circular_references",
          "ModelMetricsComputationStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "ModelMetricsComputationStepBuilder._get_inputs",
          "_get_inputs",
          "ModelMetricsComputationStepBuilder._get_outputs",
          "_get_outputs",
          "ModelMetricsComputationStepBuilder._get_processor",
          "_get_processor",
          "ModelMetricsComputationStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "ModelMetricsComputationStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_is_pipeline_variable",
          "_detect_circular_references",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_processor",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_model_wiki_generator_step.py": [
          "ModelWikiGeneratorStepBuilder.__init__",
          "__init__",
          "ModelWikiGeneratorStepBuilder.validate_configuration",
          "validate_configuration",
          "ModelWikiGeneratorStepBuilder._is_pipeline_variable",
          "_is_pipeline_variable",
          "ModelWikiGeneratorStepBuilder._detect_circular_references",
          "_detect_circular_references",
          "ModelWikiGeneratorStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "ModelWikiGeneratorStepBuilder._get_inputs",
          "_get_inputs",
          "ModelWikiGeneratorStepBuilder._get_outputs",
          "_get_outputs",
          "ModelWikiGeneratorStepBuilder._get_processor",
          "_get_processor",
          "ModelWikiGeneratorStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "ModelWikiGeneratorStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_is_pipeline_variable",
          "_detect_circular_references",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_processor",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_model_calibration_step.py": [
          "ModelCalibrationStepBuilder.__init__",
          "__init__",
          "ModelCalibrationStepBuilder.validate_configuration",
          "validate_configuration",
          "ModelCalibrationStepBuilder._is_pipeline_variable",
          "_is_pipeline_variable",
          "ModelCalibrationStepBuilder._detect_circular_references",
          "_detect_circular_references",
          "ModelCalibrationStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "ModelCalibrationStepBuilder._get_inputs",
          "_get_inputs",
          "ModelCalibrationStepBuilder._get_outputs",
          "_get_outputs",
          "ModelCalibrationStepBuilder._get_processor",
          "_get_processor",
          "ModelCalibrationStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "ModelCalibrationStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_is_pipeline_variable",
          "_detect_circular_references",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_processor",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_registration_step.py": [
          "RegistrationStepBuilder.__init__",
          "__init__",
          "RegistrationStepBuilder.validate_configuration",
          "validate_configuration",
          "RegistrationStepBuilder._get_inputs",
          "_get_inputs",
          "RegistrationStepBuilder._get_outputs",
          "_get_outputs",
          "RegistrationStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/builders/builder_package_step.py": [
          "PackageStepBuilder.__init__",
          "__init__",
          "PackageStepBuilder.validate_configuration",
          "validate_configuration",
          "PackageStepBuilder._create_processor",
          "_create_processor",
          "PackageStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "PackageStepBuilder._get_inputs",
          "_get_inputs",
          "PackageStepBuilder._get_outputs",
          "_get_outputs",
          "PackageStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "PackageStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/s3_utils.py": [
          "S3PathHandler.parse_uri",
          "parse_uri",
          "S3PathHandler.normalize",
          "normalize",
          "S3PathHandler.join",
          "join",
          "S3PathHandler.get_parent",
          "get_parent",
          "S3PathHandler.get_name",
          "get_name",
          "S3PathHandler.ensure_directory",
          "ensure_directory",
          "S3PathHandler.is_valid",
          "is_valid",
          "parse_uri",
          "normalize",
          "join",
          "get_parent",
          "get_name",
          "ensure_directory",
          "is_valid"
        ],
        "steps/builders/builder_missing_value_imputation_step.py": [
          "MissingValueImputationStepBuilder.__init__",
          "__init__",
          "MissingValueImputationStepBuilder.validate_configuration",
          "validate_configuration",
          "MissingValueImputationStepBuilder._create_processor",
          "_create_processor",
          "MissingValueImputationStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "MissingValueImputationStepBuilder._get_inputs",
          "_get_inputs",
          "MissingValueImputationStepBuilder._get_outputs",
          "_get_outputs",
          "MissingValueImputationStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "MissingValueImputationStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_payload_step.py": [
          "PayloadStepBuilder.__init__",
          "__init__",
          "PayloadStepBuilder.validate_configuration",
          "validate_configuration",
          "PayloadStepBuilder._create_processor",
          "_create_processor",
          "PayloadStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "PayloadStepBuilder._get_inputs",
          "_get_inputs",
          "PayloadStepBuilder._get_outputs",
          "_get_outputs",
          "PayloadStepBuilder._get_job_arguments",
          "_get_job_arguments",
          "PayloadStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_processor",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "_get_job_arguments",
          "create_step"
        ],
        "steps/builders/builder_cradle_data_loading_step.py": [
          "CradleDataLoadingStepBuilder.__init__",
          "__init__",
          "CradleDataLoadingStepBuilder.validate_configuration",
          "validate_configuration",
          "CradleDataLoadingStepBuilder._get_inputs",
          "_get_inputs",
          "CradleDataLoadingStepBuilder._get_outputs",
          "_get_outputs",
          "CradleDataLoadingStepBuilder.create_step",
          "create_step",
          "CradleDataLoadingStepBuilder.get_output_location",
          "get_output_location",
          "CradleDataLoadingStepBuilder.get_step_outputs",
          "get_step_outputs",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "get_output_location",
          "get_step_outputs"
        ],
        "steps/builders/builder_batch_transform_step.py": [
          "BatchTransformStepBuilder.__init__",
          "__init__",
          "BatchTransformStepBuilder.validate_configuration",
          "validate_configuration",
          "BatchTransformStepBuilder._create_transformer",
          "_create_transformer",
          "BatchTransformStepBuilder._get_inputs",
          "_get_inputs",
          "BatchTransformStepBuilder._get_outputs",
          "_get_outputs",
          "BatchTransformStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_transformer",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/builders/builder_pytorch_training_step.py": [
          "PyTorchTrainingStepBuilder.__init__",
          "__init__",
          "PyTorchTrainingStepBuilder.validate_configuration",
          "validate_configuration",
          "PyTorchTrainingStepBuilder._create_estimator",
          "_create_estimator",
          "PyTorchTrainingStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "PyTorchTrainingStepBuilder._get_metric_definitions",
          "_get_metric_definitions",
          "PyTorchTrainingStepBuilder._create_profiler_config",
          "_create_profiler_config",
          "PyTorchTrainingStepBuilder._create_data_channel_from_source",
          "_create_data_channel_from_source",
          "PyTorchTrainingStepBuilder._get_inputs",
          "_get_inputs",
          "PyTorchTrainingStepBuilder._get_outputs",
          "_get_outputs",
          "PyTorchTrainingStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_create_estimator",
          "_get_environment_variables",
          "_get_metric_definitions",
          "_create_profiler_config",
          "_create_data_channel_from_source",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/builders/builder_pytorch_model_step.py": [
          "PyTorchModelStepBuilder.__init__",
          "__init__",
          "PyTorchModelStepBuilder.validate_configuration",
          "validate_configuration",
          "PyTorchModelStepBuilder._get_image_uri",
          "_get_image_uri",
          "PyTorchModelStepBuilder._create_model",
          "_create_model",
          "PyTorchModelStepBuilder._get_environment_variables",
          "_get_environment_variables",
          "PyTorchModelStepBuilder._get_inputs",
          "_get_inputs",
          "PyTorchModelStepBuilder._get_outputs",
          "_get_outputs",
          "PyTorchModelStepBuilder.create_step",
          "create_step",
          "__init__",
          "validate_configuration",
          "_get_image_uri",
          "_create_model",
          "_get_environment_variables",
          "_get_inputs",
          "_get_outputs",
          "create_step"
        ],
        "steps/specs/missing_value_imputation_validation_spec.py": [
          "_get_missing_value_imputation_contract"
        ],
        "steps/specs/model_wiki_generator_spec.py": [
          "_get_model_wiki_generator_contract"
        ],
        "steps/specs/currency_conversion_training_spec.py": [
          "_get_currency_conversion_contract"
        ],
        "steps/specs/cradle_data_loading_validation_spec.py": [],
        "steps/specs/model_calibration_training_spec.py": [
          "_get_model_calibration_contract"
        ],
        "steps/specs/tabular_preprocessing_testing_spec.py": [
          "_get_tabular_preprocess_contract"
        ],
        "steps/specs/xgboost_model_spec.py": [],
        "steps/specs/tabular_preprocessing_calibration_spec.py": [
          "_get_tabular_preprocess_contract"
        ],
        "steps/specs/registration_spec.py": [
          "_get_mims_registration_contract"
        ],
        "steps/specs/xgboost_model_eval_spec.py": [
          "_get_model_evaluation_contract"
        ],
        "steps/specs/risk_table_mapping_testing_spec.py": [
          "_get_risk_table_mapping_contract"
        ],
        "steps/specs/stratified_sampling_spec.py": [
          "_get_stratified_sampling_contract"
        ],
        "steps/specs/batch_transform_validation_spec.py": [],
        "steps/specs/missing_value_imputation_calibration_spec.py": [
          "_get_missing_value_imputation_contract"
        ],
        "steps/specs/dummy_training_spec.py": [
          "_get_dummy_training_contract"
        ],
        "steps/specs/missing_value_imputation_spec.py": [
          "_get_missing_value_imputation_contract"
        ],
        "steps/specs/model_calibration_spec.py": [
          "_get_model_calibration_contract"
        ],
        "steps/specs/currency_conversion_spec.py": [
          "_get_currency_conversion_contract"
        ],
        "steps/specs/tabular_preprocessing_validation_spec.py": [
          "_get_tabular_preprocess_contract"
        ],
        "steps/specs/payload_spec.py": [
          "_get_payload_contract"
        ],
        "steps/specs/currency_conversion_calibration_spec.py": [
          "_get_currency_conversion_contract"
        ],
        "steps/specs/batch_transform_testing_spec.py": [],
        "steps/specs/model_calibration_validation_spec.py": [
          "_get_model_calibration_contract"
        ],
        "steps/specs/stratified_sampling_calibration_spec.py": [
          "_get_stratified_sampling_contract"
        ],
        "steps/specs/tabular_preprocessing_training_spec.py": [
          "_get_tabular_preprocess_contract"
        ],
        "steps/specs/xgboost_training_spec.py": [
          "_get_xgboost_train_contract"
        ],
        "steps/specs/risk_table_mapping_calibration_spec.py": [
          "_get_risk_table_mapping_contract"
        ],
        "steps/specs/missing_value_imputation_testing_spec.py": [
          "_get_missing_value_imputation_contract"
        ],
        "steps/specs/cradle_data_loading_testing_spec.py": [],
        "steps/specs/tabular_preprocessing_spec.py": [
          "_get_tabular_preprocess_contract"
        ],
        "steps/specs/batch_transform_calibration_spec.py": [],
        "steps/specs/batch_transform_training_spec.py": [],
        "steps/specs/missing_value_imputation_training_spec.py": [
          "_get_missing_value_imputation_contract"
        ],
        "steps/specs/cradle_data_loading_spec.py": [
          "_get_cradle_data_loading_contract"
        ],
        "steps/specs/cradle_data_loading_training_spec.py": [],
        "steps/specs/model_calibration_calibration_spec.py": [
          "_get_model_calibration_contract"
        ],
        "steps/specs/xgboost_model_inference_spec.py": [
          "_get_model_inference_contract"
        ],
        "steps/specs/pytorch_training_spec.py": [
          "_get_pytorch_train_contract"
        ],
        "steps/specs/stratified_sampling_training_spec.py": [
          "_get_stratified_sampling_contract"
        ],
        "steps/specs/package_spec.py": [
          "_get_package_contract"
        ],
        "steps/specs/risk_table_mapping_validation_spec.py": [
          "_get_risk_table_mapping_contract"
        ],
        "steps/specs/cradle_data_loading_calibration_spec.py": [],
        "steps/specs/stratified_sampling_testing_spec.py": [
          "_get_stratified_sampling_contract"
        ],
        "steps/specs/pytorch_model_spec.py": [],
        "steps/specs/model_metrics_computation_spec.py": [
          "_get_model_metrics_computation_contract"
        ],
        "steps/specs/model_calibration_testing_spec.py": [
          "_get_model_calibration_contract"
        ],
        "steps/specs/risk_table_mapping_training_spec.py": [
          "_get_risk_table_mapping_contract"
        ],
        "steps/specs/stratified_sampling_validation_spec.py": [
          "_get_stratified_sampling_contract"
        ],
        "steps/specs/currency_conversion_validation_spec.py": [
          "_get_currency_conversion_contract"
        ],
        "steps/specs/currency_conversion_testing_spec.py": [
          "_get_currency_conversion_contract"
        ],
        "steps/contracts/training_script_contract.py": [
          "TrainingScriptContract.validate_entry_point",
          "validate_entry_point",
          "TrainingScriptContract.validate_input_paths",
          "validate_input_paths",
          "TrainingScriptContract.validate_output_paths",
          "validate_output_paths",
          "TrainingScriptContract.validate_implementation",
          "validate_implementation",
          "TrainingScriptContract._validate_against_analysis",
          "_validate_against_analysis",
          "TrainingScriptAnalyzer.get_input_paths",
          "get_input_paths",
          "TrainingScriptAnalyzer.get_output_paths",
          "get_output_paths",
          "validate_entry_point",
          "validate_input_paths",
          "validate_output_paths",
          "validate_implementation",
          "_validate_against_analysis",
          "get_input_paths",
          "get_output_paths"
        ],
        "steps/contracts/missing_value_imputation_contract.py": [],
        "steps/contracts/model_calibration_contract.py": [],
        "steps/contracts/mims_registration_contract.py": [],
        "steps/contracts/pytorch_training_contract.py": [],
        "steps/contracts/tabular_preprocessing_contract.py": [],
        "steps/contracts/xgboost_model_inference_contract.py": [],
        "steps/contracts/payload_contract.py": [],
        "steps/contracts/contract_validator.py": [
          "ContractValidationReport.summary",
          "summary",
          "ScriptContractValidator.__init__",
          "__init__",
          "ScriptContractValidator.validate_script",
          "validate_script",
          "ScriptContractValidator._analyze_io_gaps",
          "_analyze_io_gaps",
          "ScriptContractValidator.validate_all_scripts",
          "validate_all_scripts",
          "ScriptContractValidator.generate_compliance_summary",
          "generate_compliance_summary",
          "main",
          "summary",
          "__init__",
          "validate_script",
          "_analyze_io_gaps",
          "validate_all_scripts",
          "generate_compliance_summary"
        ],
        "steps/contracts/cradle_data_loading_contract.py": [],
        "steps/contracts/package_contract.py": [],
        "steps/contracts/model_wiki_generator_contract.py": [],
        "steps/contracts/model_metrics_computation_contract.py": [],
        "steps/contracts/xgboost_training_contract.py": [],
        "steps/contracts/stratified_sampling_contract.py": [],
        "steps/contracts/risk_table_mapping_contract.py": [],
        "steps/contracts/dummy_training_contract.py": [],
        "steps/contracts/xgboost_model_eval_contract.py": [],
        "steps/contracts/currency_conversion_contract.py": [],
        "steps/configs/config_model_wiki_generator_step.py": [
          "ModelWikiGeneratorConfig.model_display_name",
          "model_display_name",
          "ModelWikiGeneratorConfig.output_formats_list",
          "output_formats_list",
          "ModelWikiGeneratorConfig.effective_model_description",
          "effective_model_description",
          "ModelWikiGeneratorConfig.validate_output_formats",
          "validate_output_formats",
          "ModelWikiGeneratorConfig.validate_cti_classification",
          "validate_cti_classification",
          "ModelWikiGeneratorConfig.validate_model_name",
          "validate_model_name",
          "ModelWikiGeneratorConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "ModelWikiGeneratorConfig.validate_wiki_generator_config",
          "validate_wiki_generator_config",
          "ModelWikiGeneratorConfig.get_environment_variables",
          "get_environment_variables",
          "ModelWikiGeneratorConfig.get_script_contract",
          "get_script_contract",
          "ModelWikiGeneratorConfig.model_dump",
          "model_dump",
          "ModelWikiGeneratorConfig.get_public_init_fields",
          "get_public_init_fields",
          "model_display_name",
          "output_formats_list",
          "effective_model_description",
          "validate_output_formats",
          "validate_cti_classification",
          "validate_model_name",
          "initialize_derived_fields",
          "validate_wiki_generator_config",
          "get_environment_variables",
          "get_script_contract",
          "model_dump",
          "get_public_init_fields"
        ],
        "steps/configs/config_payload_step.py": [
          "PayloadConfig.serialize_path_fields",
          "serialize_path_fields",
          "PayloadConfig.validate_input_variable_list",
          "validate_input_variable_list",
          "PayloadConfig.validate_output_variable_list",
          "validate_output_variable_list",
          "PayloadConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "PayloadConfig.validate_special_fields",
          "validate_special_fields",
          "PayloadConfig.get_script_contract",
          "get_script_contract",
          "PayloadConfig.get_normalized_input_variables",
          "get_normalized_input_variables",
          "PayloadConfig.get_input_variables_as_dict",
          "get_input_variables_as_dict",
          "serialize_path_fields",
          "validate_input_variable_list",
          "validate_output_variable_list",
          "initialize_derived_fields",
          "validate_special_fields",
          "get_script_contract",
          "get_normalized_input_variables",
          "get_input_variables_as_dict"
        ],
        "steps/configs/config_cradle_data_loading_step.py": [
          "get_flattened_fields",
          "BaseCradleComponentConfig.categorize_fields",
          "categorize_fields",
          "BaseCradleComponentConfig.get_public_init_fields",
          "get_public_init_fields",
          "MdsDataSourceConfig.validate_region",
          "validate_region",
          "EdxDataSourceConfig.edx_manifest",
          "edx_manifest",
          "EdxDataSourceConfig.validate_manifest_key_format",
          "validate_manifest_key_format",
          "EdxDataSourceConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "AndesDataSourceConfig.validate_provider",
          "validate_provider",
          "AndesDataSourceConfig.validate_table_name",
          "validate_table_name",
          "AndesDataSourceConfig.__str__",
          "__str__",
          "DataSourceConfig.validate_type",
          "validate_type",
          "DataSourceConfig.check_properties",
          "check_properties",
          "DataSourcesSpecificationConfig.validate_exact_datetime_format",
          "validate_exact_datetime_format",
          "JobSplitOptionsConfig.days_must_be_positive",
          "days_must_be_positive",
          "JobSplitOptionsConfig.require_merge_sql_if_split",
          "require_merge_sql_if_split",
          "OutputSpecificationConfig.output_path",
          "output_path",
          "OutputSpecificationConfig.validate_output_path",
          "validate_output_path",
          "OutputSpecificationConfig.validate_format",
          "validate_format",
          "OutputSpecificationConfig.validate_save_mode",
          "validate_save_mode",
          "CradleJobSpecificationConfig.validate_cluster_type",
          "validate_cluster_type",
          "CradleDataLoadConfig.validate_job_type",
          "validate_job_type",
          "CradleDataLoadConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "CradleDataLoadConfig.categorize_fields",
          "categorize_fields",
          "CradleDataLoadConfig.get_all_tiered_fields",
          "get_all_tiered_fields",
          "CradleDataLoadConfig.check_split_and_override",
          "check_split_and_override",
          "categorize_fields",
          "get_public_init_fields",
          "validate_region",
          "edx_manifest",
          "validate_manifest_key_format",
          "initialize_derived_fields",
          "validate_provider",
          "validate_table_name",
          "__str__",
          "validate_type",
          "check_properties",
          "validate_exact_datetime_format",
          "days_must_be_positive",
          "require_merge_sql_if_split",
          "output_path",
          "validate_output_path",
          "validate_format",
          "validate_save_mode",
          "validate_cluster_type",
          "validate_job_type",
          "initialize_derived_fields",
          "categorize_fields",
          "get_all_tiered_fields",
          "check_split_and_override"
        ],
        "steps/configs/config_model_metrics_computation_step.py": [
          "ModelMetricsComputationConfig.validate_input_format",
          "validate_input_format",
          "ModelMetricsComputationConfig.validate_probability_range",
          "validate_probability_range",
          "ModelMetricsComputationConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "ModelMetricsComputationConfig.validate_metrics_computation_config",
          "validate_metrics_computation_config",
          "ModelMetricsComputationConfig.get_environment_variables",
          "get_environment_variables",
          "ModelMetricsComputationConfig.get_script_contract",
          "get_script_contract",
          "ModelMetricsComputationConfig.get_public_init_fields",
          "get_public_init_fields",
          "validate_input_format",
          "validate_probability_range",
          "initialize_derived_fields",
          "validate_metrics_computation_config",
          "get_environment_variables",
          "get_script_contract",
          "get_public_init_fields"
        ],
        "steps/configs/config_xgboost_model_eval_step.py": [
          "XGBoostModelEvalConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "XGBoostModelEvalConfig.validate_eval_config",
          "validate_eval_config",
          "XGBoostModelEvalConfig.get_environment_variables",
          "get_environment_variables",
          "XGBoostModelEvalConfig.get_script_contract",
          "get_script_contract",
          "XGBoostModelEvalConfig.get_public_init_fields",
          "get_public_init_fields",
          "initialize_derived_fields",
          "validate_eval_config",
          "get_environment_variables",
          "get_script_contract",
          "get_public_init_fields"
        ],
        "steps/configs/config_risk_table_mapping_step.py": [
          "RiskTableMappingConfig.validate_job_type",
          "validate_job_type",
          "RiskTableMappingConfig.validate_risk_table_config",
          "validate_risk_table_config",
          "validate_job_type",
          "validate_risk_table_config"
        ],
        "steps/configs/config_dummy_training_step.py": [
          "DummyTrainingConfig.validate_config",
          "validate_config",
          "DummyTrainingConfig.get_script_contract",
          "get_script_contract",
          "validate_config",
          "get_script_contract"
        ],
        "steps/configs/config_model_calibration_step.py": [
          "ModelCalibrationConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "ModelCalibrationConfig.validate_config",
          "validate_config",
          "ModelCalibrationConfig.get_script_contract",
          "get_script_contract",
          "ModelCalibrationConfig.from_hyperparameters",
          "from_hyperparameters",
          "ModelCalibrationConfig.get_environment_variables",
          "get_environment_variables",
          "ModelCalibrationConfig.get_public_init_fields",
          "get_public_init_fields",
          "initialize_derived_fields",
          "validate_config",
          "get_script_contract",
          "from_hyperparameters",
          "get_environment_variables",
          "get_public_init_fields"
        ],
        "steps/configs/config_pytorch_training_step.py": [
          "PyTorchTrainingConfig.validate_field_lists",
          "validate_field_lists",
          "PyTorchTrainingConfig._validate_sagemaker_training_instance_type",
          "_validate_sagemaker_training_instance_type",
          "validate_field_lists",
          "_validate_sagemaker_training_instance_type"
        ],
        "steps/configs/config_tabular_preprocessing_step.py": [
          "TabularPreprocessingConfig.full_script_path",
          "full_script_path",
          "TabularPreprocessingConfig.validate_label_name",
          "validate_label_name",
          "TabularPreprocessingConfig.validate_entry_point_relative",
          "validate_entry_point_relative",
          "TabularPreprocessingConfig.validate_data_type",
          "validate_data_type",
          "TabularPreprocessingConfig.validate_ratios",
          "validate_ratios",
          "TabularPreprocessingConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "TabularPreprocessingConfig.get_script_contract",
          "get_script_contract",
          "TabularPreprocessingConfig.get_public_init_fields",
          "get_public_init_fields",
          "TabularPreprocessingConfig.model_dump",
          "model_dump",
          "full_script_path",
          "validate_label_name",
          "validate_entry_point_relative",
          "validate_data_type",
          "validate_ratios",
          "initialize_derived_fields",
          "get_script_contract",
          "get_public_init_fields",
          "model_dump"
        ],
        "steps/configs/config_registration_step.py": [
          "VariableType._missing_",
          "_missing_",
          "VariableType.__str__",
          "__str__",
          "create_inference_variable_list",
          "RegistrationConfig.serialize_output_variable_list",
          "serialize_output_variable_list",
          "RegistrationConfig.serialize_input_variable_list",
          "serialize_input_variable_list",
          "RegistrationConfig.validate_inference_instance_type",
          "validate_inference_instance_type",
          "RegistrationConfig.validate_framework",
          "validate_framework",
          "RegistrationConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "RegistrationConfig.validate_registration_configs",
          "validate_registration_configs",
          "RegistrationConfig.validate_content_types",
          "validate_content_types",
          "RegistrationConfig.validate_input_variable_list",
          "validate_input_variable_list",
          "RegistrationConfig.validate_output_variable_list",
          "validate_output_variable_list",
          "RegistrationConfig.variable_schema",
          "variable_schema",
          "RegistrationConfig.get_variable_schema",
          "get_variable_schema",
          "RegistrationConfig.model_dump",
          "model_dump",
          "RegistrationConfig.set_source_model_inference_input_variable_list",
          "set_source_model_inference_input_variable_list",
          "_missing_",
          "__str__",
          "serialize_output_variable_list",
          "serialize_input_variable_list",
          "validate_inference_instance_type",
          "validate_framework",
          "initialize_derived_fields",
          "validate_registration_configs",
          "validate_content_types",
          "validate_input_variable_list",
          "validate_output_variable_list",
          "variable_schema",
          "get_variable_schema",
          "model_dump",
          "set_source_model_inference_input_variable_list"
        ],
        "steps/configs/config_pytorch_model_step.py": [
          "PyTorchModelStepConfig.validate_configuration",
          "validate_configuration",
          "PyTorchModelStepConfig._validate_memory_constraints",
          "_validate_memory_constraints",
          "PyTorchModelStepConfig._validate_timeouts",
          "_validate_timeouts",
          "PyTorchModelStepConfig._validate_entry_point",
          "_validate_entry_point",
          "PyTorchModelStepConfig.validate_memory_limits",
          "validate_memory_limits",
          "PyTorchModelStepConfig._validate_sagemaker_inference_instance_type",
          "_validate_sagemaker_inference_instance_type",
          "PyTorchModelStepConfig.get_model_name",
          "get_model_name",
          "PyTorchModelStepConfig.get_endpoint_config_name",
          "get_endpoint_config_name",
          "PyTorchModelStepConfig.get_endpoint_name",
          "get_endpoint_name",
          "validate_configuration",
          "_validate_memory_constraints",
          "_validate_timeouts",
          "_validate_entry_point",
          "validate_memory_limits",
          "_validate_sagemaker_inference_instance_type",
          "get_model_name",
          "get_endpoint_config_name",
          "get_endpoint_name"
        ],
        "steps/configs/config_missing_value_imputation_step.py": [
          "MissingValueImputationConfig.environment_variables",
          "environment_variables",
          "MissingValueImputationConfig.effective_exclude_columns",
          "effective_exclude_columns",
          "MissingValueImputationConfig.validate_label_field",
          "validate_label_field",
          "MissingValueImputationConfig.validate_entry_point_relative",
          "validate_entry_point_relative",
          "MissingValueImputationConfig.validate_job_type",
          "validate_job_type",
          "MissingValueImputationConfig.validate_numerical_strategy",
          "validate_numerical_strategy",
          "MissingValueImputationConfig.validate_categorical_strategy",
          "validate_categorical_strategy",
          "MissingValueImputationConfig.validate_text_strategy",
          "validate_text_strategy",
          "MissingValueImputationConfig.validate_text_fill_values",
          "validate_text_fill_values",
          "MissingValueImputationConfig.validate_exclude_columns",
          "validate_exclude_columns",
          "MissingValueImputationConfig.validate_column_strategies",
          "validate_column_strategies",
          "MissingValueImputationConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "MissingValueImputationConfig.get_script_contract",
          "get_script_contract",
          "MissingValueImputationConfig.get_public_init_fields",
          "get_public_init_fields",
          "MissingValueImputationConfig.model_dump",
          "model_dump",
          "environment_variables",
          "effective_exclude_columns",
          "validate_label_field",
          "validate_entry_point_relative",
          "validate_job_type",
          "validate_numerical_strategy",
          "validate_categorical_strategy",
          "validate_text_strategy",
          "validate_text_fill_values",
          "validate_exclude_columns",
          "validate_column_strategies",
          "initialize_derived_fields",
          "get_script_contract",
          "get_public_init_fields",
          "model_dump"
        ],
        "steps/configs/config_xgboost_training_step.py": [
          "XGBoostTrainingConfig.hyperparameter_file",
          "hyperparameter_file",
          "XGBoostTrainingConfig.model_dump",
          "model_dump",
          "XGBoostTrainingConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "XGBoostTrainingConfig.validate_hyperparameter_fields",
          "validate_hyperparameter_fields",
          "XGBoostTrainingConfig._validate_sagemaker_xgboost_instance_type",
          "_validate_sagemaker_xgboost_instance_type",
          "XGBoostTrainingConfig.get_public_init_fields",
          "get_public_init_fields",
          "XGBoostTrainingConfig.to_hyperparameter_dict",
          "to_hyperparameter_dict",
          "hyperparameter_file",
          "model_dump",
          "initialize_derived_fields",
          "validate_hyperparameter_fields",
          "_validate_sagemaker_xgboost_instance_type",
          "get_public_init_fields",
          "to_hyperparameter_dict"
        ],
        "steps/configs/config_xgboost_model_step.py": [
          "XGBoostModelStepConfig.validate_configuration",
          "validate_configuration",
          "XGBoostModelStepConfig._validate_memory_constraints",
          "_validate_memory_constraints",
          "XGBoostModelStepConfig._validate_timeouts",
          "_validate_timeouts",
          "XGBoostModelStepConfig._validate_entry_point",
          "_validate_entry_point",
          "XGBoostModelStepConfig._validate_framework_version",
          "_validate_framework_version",
          "XGBoostModelStepConfig.validate_memory_limits",
          "validate_memory_limits",
          "XGBoostModelStepConfig._validate_sagemaker_inference_instance_type",
          "_validate_sagemaker_inference_instance_type",
          "XGBoostModelStepConfig.get_model_name",
          "get_model_name",
          "XGBoostModelStepConfig.get_endpoint_config_name",
          "get_endpoint_config_name",
          "XGBoostModelStepConfig.get_endpoint_name",
          "get_endpoint_name",
          "validate_configuration",
          "_validate_memory_constraints",
          "_validate_timeouts",
          "_validate_entry_point",
          "_validate_framework_version",
          "validate_memory_limits",
          "_validate_sagemaker_inference_instance_type",
          "get_model_name",
          "get_endpoint_config_name",
          "get_endpoint_name"
        ],
        "steps/configs/config_xgboost_model_inference_step.py": [
          "XGBoostModelInferenceConfig.validate_output_format",
          "validate_output_format",
          "XGBoostModelInferenceConfig.validate_json_orient",
          "validate_json_orient",
          "XGBoostModelInferenceConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "XGBoostModelInferenceConfig.validate_inference_config",
          "validate_inference_config",
          "XGBoostModelInferenceConfig.get_environment_variables",
          "get_environment_variables",
          "XGBoostModelInferenceConfig.get_script_contract",
          "get_script_contract",
          "XGBoostModelInferenceConfig.get_public_init_fields",
          "get_public_init_fields",
          "validate_output_format",
          "validate_json_orient",
          "initialize_derived_fields",
          "validate_inference_config",
          "get_environment_variables",
          "get_script_contract",
          "get_public_init_fields"
        ],
        "steps/configs/utils.py": [
          "serialize_config",
          "verify_configs",
          "merge_and_save_configs",
          "load_configs",
          "_extract_project_id_from_file",
          "get_field_sources",
          "build_complete_config_classes",
          "_legacy_build_complete_config_classes",
          "detect_config_classes_from_json"
        ],
        "steps/configs/config_stratified_sampling_step.py": [
          "StratifiedSamplingConfig.validate_strata_column",
          "validate_strata_column",
          "StratifiedSamplingConfig.validate_entry_point_relative",
          "validate_entry_point_relative",
          "StratifiedSamplingConfig.validate_job_type",
          "validate_job_type",
          "StratifiedSamplingConfig.validate_sampling_strategy",
          "validate_sampling_strategy",
          "StratifiedSamplingConfig.validate_variance_column",
          "validate_variance_column",
          "StratifiedSamplingConfig.validate_strategy_requirements",
          "validate_strategy_requirements",
          "StratifiedSamplingConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "StratifiedSamplingConfig.get_script_contract",
          "get_script_contract",
          "StratifiedSamplingConfig.get_public_init_fields",
          "get_public_init_fields",
          "validate_strata_column",
          "validate_entry_point_relative",
          "validate_job_type",
          "validate_sampling_strategy",
          "validate_variance_column",
          "validate_strategy_requirements",
          "initialize_derived_fields",
          "get_script_contract",
          "get_public_init_fields"
        ],
        "steps/configs/config_processing_step_base.py": [
          "ProcessingStepConfigBase.effective_source_dir",
          "effective_source_dir",
          "ProcessingStepConfigBase.effective_instance_type",
          "effective_instance_type",
          "ProcessingStepConfigBase.script_path",
          "script_path",
          "ProcessingStepConfigBase.resolved_processing_source_dir",
          "resolved_processing_source_dir",
          "ProcessingStepConfigBase.get_resolved_script_path",
          "get_resolved_script_path",
          "ProcessingStepConfigBase.model_dump",
          "model_dump",
          "ProcessingStepConfigBase.validate_processing_source_dir",
          "validate_processing_source_dir",
          "ProcessingStepConfigBase.validate_entry_point_is_relative",
          "validate_entry_point_is_relative",
          "ProcessingStepConfigBase.validate_framework_version",
          "validate_framework_version",
          "ProcessingStepConfigBase.initialize_derived_fields",
          "initialize_derived_fields",
          "ProcessingStepConfigBase.validate_entry_point_paths",
          "validate_entry_point_paths",
          "ProcessingStepConfigBase.get_effective_source_dir",
          "get_effective_source_dir",
          "ProcessingStepConfigBase.get_instance_type",
          "get_instance_type",
          "ProcessingStepConfigBase.get_script_path",
          "get_script_path",
          "ProcessingStepConfigBase.get_public_init_fields",
          "get_public_init_fields",
          "effective_source_dir",
          "effective_instance_type",
          "script_path",
          "resolved_processing_source_dir",
          "get_resolved_script_path",
          "model_dump",
          "validate_processing_source_dir",
          "validate_entry_point_is_relative",
          "validate_framework_version",
          "initialize_derived_fields",
          "validate_entry_point_paths",
          "get_effective_source_dir",
          "get_instance_type",
          "get_script_path",
          "get_public_init_fields"
        ],
        "steps/configs/config_package_step.py": [
          "PackageConfig.validate_config",
          "validate_config",
          "PackageConfig.get_script_contract",
          "get_script_contract",
          "validate_config",
          "get_script_contract"
        ],
        "steps/configs/config_currency_conversion_step.py": [
          "CurrencyConversionConfig._validate_job_type",
          "_validate_job_type",
          "CurrencyConversionConfig._validate_mode",
          "_validate_mode",
          "CurrencyConversionConfig._validate_dict",
          "_validate_dict",
          "CurrencyConversionConfig._validate_vars",
          "_validate_vars",
          "CurrencyConversionConfig.validate_entry_point_relative",
          "validate_entry_point_relative",
          "CurrencyConversionConfig.validate_config",
          "validate_config",
          "CurrencyConversionConfig.get_script_contract",
          "get_script_contract",
          "_validate_job_type",
          "_validate_mode",
          "_validate_dict",
          "_validate_vars",
          "validate_entry_point_relative",
          "validate_config",
          "get_script_contract"
        ],
        "steps/configs/config_batch_transform_step.py": [
          "BatchTransformStepConfig._validate_job_type",
          "_validate_job_type",
          "BatchTransformStepConfig._validate_instance_type",
          "_validate_instance_type",
          "BatchTransformStepConfig.validate_config",
          "validate_config",
          "_validate_job_type",
          "_validate_instance_type",
          "validate_config"
        ],
        "steps/scripts/package.py": [
          "ensure_directory",
          "check_file_exists",
          "list_directory_contents",
          "copy_file_robust",
          "copy_scripts",
          "extract_tarfile",
          "create_tarfile",
          "main"
        ],
        "steps/scripts/missing_value_imputation.py": [
          "load_split_data",
          "save_output_data",
          "analyze_missing_values",
          "validate_imputation_data",
          "load_imputation_config",
          "get_pandas_na_values",
          "validate_text_fill_value",
          "detect_column_type",
          "ImputationStrategyManager.__init__",
          "__init__",
          "ImputationStrategyManager.get_strategy_for_column",
          "get_strategy_for_column",
          "ImputationStrategyManager._create_strategy_from_name",
          "_create_strategy_from_name",
          "ImputationStrategyManager._create_numerical_strategy",
          "_create_numerical_strategy",
          "ImputationStrategyManager._create_categorical_strategy",
          "_create_categorical_strategy",
          "ImputationStrategyManager._create_text_strategy",
          "_create_text_strategy",
          "SimpleImputationEngine.__init__",
          "__init__",
          "SimpleImputationEngine.fit",
          "fit",
          "SimpleImputationEngine.transform",
          "transform",
          "SimpleImputationEngine.fit_transform",
          "fit_transform",
          "SimpleImputationEngine.get_imputation_summary",
          "get_imputation_summary",
          "save_imputation_artifacts",
          "load_imputation_parameters",
          "process_data",
          "generate_imputation_report",
          "calculate_imputation_quality_metrics",
          "generate_imputation_recommendations",
          "generate_imputation_text_summary",
          "internal_main",
          "main",
          "__init__",
          "get_strategy_for_column",
          "_create_strategy_from_name",
          "_create_numerical_strategy",
          "_create_categorical_strategy",
          "_create_text_strategy",
          "__init__",
          "fit",
          "transform",
          "fit_transform",
          "get_imputation_summary"
        ],
        "steps/scripts/xgboost_training.py": [
          "setup_logging",
          "load_and_validate_config",
          "find_first_data_file",
          "load_datasets",
          "apply_numerical_imputation",
          "fit_and_apply_risk_tables",
          "prepare_dmatrices",
          "train_model",
          "save_artifacts",
          "save_preds_and_metrics",
          "plot_curves",
          "evaluate_split",
          "main"
        ],
        "steps/scripts/xgboost_model_inference.py": [
          "RiskTableMappingProcessor.__init__",
          "__init__",
          "RiskTableMappingProcessor.get_name",
          "get_name",
          "RiskTableMappingProcessor._validate_risk_tables",
          "_validate_risk_tables",
          "RiskTableMappingProcessor.set_risk_tables",
          "set_risk_tables",
          "RiskTableMappingProcessor.process",
          "process",
          "RiskTableMappingProcessor.transform",
          "transform",
          "RiskTableMappingProcessor.get_risk_tables",
          "get_risk_tables",
          "NumericalVariableImputationProcessor.__init__",
          "__init__",
          "NumericalVariableImputationProcessor.get_name",
          "get_name",
          "NumericalVariableImputationProcessor.__call__",
          "__call__",
          "NumericalVariableImputationProcessor._validate_imputation_dict",
          "_validate_imputation_dict",
          "NumericalVariableImputationProcessor.process",
          "process",
          "NumericalVariableImputationProcessor.transform",
          "transform",
          "NumericalVariableImputationProcessor.get_params",
          "get_params",
          "load_model_artifacts",
          "preprocess_inference_data",
          "generate_predictions",
          "load_eval_data",
          "get_id_label_columns",
          "save_predictions",
          "create_health_check_file",
          "main",
          "__init__",
          "get_name",
          "_validate_risk_tables",
          "set_risk_tables",
          "process",
          "transform",
          "get_risk_tables",
          "__init__",
          "get_name",
          "__call__",
          "_validate_imputation_dict",
          "process",
          "transform",
          "get_params"
        ],
        "steps/scripts/currency_conversion.py": [
          "get_currency_code",
          "combine_currency_codes",
          "currency_conversion_single_variable",
          "parallel_currency_conversion",
          "process_currency_conversion",
          "main",
          "apply_conversion"
        ],
        "steps/scripts/pytorch_training.py": [
          "log_once",
          "Config.model_post_init",
          "model_post_init",
          "safe_cast",
          "sanitize_config",
          "load_parse_hyperparameters",
          "find_first_data_file",
          "load_data_module",
          "data_preprocess_pipeline",
          "build_categorical_label_pipelines",
          "model_select",
          "setup_training_environment",
          "load_and_preprocess_data",
          "build_model_and_optimizer",
          "export_model_to_onnx",
          "evaluate_and_log_results",
          "main",
          "model_post_init"
        ],
        "steps/scripts/tabular_preprocessing.py": [
          "_is_gzipped",
          "_detect_separator_from_sample",
          "peek_json_format",
          "_read_json_file",
          "_read_file_to_df",
          "combine_shards",
          "main"
        ],
        "steps/scripts/model_calibration.py": [
          "CalibrationConfig.__init__",
          "__init__",
          "CalibrationConfig.from_env",
          "from_env",
          "create_directories",
          "find_first_data_file",
          "load_data",
          "log_section",
          "extract_and_load_nested_tarball_data",
          "load_and_prepare_data",
          "train_gam_calibration",
          "train_isotonic_calibration",
          "train_platt_scaling",
          "train_multiclass_calibration",
          "apply_multiclass_calibration",
          "compute_calibration_metrics",
          "compute_multiclass_calibration_metrics",
          "plot_reliability_diagram",
          "plot_multiclass_reliability_diagram",
          "main",
          "__init__",
          "from_env"
        ],
        "steps/scripts/model_metrics_computation.py": [
          "detect_and_load_predictions",
          "validate_prediction_data",
          "compute_standard_metrics",
          "calculate_count_recall",
          "calculate_dollar_recall",
          "compute_domain_metrics",
          "plot_and_save_roc_curve",
          "plot_and_save_pr_curve",
          "generate_performance_visualizations",
          "generate_performance_insights",
          "generate_recommendations",
          "generate_comprehensive_report",
          "generate_text_summary",
          "log_metrics_summary",
          "save_metrics",
          "create_health_check_file",
          "main"
        ],
        "steps/scripts/dummy_training.py": [
          "validate_model",
          "ensure_directory",
          "extract_tarfile",
          "create_tarfile",
          "copy_file",
          "process_model_with_hyperparameters",
          "find_model_file",
          "find_hyperparams_file",
          "main"
        ],
        "steps/scripts/model_wiki_generator.py": [
          "DataIngestionManager.__init__",
          "__init__",
          "DataIngestionManager.load_metrics_data",
          "load_metrics_data",
          "DataIngestionManager.discover_visualization_files",
          "discover_visualization_files",
          "WikiTemplateEngine.__init__",
          "__init__",
          "WikiTemplateEngine._load_section_templates",
          "_load_section_templates",
          "WikiTemplateEngine._get_header_template",
          "_get_header_template",
          "WikiTemplateEngine._get_summary_template",
          "_get_summary_template",
          "WikiTemplateEngine._get_performance_section_template",
          "_get_performance_section_template",
          "WikiTemplateEngine._get_business_impact_section_template",
          "_get_business_impact_section_template",
          "WikiTemplateEngine._get_recommendations_section_template",
          "_get_recommendations_section_template",
          "WikiTemplateEngine._get_technical_details_section_template",
          "_get_technical_details_section_template",
          "WikiTemplateEngine.generate_wiki_content",
          "generate_wiki_content",
          "ContentGenerator.__init__",
          "__init__",
          "ContentGenerator.generate_performance_assessment",
          "generate_performance_assessment",
          "ContentGenerator.generate_auc_interpretation",
          "generate_auc_interpretation",
          "ContentGenerator.generate_ap_interpretation",
          "generate_ap_interpretation",
          "ContentGenerator.generate_business_impact_summary",
          "generate_business_impact_summary",
          "ContentGenerator.generate_recommendations_section",
          "generate_recommendations_section",
          "ContentGenerator.generate_performance_overview",
          "generate_performance_overview",
          "VisualizationIntegrator.__init__",
          "__init__",
          "VisualizationIntegrator.process_visualizations",
          "process_visualizations",
          "VisualizationIntegrator._generate_plot_description",
          "_generate_plot_description",
          "WikiReportAssembler.__init__",
          "__init__",
          "WikiReportAssembler.assemble_complete_report",
          "assemble_complete_report",
          "WikiReportAssembler._build_comprehensive_context",
          "_build_comprehensive_context",
          "WikiReportAssembler._generate_derived_content",
          "_generate_derived_content",
          "WikiReportAssembler._generate_visualization_sections",
          "_generate_visualization_sections",
          "WikiReportAssembler._generate_optional_sections",
          "_generate_optional_sections",
          "WikiOutputManager.__init__",
          "__init__",
          "WikiOutputManager.save_wiki_documentation",
          "save_wiki_documentation",
          "WikiOutputManager._save_wiki_format",
          "_save_wiki_format",
          "WikiOutputManager._save_html_format",
          "_save_html_format",
          "WikiOutputManager._save_markdown_format",
          "_save_markdown_format",
          "WikiOutputManager._convert_wiki_to_html",
          "_convert_wiki_to_html",
          "WikiOutputManager._convert_wiki_to_markdown",
          "_convert_wiki_to_markdown",
          "WikiOutputManager._convert_wiki_tables_to_html",
          "_convert_wiki_tables_to_html",
          "WikiOutputManager._convert_wiki_tables_to_markdown",
          "_convert_wiki_tables_to_markdown",
          "WikiOutputManager._sanitize_filename",
          "_sanitize_filename",
          "create_health_check_file",
          "main",
          "__init__",
          "load_metrics_data",
          "discover_visualization_files",
          "__init__",
          "_load_section_templates",
          "_get_header_template",
          "_get_summary_template",
          "_get_performance_section_template",
          "_get_business_impact_section_template",
          "_get_recommendations_section_template",
          "_get_technical_details_section_template",
          "generate_wiki_content",
          "__init__",
          "generate_performance_assessment",
          "generate_auc_interpretation",
          "generate_ap_interpretation",
          "generate_business_impact_summary",
          "generate_recommendations_section",
          "generate_performance_overview",
          "__init__",
          "process_visualizations",
          "_generate_plot_description",
          "__init__",
          "assemble_complete_report",
          "_build_comprehensive_context",
          "_generate_derived_content",
          "_generate_visualization_sections",
          "_generate_optional_sections",
          "__init__",
          "save_wiki_documentation",
          "_save_wiki_format",
          "_save_html_format",
          "_save_markdown_format",
          "_convert_wiki_to_html",
          "_convert_wiki_to_markdown",
          "_convert_wiki_tables_to_html",
          "_convert_wiki_tables_to_markdown",
          "_sanitize_filename"
        ],
        "steps/scripts/payload.py": [
          "ensure_directory",
          "create_model_variable_list",
          "extract_hyperparameters_from_tarball",
          "get_environment_content_types",
          "get_environment_default_numeric_value",
          "get_environment_default_text_value",
          "get_environment_special_fields",
          "get_field_default_value",
          "generate_csv_payload",
          "generate_json_payload",
          "generate_sample_payloads",
          "save_payloads",
          "create_payload_archive",
          "main"
        ],
        "steps/scripts/xgboost_model_eval.py": [
          "RiskTableMappingProcessor.__init__",
          "__init__",
          "RiskTableMappingProcessor.get_name",
          "get_name",
          "RiskTableMappingProcessor._validate_risk_tables",
          "_validate_risk_tables",
          "RiskTableMappingProcessor.set_risk_tables",
          "set_risk_tables",
          "RiskTableMappingProcessor.fit",
          "fit",
          "RiskTableMappingProcessor.process",
          "process",
          "RiskTableMappingProcessor.transform",
          "transform",
          "RiskTableMappingProcessor.get_risk_tables",
          "get_risk_tables",
          "NumericalVariableImputationProcessor.__init__",
          "__init__",
          "NumericalVariableImputationProcessor.get_name",
          "get_name",
          "NumericalVariableImputationProcessor.__call__",
          "__call__",
          "NumericalVariableImputationProcessor._validate_imputation_dict",
          "_validate_imputation_dict",
          "NumericalVariableImputationProcessor.fit",
          "fit",
          "NumericalVariableImputationProcessor.process",
          "process",
          "NumericalVariableImputationProcessor.transform",
          "transform",
          "NumericalVariableImputationProcessor.get_params",
          "get_params",
          "load_model_artifacts",
          "preprocess_eval_data",
          "log_metrics_summary",
          "compute_metrics_binary",
          "compute_metrics_multiclass",
          "load_eval_data",
          "get_id_label_columns",
          "save_predictions",
          "save_metrics",
          "plot_and_save_roc_curve",
          "plot_and_save_pr_curve",
          "evaluate_model",
          "create_health_check_file",
          "main",
          "__init__",
          "get_name",
          "_validate_risk_tables",
          "set_risk_tables",
          "fit",
          "process",
          "transform",
          "get_risk_tables",
          "__init__",
          "get_name",
          "__call__",
          "_validate_imputation_dict",
          "fit",
          "process",
          "transform",
          "get_params"
        ],
        "steps/scripts/stratified_sampling.py": [
          "StratifiedSampler.__init__",
          "__init__",
          "StratifiedSampler.sample",
          "sample",
          "StratifiedSampler._get_strata_info",
          "_get_strata_info",
          "StratifiedSampler._balanced_allocation",
          "_balanced_allocation",
          "StratifiedSampler._proportional_with_min",
          "_proportional_with_min",
          "StratifiedSampler._optimal_allocation",
          "_optimal_allocation",
          "StratifiedSampler._perform_sampling",
          "_perform_sampling",
          "_read_processed_data",
          "_save_sampled_data",
          "main",
          "__init__",
          "sample",
          "_get_strata_info",
          "_balanced_allocation",
          "_proportional_with_min",
          "_optimal_allocation",
          "_perform_sampling"
        ],
        "steps/scripts/risk_table_mapping.py": [
          "load_json_config",
          "validate_categorical_fields",
          "OfflineBinning.__init__",
          "__init__",
          "OfflineBinning.fit",
          "fit",
          "OfflineBinning._create_risk_table",
          "_create_risk_table",
          "OfflineBinning.transform",
          "transform",
          "OfflineBinning.load_risk_tables",
          "load_risk_tables",
          "load_split_data",
          "save_output_data",
          "process_data",
          "save_artifacts",
          "load_risk_tables",
          "internal_main",
          "main",
          "__init__",
          "fit",
          "_create_risk_table",
          "transform",
          "load_risk_tables"
        ],
        "steps/hyperparams/hyperparameters_bsm.py": [
          "BSMModelHyperparameters.model_config_dict",
          "model_config_dict",
          "BSMModelHyperparameters.tokenizer_config",
          "tokenizer_config",
          "BSMModelHyperparameters.validate_bsm_hyperparameters",
          "validate_bsm_hyperparameters",
          "BSMModelHyperparameters.get_public_init_fields",
          "get_public_init_fields",
          "BSMModelHyperparameters.get_trainer_config",
          "get_trainer_config",
          "model_config_dict",
          "tokenizer_config",
          "validate_bsm_hyperparameters",
          "get_public_init_fields",
          "get_trainer_config"
        ],
        "steps/hyperparams/hyperparameters_xgboost.py": [
          "XGBoostModelHyperparameters.objective",
          "objective",
          "XGBoostModelHyperparameters.eval_metric",
          "eval_metric",
          "XGBoostModelHyperparameters.validate_xgboost_hyperparameters",
          "validate_xgboost_hyperparameters",
          "XGBoostModelHyperparameters.get_public_init_fields",
          "get_public_init_fields",
          "objective",
          "eval_metric",
          "validate_xgboost_hyperparameters",
          "get_public_init_fields"
        ]
      },
      "test_functions_by_file": {
        "steps/test_sagemaker_step_type_implementation.py": [
          "test_registry_functions",
          "test_sagemaker_validator",
          "test_universal_test_integration",
          "main",
          "MockProcessingStepBuilder.__init__",
          "__init__",
          "MockProcessingStepBuilder.create_step",
          "create_step",
          "MockProcessingStepBuilder._get_inputs",
          "_get_inputs",
          "MockProcessingStepBuilder._get_outputs",
          "_get_outputs",
          "MockProcessingStepBuilder._create_processor",
          "_create_processor",
          "MockTrainingStepBuilder.__init__",
          "__init__",
          "MockTrainingStepBuilder.create_step",
          "create_step",
          "MockTrainingStepBuilder._get_inputs",
          "_get_inputs",
          "MockTrainingStepBuilder._create_estimator",
          "_create_estimator",
          "__init__",
          "create_step",
          "_get_inputs",
          "_get_outputs",
          "_create_processor",
          "__init__",
          "create_step",
          "_get_inputs",
          "_create_estimator"
        ],
        "steps/builders/test_transform_step_builders.py": [
          "TestTransformStepBuilders.step_catalog",
          "step_catalog",
          "TestTransformStepBuilders.transform_builders",
          "transform_builders",
          "TestTransformStepBuilders.test_transform_builders_discovery",
          "test_transform_builders_discovery",
          "TestTransformStepBuilders.test_transform_builder_compliance",
          "test_transform_builder_compliance",
          "TestTransformStepBuilders.test_transform_specific_requirements",
          "test_transform_specific_requirements",
          "TestTransformBuilderIntegration.test_transform_step_type_classification",
          "test_transform_step_type_classification",
          "TestTransformBuilderIntegration.test_transform_builder_loading",
          "test_transform_builder_loading",
          "TestTransformBuilderIntegration.test_transform_registry_data",
          "test_transform_registry_data",
          "TestTransformBuilderIntegration.test_transform_builder_optional",
          "test_transform_builder_optional",
          "step_catalog",
          "transform_builders",
          "test_transform_builders_discovery",
          "test_transform_builder_compliance",
          "test_transform_specific_requirements",
          "test_transform_step_type_classification",
          "test_transform_builder_loading",
          "test_transform_registry_data",
          "test_transform_builder_optional"
        ],
        "steps/builders/test_createmodel_step_builders.py": [
          "TestCreateModelStepBuilders.step_catalog",
          "step_catalog",
          "TestCreateModelStepBuilders.createmodel_builders",
          "createmodel_builders",
          "TestCreateModelStepBuilders.test_createmodel_builders_discovery",
          "test_createmodel_builders_discovery",
          "TestCreateModelStepBuilders.test_createmodel_builder_compliance",
          "test_createmodel_builder_compliance",
          "TestCreateModelStepBuilders.test_createmodel_specific_requirements",
          "test_createmodel_specific_requirements",
          "TestCreateModelBuilderIntegration.test_createmodel_step_type_classification",
          "test_createmodel_step_type_classification",
          "TestCreateModelBuilderIntegration.test_createmodel_builder_loading",
          "test_createmodel_builder_loading",
          "step_catalog",
          "createmodel_builders",
          "test_createmodel_builders_discovery",
          "test_createmodel_builder_compliance",
          "test_createmodel_specific_requirements",
          "test_createmodel_step_type_classification",
          "test_createmodel_builder_loading"
        ],
        "steps/builders/test_processing_step_builders.py": [
          "TestProcessingStepBuilders.step_catalog",
          "step_catalog",
          "TestProcessingStepBuilders.processing_builders",
          "processing_builders",
          "TestProcessingStepBuilders.test_processing_builders_discovery",
          "test_processing_builders_discovery",
          "TestProcessingStepBuilders.test_processing_builder_compliance",
          "test_processing_builder_compliance",
          "TestProcessingStepBuilders.test_processing_specific_requirements",
          "test_processing_specific_requirements",
          "TestProcessingBuilderIntegration.test_processing_step_type_classification",
          "test_processing_step_type_classification",
          "TestProcessingBuilderIntegration.test_processing_builder_loading",
          "test_processing_builder_loading",
          "TestProcessingBuilderIntegration.test_processing_registry_data",
          "test_processing_registry_data",
          "TestProcessingBuilderIntegration.test_processing_builder_count",
          "test_processing_builder_count",
          "step_catalog",
          "processing_builders",
          "test_processing_builders_discovery",
          "test_processing_builder_compliance",
          "test_processing_specific_requirements",
          "test_processing_step_type_classification",
          "test_processing_builder_loading",
          "test_processing_registry_data",
          "test_processing_builder_count"
        ],
        "steps/builders/test_training_step_builders.py": [
          "TestTrainingStepBuilders.step_catalog",
          "step_catalog",
          "TestTrainingStepBuilders.training_builders",
          "training_builders",
          "TestTrainingStepBuilders.test_training_builders_discovery",
          "test_training_builders_discovery",
          "TestTrainingStepBuilders.test_training_builder_compliance",
          "test_training_builder_compliance",
          "TestTrainingStepBuilders.test_training_specific_requirements",
          "test_training_specific_requirements",
          "TestTrainingBuilderIntegration.test_training_step_type_classification",
          "test_training_step_type_classification",
          "TestTrainingBuilderIntegration.test_training_builder_loading",
          "test_training_builder_loading",
          "TestTrainingBuilderIntegration.test_training_registry_data",
          "test_training_registry_data",
          "step_catalog",
          "training_builders",
          "test_training_builders_discovery",
          "test_training_builder_compliance",
          "test_training_specific_requirements",
          "test_training_step_type_classification",
          "test_training_builder_loading",
          "test_training_registry_data"
        ],
        "steps/builders/test_dynamic_universal.py": [
          "TestDynamicUniversalBuilders.step_catalog",
          "step_catalog",
          "TestDynamicUniversalBuilders.all_builders",
          "all_builders",
          "TestDynamicUniversalBuilders.test_builder_discovery_completeness",
          "test_builder_discovery_completeness",
          "TestDynamicUniversalBuilders.test_step_type_filtering",
          "test_step_type_filtering",
          "TestDynamicUniversalBuilders.test_individual_builder_compliance",
          "test_individual_builder_compliance",
          "TestDynamicUniversalBuilders.test_comprehensive_all_builders",
          "test_comprehensive_all_builders",
          "TestDynamicUniversalBuilders.test_comprehensive_all_builders_with_specialized_frameworks",
          "test_comprehensive_all_builders_with_specialized_frameworks",
          "TestDynamicUniversalBuilders.test_comprehensive_all_builders_with_visual_charts",
          "test_comprehensive_all_builders_with_visual_charts",
          "TestPhase5Enhancements.step_catalog",
          "step_catalog",
          "TestPhase5Enhancements.test_step_type_color_scheme",
          "test_step_type_color_scheme",
          "TestPhase5Enhancements.test_enhanced_status_display",
          "test_enhanced_status_display",
          "TestPhase5Enhancements.test_step_type_test_framework_factory",
          "test_step_type_test_framework_factory",
          "TestPhase5Enhancements.test_integration_with_existing_report_generator",
          "test_integration_with_existing_report_generator",
          "TestStepCatalogIntegration.step_catalog",
          "step_catalog",
          "TestStepCatalogIntegration.test_step_catalog_initialization",
          "test_step_catalog_initialization",
          "TestStepCatalogIntegration.test_builder_discovery_methods",
          "test_builder_discovery_methods",
          "TestStepCatalogIntegration.test_builder_class_validity",
          "test_builder_class_validity",
          "TestResultsStorage.test_results_storage_initialization",
          "test_results_storage_initialization",
          "TestResultsStorage.test_results_storage_save",
          "test_results_storage_save",
          "TestResultsStorage.test_results_directory_structure",
          "test_results_directory_structure",
          "TestEnhancedReporting.report_generator",
          "report_generator",
          "TestEnhancedReporting.step_catalog",
          "step_catalog",
          "TestEnhancedReporting.test_report_generator_initialization",
          "test_report_generator_initialization",
          "TestEnhancedReporting.test_metadata_enhancement",
          "test_metadata_enhancement",
          "TestEnhancedReporting.test_comprehensive_report_generation",
          "test_comprehensive_report_generation",
          "TestEnhancedReporting.test_enhanced_reporting_with_real_builder",
          "test_enhanced_reporting_with_real_builder",
          "TestEnhancedReporting.test_step_subfolder_structure_creation",
          "test_step_subfolder_structure_creation",
          "TestAdvancedReporting.step_catalog",
          "step_catalog",
          "TestAdvancedReporting.builder_test_reporter",
          "builder_test_reporter",
          "TestAdvancedReporting.test_builder_test_reporter_integration",
          "test_builder_test_reporter_integration",
          "TestAdvancedReporting.test_step_type_builders_reporting",
          "test_step_type_builders_reporting",
          "TestAdvancedReporting.test_specialized_framework_selection",
          "test_specialized_framework_selection",
          "TestSpecializedFrameworkFeatures.step_catalog",
          "step_catalog",
          "TestSpecializedFrameworkFeatures.test_processing_pattern_b_logic",
          "test_processing_pattern_b_logic",
          "TestSpecializedFrameworkFeatures.test_training_framework_validation",
          "test_training_framework_validation",
          "TestSpecializedFrameworkFeatures.test_createmodel_deployment_validation",
          "test_createmodel_deployment_validation",
          "step_catalog",
          "all_builders",
          "test_builder_discovery_completeness",
          "test_step_type_filtering",
          "test_individual_builder_compliance",
          "test_comprehensive_all_builders",
          "test_comprehensive_all_builders_with_specialized_frameworks",
          "test_comprehensive_all_builders_with_visual_charts",
          "step_catalog",
          "test_step_type_color_scheme",
          "test_enhanced_status_display",
          "test_step_type_test_framework_factory",
          "test_integration_with_existing_report_generator",
          "step_catalog",
          "test_step_catalog_initialization",
          "test_builder_discovery_methods",
          "test_builder_class_validity",
          "test_results_storage_initialization",
          "test_results_storage_save",
          "test_results_directory_structure",
          "report_generator",
          "step_catalog",
          "test_report_generator_initialization",
          "test_metadata_enhancement",
          "test_comprehensive_report_generation",
          "test_enhanced_reporting_with_real_builder",
          "test_step_subfolder_structure_creation",
          "step_catalog",
          "builder_test_reporter",
          "test_builder_test_reporter_integration",
          "test_step_type_builders_reporting",
          "test_specialized_framework_selection",
          "step_catalog",
          "test_processing_pattern_b_logic",
          "test_training_framework_validation",
          "test_createmodel_deployment_validation"
        ],
        "steps/specs/test_output_spec_aliases.py": [
          "TestOutputSpecAliases.test_output_spec_with_valid_aliases",
          "test_output_spec_with_valid_aliases",
          "TestOutputSpecAliases.test_output_spec_with_empty_aliases",
          "test_output_spec_with_empty_aliases",
          "TestOutputSpecAliases.test_output_spec_without_aliases_field",
          "test_output_spec_without_aliases_field",
          "TestOutputSpecAliases.test_alias_validation_removes_duplicates",
          "test_alias_validation_removes_duplicates",
          "TestOutputSpecAliases.test_alias_validation_removes_empty_strings",
          "test_alias_validation_removes_empty_strings",
          "TestOutputSpecAliases.test_alias_validation_invalid_characters",
          "test_alias_validation_invalid_characters",
          "TestOutputSpecAliases.test_alias_conflicts_with_logical_name",
          "test_alias_conflicts_with_logical_name",
          "TestOutputSpecAliases.test_step_specification_get_output_by_name_or_alias",
          "test_step_specification_get_output_by_name_or_alias",
          "TestOutputSpecAliases.test_step_specification_list_all_output_names",
          "test_step_specification_list_all_output_names",
          "TestOutputSpecAliases.test_step_specification_alias_conflicts_across_outputs",
          "test_step_specification_alias_conflicts_across_outputs",
          "TestOutputSpecAliases.test_step_specification_logical_name_conflicts",
          "test_step_specification_logical_name_conflicts",
          "TestOutputSpecAliases.test_alias_conflicts_with_other_logical_name",
          "test_alias_conflicts_with_other_logical_name",
          "TestOutputSpecAliases.test_case_insensitive_conflict_detection",
          "test_case_insensitive_conflict_detection",
          "test_output_spec_with_valid_aliases",
          "test_output_spec_with_empty_aliases",
          "test_output_spec_without_aliases_field",
          "test_alias_validation_removes_duplicates",
          "test_alias_validation_removes_empty_strings",
          "test_alias_validation_invalid_characters",
          "test_alias_conflicts_with_logical_name",
          "test_step_specification_get_output_by_name_or_alias",
          "test_step_specification_list_all_output_names",
          "test_step_specification_alias_conflicts_across_outputs",
          "test_step_specification_logical_name_conflicts",
          "test_alias_conflicts_with_other_logical_name",
          "test_case_insensitive_conflict_detection"
        ],
        "steps/specs/test_node_type_validation.py": [
          "TestNodeTypeSystem.setUp",
          "setUp",
          "TestNodeTypeSystem.test_source_node_validation_success",
          "test_source_node_validation_success",
          "TestNodeTypeSystem.test_source_node_validation_fail_with_dependencies",
          "test_source_node_validation_fail_with_dependencies",
          "TestNodeTypeSystem.test_source_node_validation_fail_without_outputs",
          "test_source_node_validation_fail_without_outputs",
          "TestNodeTypeSystem.test_internal_node_validation_success",
          "test_internal_node_validation_success",
          "TestNodeTypeSystem.test_internal_node_validation_fail_without_dependencies",
          "test_internal_node_validation_fail_without_dependencies",
          "TestNodeTypeSystem.test_internal_node_validation_fail_without_outputs",
          "test_internal_node_validation_fail_without_outputs",
          "TestNodeTypeSystem.test_sink_node_validation_success",
          "test_sink_node_validation_success",
          "TestNodeTypeSystem.test_sink_node_validation_fail_without_dependencies",
          "test_sink_node_validation_fail_without_dependencies",
          "TestNodeTypeSystem.test_sink_node_validation_fail_with_outputs",
          "test_sink_node_validation_fail_with_outputs",
          "TestNodeTypeSystem.test_singular_node_validation_success",
          "test_singular_node_validation_success",
          "TestNodeTypeSystem.test_singular_node_validation_fail_with_dependencies",
          "test_singular_node_validation_fail_with_dependencies",
          "TestNodeTypeSystem.test_singular_node_validation_fail_with_outputs",
          "test_singular_node_validation_fail_with_outputs",
          "TestNodeTypeSystem.test_invalid_node_type_raises_error",
          "test_invalid_node_type_raises_error",
          "TestSpecificationRegistry.setUp",
          "setUp",
          "TestSpecificationRegistry.test_register_valid_specifications",
          "test_register_valid_specifications",
          "TestSpecificationRegistry.test_register_invalid_specification_fails",
          "test_register_invalid_specification_fails",
          "TestSpecificationRegistry.test_registration_logging",
          "test_registration_logging",
          "TestRealSpecifications.setUp",
          "setUp",
          "TestRealSpecifications.test_real_specifications_node_types",
          "test_real_specifications_node_types",
          "TestRealSpecifications.test_real_specifications_validation",
          "test_real_specifications_validation",
          "setUp",
          "test_source_node_validation_success",
          "test_source_node_validation_fail_with_dependencies",
          "test_source_node_validation_fail_without_outputs",
          "test_internal_node_validation_success",
          "test_internal_node_validation_fail_without_dependencies",
          "test_internal_node_validation_fail_without_outputs",
          "test_sink_node_validation_success",
          "test_sink_node_validation_fail_without_dependencies",
          "test_sink_node_validation_fail_with_outputs",
          "test_singular_node_validation_success",
          "test_singular_node_validation_fail_with_dependencies",
          "test_singular_node_validation_fail_with_outputs",
          "test_invalid_node_type_raises_error",
          "setUp",
          "test_register_valid_specifications",
          "test_register_invalid_specification_fails",
          "test_registration_logging",
          "setUp",
          "test_real_specifications_node_types",
          "test_real_specifications_validation"
        ],
        "steps/configs/test_hybrid_config_validation.py": [
          "TestHybridConfigValidation.test_base_configuration_creation",
          "test_base_configuration_creation",
          "TestHybridConfigValidation.test_configuration_validation_works",
          "test_configuration_validation_works",
          "TestHybridConfigValidation.test_field_categorization_basic",
          "test_field_categorization_basic",
          "TestHybridConfigValidation.test_project_root_folder_field_exists",
          "test_project_root_folder_field_exists",
          "TestHybridConfigValidation.test_inheritance_chain_works",
          "test_inheritance_chain_works",
          "TestHybridConfigValidation.test_configuration_ready_for_hybrid_resolution",
          "test_configuration_ready_for_hybrid_resolution",
          "test_base_configuration_creation",
          "test_configuration_validation_works",
          "test_field_categorization_basic",
          "test_project_root_folder_field_exists",
          "test_inheritance_chain_works",
          "test_configuration_ready_for_hybrid_resolution"
        ],
        "steps/configs/test_utils.py": [
          "TestSimplifiedConfigFieldCategorization.setUp",
          "setUp",
          "TestSimplifiedConfigFieldCategorization.test_simplified_structure",
          "test_simplified_structure",
          "TestSimplifiedConfigFieldCategorization.test_simplified_special_fields",
          "test_simplified_special_fields",
          "TestSimplifiedConfigFieldCategorization.test_simplified_common_fields",
          "test_simplified_common_fields",
          "TestSimplifiedConfigFieldCategorization.test_simplified_unique_fields",
          "test_simplified_unique_fields",
          "TestSimplifiedConfigFieldCategorization.test_simplified_non_static_fields",
          "test_simplified_non_static_fields",
          "TestSimplifiedConfigFieldCategorization.test_simplified_structure_with_local_configs",
          "test_simplified_structure_with_local_configs",
          "TestSimplifiedConfigFieldCategorization.test_simplified_different_values",
          "test_simplified_different_values",
          "TestSimplifiedConfigFieldCategorization.test_processing_configs_in_flattened_structure",
          "test_processing_configs_in_flattened_structure",
          "setUp",
          "test_simplified_structure",
          "test_simplified_special_fields",
          "test_simplified_common_fields",
          "test_simplified_unique_fields",
          "test_simplified_non_static_fields",
          "LocalTestProcessingConfig.get_script_contract",
          "get_script_contract",
          "LocalTestProcessingConfig.validate_config",
          "validate_config",
          "test_simplified_structure_with_local_configs",
          "test_simplified_different_values",
          "test_processing_configs_in_flattened_structure",
          "CustomProcessingConfig.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig.validate_config",
          "validate_config",
          "get_script_contract",
          "validate_config",
          "CustomProcessingConfig1.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig1.validate_config",
          "validate_config",
          "CustomProcessingConfig2.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig2.validate_config",
          "validate_config",
          "get_script_contract",
          "validate_config",
          "get_script_contract",
          "validate_config",
          "get_script_contract",
          "validate_config"
        ],
        "steps/configs/test_utils_basic_serialization.py": [
          "TestBasicSerializationAndFields.test_special_fields_in_serialization",
          "test_special_fields_in_serialization",
          "TestBasicSerializationAndFields.test_static_field_detection",
          "test_static_field_detection",
          "TestBasicSerializationAndFields.test_basic_merge_and_fields_in_shared",
          "test_basic_merge_and_fields_in_shared",
          "TestBasicSerializationAndFields.test_pydantic_model_serialization",
          "test_pydantic_model_serialization",
          "test_special_fields_in_serialization",
          "test_static_field_detection",
          "test_basic_merge_and_fields_in_shared",
          "test_pydantic_model_serialization"
        ],
        "steps/configs/test_modernized_path_resolution.py": [
          "TestModernizedPathResolution.test_effective_source_dir_hybrid_resolution",
          "test_effective_source_dir_hybrid_resolution",
          "TestModernizedPathResolution.test_script_path_uses_modernized_effective_source_dir",
          "test_script_path_uses_modernized_effective_source_dir",
          "TestModernizedPathResolution.test_get_script_path_comprehensive_fallbacks",
          "test_get_script_path_comprehensive_fallbacks",
          "TestModernizedPathResolution.test_get_script_path_with_default_fallback",
          "test_get_script_path_with_default_fallback",
          "TestModernizedPathResolution.test_scenario_1_fallback_method_exists",
          "test_scenario_1_fallback_method_exists",
          "TestModernizedPathResolution.test_hybrid_resolution_integration",
          "test_hybrid_resolution_integration",
          "TestModernizedPathResolution.test_backward_compatibility",
          "test_backward_compatibility",
          "TestModernizedPathResolution.test_s3_path_handling",
          "test_s3_path_handling",
          "TestModernizedPathResolution.test_processing_source_dir_priority",
          "test_processing_source_dir_priority",
          "TestModernizedPathResolution.test_modernization_complete",
          "test_modernization_complete",
          "test_effective_source_dir_hybrid_resolution",
          "test_script_path_uses_modernized_effective_source_dir",
          "test_get_script_path_comprehensive_fallbacks",
          "test_get_script_path_with_default_fallback",
          "test_scenario_1_fallback_method_exists",
          "test_hybrid_resolution_integration",
          "test_backward_compatibility",
          "test_s3_path_handling",
          "test_processing_source_dir_priority",
          "test_modernization_complete"
        ],
        "steps/configs/test_field_sources.py": [
          "TestFieldSources.setUp",
          "setUp",
          "TestFieldSources.test_field_sources_categories",
          "test_field_sources_categories",
          "TestFieldSources.test_field_sources_values",
          "test_field_sources_values",
          "TestFieldSources.test_field_sources_metadata",
          "test_field_sources_metadata",
          "setUp",
          "test_field_sources_categories",
          "test_field_sources_values",
          "test_field_sources_metadata"
        ],
        "steps/configs/test_config_inheritance.py": [
          "TestConfigInheritance.test_field_categorization",
          "test_field_categorization",
          "TestConfigInheritance.test_config_inheritance",
          "test_config_inheritance",
          "TestConfigInheritance.test_field_override",
          "test_field_override",
          "test_field_categorization",
          "test_config_inheritance",
          "test_field_override"
        ],
        "steps/configs/test_utils_flattened_structure.py": [
          "TestFlattenedConfigStructure.setUp",
          "setUp",
          "TestFlattenedConfigStructure.test_simplified_structure",
          "test_simplified_structure",
          "TestFlattenedConfigStructure.test_common_fields_in_shared",
          "test_common_fields_in_shared",
          "TestFlattenedConfigStructure.test_special_fields_in_specific",
          "test_special_fields_in_specific",
          "TestFlattenedConfigStructure.test_unique_fields_in_specific",
          "test_unique_fields_in_specific",
          "TestFlattenedConfigStructure.test_different_values_in_specific",
          "test_different_values_in_specific",
          "TestFlattenedConfigStructure.test_processing_configs_in_simplified_structure",
          "test_processing_configs_in_simplified_structure",
          "TestFlattenedConfigStructure.test_load_from_simplified_structure",
          "test_load_from_simplified_structure",
          "setUp",
          "test_simplified_structure",
          "test_common_fields_in_shared",
          "test_special_fields_in_specific",
          "test_unique_fields_in_specific",
          "test_different_values_in_specific",
          "test_processing_configs_in_simplified_structure",
          "test_load_from_simplified_structure",
          "CustomProcessingConfig.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig.validate_config",
          "validate_config",
          "CustomProcessingConfig1.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig1.validate_config",
          "validate_config",
          "CustomProcessingConfig2.get_script_contract",
          "get_script_contract",
          "CustomProcessingConfig2.validate_config",
          "validate_config",
          "get_script_contract",
          "validate_config",
          "get_script_contract",
          "validate_config",
          "get_script_contract",
          "validate_config"
        ],
        "steps/scripts/test_package.py": [
          "TestMimsPackagingHelpers.base_dir",
          "base_dir",
          "TestMimsPackagingHelpers._create_dummy_file",
          "_create_dummy_file",
          "TestMimsPackagingHelpers.test_ensure_directory",
          "test_ensure_directory",
          "TestMimsPackagingHelpers.test_copy_file_robust",
          "test_copy_file_robust",
          "TestMimsPackagingHelpers.test_create_and_extract_tarfile",
          "test_create_and_extract_tarfile",
          "TestMimsPackagingMainFlow.setup_dirs",
          "setup_dirs",
          "TestMimsPackagingMainFlow._create_dummy_file",
          "_create_dummy_file",
          "TestMimsPackagingMainFlow.test_main_flow_with_input_tar",
          "test_main_flow_with_input_tar",
          "TestMimsPackagingMainFlow.test_main_flow_with_direct_files",
          "test_main_flow_with_direct_files",
          "base_dir",
          "_create_dummy_file",
          "test_ensure_directory",
          "test_copy_file_robust",
          "test_create_and_extract_tarfile",
          "setup_dirs",
          "_create_dummy_file",
          "test_main_flow_with_input_tar",
          "test_main_flow_with_direct_files"
        ],
        "steps/scripts/test_model_wiki_generator.py": [
          "test_data_setup",
          "TestDataIngestionManager.test_load_metrics_data",
          "test_load_metrics_data",
          "TestDataIngestionManager.test_load_metrics_data_empty_directory",
          "test_load_metrics_data_empty_directory",
          "TestDataIngestionManager.test_discover_visualization_files",
          "test_discover_visualization_files",
          "TestDataIngestionManager.test_discover_visualization_files_empty_directory",
          "test_discover_visualization_files_empty_directory",
          "TestDataIngestionManager.test_discover_visualization_files_nonexistent_directory",
          "test_discover_visualization_files_nonexistent_directory",
          "TestContentGenerator.test_generate_performance_assessment",
          "test_generate_performance_assessment",
          "TestContentGenerator.test_generate_auc_interpretation",
          "test_generate_auc_interpretation",
          "TestContentGenerator.test_generate_ap_interpretation",
          "test_generate_ap_interpretation",
          "TestContentGenerator.test_generate_business_impact_summary",
          "test_generate_business_impact_summary",
          "TestContentGenerator.test_generate_recommendations_section",
          "test_generate_recommendations_section",
          "TestContentGenerator.test_generate_performance_overview",
          "test_generate_performance_overview",
          "TestWikiTemplateEngine.test_initialization",
          "test_initialization",
          "TestWikiTemplateEngine.test_generate_wiki_content",
          "test_generate_wiki_content",
          "TestVisualizationIntegrator.test_process_visualizations",
          "test_process_visualizations",
          "TestVisualizationIntegrator.test_generate_plot_description",
          "test_generate_plot_description",
          "TestWikiOutputManager.test_save_wiki_documentation",
          "test_save_wiki_documentation",
          "TestWikiOutputManager.test_sanitize_filename",
          "test_sanitize_filename",
          "TestWikiReportAssembler.test_assemble_complete_report",
          "test_assemble_complete_report",
          "TestMainFunction.test_main_function_basic",
          "test_main_function_basic",
          "test_load_metrics_data",
          "test_load_metrics_data_empty_directory",
          "test_discover_visualization_files",
          "test_discover_visualization_files_empty_directory",
          "test_discover_visualization_files_nonexistent_directory",
          "test_generate_performance_assessment",
          "test_generate_auc_interpretation",
          "test_generate_ap_interpretation",
          "test_generate_business_impact_summary",
          "test_generate_recommendations_section",
          "test_generate_performance_overview",
          "test_initialization",
          "test_generate_wiki_content",
          "test_process_visualizations",
          "test_generate_plot_description",
          "test_save_wiki_documentation",
          "test_sanitize_filename",
          "test_assemble_complete_report",
          "test_main_function_basic"
        ],
        "steps/scripts/test_risk_table_mapping.py": [
          "TestOfflineBinning.setup_data",
          "setup_data",
          "TestOfflineBinning.test_fit_creates_risk_tables",
          "test_fit_creates_risk_tables",
          "TestOfflineBinning.test_transform_maps_values",
          "test_transform_maps_values",
          "TestMainRiskTableFlow.setup_dirs",
          "setup_dirs",
          "TestMainRiskTableFlow.test_main_training_mode",
          "test_main_training_mode",
          "TestMainRiskTableFlow.test_main_inference_mode",
          "test_main_inference_mode",
          "setup_data",
          "test_fit_creates_risk_tables",
          "test_transform_maps_values",
          "setup_dirs",
          "test_main_training_mode",
          "test_main_inference_mode"
        ],
        "steps/scripts/test_xgboost_model_eval.py": [
          "TestModelEvaluationHelpers.temp_dir",
          "temp_dir",
          "TestModelEvaluationHelpers._create_mock_model_artifacts",
          "_create_mock_model_artifacts",
          "TestModelEvaluationHelpers.test_load_model_artifacts",
          "test_load_model_artifacts",
          "TestModelEvaluationHelpers.test_preprocess_eval_data",
          "test_preprocess_eval_data",
          "TestModelEvaluationHelpers.test_log_metrics_summary_binary",
          "test_log_metrics_summary_binary",
          "TestModelEvaluationHelpers.test_log_metrics_summary_multiclass",
          "test_log_metrics_summary_multiclass",
          "TestModelEvaluationHelpers.test_compute_metrics_binary",
          "test_compute_metrics_binary",
          "TestModelEvaluationHelpers.test_compute_metrics_multiclass",
          "test_compute_metrics_multiclass",
          "TestModelEvaluationHelpers.test_load_eval_data_csv",
          "test_load_eval_data_csv",
          "TestModelEvaluationHelpers.test_load_eval_data_parquet",
          "test_load_eval_data_parquet",
          "TestModelEvaluationHelpers.test_load_eval_data_no_files",
          "test_load_eval_data_no_files",
          "TestModelEvaluationHelpers.test_get_id_label_columns",
          "test_get_id_label_columns",
          "TestModelEvaluationHelpers.test_save_predictions",
          "test_save_predictions",
          "TestModelEvaluationHelpers.test_save_metrics",
          "test_save_metrics",
          "TestModelEvaluationHelpers.test_plot_and_save_roc_curve",
          "test_plot_and_save_roc_curve",
          "TestModelEvaluationHelpers.test_plot_and_save_pr_curve",
          "test_plot_and_save_pr_curve",
          "TestModelEvaluationIntegration.temp_dir",
          "temp_dir",
          "TestModelEvaluationIntegration.test_evaluate_model_binary",
          "test_evaluate_model_binary",
          "TestModelEvaluationIntegration.test_evaluate_model_multiclass",
          "test_evaluate_model_multiclass",
          "TestModelEvaluationMain.temp_dir",
          "temp_dir",
          "TestModelEvaluationMain._create_mock_model_artifacts",
          "_create_mock_model_artifacts",
          "TestModelEvaluationMain.test_main_function",
          "test_main_function",
          "temp_dir",
          "_create_mock_model_artifacts",
          "test_load_model_artifacts",
          "test_preprocess_eval_data",
          "test_log_metrics_summary_binary",
          "test_log_metrics_summary_multiclass",
          "test_compute_metrics_binary",
          "test_compute_metrics_multiclass",
          "test_load_eval_data_csv",
          "test_load_eval_data_parquet",
          "test_load_eval_data_no_files",
          "test_get_id_label_columns",
          "test_save_predictions",
          "test_save_metrics",
          "test_plot_and_save_roc_curve",
          "test_plot_and_save_pr_curve",
          "temp_dir",
          "test_evaluate_model_binary",
          "test_evaluate_model_multiclass",
          "temp_dir",
          "_create_mock_model_artifacts",
          "test_main_function"
        ],
        "steps/scripts/test_currency_conversion.py": [
          "TestCurrencyConversionHelpers.sample_data",
          "sample_data",
          "TestCurrencyConversionHelpers.test_get_currency_code_valid_cases",
          "test_get_currency_code_valid_cases",
          "TestCurrencyConversionHelpers.test_get_currency_code_invalid_cases",
          "test_get_currency_code_invalid_cases",
          "TestCurrencyConversionHelpers.test_get_currency_code_edge_cases",
          "test_get_currency_code_edge_cases",
          "TestCurrencyConversionHelpers.test_combine_currency_codes_with_existing_column",
          "test_combine_currency_codes_with_existing_column",
          "TestCurrencyConversionHelpers.test_combine_currency_codes_without_existing_column",
          "test_combine_currency_codes_without_existing_column",
          "TestCurrencyConversionHelpers.test_combine_currency_codes_skip_invalid_currencies",
          "test_combine_currency_codes_skip_invalid_currencies",
          "TestCurrencyConversionHelpers.test_combine_currency_codes_empty_dataframe",
          "test_combine_currency_codes_empty_dataframe",
          "TestCurrencyConversionHelpers.test_currency_conversion_single_variable_basic",
          "test_currency_conversion_single_variable_basic",
          "TestCurrencyConversionHelpers.test_currency_conversion_single_variable_edge_cases",
          "test_currency_conversion_single_variable_edge_cases",
          "TestCurrencyConversionHelpers.test_currency_conversion_single_variable_invalid_currencies",
          "test_currency_conversion_single_variable_invalid_currencies",
          "TestCurrencyConversionHelpers.test_currency_conversion_zero_exchange_rates",
          "test_currency_conversion_zero_exchange_rates",
          "TestCurrencyConversionHelpers.test_parallel_currency_conversion_basic",
          "test_parallel_currency_conversion_basic",
          "TestCurrencyConversionHelpers.test_parallel_currency_conversion_single_worker",
          "test_parallel_currency_conversion_single_worker",
          "TestCurrencyConversionHelpers.test_process_currency_conversion_complete_workflow",
          "test_process_currency_conversion_complete_workflow",
          "TestCurrencyConversionHelpers.test_process_currency_conversion_no_conversion_vars",
          "test_process_currency_conversion_no_conversion_vars",
          "TestCurrencyConversionHelpers.test_process_currency_conversion_empty_dataframe",
          "test_process_currency_conversion_empty_dataframe",
          "TestCurrencyConversionIntegration.setup_dirs",
          "setup_dirs",
          "TestCurrencyConversionIntegration._create_realistic_test_data",
          "_create_realistic_test_data",
          "TestCurrencyConversionIntegration.test_main_per_split_mode_integration",
          "test_main_per_split_mode_integration",
          "TestCurrencyConversionIntegration.test_main_split_after_conversion_mode",
          "test_main_split_after_conversion_mode",
          "TestCurrencyConversionIntegration.test_main_conversion_disabled",
          "test_main_conversion_disabled",
          "TestCurrencyConversionPerformance.performance_data",
          "performance_data",
          "TestCurrencyConversionPerformance.test_parallel_conversion_performance",
          "test_parallel_conversion_performance",
          "TestCurrencyConversionPerformance.test_large_dataset_processing",
          "test_large_dataset_processing",
          "TestCurrencyConversionErrorHandling.error_test_data",
          "error_test_data",
          "TestCurrencyConversionErrorHandling.test_missing_columns_handling",
          "test_missing_columns_handling",
          "TestCurrencyConversionErrorHandling.test_corrupted_data_handling",
          "test_corrupted_data_handling",
          "TestCurrencyConversionErrorHandling.test_memory_constraints",
          "test_memory_constraints",
          "TestCurrencyConversionErrorHandling.test_logging_behavior",
          "test_logging_behavior",
          "sample_data",
          "test_get_currency_code_valid_cases",
          "test_get_currency_code_invalid_cases",
          "test_get_currency_code_edge_cases",
          "test_combine_currency_codes_with_existing_column",
          "test_combine_currency_codes_without_existing_column",
          "test_combine_currency_codes_skip_invalid_currencies",
          "test_combine_currency_codes_empty_dataframe",
          "test_currency_conversion_single_variable_basic",
          "test_currency_conversion_single_variable_edge_cases",
          "test_currency_conversion_single_variable_invalid_currencies",
          "test_currency_conversion_zero_exchange_rates",
          "test_parallel_currency_conversion_basic",
          "test_parallel_currency_conversion_single_worker",
          "test_process_currency_conversion_complete_workflow",
          "test_process_currency_conversion_no_conversion_vars",
          "test_process_currency_conversion_empty_dataframe",
          "setup_dirs",
          "_create_realistic_test_data",
          "test_main_per_split_mode_integration",
          "test_main_split_after_conversion_mode",
          "test_main_conversion_disabled",
          "performance_data",
          "test_parallel_conversion_performance",
          "test_large_dataset_processing",
          "error_test_data",
          "test_missing_columns_handling",
          "test_corrupted_data_handling",
          "test_memory_constraints",
          "test_logging_behavior"
        ],
        "steps/scripts/test_tabular_preprocessing.py": [
          "TestTabularPreprocessHelpers.temp_dir",
          "temp_dir",
          "TestTabularPreprocessHelpers._create_csv_shard",
          "_create_csv_shard",
          "TestTabularPreprocessHelpers._create_json_shard",
          "_create_json_shard",
          "TestTabularPreprocessHelpers._create_parquet_shard",
          "_create_parquet_shard",
          "TestTabularPreprocessHelpers.test_combine_shards_success",
          "test_combine_shards_success",
          "TestTabularPreprocessHelpers.test_combine_shards_no_files",
          "test_combine_shards_no_files",
          "TestTabularPreprocessHelpers.test_read_json_single_object",
          "test_read_json_single_object",
          "TestTabularPreprocessHelpers.test_peek_json_format_empty_file",
          "test_peek_json_format_empty_file",
          "TestMainFunction.setup_dirs",
          "setup_dirs",
          "TestMainFunction.test_main_training_split",
          "test_main_training_split",
          "TestMainFunction.test_main_validation_mode",
          "test_main_validation_mode",
          "TestMainFunction.test_main_label_not_found_error",
          "test_main_label_not_found_error",
          "temp_dir",
          "_create_csv_shard",
          "_create_json_shard",
          "_create_parquet_shard",
          "test_combine_shards_success",
          "test_combine_shards_no_files",
          "test_read_json_single_object",
          "test_peek_json_format_empty_file",
          "setup_dirs",
          "test_main_training_split",
          "test_main_validation_mode",
          "test_main_label_not_found_error"
        ],
        "steps/scripts/test_payload.py": [
          "TestMimsPayloadHelpers.setup_dirs",
          "setup_dirs",
          "TestMimsPayloadHelpers._create_hyperparameters_tarball",
          "_create_hyperparameters_tarball",
          "TestMimsPayloadHelpers.test_create_model_variable_list",
          "test_create_model_variable_list",
          "TestMimsPayloadHelpers.test_extract_hyperparameters_from_tarball",
          "test_extract_hyperparameters_from_tarball",
          "TestMimsPayloadHelpers.test_get_environment_content_types",
          "test_get_environment_content_types",
          "TestMimsPayloadHelpers.test_get_environment_default_numeric_value",
          "test_get_environment_default_numeric_value",
          "TestMimsPayloadHelpers.test_get_environment_default_text_value",
          "test_get_environment_default_text_value",
          "TestMimsPayloadHelpers.test_get_environment_special_fields",
          "test_get_environment_special_fields",
          "TestMimsPayloadHelpers.test_get_field_default_value",
          "test_get_field_default_value",
          "TestMimsPayloadHelpers.test_generate_csv_payload",
          "test_generate_csv_payload",
          "TestMimsPayloadHelpers.test_generate_json_payload",
          "test_generate_json_payload",
          "TestMimsPayloadHelpers.test_generate_sample_payloads",
          "test_generate_sample_payloads",
          "TestMimsPayloadHelpers.test_save_payloads",
          "test_save_payloads",
          "TestMimsPayloadMainFlow.setup_dirs",
          "setup_dirs",
          "TestMimsPayloadMainFlow._create_hyperparameters_tarball",
          "_create_hyperparameters_tarball",
          "TestMimsPayloadMainFlow.test_main_flow",
          "test_main_flow",
          "TestMimsPayloadMainFlow.test_main_flow_missing_model_tarball",
          "test_main_flow_missing_model_tarball",
          "TestMimsPayloadMainFlow.test_main_flow_missing_hyperparameters",
          "test_main_flow_missing_hyperparameters",
          "setup_dirs",
          "_create_hyperparameters_tarball",
          "test_create_model_variable_list",
          "test_extract_hyperparameters_from_tarball",
          "test_get_environment_content_types",
          "test_get_environment_default_numeric_value",
          "test_get_environment_default_text_value",
          "test_get_environment_special_fields",
          "test_get_field_default_value",
          "test_generate_csv_payload",
          "test_generate_json_payload",
          "test_generate_sample_payloads",
          "test_save_payloads",
          "setup_dirs",
          "_create_hyperparameters_tarball",
          "test_main_flow",
          "test_main_flow_missing_model_tarball",
          "test_main_flow_missing_hyperparameters"
        ],
        "steps/scripts/test_dummy_training.py": [
          "TestDummyTrainingHelpers.temp_dir",
          "temp_dir",
          "TestDummyTrainingHelpers._create_dummy_tar",
          "_create_dummy_tar",
          "TestDummyTrainingHelpers.test_validate_model_valid_tar",
          "test_validate_model_valid_tar",
          "TestDummyTrainingHelpers.test_validate_model_invalid_extension",
          "test_validate_model_invalid_extension",
          "TestDummyTrainingHelpers.test_validate_model_invalid_tar",
          "test_validate_model_invalid_tar",
          "TestDummyTrainingHelpers.test_ensure_directory_creates_new_directory",
          "test_ensure_directory_creates_new_directory",
          "TestDummyTrainingHelpers.test_ensure_directory_existing_directory",
          "test_ensure_directory_existing_directory",
          "TestDummyTrainingHelpers.test_copy_file_success",
          "test_copy_file_success",
          "TestDummyTrainingHelpers.test_copy_file_nonexistent_source",
          "test_copy_file_nonexistent_source",
          "TestDummyTrainingHelpers.test_extract_tarfile_success",
          "test_extract_tarfile_success",
          "TestDummyTrainingHelpers.test_extract_tarfile_nonexistent_file",
          "test_extract_tarfile_nonexistent_file",
          "TestDummyTrainingHelpers.test_create_tarfile_success",
          "test_create_tarfile_success",
          "TestDummyTrainingHelpers.test_process_model_with_hyperparameters_success",
          "test_process_model_with_hyperparameters_success",
          "TestDummyTrainingHelpers.test_process_model_with_hyperparameters_missing_model",
          "test_process_model_with_hyperparameters_missing_model",
          "TestDummyTrainingHelpers.test_process_model_with_hyperparameters_missing_hyperparams",
          "test_process_model_with_hyperparameters_missing_hyperparams",
          "TestDummyTrainingMain.temp_dir",
          "temp_dir",
          "TestDummyTrainingMain.setup_paths",
          "setup_paths",
          "TestDummyTrainingMain._create_dummy_tar",
          "_create_dummy_tar",
          "TestDummyTrainingMain.test_main_with_hyperparameters",
          "test_main_with_hyperparameters",
          "TestDummyTrainingMain.test_main_without_hyperparameters",
          "test_main_without_hyperparameters",
          "TestDummyTrainingMain.test_main_missing_model_file",
          "test_main_missing_model_file",
          "TestDummyTrainingMain.test_main_invalid_model_file",
          "test_main_invalid_model_file",
          "TestDummyTrainingMain.test_main_unexpected_error",
          "test_main_unexpected_error",
          "temp_dir",
          "_create_dummy_tar",
          "test_validate_model_valid_tar",
          "test_validate_model_invalid_extension",
          "test_validate_model_invalid_tar",
          "test_ensure_directory_creates_new_directory",
          "test_ensure_directory_existing_directory",
          "test_copy_file_success",
          "test_copy_file_nonexistent_source",
          "test_extract_tarfile_success",
          "test_extract_tarfile_nonexistent_file",
          "test_create_tarfile_success",
          "test_process_model_with_hyperparameters_success",
          "test_process_model_with_hyperparameters_missing_model",
          "test_process_model_with_hyperparameters_missing_hyperparams",
          "temp_dir",
          "setup_paths",
          "_create_dummy_tar",
          "test_main_with_hyperparameters",
          "test_main_without_hyperparameters",
          "test_main_missing_model_file",
          "test_main_invalid_model_file",
          "test_main_unexpected_error"
        ],
        "steps/scripts/test_xgboost_training.py": [
          "TestXGBoostTrainHelpers.temp_dir",
          "temp_dir",
          "TestXGBoostTrainHelpers.sample_config",
          "sample_config",
          "TestXGBoostTrainHelpers.sample_data",
          "sample_data",
          "TestXGBoostTrainHelpers.test_load_and_validate_config_valid",
          "test_load_and_validate_config_valid",
          "TestXGBoostTrainHelpers.test_load_and_validate_config_missing_keys",
          "test_load_and_validate_config_missing_keys",
          "TestXGBoostTrainHelpers.test_load_and_validate_config_invalid_class_weights",
          "test_load_and_validate_config_invalid_class_weights",
          "TestXGBoostTrainHelpers.test_load_and_validate_config_file_not_found",
          "test_load_and_validate_config_file_not_found",
          "TestXGBoostTrainHelpers.test_find_first_data_file_csv",
          "test_find_first_data_file_csv",
          "TestXGBoostTrainHelpers.test_find_first_data_file_parquet",
          "test_find_first_data_file_parquet",
          "TestXGBoostTrainHelpers.test_find_first_data_file_no_data_files",
          "test_find_first_data_file_no_data_files",
          "TestXGBoostTrainHelpers.test_find_first_data_file_nonexistent_dir",
          "test_find_first_data_file_nonexistent_dir",
          "TestXGBoostTrainHelpers.test_load_datasets_success",
          "test_load_datasets_success",
          "TestXGBoostTrainHelpers.test_load_datasets_missing_files",
          "test_load_datasets_missing_files",
          "TestXGBoostTrainHelpers.test_apply_numerical_imputation",
          "test_apply_numerical_imputation",
          "TestXGBoostTrainHelpers.test_fit_and_apply_risk_tables",
          "test_fit_and_apply_risk_tables",
          "TestXGBoostTrainHelpers.test_prepare_dmatrices",
          "test_prepare_dmatrices",
          "TestXGBoostTrainHelpers.test_prepare_dmatrices_nan_values",
          "test_prepare_dmatrices_nan_values",
          "TestXGBoostTrainHelpers.test_train_model_binary",
          "test_train_model_binary",
          "TestXGBoostTrainHelpers.test_train_model_multiclass",
          "test_train_model_multiclass",
          "TestXGBoostTrainHelpers.test_save_artifacts",
          "test_save_artifacts",
          "TestXGBoostTrainMain.setup_dirs",
          "setup_dirs",
          "TestXGBoostTrainMain.sample_config",
          "sample_config",
          "TestXGBoostTrainMain._create_test_data",
          "_create_test_data",
          "TestXGBoostTrainMain.test_main_success",
          "test_main_success",
          "TestXGBoostTrainMain.test_main_missing_config",
          "test_main_missing_config",
          "TestXGBoostTrainMain.test_main_missing_data",
          "test_main_missing_data",
          "TestXGBoostTrainMain.test_main_invalid_config",
          "test_main_invalid_config",
          "TestXGBoostTrainIntegration.temp_dir",
          "temp_dir",
          "TestXGBoostTrainIntegration.test_script_imports_successfully",
          "test_script_imports_successfully",
          "temp_dir",
          "sample_config",
          "sample_data",
          "test_load_and_validate_config_valid",
          "test_load_and_validate_config_missing_keys",
          "test_load_and_validate_config_invalid_class_weights",
          "test_load_and_validate_config_file_not_found",
          "test_find_first_data_file_csv",
          "test_find_first_data_file_parquet",
          "test_find_first_data_file_no_data_files",
          "test_find_first_data_file_nonexistent_dir",
          "test_load_datasets_success",
          "test_load_datasets_missing_files",
          "test_apply_numerical_imputation",
          "test_fit_and_apply_risk_tables",
          "test_prepare_dmatrices",
          "test_prepare_dmatrices_nan_values",
          "test_train_model_binary",
          "test_train_model_multiclass",
          "test_save_artifacts",
          "setup_dirs",
          "sample_config",
          "_create_test_data",
          "test_main_success",
          "test_main_missing_config",
          "test_main_missing_data",
          "test_main_invalid_config",
          "temp_dir",
          "test_script_imports_successfully"
        ],
        "steps/scripts/test_model_calibration.py": [
          "TestCalibrationConfig.test_calibration_config_defaults",
          "test_calibration_config_defaults",
          "TestCalibrationConfig.test_calibration_config_custom_values",
          "test_calibration_config_custom_values",
          "TestCalibrationConfig.test_calibration_config_from_env",
          "test_calibration_config_from_env",
          "TestCalibrationHelpers.setup_dirs",
          "setup_dirs",
          "TestCalibrationHelpers.test_create_directories",
          "test_create_directories",
          "TestCalibrationHelpers.test_find_first_data_file_csv",
          "test_find_first_data_file_csv",
          "TestCalibrationHelpers.test_find_first_data_file_parquet",
          "test_find_first_data_file_parquet",
          "TestCalibrationHelpers.test_find_first_data_file_no_files",
          "test_find_first_data_file_no_files",
          "TestCalibrationHelpers.test_find_first_data_file_no_directory",
          "test_find_first_data_file_no_directory",
          "TestCalibrationHelpers.test_load_data_csv",
          "test_load_data_csv",
          "TestCalibrationHelpers.test_load_data_parquet",
          "test_load_data_parquet",
          "TestCalibrationHelpers.test_load_data_missing_label_field",
          "test_load_data_missing_label_field",
          "TestCalibrationHelpers.test_load_data_missing_score_field_binary",
          "test_load_data_missing_score_field_binary",
          "TestCalibrationMethods.setup_data",
          "setup_data",
          "TestCalibrationMethods.test_train_isotonic_calibration",
          "test_train_isotonic_calibration",
          "TestCalibrationMethods.test_train_platt_scaling",
          "test_train_platt_scaling",
          "TestCalibrationMethods.test_train_gam_calibration_with_pygam",
          "test_train_gam_calibration_with_pygam",
          "TestCalibrationMethods.test_train_gam_calibration_without_pygam",
          "test_train_gam_calibration_without_pygam",
          "TestMulticlassCalibration.setup_multiclass_data",
          "setup_multiclass_data",
          "TestMulticlassCalibration.test_train_multiclass_calibration_isotonic",
          "test_train_multiclass_calibration_isotonic",
          "TestMulticlassCalibration.test_train_multiclass_calibration_platt",
          "test_train_multiclass_calibration_platt",
          "TestMulticlassCalibration.test_apply_multiclass_calibration",
          "test_apply_multiclass_calibration",
          "TestCalibrationMetrics.setup_metrics_data",
          "setup_metrics_data",
          "TestCalibrationMetrics.test_compute_calibration_metrics",
          "test_compute_calibration_metrics",
          "TestCalibrationMetrics.test_compute_multiclass_calibration_metrics",
          "test_compute_multiclass_calibration_metrics",
          "TestCalibrationVisualization.setup_viz_data",
          "setup_viz_data",
          "TestCalibrationVisualization.test_plot_reliability_diagram",
          "test_plot_reliability_diagram",
          "TestCalibrationVisualization.test_plot_multiclass_reliability_diagram",
          "test_plot_multiclass_reliability_diagram",
          "TestCalibrationMain.setup_main_data",
          "setup_main_data",
          "TestCalibrationMain.test_main_binary_calibration",
          "test_main_binary_calibration",
          "TestCalibrationMain.test_main_multiclass_calibration",
          "test_main_multiclass_calibration",
          "test_calibration_config_defaults",
          "test_calibration_config_custom_values",
          "test_calibration_config_from_env",
          "setup_dirs",
          "test_create_directories",
          "test_find_first_data_file_csv",
          "test_find_first_data_file_parquet",
          "test_find_first_data_file_no_files",
          "test_find_first_data_file_no_directory",
          "test_load_data_csv",
          "test_load_data_parquet",
          "test_load_data_missing_label_field",
          "test_load_data_missing_score_field_binary",
          "setup_data",
          "test_train_isotonic_calibration",
          "test_train_platt_scaling",
          "test_train_gam_calibration_with_pygam",
          "test_train_gam_calibration_without_pygam",
          "setup_multiclass_data",
          "test_train_multiclass_calibration_isotonic",
          "test_train_multiclass_calibration_platt",
          "test_apply_multiclass_calibration",
          "setup_metrics_data",
          "test_compute_calibration_metrics",
          "test_compute_multiclass_calibration_metrics",
          "setup_viz_data",
          "test_plot_reliability_diagram",
          "test_plot_multiclass_reliability_diagram",
          "setup_main_data",
          "test_main_binary_calibration",
          "test_main_multiclass_calibration"
        ],
        "steps/scripts/test_stratified_sampling.py": [
          "TestStratifiedSampler.sample_data",
          "sample_data",
          "TestStratifiedSampler.test_stratified_sampler_balanced",
          "test_stratified_sampler_balanced",
          "TestStratifiedSampler.test_stratified_sampler_proportional",
          "test_stratified_sampler_proportional",
          "TestStratifiedSampler.test_stratified_sampler_optimal",
          "test_stratified_sampler_optimal",
          "TestStratifiedSampler.test_stratified_sampler_invalid_strategy",
          "test_stratified_sampler_invalid_strategy",
          "TestStratifiedSampler.test_stratified_sampler_missing_column",
          "test_stratified_sampler_missing_column",
          "TestStratifiedSamplingMain.sample_data",
          "sample_data",
          "TestStratifiedSamplingMain.temp_dir",
          "temp_dir",
          "TestStratifiedSamplingMain.test_main_training_job_type",
          "test_main_training_job_type",
          "TestStratifiedSamplingMain.test_main_validation_job_type",
          "test_main_validation_job_type",
          "TestStratifiedSamplingMain.test_main_missing_strata_column",
          "test_main_missing_strata_column",
          "TestStratifiedSamplingMain.test_main_invalid_sampling_strategy",
          "test_main_invalid_sampling_strategy",
          "TestStratifiedSamplingMain.test_main_missing_input_files",
          "test_main_missing_input_files",
          "sample_data",
          "test_stratified_sampler_balanced",
          "test_stratified_sampler_proportional",
          "test_stratified_sampler_optimal",
          "test_stratified_sampler_invalid_strategy",
          "test_stratified_sampler_missing_column",
          "sample_data",
          "temp_dir",
          "test_main_training_job_type",
          "test_main_validation_job_type",
          "test_main_missing_strata_column",
          "test_main_invalid_sampling_strategy",
          "test_main_missing_input_files"
        ],
        "steps/builders/legacy/test_registry_integration.py": [
          "TestRegistryIntegration.test_registry_discovery_methods_available",
          "test_registry_discovery_methods_available",
          "TestRegistryIntegration.test_registry_step_discovery_class_methods",
          "test_registry_step_discovery_class_methods",
          "TestRegistryIntegration.test_universal_test_registry_methods",
          "test_universal_test_registry_methods",
          "TestRegistryIntegration.test_step_builder_loading",
          "test_step_builder_loading",
          "TestRegistryIntegration.test_universal_test_with_registry_discovery",
          "test_universal_test_with_registry_discovery",
          "TestRegistryIntegration.test_integration_with_existing_test_files",
          "test_integration_with_existing_test_files",
          "test_registry_discovery_methods_available",
          "test_registry_step_discovery_class_methods",
          "test_universal_test_registry_methods",
          "test_step_builder_loading",
          "test_universal_test_with_registry_discovery",
          "test_integration_with_existing_test_files"
        ],
        "steps/builders/legacy/test_hybrid_integration.py": [
          "TestStepBuilderHybridIntegration.setup_method",
          "setup_method",
          "TestStepBuilderHybridIntegration.test_tabular_preprocessing_hybrid_resolution_monorepo",
          "test_tabular_preprocessing_hybrid_resolution_monorepo",
          "TestStepBuilderHybridIntegration.test_xgboost_training_hybrid_resolution_monorepo",
          "test_xgboost_training_hybrid_resolution_monorepo",
          "TestStepBuilderHybridIntegration.test_tabular_preprocessing_hybrid_resolution_lambda_mods",
          "test_tabular_preprocessing_hybrid_resolution_lambda_mods",
          "TestStepBuilderHybridIntegration.test_tabular_preprocessing_hybrid_resolution_pip_installed",
          "test_tabular_preprocessing_hybrid_resolution_pip_installed",
          "TestStepBuilderHybridIntegration.test_hybrid_resolution_fallback_behavior",
          "test_hybrid_resolution_fallback_behavior",
          "setup_method",
          "test_tabular_preprocessing_hybrid_resolution_monorepo",
          "test_xgboost_training_hybrid_resolution_monorepo",
          "test_tabular_preprocessing_hybrid_resolution_lambda_mods",
          "test_tabular_preprocessing_hybrid_resolution_pip_installed",
          "test_hybrid_resolution_fallback_behavior"
        ],
        "steps/builders/legacy/test_real_builders.py": [
          "test_tabular_preprocessing_builder",
          "test_xgboost_training_builder",
          "test_model_eval_builder",
          "test_pytorch_training_builder",
          "main"
        ]
      },
      "likely_tested_functions": [
        "XGBoostModelEvalStepBuilder.__init__",
        "__init__",
        "XGBoostModelEvalStepBuilder._create_processor",
        "_create_processor",
        "XGBoostModelEvalStepBuilder._get_inputs",
        "_get_inputs",
        "XGBoostModelEvalStepBuilder._get_outputs",
        "_get_outputs",
        "XGBoostModelEvalStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "XGBoostModelStepBuilder.__init__",
        "__init__",
        "XGBoostModelStepBuilder._create_model",
        "_create_model",
        "XGBoostModelStepBuilder._get_inputs",
        "_get_inputs",
        "XGBoostModelStepBuilder._get_outputs",
        "_get_outputs",
        "XGBoostModelStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_model",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "RiskTableMappingStepBuilder.__init__",
        "__init__",
        "RiskTableMappingStepBuilder._create_processor",
        "_create_processor",
        "RiskTableMappingStepBuilder._get_inputs",
        "_get_inputs",
        "RiskTableMappingStepBuilder._get_outputs",
        "_get_outputs",
        "RiskTableMappingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "CurrencyConversionStepBuilder.__init__",
        "__init__",
        "CurrencyConversionStepBuilder._create_processor",
        "_create_processor",
        "CurrencyConversionStepBuilder._get_inputs",
        "_get_inputs",
        "CurrencyConversionStepBuilder._get_outputs",
        "_get_outputs",
        "CurrencyConversionStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "DummyTrainingStepBuilder.__init__",
        "__init__",
        "DummyTrainingStepBuilder._get_inputs",
        "_get_inputs",
        "DummyTrainingStepBuilder._get_outputs",
        "_get_outputs",
        "DummyTrainingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "StratifiedSamplingStepBuilder.__init__",
        "__init__",
        "StratifiedSamplingStepBuilder._create_processor",
        "_create_processor",
        "StratifiedSamplingStepBuilder._get_inputs",
        "_get_inputs",
        "StratifiedSamplingStepBuilder._get_outputs",
        "_get_outputs",
        "StratifiedSamplingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "XGBoostTrainingStepBuilder.__init__",
        "__init__",
        "XGBoostTrainingStepBuilder._create_estimator",
        "_create_estimator",
        "XGBoostTrainingStepBuilder._get_inputs",
        "_get_inputs",
        "XGBoostTrainingStepBuilder._get_outputs",
        "_get_outputs",
        "XGBoostTrainingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_estimator",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "TabularPreprocessingStepBuilder.__init__",
        "__init__",
        "TabularPreprocessingStepBuilder._create_processor",
        "_create_processor",
        "TabularPreprocessingStepBuilder._get_inputs",
        "_get_inputs",
        "TabularPreprocessingStepBuilder._get_outputs",
        "_get_outputs",
        "TabularPreprocessingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "XGBoostModelInferenceStepBuilder.__init__",
        "__init__",
        "XGBoostModelInferenceStepBuilder._create_processor",
        "_create_processor",
        "XGBoostModelInferenceStepBuilder._get_inputs",
        "_get_inputs",
        "XGBoostModelInferenceStepBuilder._get_outputs",
        "_get_outputs",
        "XGBoostModelInferenceStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "ModelMetricsComputationStepBuilder.__init__",
        "__init__",
        "ModelMetricsComputationStepBuilder._get_inputs",
        "_get_inputs",
        "ModelMetricsComputationStepBuilder._get_outputs",
        "_get_outputs",
        "ModelMetricsComputationStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "ModelWikiGeneratorStepBuilder.__init__",
        "__init__",
        "ModelWikiGeneratorStepBuilder._get_inputs",
        "_get_inputs",
        "ModelWikiGeneratorStepBuilder._get_outputs",
        "_get_outputs",
        "ModelWikiGeneratorStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "ModelCalibrationStepBuilder.__init__",
        "__init__",
        "ModelCalibrationStepBuilder._get_inputs",
        "_get_inputs",
        "ModelCalibrationStepBuilder._get_outputs",
        "_get_outputs",
        "ModelCalibrationStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "RegistrationStepBuilder.__init__",
        "__init__",
        "RegistrationStepBuilder._get_inputs",
        "_get_inputs",
        "RegistrationStepBuilder._get_outputs",
        "_get_outputs",
        "RegistrationStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "PackageStepBuilder.__init__",
        "__init__",
        "PackageStepBuilder._create_processor",
        "_create_processor",
        "PackageStepBuilder._get_inputs",
        "_get_inputs",
        "PackageStepBuilder._get_outputs",
        "_get_outputs",
        "PackageStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "S3PathHandler.ensure_directory",
        "ensure_directory",
        "ensure_directory",
        "MissingValueImputationStepBuilder.__init__",
        "__init__",
        "MissingValueImputationStepBuilder._create_processor",
        "_create_processor",
        "MissingValueImputationStepBuilder._get_inputs",
        "_get_inputs",
        "MissingValueImputationStepBuilder._get_outputs",
        "_get_outputs",
        "MissingValueImputationStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "PayloadStepBuilder.__init__",
        "__init__",
        "PayloadStepBuilder._create_processor",
        "_create_processor",
        "PayloadStepBuilder._get_inputs",
        "_get_inputs",
        "PayloadStepBuilder._get_outputs",
        "_get_outputs",
        "PayloadStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_processor",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "CradleDataLoadingStepBuilder.__init__",
        "__init__",
        "CradleDataLoadingStepBuilder._get_inputs",
        "_get_inputs",
        "CradleDataLoadingStepBuilder._get_outputs",
        "_get_outputs",
        "CradleDataLoadingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "BatchTransformStepBuilder.__init__",
        "__init__",
        "BatchTransformStepBuilder._get_inputs",
        "_get_inputs",
        "BatchTransformStepBuilder._get_outputs",
        "_get_outputs",
        "BatchTransformStepBuilder.create_step",
        "create_step",
        "__init__",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "PyTorchTrainingStepBuilder.__init__",
        "__init__",
        "PyTorchTrainingStepBuilder._create_estimator",
        "_create_estimator",
        "PyTorchTrainingStepBuilder._get_inputs",
        "_get_inputs",
        "PyTorchTrainingStepBuilder._get_outputs",
        "_get_outputs",
        "PyTorchTrainingStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_estimator",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "PyTorchModelStepBuilder.__init__",
        "__init__",
        "PyTorchModelStepBuilder._create_model",
        "_create_model",
        "PyTorchModelStepBuilder._get_inputs",
        "_get_inputs",
        "PyTorchModelStepBuilder._get_outputs",
        "_get_outputs",
        "PyTorchModelStepBuilder.create_step",
        "create_step",
        "__init__",
        "_create_model",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "ContractValidationReport.summary",
        "summary",
        "ScriptContractValidator.__init__",
        "__init__",
        "main",
        "summary",
        "__init__",
        "ModelWikiGeneratorConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "PayloadConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "ModelMetricsComputationConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "XGBoostModelEvalConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "DummyTrainingConfig.validate_config",
        "validate_config",
        "DummyTrainingConfig.get_script_contract",
        "get_script_contract",
        "validate_config",
        "get_script_contract",
        "ModelCalibrationConfig.validate_config",
        "validate_config",
        "ModelCalibrationConfig.get_script_contract",
        "get_script_contract",
        "validate_config",
        "get_script_contract",
        "TabularPreprocessingConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "VariableType._missing_",
        "_missing_",
        "_missing_",
        "MissingValueImputationConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "XGBoostModelInferenceConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "StratifiedSamplingConfig.get_script_contract",
        "get_script_contract",
        "get_script_contract",
        "ProcessingStepConfigBase.effective_source_dir",
        "effective_source_dir",
        "ProcessingStepConfigBase.script_path",
        "script_path",
        "ProcessingStepConfigBase.get_script_path",
        "get_script_path",
        "effective_source_dir",
        "script_path",
        "get_script_path",
        "PackageConfig.validate_config",
        "validate_config",
        "PackageConfig.get_script_contract",
        "get_script_contract",
        "validate_config",
        "get_script_contract",
        "CurrencyConversionConfig._validate_mode",
        "_validate_mode",
        "CurrencyConversionConfig.validate_config",
        "validate_config",
        "CurrencyConversionConfig.get_script_contract",
        "get_script_contract",
        "_validate_mode",
        "validate_config",
        "get_script_contract",
        "BatchTransformStepConfig.validate_config",
        "validate_config",
        "validate_config",
        "ensure_directory",
        "copy_file_robust",
        "extract_tarfile",
        "create_tarfile",
        "main",
        "ImputationStrategyManager.__init__",
        "__init__",
        "SimpleImputationEngine.__init__",
        "__init__",
        "SimpleImputationEngine.fit",
        "fit",
        "SimpleImputationEngine.transform",
        "transform",
        "main",
        "__init__",
        "__init__",
        "fit",
        "transform",
        "load_and_validate_config",
        "find_first_data_file",
        "load_datasets",
        "apply_numerical_imputation",
        "fit_and_apply_risk_tables",
        "prepare_dmatrices",
        "train_model",
        "save_artifacts",
        "main",
        "RiskTableMappingProcessor.__init__",
        "__init__",
        "RiskTableMappingProcessor.process",
        "process",
        "RiskTableMappingProcessor.transform",
        "transform",
        "NumericalVariableImputationProcessor.__init__",
        "__init__",
        "NumericalVariableImputationProcessor.process",
        "process",
        "NumericalVariableImputationProcessor.transform",
        "transform",
        "load_model_artifacts",
        "load_eval_data",
        "get_id_label_columns",
        "save_predictions",
        "main",
        "__init__",
        "process",
        "transform",
        "__init__",
        "process",
        "transform",
        "get_currency_code",
        "combine_currency_codes",
        "currency_conversion_single_variable",
        "parallel_currency_conversion",
        "process_currency_conversion",
        "main",
        "Config.model_post_init",
        "find_first_data_file",
        "main",
        "peek_json_format",
        "combine_shards",
        "main",
        "CalibrationConfig.__init__",
        "__init__",
        "CalibrationConfig.from_env",
        "from_env",
        "create_directories",
        "find_first_data_file",
        "load_data",
        "train_gam_calibration",
        "train_isotonic_calibration",
        "train_platt_scaling",
        "train_multiclass_calibration",
        "apply_multiclass_calibration",
        "compute_calibration_metrics",
        "compute_multiclass_calibration_metrics",
        "plot_reliability_diagram",
        "plot_multiclass_reliability_diagram",
        "main",
        "__init__",
        "from_env",
        "plot_and_save_roc_curve",
        "plot_and_save_pr_curve",
        "generate_recommendations",
        "log_metrics_summary",
        "save_metrics",
        "main",
        "validate_model",
        "ensure_directory",
        "extract_tarfile",
        "create_tarfile",
        "copy_file",
        "process_model_with_hyperparameters",
        "main",
        "DataIngestionManager.__init__",
        "__init__",
        "DataIngestionManager.load_metrics_data",
        "load_metrics_data",
        "DataIngestionManager.discover_visualization_files",
        "discover_visualization_files",
        "WikiTemplateEngine.__init__",
        "__init__",
        "WikiTemplateEngine._load_section_templates",
        "WikiTemplateEngine._get_header_template",
        "WikiTemplateEngine._get_summary_template",
        "WikiTemplateEngine._get_performance_section_template",
        "WikiTemplateEngine._get_business_impact_section_template",
        "WikiTemplateEngine._get_recommendations_section_template",
        "WikiTemplateEngine._get_technical_details_section_template",
        "WikiTemplateEngine.generate_wiki_content",
        "generate_wiki_content",
        "ContentGenerator.__init__",
        "__init__",
        "ContentGenerator.generate_performance_assessment",
        "generate_performance_assessment",
        "ContentGenerator.generate_auc_interpretation",
        "generate_auc_interpretation",
        "ContentGenerator.generate_ap_interpretation",
        "generate_ap_interpretation",
        "ContentGenerator.generate_business_impact_summary",
        "generate_business_impact_summary",
        "ContentGenerator.generate_recommendations_section",
        "generate_recommendations_section",
        "ContentGenerator.generate_performance_overview",
        "generate_performance_overview",
        "VisualizationIntegrator.__init__",
        "__init__",
        "VisualizationIntegrator.process_visualizations",
        "process_visualizations",
        "VisualizationIntegrator._generate_plot_description",
        "_generate_plot_description",
        "WikiReportAssembler.__init__",
        "__init__",
        "WikiReportAssembler.assemble_complete_report",
        "assemble_complete_report",
        "WikiReportAssembler._build_comprehensive_context",
        "WikiReportAssembler._generate_derived_content",
        "WikiReportAssembler._generate_visualization_sections",
        "WikiReportAssembler._generate_optional_sections",
        "WikiOutputManager.__init__",
        "__init__",
        "WikiOutputManager.save_wiki_documentation",
        "save_wiki_documentation",
        "WikiOutputManager._save_wiki_format",
        "WikiOutputManager._save_html_format",
        "WikiOutputManager._save_markdown_format",
        "WikiOutputManager._convert_wiki_to_html",
        "WikiOutputManager._convert_wiki_to_markdown",
        "WikiOutputManager._convert_wiki_tables_to_html",
        "WikiOutputManager._convert_wiki_tables_to_markdown",
        "WikiOutputManager._sanitize_filename",
        "_sanitize_filename",
        "main",
        "__init__",
        "load_metrics_data",
        "discover_visualization_files",
        "__init__",
        "generate_wiki_content",
        "__init__",
        "generate_performance_assessment",
        "generate_auc_interpretation",
        "generate_ap_interpretation",
        "generate_business_impact_summary",
        "generate_recommendations_section",
        "generate_performance_overview",
        "__init__",
        "process_visualizations",
        "_generate_plot_description",
        "__init__",
        "assemble_complete_report",
        "__init__",
        "save_wiki_documentation",
        "_sanitize_filename",
        "ensure_directory",
        "create_model_variable_list",
        "extract_hyperparameters_from_tarball",
        "get_environment_content_types",
        "get_environment_default_numeric_value",
        "get_environment_default_text_value",
        "get_environment_special_fields",
        "get_field_default_value",
        "generate_csv_payload",
        "generate_json_payload",
        "generate_sample_payloads",
        "save_payloads",
        "main",
        "RiskTableMappingProcessor.__init__",
        "__init__",
        "RiskTableMappingProcessor.fit",
        "fit",
        "RiskTableMappingProcessor.process",
        "process",
        "RiskTableMappingProcessor.transform",
        "transform",
        "NumericalVariableImputationProcessor.__init__",
        "__init__",
        "NumericalVariableImputationProcessor.fit",
        "fit",
        "NumericalVariableImputationProcessor.process",
        "process",
        "NumericalVariableImputationProcessor.transform",
        "transform",
        "load_model_artifacts",
        "preprocess_eval_data",
        "log_metrics_summary",
        "compute_metrics_binary",
        "compute_metrics_multiclass",
        "load_eval_data",
        "get_id_label_columns",
        "save_predictions",
        "save_metrics",
        "plot_and_save_roc_curve",
        "plot_and_save_pr_curve",
        "evaluate_model",
        "main",
        "__init__",
        "fit",
        "process",
        "transform",
        "__init__",
        "fit",
        "process",
        "transform",
        "StratifiedSampler.__init__",
        "__init__",
        "StratifiedSampler.sample",
        "sample",
        "StratifiedSampler._get_strata_info",
        "StratifiedSampler._balanced_allocation",
        "StratifiedSampler._proportional_with_min",
        "StratifiedSampler._optimal_allocation",
        "StratifiedSampler._perform_sampling",
        "main",
        "__init__",
        "sample",
        "OfflineBinning.__init__",
        "__init__",
        "OfflineBinning.fit",
        "fit",
        "OfflineBinning._create_risk_table",
        "OfflineBinning.transform",
        "transform",
        "OfflineBinning.load_risk_tables",
        "save_artifacts",
        "main",
        "__init__",
        "fit",
        "transform"
      ],
      "likely_untested_functions": [
        "XGBoostModelEvalStepBuilder.validate_configuration",
        "validate_configuration",
        "XGBoostModelEvalStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "XGBoostModelEvalStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "XGBoostModelStepBuilder.validate_configuration",
        "validate_configuration",
        "XGBoostModelStepBuilder._get_image_uri",
        "_get_image_uri",
        "XGBoostModelStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "validate_configuration",
        "_get_image_uri",
        "_get_environment_variables",
        "RiskTableMappingStepBuilder.validate_configuration",
        "validate_configuration",
        "RiskTableMappingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "RiskTableMappingStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "CurrencyConversionStepBuilder.validate_configuration",
        "validate_configuration",
        "CurrencyConversionStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "CurrencyConversionStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "DummyTrainingStepBuilder.validate_configuration",
        "validate_configuration",
        "DummyTrainingStepBuilder._get_processor",
        "_get_processor",
        "DummyTrainingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "DummyTrainingStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_processor",
        "_get_environment_variables",
        "_get_job_arguments",
        "StratifiedSamplingStepBuilder.validate_configuration",
        "validate_configuration",
        "StratifiedSamplingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "StratifiedSamplingStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "XGBoostTrainingStepBuilder.validate_configuration",
        "validate_configuration",
        "XGBoostTrainingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "XGBoostTrainingStepBuilder._create_data_channels_from_source",
        "_create_data_channels_from_source",
        "validate_configuration",
        "_get_environment_variables",
        "_create_data_channels_from_source",
        "TabularPreprocessingStepBuilder.validate_configuration",
        "validate_configuration",
        "TabularPreprocessingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "TabularPreprocessingStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "XGBoostModelInferenceStepBuilder.validate_configuration",
        "validate_configuration",
        "XGBoostModelInferenceStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "XGBoostModelInferenceStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "ModelMetricsComputationStepBuilder.validate_configuration",
        "validate_configuration",
        "ModelMetricsComputationStepBuilder._is_pipeline_variable",
        "_is_pipeline_variable",
        "ModelMetricsComputationStepBuilder._detect_circular_references",
        "_detect_circular_references",
        "ModelMetricsComputationStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "ModelMetricsComputationStepBuilder._get_processor",
        "_get_processor",
        "ModelMetricsComputationStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_is_pipeline_variable",
        "_detect_circular_references",
        "_get_environment_variables",
        "_get_processor",
        "_get_job_arguments",
        "ModelWikiGeneratorStepBuilder.validate_configuration",
        "validate_configuration",
        "ModelWikiGeneratorStepBuilder._is_pipeline_variable",
        "_is_pipeline_variable",
        "ModelWikiGeneratorStepBuilder._detect_circular_references",
        "_detect_circular_references",
        "ModelWikiGeneratorStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "ModelWikiGeneratorStepBuilder._get_processor",
        "_get_processor",
        "ModelWikiGeneratorStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_is_pipeline_variable",
        "_detect_circular_references",
        "_get_environment_variables",
        "_get_processor",
        "_get_job_arguments",
        "ModelCalibrationStepBuilder.validate_configuration",
        "validate_configuration",
        "ModelCalibrationStepBuilder._is_pipeline_variable",
        "_is_pipeline_variable",
        "ModelCalibrationStepBuilder._detect_circular_references",
        "_detect_circular_references",
        "ModelCalibrationStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "ModelCalibrationStepBuilder._get_processor",
        "_get_processor",
        "ModelCalibrationStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_is_pipeline_variable",
        "_detect_circular_references",
        "_get_environment_variables",
        "_get_processor",
        "_get_job_arguments",
        "RegistrationStepBuilder.validate_configuration",
        "validate_configuration",
        "validate_configuration",
        "PackageStepBuilder.validate_configuration",
        "validate_configuration",
        "PackageStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "PackageStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "S3PathHandler.parse_uri",
        "parse_uri",
        "S3PathHandler.normalize",
        "normalize",
        "S3PathHandler.join",
        "join",
        "S3PathHandler.get_parent",
        "get_parent",
        "S3PathHandler.get_name",
        "get_name",
        "S3PathHandler.is_valid",
        "is_valid",
        "parse_uri",
        "normalize",
        "join",
        "get_parent",
        "get_name",
        "is_valid",
        "MissingValueImputationStepBuilder.validate_configuration",
        "validate_configuration",
        "MissingValueImputationStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "MissingValueImputationStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "PayloadStepBuilder.validate_configuration",
        "validate_configuration",
        "PayloadStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "PayloadStepBuilder._get_job_arguments",
        "_get_job_arguments",
        "validate_configuration",
        "_get_environment_variables",
        "_get_job_arguments",
        "CradleDataLoadingStepBuilder.validate_configuration",
        "validate_configuration",
        "CradleDataLoadingStepBuilder.get_output_location",
        "get_output_location",
        "CradleDataLoadingStepBuilder.get_step_outputs",
        "get_step_outputs",
        "validate_configuration",
        "get_output_location",
        "get_step_outputs",
        "BatchTransformStepBuilder.validate_configuration",
        "validate_configuration",
        "BatchTransformStepBuilder._create_transformer",
        "_create_transformer",
        "validate_configuration",
        "_create_transformer",
        "PyTorchTrainingStepBuilder.validate_configuration",
        "validate_configuration",
        "PyTorchTrainingStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "PyTorchTrainingStepBuilder._get_metric_definitions",
        "_get_metric_definitions",
        "PyTorchTrainingStepBuilder._create_profiler_config",
        "_create_profiler_config",
        "PyTorchTrainingStepBuilder._create_data_channel_from_source",
        "_create_data_channel_from_source",
        "validate_configuration",
        "_get_environment_variables",
        "_get_metric_definitions",
        "_create_profiler_config",
        "_create_data_channel_from_source",
        "PyTorchModelStepBuilder.validate_configuration",
        "validate_configuration",
        "PyTorchModelStepBuilder._get_image_uri",
        "_get_image_uri",
        "PyTorchModelStepBuilder._get_environment_variables",
        "_get_environment_variables",
        "validate_configuration",
        "_get_image_uri",
        "_get_environment_variables",
        "_get_missing_value_imputation_contract",
        "_get_model_wiki_generator_contract",
        "_get_currency_conversion_contract",
        "_get_model_calibration_contract",
        "_get_tabular_preprocess_contract",
        "_get_tabular_preprocess_contract",
        "_get_mims_registration_contract",
        "_get_model_evaluation_contract",
        "_get_risk_table_mapping_contract",
        "_get_stratified_sampling_contract",
        "_get_missing_value_imputation_contract",
        "_get_dummy_training_contract",
        "_get_missing_value_imputation_contract",
        "_get_model_calibration_contract",
        "_get_currency_conversion_contract",
        "_get_tabular_preprocess_contract",
        "_get_payload_contract",
        "_get_currency_conversion_contract",
        "_get_model_calibration_contract",
        "_get_stratified_sampling_contract",
        "_get_tabular_preprocess_contract",
        "_get_xgboost_train_contract",
        "_get_risk_table_mapping_contract",
        "_get_missing_value_imputation_contract",
        "_get_tabular_preprocess_contract",
        "_get_missing_value_imputation_contract",
        "_get_cradle_data_loading_contract",
        "_get_model_calibration_contract",
        "_get_model_inference_contract",
        "_get_pytorch_train_contract",
        "_get_stratified_sampling_contract",
        "_get_package_contract",
        "_get_risk_table_mapping_contract",
        "_get_stratified_sampling_contract",
        "_get_model_metrics_computation_contract",
        "_get_model_calibration_contract",
        "_get_risk_table_mapping_contract",
        "_get_stratified_sampling_contract",
        "_get_currency_conversion_contract",
        "_get_currency_conversion_contract",
        "TrainingScriptContract.validate_entry_point",
        "validate_entry_point",
        "TrainingScriptContract.validate_input_paths",
        "validate_input_paths",
        "TrainingScriptContract.validate_output_paths",
        "validate_output_paths",
        "TrainingScriptContract.validate_implementation",
        "validate_implementation",
        "TrainingScriptContract._validate_against_analysis",
        "_validate_against_analysis",
        "TrainingScriptAnalyzer.get_input_paths",
        "get_input_paths",
        "TrainingScriptAnalyzer.get_output_paths",
        "get_output_paths",
        "validate_entry_point",
        "validate_input_paths",
        "validate_output_paths",
        "validate_implementation",
        "_validate_against_analysis",
        "get_input_paths",
        "get_output_paths",
        "ScriptContractValidator.validate_script",
        "validate_script",
        "ScriptContractValidator._analyze_io_gaps",
        "_analyze_io_gaps",
        "ScriptContractValidator.validate_all_scripts",
        "validate_all_scripts",
        "ScriptContractValidator.generate_compliance_summary",
        "generate_compliance_summary",
        "validate_script",
        "_analyze_io_gaps",
        "validate_all_scripts",
        "generate_compliance_summary",
        "ModelWikiGeneratorConfig.model_display_name",
        "model_display_name",
        "ModelWikiGeneratorConfig.output_formats_list",
        "output_formats_list",
        "ModelWikiGeneratorConfig.effective_model_description",
        "effective_model_description",
        "ModelWikiGeneratorConfig.validate_output_formats",
        "validate_output_formats",
        "ModelWikiGeneratorConfig.validate_cti_classification",
        "validate_cti_classification",
        "ModelWikiGeneratorConfig.validate_model_name",
        "validate_model_name",
        "ModelWikiGeneratorConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "ModelWikiGeneratorConfig.validate_wiki_generator_config",
        "validate_wiki_generator_config",
        "ModelWikiGeneratorConfig.get_environment_variables",
        "get_environment_variables",
        "ModelWikiGeneratorConfig.model_dump",
        "model_dump",
        "ModelWikiGeneratorConfig.get_public_init_fields",
        "get_public_init_fields",
        "model_display_name",
        "output_formats_list",
        "effective_model_description",
        "validate_output_formats",
        "validate_cti_classification",
        "validate_model_name",
        "initialize_derived_fields",
        "validate_wiki_generator_config",
        "get_environment_variables",
        "model_dump",
        "get_public_init_fields",
        "PayloadConfig.serialize_path_fields",
        "serialize_path_fields",
        "PayloadConfig.validate_input_variable_list",
        "validate_input_variable_list",
        "PayloadConfig.validate_output_variable_list",
        "validate_output_variable_list",
        "PayloadConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "PayloadConfig.validate_special_fields",
        "validate_special_fields",
        "PayloadConfig.get_normalized_input_variables",
        "get_normalized_input_variables",
        "PayloadConfig.get_input_variables_as_dict",
        "get_input_variables_as_dict",
        "serialize_path_fields",
        "validate_input_variable_list",
        "validate_output_variable_list",
        "initialize_derived_fields",
        "validate_special_fields",
        "get_normalized_input_variables",
        "get_input_variables_as_dict",
        "get_flattened_fields",
        "BaseCradleComponentConfig.categorize_fields",
        "categorize_fields",
        "BaseCradleComponentConfig.get_public_init_fields",
        "get_public_init_fields",
        "MdsDataSourceConfig.validate_region",
        "validate_region",
        "EdxDataSourceConfig.edx_manifest",
        "edx_manifest",
        "EdxDataSourceConfig.validate_manifest_key_format",
        "validate_manifest_key_format",
        "EdxDataSourceConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "AndesDataSourceConfig.validate_provider",
        "validate_provider",
        "AndesDataSourceConfig.validate_table_name",
        "validate_table_name",
        "AndesDataSourceConfig.__str__",
        "__str__",
        "DataSourceConfig.validate_type",
        "validate_type",
        "DataSourceConfig.check_properties",
        "check_properties",
        "DataSourcesSpecificationConfig.validate_exact_datetime_format",
        "validate_exact_datetime_format",
        "JobSplitOptionsConfig.days_must_be_positive",
        "days_must_be_positive",
        "JobSplitOptionsConfig.require_merge_sql_if_split",
        "require_merge_sql_if_split",
        "OutputSpecificationConfig.output_path",
        "output_path",
        "OutputSpecificationConfig.validate_output_path",
        "validate_output_path",
        "OutputSpecificationConfig.validate_format",
        "validate_format",
        "OutputSpecificationConfig.validate_save_mode",
        "validate_save_mode",
        "CradleJobSpecificationConfig.validate_cluster_type",
        "validate_cluster_type",
        "CradleDataLoadConfig.validate_job_type",
        "validate_job_type",
        "CradleDataLoadConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "CradleDataLoadConfig.categorize_fields",
        "categorize_fields",
        "CradleDataLoadConfig.get_all_tiered_fields",
        "get_all_tiered_fields",
        "CradleDataLoadConfig.check_split_and_override",
        "check_split_and_override",
        "categorize_fields",
        "get_public_init_fields",
        "validate_region",
        "edx_manifest",
        "validate_manifest_key_format",
        "initialize_derived_fields",
        "validate_provider",
        "validate_table_name",
        "__str__",
        "validate_type",
        "check_properties",
        "validate_exact_datetime_format",
        "days_must_be_positive",
        "require_merge_sql_if_split",
        "output_path",
        "validate_output_path",
        "validate_format",
        "validate_save_mode",
        "validate_cluster_type",
        "validate_job_type",
        "initialize_derived_fields",
        "categorize_fields",
        "get_all_tiered_fields",
        "check_split_and_override",
        "ModelMetricsComputationConfig.validate_input_format",
        "validate_input_format",
        "ModelMetricsComputationConfig.validate_probability_range",
        "validate_probability_range",
        "ModelMetricsComputationConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "ModelMetricsComputationConfig.validate_metrics_computation_config",
        "validate_metrics_computation_config",
        "ModelMetricsComputationConfig.get_environment_variables",
        "get_environment_variables",
        "ModelMetricsComputationConfig.get_public_init_fields",
        "get_public_init_fields",
        "validate_input_format",
        "validate_probability_range",
        "initialize_derived_fields",
        "validate_metrics_computation_config",
        "get_environment_variables",
        "get_public_init_fields",
        "XGBoostModelEvalConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "XGBoostModelEvalConfig.validate_eval_config",
        "validate_eval_config",
        "XGBoostModelEvalConfig.get_environment_variables",
        "get_environment_variables",
        "XGBoostModelEvalConfig.get_public_init_fields",
        "get_public_init_fields",
        "initialize_derived_fields",
        "validate_eval_config",
        "get_environment_variables",
        "get_public_init_fields",
        "RiskTableMappingConfig.validate_job_type",
        "validate_job_type",
        "RiskTableMappingConfig.validate_risk_table_config",
        "validate_risk_table_config",
        "validate_job_type",
        "validate_risk_table_config",
        "ModelCalibrationConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "ModelCalibrationConfig.from_hyperparameters",
        "from_hyperparameters",
        "ModelCalibrationConfig.get_environment_variables",
        "get_environment_variables",
        "ModelCalibrationConfig.get_public_init_fields",
        "get_public_init_fields",
        "initialize_derived_fields",
        "from_hyperparameters",
        "get_environment_variables",
        "get_public_init_fields",
        "PyTorchTrainingConfig.validate_field_lists",
        "validate_field_lists",
        "PyTorchTrainingConfig._validate_sagemaker_training_instance_type",
        "_validate_sagemaker_training_instance_type",
        "validate_field_lists",
        "_validate_sagemaker_training_instance_type",
        "TabularPreprocessingConfig.full_script_path",
        "full_script_path",
        "TabularPreprocessingConfig.validate_label_name",
        "validate_label_name",
        "TabularPreprocessingConfig.validate_entry_point_relative",
        "validate_entry_point_relative",
        "TabularPreprocessingConfig.validate_data_type",
        "validate_data_type",
        "TabularPreprocessingConfig.validate_ratios",
        "validate_ratios",
        "TabularPreprocessingConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "TabularPreprocessingConfig.get_public_init_fields",
        "get_public_init_fields",
        "TabularPreprocessingConfig.model_dump",
        "model_dump",
        "full_script_path",
        "validate_label_name",
        "validate_entry_point_relative",
        "validate_data_type",
        "validate_ratios",
        "initialize_derived_fields",
        "get_public_init_fields",
        "model_dump",
        "VariableType.__str__",
        "__str__",
        "create_inference_variable_list",
        "RegistrationConfig.serialize_output_variable_list",
        "serialize_output_variable_list",
        "RegistrationConfig.serialize_input_variable_list",
        "serialize_input_variable_list",
        "RegistrationConfig.validate_inference_instance_type",
        "validate_inference_instance_type",
        "RegistrationConfig.validate_framework",
        "validate_framework",
        "RegistrationConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "RegistrationConfig.validate_registration_configs",
        "validate_registration_configs",
        "RegistrationConfig.validate_content_types",
        "validate_content_types",
        "RegistrationConfig.validate_input_variable_list",
        "validate_input_variable_list",
        "RegistrationConfig.validate_output_variable_list",
        "validate_output_variable_list",
        "RegistrationConfig.variable_schema",
        "variable_schema",
        "RegistrationConfig.get_variable_schema",
        "get_variable_schema",
        "RegistrationConfig.model_dump",
        "model_dump",
        "RegistrationConfig.set_source_model_inference_input_variable_list",
        "set_source_model_inference_input_variable_list",
        "__str__",
        "serialize_output_variable_list",
        "serialize_input_variable_list",
        "validate_inference_instance_type",
        "validate_framework",
        "initialize_derived_fields",
        "validate_registration_configs",
        "validate_content_types",
        "validate_input_variable_list",
        "validate_output_variable_list",
        "variable_schema",
        "get_variable_schema",
        "model_dump",
        "set_source_model_inference_input_variable_list",
        "PyTorchModelStepConfig.validate_configuration",
        "validate_configuration",
        "PyTorchModelStepConfig._validate_memory_constraints",
        "_validate_memory_constraints",
        "PyTorchModelStepConfig._validate_timeouts",
        "_validate_timeouts",
        "PyTorchModelStepConfig._validate_entry_point",
        "_validate_entry_point",
        "PyTorchModelStepConfig.validate_memory_limits",
        "validate_memory_limits",
        "PyTorchModelStepConfig._validate_sagemaker_inference_instance_type",
        "_validate_sagemaker_inference_instance_type",
        "PyTorchModelStepConfig.get_model_name",
        "get_model_name",
        "PyTorchModelStepConfig.get_endpoint_config_name",
        "get_endpoint_config_name",
        "PyTorchModelStepConfig.get_endpoint_name",
        "get_endpoint_name",
        "validate_configuration",
        "_validate_memory_constraints",
        "_validate_timeouts",
        "_validate_entry_point",
        "validate_memory_limits",
        "_validate_sagemaker_inference_instance_type",
        "get_model_name",
        "get_endpoint_config_name",
        "get_endpoint_name",
        "MissingValueImputationConfig.environment_variables",
        "environment_variables",
        "MissingValueImputationConfig.effective_exclude_columns",
        "effective_exclude_columns",
        "MissingValueImputationConfig.validate_label_field",
        "validate_label_field",
        "MissingValueImputationConfig.validate_entry_point_relative",
        "validate_entry_point_relative",
        "MissingValueImputationConfig.validate_job_type",
        "validate_job_type",
        "MissingValueImputationConfig.validate_numerical_strategy",
        "validate_numerical_strategy",
        "MissingValueImputationConfig.validate_categorical_strategy",
        "validate_categorical_strategy",
        "MissingValueImputationConfig.validate_text_strategy",
        "validate_text_strategy",
        "MissingValueImputationConfig.validate_text_fill_values",
        "validate_text_fill_values",
        "MissingValueImputationConfig.validate_exclude_columns",
        "validate_exclude_columns",
        "MissingValueImputationConfig.validate_column_strategies",
        "validate_column_strategies",
        "MissingValueImputationConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "MissingValueImputationConfig.get_public_init_fields",
        "get_public_init_fields",
        "MissingValueImputationConfig.model_dump",
        "model_dump",
        "environment_variables",
        "effective_exclude_columns",
        "validate_label_field",
        "validate_entry_point_relative",
        "validate_job_type",
        "validate_numerical_strategy",
        "validate_categorical_strategy",
        "validate_text_strategy",
        "validate_text_fill_values",
        "validate_exclude_columns",
        "validate_column_strategies",
        "initialize_derived_fields",
        "get_public_init_fields",
        "model_dump",
        "XGBoostTrainingConfig.hyperparameter_file",
        "hyperparameter_file",
        "XGBoostTrainingConfig.model_dump",
        "model_dump",
        "XGBoostTrainingConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "XGBoostTrainingConfig.validate_hyperparameter_fields",
        "validate_hyperparameter_fields",
        "XGBoostTrainingConfig._validate_sagemaker_xgboost_instance_type",
        "_validate_sagemaker_xgboost_instance_type",
        "XGBoostTrainingConfig.get_public_init_fields",
        "get_public_init_fields",
        "XGBoostTrainingConfig.to_hyperparameter_dict",
        "to_hyperparameter_dict",
        "hyperparameter_file",
        "model_dump",
        "initialize_derived_fields",
        "validate_hyperparameter_fields",
        "_validate_sagemaker_xgboost_instance_type",
        "get_public_init_fields",
        "to_hyperparameter_dict",
        "XGBoostModelStepConfig.validate_configuration",
        "validate_configuration",
        "XGBoostModelStepConfig._validate_memory_constraints",
        "_validate_memory_constraints",
        "XGBoostModelStepConfig._validate_timeouts",
        "_validate_timeouts",
        "XGBoostModelStepConfig._validate_entry_point",
        "_validate_entry_point",
        "XGBoostModelStepConfig._validate_framework_version",
        "_validate_framework_version",
        "XGBoostModelStepConfig.validate_memory_limits",
        "validate_memory_limits",
        "XGBoostModelStepConfig._validate_sagemaker_inference_instance_type",
        "_validate_sagemaker_inference_instance_type",
        "XGBoostModelStepConfig.get_model_name",
        "get_model_name",
        "XGBoostModelStepConfig.get_endpoint_config_name",
        "get_endpoint_config_name",
        "XGBoostModelStepConfig.get_endpoint_name",
        "get_endpoint_name",
        "validate_configuration",
        "_validate_memory_constraints",
        "_validate_timeouts",
        "_validate_entry_point",
        "_validate_framework_version",
        "validate_memory_limits",
        "_validate_sagemaker_inference_instance_type",
        "get_model_name",
        "get_endpoint_config_name",
        "get_endpoint_name",
        "XGBoostModelInferenceConfig.validate_output_format",
        "validate_output_format",
        "XGBoostModelInferenceConfig.validate_json_orient",
        "validate_json_orient",
        "XGBoostModelInferenceConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "XGBoostModelInferenceConfig.validate_inference_config",
        "validate_inference_config",
        "XGBoostModelInferenceConfig.get_environment_variables",
        "get_environment_variables",
        "XGBoostModelInferenceConfig.get_public_init_fields",
        "get_public_init_fields",
        "validate_output_format",
        "validate_json_orient",
        "initialize_derived_fields",
        "validate_inference_config",
        "get_environment_variables",
        "get_public_init_fields",
        "serialize_config",
        "verify_configs",
        "merge_and_save_configs",
        "load_configs",
        "_extract_project_id_from_file",
        "get_field_sources",
        "build_complete_config_classes",
        "_legacy_build_complete_config_classes",
        "detect_config_classes_from_json",
        "StratifiedSamplingConfig.validate_strata_column",
        "validate_strata_column",
        "StratifiedSamplingConfig.validate_entry_point_relative",
        "validate_entry_point_relative",
        "StratifiedSamplingConfig.validate_job_type",
        "validate_job_type",
        "StratifiedSamplingConfig.validate_sampling_strategy",
        "validate_sampling_strategy",
        "StratifiedSamplingConfig.validate_variance_column",
        "validate_variance_column",
        "StratifiedSamplingConfig.validate_strategy_requirements",
        "validate_strategy_requirements",
        "StratifiedSamplingConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "StratifiedSamplingConfig.get_public_init_fields",
        "get_public_init_fields",
        "validate_strata_column",
        "validate_entry_point_relative",
        "validate_job_type",
        "validate_sampling_strategy",
        "validate_variance_column",
        "validate_strategy_requirements",
        "initialize_derived_fields",
        "get_public_init_fields",
        "ProcessingStepConfigBase.effective_instance_type",
        "effective_instance_type",
        "ProcessingStepConfigBase.resolved_processing_source_dir",
        "resolved_processing_source_dir",
        "ProcessingStepConfigBase.get_resolved_script_path",
        "get_resolved_script_path",
        "ProcessingStepConfigBase.model_dump",
        "model_dump",
        "ProcessingStepConfigBase.validate_processing_source_dir",
        "validate_processing_source_dir",
        "ProcessingStepConfigBase.validate_entry_point_is_relative",
        "validate_entry_point_is_relative",
        "ProcessingStepConfigBase.validate_framework_version",
        "validate_framework_version",
        "ProcessingStepConfigBase.initialize_derived_fields",
        "initialize_derived_fields",
        "ProcessingStepConfigBase.validate_entry_point_paths",
        "validate_entry_point_paths",
        "ProcessingStepConfigBase.get_effective_source_dir",
        "get_effective_source_dir",
        "ProcessingStepConfigBase.get_instance_type",
        "get_instance_type",
        "ProcessingStepConfigBase.get_public_init_fields",
        "get_public_init_fields",
        "effective_instance_type",
        "resolved_processing_source_dir",
        "get_resolved_script_path",
        "model_dump",
        "validate_processing_source_dir",
        "validate_entry_point_is_relative",
        "validate_framework_version",
        "initialize_derived_fields",
        "validate_entry_point_paths",
        "get_effective_source_dir",
        "get_instance_type",
        "get_public_init_fields",
        "CurrencyConversionConfig._validate_job_type",
        "_validate_job_type",
        "CurrencyConversionConfig._validate_dict",
        "_validate_dict",
        "CurrencyConversionConfig._validate_vars",
        "_validate_vars",
        "CurrencyConversionConfig.validate_entry_point_relative",
        "validate_entry_point_relative",
        "_validate_job_type",
        "_validate_dict",
        "_validate_vars",
        "validate_entry_point_relative",
        "BatchTransformStepConfig._validate_job_type",
        "_validate_job_type",
        "BatchTransformStepConfig._validate_instance_type",
        "_validate_instance_type",
        "_validate_job_type",
        "_validate_instance_type",
        "check_file_exists",
        "list_directory_contents",
        "copy_scripts",
        "load_split_data",
        "save_output_data",
        "analyze_missing_values",
        "validate_imputation_data",
        "load_imputation_config",
        "get_pandas_na_values",
        "validate_text_fill_value",
        "detect_column_type",
        "ImputationStrategyManager.get_strategy_for_column",
        "get_strategy_for_column",
        "ImputationStrategyManager._create_strategy_from_name",
        "_create_strategy_from_name",
        "ImputationStrategyManager._create_numerical_strategy",
        "_create_numerical_strategy",
        "ImputationStrategyManager._create_categorical_strategy",
        "_create_categorical_strategy",
        "ImputationStrategyManager._create_text_strategy",
        "_create_text_strategy",
        "SimpleImputationEngine.fit_transform",
        "fit_transform",
        "SimpleImputationEngine.get_imputation_summary",
        "get_imputation_summary",
        "save_imputation_artifacts",
        "load_imputation_parameters",
        "process_data",
        "generate_imputation_report",
        "calculate_imputation_quality_metrics",
        "generate_imputation_recommendations",
        "generate_imputation_text_summary",
        "internal_main",
        "get_strategy_for_column",
        "_create_strategy_from_name",
        "_create_numerical_strategy",
        "_create_categorical_strategy",
        "_create_text_strategy",
        "fit_transform",
        "get_imputation_summary",
        "setup_logging",
        "save_preds_and_metrics",
        "plot_curves",
        "evaluate_split",
        "RiskTableMappingProcessor.get_name",
        "get_name",
        "RiskTableMappingProcessor._validate_risk_tables",
        "_validate_risk_tables",
        "RiskTableMappingProcessor.set_risk_tables",
        "set_risk_tables",
        "RiskTableMappingProcessor.get_risk_tables",
        "get_risk_tables",
        "NumericalVariableImputationProcessor.get_name",
        "get_name",
        "NumericalVariableImputationProcessor.__call__",
        "__call__",
        "NumericalVariableImputationProcessor._validate_imputation_dict",
        "_validate_imputation_dict",
        "NumericalVariableImputationProcessor.get_params",
        "get_params",
        "preprocess_inference_data",
        "generate_predictions",
        "create_health_check_file",
        "get_name",
        "_validate_risk_tables",
        "set_risk_tables",
        "get_risk_tables",
        "get_name",
        "__call__",
        "_validate_imputation_dict",
        "get_params",
        "apply_conversion",
        "log_once",
        "model_post_init",
        "safe_cast",
        "sanitize_config",
        "load_parse_hyperparameters",
        "load_data_module",
        "data_preprocess_pipeline",
        "build_categorical_label_pipelines",
        "model_select",
        "setup_training_environment",
        "load_and_preprocess_data",
        "build_model_and_optimizer",
        "export_model_to_onnx",
        "evaluate_and_log_results",
        "model_post_init",
        "_is_gzipped",
        "_detect_separator_from_sample",
        "_read_json_file",
        "_read_file_to_df",
        "log_section",
        "extract_and_load_nested_tarball_data",
        "load_and_prepare_data",
        "detect_and_load_predictions",
        "validate_prediction_data",
        "compute_standard_metrics",
        "calculate_count_recall",
        "calculate_dollar_recall",
        "compute_domain_metrics",
        "generate_performance_visualizations",
        "generate_performance_insights",
        "generate_comprehensive_report",
        "generate_text_summary",
        "create_health_check_file",
        "find_model_file",
        "find_hyperparams_file",
        "_load_section_templates",
        "_get_header_template",
        "_get_summary_template",
        "_get_performance_section_template",
        "_get_business_impact_section_template",
        "_get_recommendations_section_template",
        "_get_technical_details_section_template",
        "_build_comprehensive_context",
        "_generate_derived_content",
        "_generate_visualization_sections",
        "_generate_optional_sections",
        "_save_wiki_format",
        "_save_html_format",
        "_save_markdown_format",
        "_convert_wiki_to_html",
        "_convert_wiki_to_markdown",
        "_convert_wiki_tables_to_html",
        "_convert_wiki_tables_to_markdown",
        "create_health_check_file",
        "_load_section_templates",
        "_get_header_template",
        "_get_summary_template",
        "_get_performance_section_template",
        "_get_business_impact_section_template",
        "_get_recommendations_section_template",
        "_get_technical_details_section_template",
        "_build_comprehensive_context",
        "_generate_derived_content",
        "_generate_visualization_sections",
        "_generate_optional_sections",
        "_save_wiki_format",
        "_save_html_format",
        "_save_markdown_format",
        "_convert_wiki_to_html",
        "_convert_wiki_to_markdown",
        "_convert_wiki_tables_to_html",
        "_convert_wiki_tables_to_markdown",
        "create_payload_archive",
        "RiskTableMappingProcessor.get_name",
        "get_name",
        "RiskTableMappingProcessor._validate_risk_tables",
        "_validate_risk_tables",
        "RiskTableMappingProcessor.set_risk_tables",
        "set_risk_tables",
        "RiskTableMappingProcessor.get_risk_tables",
        "get_risk_tables",
        "NumericalVariableImputationProcessor.get_name",
        "get_name",
        "NumericalVariableImputationProcessor.__call__",
        "__call__",
        "NumericalVariableImputationProcessor._validate_imputation_dict",
        "_validate_imputation_dict",
        "NumericalVariableImputationProcessor.get_params",
        "get_params",
        "create_health_check_file",
        "get_name",
        "_validate_risk_tables",
        "set_risk_tables",
        "get_risk_tables",
        "get_name",
        "__call__",
        "_validate_imputation_dict",
        "get_params",
        "_get_strata_info",
        "_balanced_allocation",
        "_proportional_with_min",
        "_optimal_allocation",
        "_perform_sampling",
        "_read_processed_data",
        "_save_sampled_data",
        "_get_strata_info",
        "_balanced_allocation",
        "_proportional_with_min",
        "_optimal_allocation",
        "_perform_sampling",
        "load_json_config",
        "validate_categorical_fields",
        "_create_risk_table",
        "load_risk_tables",
        "load_split_data",
        "save_output_data",
        "process_data",
        "load_risk_tables",
        "internal_main",
        "_create_risk_table",
        "load_risk_tables",
        "BSMModelHyperparameters.model_config_dict",
        "model_config_dict",
        "BSMModelHyperparameters.tokenizer_config",
        "tokenizer_config",
        "BSMModelHyperparameters.validate_bsm_hyperparameters",
        "validate_bsm_hyperparameters",
        "BSMModelHyperparameters.get_public_init_fields",
        "get_public_init_fields",
        "BSMModelHyperparameters.get_trainer_config",
        "get_trainer_config",
        "model_config_dict",
        "tokenizer_config",
        "validate_bsm_hyperparameters",
        "get_public_init_fields",
        "get_trainer_config",
        "XGBoostModelHyperparameters.objective",
        "objective",
        "XGBoostModelHyperparameters.eval_metric",
        "eval_metric",
        "XGBoostModelHyperparameters.validate_xgboost_hyperparameters",
        "validate_xgboost_hyperparameters",
        "XGBoostModelHyperparameters.get_public_init_fields",
        "get_public_init_fields",
        "objective",
        "eval_metric",
        "validate_xgboost_hyperparameters",
        "get_public_init_fields"
      ]
    },
    "validation": {
      "component": "validation",
      "description": "Validation framework and alignment testing",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "validation/builders/universal_test.py",
        "validation/runtime/runtime_models.py",
        "validation/runtime/runtime_testing.py",
        "validation/runtime/runtime_inference.py",
        "validation/runtime/logical_name_matching.py",
        "validation/runtime/workspace_aware_spec_builder.py",
        "validation/runtime/runtime_spec_builder.py",
        "validation/utils/import_resolver.py",
        "validation/shared/chart_utils.py",
        "validation/alignment/unified_alignment_tester.py",
        "validation/builders/reporting/scoring.py",
        "validation/builders/reporting/builder_reporter.py",
        "validation/alignment/reporting/validation_reporter.py",
        "validation/alignment/core/script_contract_alignment.py",
        "validation/alignment/core/level_validators.py",
        "validation/alignment/core/spec_dependency_alignment.py",
        "validation/alignment/core/level3_validation_config.py",
        "validation/alignment/core/contract_spec_alignment.py",
        "validation/alignment/config/step_type_specific_rules.py",
        "validation/alignment/config/universal_builder_rules.py",
        "validation/alignment/config/validation_ruleset.py",
        "validation/alignment/utils/validation_models.py",
        "validation/alignment/utils/utils.py",
        "validation/alignment/validators/dependency_validator.py",
        "validation/alignment/validators/processing_step_validator.py",
        "validation/alignment/validators/training_step_validator.py",
        "validation/alignment/validators/step_type_specific_validator.py",
        "validation/alignment/validators/transform_step_validator.py",
        "validation/alignment/validators/property_path_validator.py",
        "validation/alignment/validators/contract_spec_validator.py",
        "validation/alignment/validators/method_interface_validator.py",
        "validation/alignment/validators/validator_factory.py",
        "validation/alignment/validators/createmodel_step_validator.py",
        "validation/alignment/analyzer/script_analyzer.py"
      ],
      "test_files": [
        "validation/test_unified_alignment_tester.py",
        "validation/test_step_type_enhancement_system.py",
        "validation/test_simple_integration.py",
        "validation/builders/test_universal_test.py",
        "validation/runtime/test_workspace_aware_spec_builder.py",
        "validation/runtime/test_inference_testing.py",
        "validation/runtime/test_step_catalog_integration.py",
        "validation/runtime/test_runtime_spec_builder.py",
        "validation/runtime/test_contract_discovery.py",
        "validation/runtime/test_logical_name_matching.py",
        "validation/runtime/test_runtime_testing.py",
        "validation/runtime/test_runtime_models.py",
        "validation/runtime/test_inference_integration.py",
        "validation/shared/test_chart_utils.py",
        "validation/alignment/test_unified_alignment_tester_refactored.py",
        "validation/builders/reporting/test_scoring.py",
        "validation/builders/reporting/test_builder_reporter.py",
        "validation/alignment/reporting/test_validation_reporter.py",
        "validation/alignment/core/test_contract_spec_alignment.py",
        "validation/alignment/core/test_level_validators.py",
        "validation/alignment/core/test_script_contract_alignment.py",
        "validation/alignment/core/test_spec_dependency_alignment.py",
        "validation/alignment/config/test_validation_ruleset.py",
        "validation/alignment/config/test_configuration_system.py",
        "validation/alignment/config/test_step_type_specific_rules.py",
        "validation/alignment/config/test_universal_builder_rules.py",
        "validation/alignment/utils/test_utils.py",
        "validation/alignment/utils/test_validation_models.py",
        "validation/alignment/validators/test_createmodel_step_validator.py",
        "validation/alignment/validators/test_property_path_validator.py",
        "validation/alignment/validators/test_method_interface_validation.py",
        "validation/alignment/validators/test_training_step_validator.py",
        "validation/alignment/validators/test_validator_factory.py",
        "validation/alignment/validators/test_step_type_specific_validator.py",
        "validation/alignment/validators/test_processing_step_validator.py",
        "validation/alignment/validators/test_contract_spec_validator.py",
        "validation/alignment/validators/test_transform_step_validator.py",
        "validation/alignment/analyzer/test_script_analyzer.py"
      ],
      "total_source_functions": 1373,
      "tested_functions": 865,
      "untested_functions": 508,
      "coverage_percentage": 63.00072833211945,
      "total_source_lines": 17828,
      "total_test_lines": 20634,
      "test_to_source_ratio": 2.5914056809905315,
      "source_functions_by_file": {
        "validation/builders/universal_test.py": [
          "UniversalStepBuilderTest.__init__",
          "__init__",
          "UniversalStepBuilderTest.run_all_tests",
          "run_all_tests",
          "UniversalStepBuilderTest.run_validation_for_step",
          "run_validation_for_step",
          "UniversalStepBuilderTest._run_comprehensive_validation_for_step",
          "_run_comprehensive_validation_for_step",
          "UniversalStepBuilderTest._run_alignment_validation",
          "_run_alignment_validation",
          "UniversalStepBuilderTest._run_fallback_core_validation",
          "_run_fallback_core_validation",
          "UniversalStepBuilderTest._test_integration_capabilities",
          "_test_integration_capabilities",
          "UniversalStepBuilderTest._check_dependency_resolution",
          "_check_dependency_resolution",
          "UniversalStepBuilderTest._check_cache_configuration",
          "_check_cache_configuration",
          "UniversalStepBuilderTest._check_step_instantiation",
          "_check_step_instantiation",
          "UniversalStepBuilderTest._check_config_class_exists",
          "_check_config_class_exists",
          "UniversalStepBuilderTest._check_config_import",
          "_check_config_import",
          "UniversalStepBuilderTest._check_input_output_methods",
          "_check_input_output_methods",
          "UniversalStepBuilderTest._check_sagemaker_methods",
          "_check_sagemaker_methods",
          "UniversalStepBuilderTest._test_step_creation_capability",
          "_test_step_creation_capability",
          "UniversalStepBuilderTest._check_config_availability",
          "_check_config_availability",
          "UniversalStepBuilderTest._check_required_methods",
          "_check_required_methods",
          "UniversalStepBuilderTest._check_field_requirements",
          "_check_field_requirements",
          "UniversalStepBuilderTest._run_step_type_specific_validation",
          "_run_step_type_specific_validation",
          "UniversalStepBuilderTest._run_processing_tests",
          "_run_processing_tests",
          "UniversalStepBuilderTest._run_training_tests",
          "_run_training_tests",
          "UniversalStepBuilderTest._run_transform_tests",
          "_run_transform_tests",
          "UniversalStepBuilderTest._run_create_model_tests",
          "_run_create_model_tests",
          "UniversalStepBuilderTest._run_register_model_tests",
          "_run_register_model_tests",
          "UniversalStepBuilderTest.run_full_validation",
          "run_full_validation",
          "UniversalStepBuilderTest._discover_all_steps",
          "_discover_all_steps",
          "UniversalStepBuilderTest._calculate_scoring",
          "_calculate_scoring",
          "UniversalStepBuilderTest._calculate_basic_scoring",
          "_calculate_basic_scoring",
          "UniversalStepBuilderTest.generate_report",
          "generate_report",
          "UniversalStepBuilderTest._get_builder_class_from_catalog",
          "_get_builder_class_from_catalog",
          "UniversalStepBuilderTest._create_minimal_config",
          "_create_minimal_config",
          "UniversalStepBuilderTest._determine_overall_status",
          "_determine_overall_status",
          "UniversalStepBuilderTest._generate_validation_summary",
          "_generate_validation_summary",
          "UniversalStepBuilderTest._infer_step_name",
          "_infer_step_name",
          "UniversalStepBuilderTest._find_step_name_with_catalog",
          "_find_step_name_with_catalog",
          "UniversalStepBuilderTest._find_step_name_legacy",
          "_find_step_name_legacy",
          "UniversalStepBuilderTest._extract_base_name",
          "_extract_base_name",
          "UniversalStepBuilderTest.run_all_tests_legacy",
          "run_all_tests_legacy",
          "UniversalStepBuilderTest.run_all_tests_with_scoring",
          "run_all_tests_with_scoring",
          "UniversalStepBuilderTest.run_all_tests_with_full_report",
          "run_all_tests_with_full_report",
          "UniversalStepBuilderTest.export_results_to_json",
          "export_results_to_json",
          "UniversalStepBuilderTest.from_builder_class",
          "from_builder_class",
          "UniversalStepBuilderTest.test_all_builders_by_type",
          "test_all_builders_by_type",
          "UniversalStepBuilderTest._report_consolidated_results",
          "_report_consolidated_results",
          "UniversalStepBuilderTest._report_consolidated_results_with_scoring",
          "_report_consolidated_results_with_scoring",
          "UniversalStepBuilderTest._generate_structured_report",
          "_generate_structured_report",
          "UniversalStepBuilderTest.validate_specific_script",
          "validate_specific_script",
          "UniversalStepBuilderTest.discover_scripts",
          "discover_scripts",
          "UniversalStepBuilderTest.get_validation_summary",
          "get_validation_summary",
          "UniversalStepBuilderTest.print_summary",
          "print_summary",
          "TestUniversalStepBuilder.test_refactored_initialization",
          "test_refactored_initialization",
          "TestUniversalStepBuilder.test_backward_compatibility_methods",
          "test_backward_compatibility_methods",
          "TestUniversalStepBuilder.test_from_builder_class_method",
          "test_from_builder_class_method",
          "__init__",
          "run_all_tests",
          "run_validation_for_step",
          "_run_comprehensive_validation_for_step",
          "_run_alignment_validation",
          "_run_fallback_core_validation",
          "_test_integration_capabilities",
          "_check_dependency_resolution",
          "_check_cache_configuration",
          "_check_step_instantiation",
          "_check_config_class_exists",
          "_check_config_import",
          "_check_input_output_methods",
          "_check_sagemaker_methods",
          "_test_step_creation_capability",
          "_check_config_availability",
          "_check_required_methods",
          "_check_field_requirements",
          "_run_step_type_specific_validation",
          "_run_processing_tests",
          "_run_training_tests",
          "_run_transform_tests",
          "_run_create_model_tests",
          "_run_register_model_tests",
          "run_full_validation",
          "_discover_all_steps",
          "_calculate_scoring",
          "_calculate_basic_scoring",
          "generate_report",
          "_get_builder_class_from_catalog",
          "_create_minimal_config",
          "_determine_overall_status",
          "_generate_validation_summary",
          "_infer_step_name",
          "_find_step_name_with_catalog",
          "_find_step_name_legacy",
          "_extract_base_name",
          "run_all_tests_legacy",
          "run_all_tests_with_scoring",
          "run_all_tests_with_full_report",
          "export_results_to_json",
          "from_builder_class",
          "test_all_builders_by_type",
          "_report_consolidated_results",
          "_report_consolidated_results_with_scoring",
          "_generate_structured_report",
          "validate_specific_script",
          "discover_scripts",
          "get_validation_summary",
          "print_summary",
          "test_refactored_initialization",
          "test_backward_compatibility_methods",
          "test_from_builder_class_method",
          "MockBuilder.validate_configuration",
          "validate_configuration",
          "MockBuilder.create_step",
          "create_step",
          "MockBuilder.validate_configuration",
          "validate_configuration",
          "MockBuilder.create_step",
          "create_step",
          "validate_configuration",
          "create_step",
          "validate_configuration",
          "create_step"
        ],
        "validation/runtime/runtime_models.py": [
          "ScriptExecutionSpec.save_to_file",
          "save_to_file",
          "ScriptExecutionSpec.load_from_file",
          "load_from_file",
          "ScriptExecutionSpec.create_default",
          "create_default",
          "PipelineTestingSpec.has_enhanced_specs",
          "has_enhanced_specs",
          "PipelineTestingSpec.get_enhanced_specs",
          "get_enhanced_specs",
          "PipelineTestingSpec.get_basic_specs",
          "get_basic_specs",
          "RuntimeTestingConfiguration.model_post_init",
          "model_post_init",
          "save_to_file",
          "load_from_file",
          "create_default",
          "has_enhanced_specs",
          "get_enhanced_specs",
          "get_basic_specs",
          "model_post_init"
        ],
        "validation/runtime/runtime_testing.py": [
          "RuntimeTester.__init__",
          "__init__",
          "RuntimeTester._initialize_step_catalog",
          "_initialize_step_catalog",
          "RuntimeTester._detect_framework_if_needed",
          "_detect_framework_if_needed",
          "RuntimeTester._validate_builder_consistency_if_available",
          "_validate_builder_consistency_if_available",
          "RuntimeTester._discover_pipeline_components_if_needed",
          "_discover_pipeline_components_if_needed",
          "RuntimeTester.test_script_with_step_catalog_enhancements",
          "test_script_with_step_catalog_enhancements",
          "RuntimeTester.test_data_compatibility_with_step_catalog_enhancements",
          "test_data_compatibility_with_step_catalog_enhancements",
          "RuntimeTester.test_pipeline_flow_with_step_catalog_enhancements",
          "test_pipeline_flow_with_step_catalog_enhancements",
          "RuntimeTester._test_contract_aware_compatibility",
          "_test_contract_aware_compatibility",
          "RuntimeTester._are_contract_specs_compatible",
          "_are_contract_specs_compatible",
          "RuntimeTester._test_contract_data_flow",
          "_test_contract_data_flow",
          "RuntimeTester.test_script_with_spec",
          "test_script_with_spec",
          "RuntimeTester.test_data_compatibility_with_specs",
          "test_data_compatibility_with_specs",
          "RuntimeTester._test_data_compatibility_with_semantic_matching",
          "_test_data_compatibility_with_semantic_matching",
          "RuntimeTester._find_semantic_path_matches",
          "_find_semantic_path_matches",
          "RuntimeTester._find_simple_path_matches",
          "_find_simple_path_matches",
          "RuntimeTester._test_data_compatibility_with_logical_matching",
          "_test_data_compatibility_with_logical_matching",
          "RuntimeTester.test_pipeline_flow_with_spec",
          "test_pipeline_flow_with_spec",
          "RuntimeTester._test_pipeline_flow_with_topological_ordering",
          "_test_pipeline_flow_with_topological_ordering",
          "RuntimeTester._test_pipeline_flow_original",
          "_test_pipeline_flow_original",
          "RuntimeTester._find_script_path",
          "_find_script_path",
          "RuntimeTester._is_temp_or_system_file",
          "_is_temp_or_system_file",
          "RuntimeTester._find_valid_output_files",
          "_find_valid_output_files",
          "RuntimeTester.test_inference_function",
          "test_inference_function",
          "RuntimeTester.test_inference_pipeline",
          "test_inference_pipeline",
          "RuntimeTester.test_script_to_inference_compatibility",
          "test_script_to_inference_compatibility",
          "RuntimeTester.test_pipeline_with_inference",
          "test_pipeline_with_inference",
          "RuntimeTester._extract_packaged_model",
          "_extract_packaged_model",
          "RuntimeTester._load_handler_module",
          "_load_handler_module",
          "RuntimeTester._load_payload_samples",
          "_load_payload_samples",
          "RuntimeTester._cleanup_extraction_directory",
          "_cleanup_extraction_directory",
          "RuntimeTester._validate_function_result",
          "_validate_function_result",
          "RuntimeTester._create_modified_spec_with_matches",
          "_create_modified_spec_with_matches",
          "RuntimeTester._generate_matching_report",
          "_generate_matching_report",
          "RuntimeTester._detect_file_format",
          "_detect_file_format",
          "RuntimeTester.test_data_compatibility_with_logical_matching",
          "test_data_compatibility_with_logical_matching",
          "RuntimeTester.test_pipeline_flow_with_topological_execution",
          "test_pipeline_flow_with_topological_execution",
          "RuntimeTester.get_path_matches",
          "get_path_matches",
          "RuntimeTester.generate_matching_report",
          "generate_matching_report",
          "RuntimeTester.validate_pipeline_logical_names",
          "validate_pipeline_logical_names",
          "RuntimeTester._convert_to_enhanced_spec",
          "_convert_to_enhanced_spec",
          "RuntimeTester._convert_from_enhanced_spec",
          "_convert_from_enhanced_spec",
          "RuntimeTester._generate_default_input_aliases",
          "_generate_default_input_aliases",
          "RuntimeTester._generate_default_output_aliases",
          "_generate_default_output_aliases",
          "__init__",
          "_initialize_step_catalog",
          "_detect_framework_if_needed",
          "_validate_builder_consistency_if_available",
          "_discover_pipeline_components_if_needed",
          "test_script_with_step_catalog_enhancements",
          "test_data_compatibility_with_step_catalog_enhancements",
          "test_pipeline_flow_with_step_catalog_enhancements",
          "_test_contract_aware_compatibility",
          "_are_contract_specs_compatible",
          "_test_contract_data_flow",
          "test_script_with_spec",
          "test_data_compatibility_with_specs",
          "_test_data_compatibility_with_semantic_matching",
          "_find_semantic_path_matches",
          "_find_simple_path_matches",
          "_test_data_compatibility_with_logical_matching",
          "test_pipeline_flow_with_spec",
          "_test_pipeline_flow_with_topological_ordering",
          "_test_pipeline_flow_original",
          "_find_script_path",
          "_is_temp_or_system_file",
          "_find_valid_output_files",
          "test_inference_function",
          "test_inference_pipeline",
          "test_script_to_inference_compatibility",
          "test_pipeline_with_inference",
          "_extract_packaged_model",
          "_load_handler_module",
          "_load_payload_samples",
          "_cleanup_extraction_directory",
          "_validate_function_result",
          "_create_modified_spec_with_matches",
          "_generate_matching_report",
          "_detect_file_format",
          "test_data_compatibility_with_logical_matching",
          "test_pipeline_flow_with_topological_execution",
          "get_path_matches",
          "generate_matching_report",
          "validate_pipeline_logical_names",
          "_convert_to_enhanced_spec",
          "_convert_from_enhanced_spec",
          "_generate_default_input_aliases",
          "_generate_default_output_aliases",
          "script_tester_func"
        ],
        "validation/runtime/runtime_inference.py": [
          "InferenceHandlerSpec.serialize_datetime_fields",
          "serialize_datetime_fields",
          "InferenceHandlerSpec.validate_configuration",
          "validate_configuration",
          "InferenceHandlerSpec.is_valid",
          "is_valid",
          "InferenceHandlerSpec.get_packaged_model_path",
          "get_packaged_model_path",
          "InferenceHandlerSpec.get_payload_samples_path",
          "get_payload_samples_path",
          "InferenceHandlerSpec.get_extraction_root_path",
          "get_extraction_root_path",
          "InferenceHandlerSpec.get_inference_code_path",
          "get_inference_code_path",
          "InferenceHandlerSpec.get_handler_file_path",
          "get_handler_file_path",
          "InferenceHandlerSpec.create_default",
          "create_default",
          "InferenceTestResult.serialize_datetime_fields",
          "serialize_datetime_fields",
          "InferenceTestResult.get_overall_success_rate",
          "get_overall_success_rate",
          "InferencePipelineTestingSpec.add_inference_handler",
          "add_inference_handler",
          "InferencePipelineTestingSpec.has_inference_handlers",
          "has_inference_handlers",
          "InferencePipelineTestingSpec.get_inference_handler_names",
          "get_inference_handler_names",
          "InferencePipelineTestingSpec.get_mixed_step_types",
          "get_mixed_step_types",
          "InferencePipelineTestingSpec.validate_mixed_pipeline",
          "validate_mixed_pipeline",
          "InferencePipelineTestingSpec.is_valid_mixed_pipeline",
          "is_valid_mixed_pipeline",
          "serialize_datetime_fields",
          "validate_configuration",
          "is_valid",
          "get_packaged_model_path",
          "get_payload_samples_path",
          "get_extraction_root_path",
          "get_inference_code_path",
          "get_handler_file_path",
          "create_default",
          "serialize_datetime_fields",
          "get_overall_success_rate",
          "add_inference_handler",
          "has_inference_handlers",
          "get_inference_handler_names",
          "get_mixed_step_types",
          "validate_mixed_pipeline",
          "is_valid_mixed_pipeline"
        ],
        "validation/runtime/logical_name_matching.py": [
          "PathSpec.matches_name_or_alias",
          "matches_name_or_alias",
          "EnhancedScriptExecutionSpec.model_post_init",
          "model_post_init",
          "EnhancedScriptExecutionSpec.from_script_execution_spec",
          "from_script_execution_spec",
          "PathMatcher.__init__",
          "__init__",
          "PathMatcher.find_path_matches",
          "find_path_matches",
          "PathMatcher._find_best_alias_match",
          "_find_best_alias_match",
          "PathMatcher.generate_matching_report",
          "generate_matching_report",
          "TopologicalExecutor.__init__",
          "__init__",
          "TopologicalExecutor.get_execution_order",
          "get_execution_order",
          "TopologicalExecutor.validate_dag_structure",
          "validate_dag_structure",
          "LogicalNameMatchingTester.__init__",
          "__init__",
          "LogicalNameMatchingTester.test_data_compatibility_with_logical_matching",
          "test_data_compatibility_with_logical_matching",
          "LogicalNameMatchingTester._create_file_mapping",
          "_create_file_mapping",
          "LogicalNameMatchingTester._find_best_file_for_logical_name",
          "_find_best_file_for_logical_name",
          "LogicalNameMatchingTester._detect_primary_format",
          "_detect_primary_format",
          "LogicalNameMatchingTester.test_pipeline_with_topological_execution",
          "test_pipeline_with_topological_execution",
          "matches_name_or_alias",
          "model_post_init",
          "from_script_execution_spec",
          "__init__",
          "find_path_matches",
          "_find_best_alias_match",
          "generate_matching_report",
          "__init__",
          "get_execution_order",
          "validate_dag_structure",
          "__init__",
          "test_data_compatibility_with_logical_matching",
          "_create_file_mapping",
          "_find_best_file_for_logical_name",
          "_detect_primary_format",
          "test_pipeline_with_topological_execution"
        ],
        "validation/runtime/workspace_aware_spec_builder.py": [
          "WorkspaceAwarePipelineTestingSpecBuilder.__init__",
          "__init__",
          "WorkspaceAwarePipelineTestingSpecBuilder._find_actual_script_file",
          "_find_actual_script_file",
          "WorkspaceAwarePipelineTestingSpecBuilder._find_in_workspace",
          "_find_in_workspace",
          "WorkspaceAwarePipelineTestingSpecBuilder._get_fallback_workspace_dirs",
          "_get_fallback_workspace_dirs",
          "WorkspaceAwarePipelineTestingSpecBuilder.clear_workspace_cache",
          "clear_workspace_cache",
          "WorkspaceAwarePipelineTestingSpecBuilder.get_workspace_discovery_status",
          "get_workspace_discovery_status",
          "WorkspaceAwarePipelineTestingSpecBuilder.configure_workspace_discovery",
          "configure_workspace_discovery",
          "WorkspaceAwarePipelineTestingSpecBuilder.discover_available_scripts",
          "discover_available_scripts",
          "WorkspaceAwarePipelineTestingSpecBuilder.validate_workspace_setup",
          "validate_workspace_setup",
          "__init__",
          "_find_actual_script_file",
          "_find_in_workspace",
          "_get_fallback_workspace_dirs",
          "clear_workspace_cache",
          "get_workspace_discovery_status",
          "configure_workspace_discovery",
          "discover_available_scripts",
          "validate_workspace_setup"
        ],
        "validation/runtime/runtime_spec_builder.py": [
          "PipelineTestingSpecBuilder.__init__",
          "__init__",
          "PipelineTestingSpecBuilder._initialize_step_catalog",
          "_initialize_step_catalog",
          "PipelineTestingSpecBuilder._resolve_script_with_step_catalog_if_available",
          "_resolve_script_with_step_catalog_if_available",
          "PipelineTestingSpecBuilder._get_contract_aware_paths_if_available",
          "_get_contract_aware_paths_if_available",
          "PipelineTestingSpecBuilder.build_from_dag",
          "build_from_dag",
          "PipelineTestingSpecBuilder._load_or_create_script_spec",
          "_load_or_create_script_spec",
          "PipelineTestingSpecBuilder.save_script_spec",
          "save_script_spec",
          "PipelineTestingSpecBuilder.update_script_spec",
          "update_script_spec",
          "PipelineTestingSpecBuilder.list_saved_specs",
          "list_saved_specs",
          "PipelineTestingSpecBuilder.get_script_spec_by_name",
          "get_script_spec_by_name",
          "PipelineTestingSpecBuilder.match_step_to_spec",
          "match_step_to_spec",
          "PipelineTestingSpecBuilder._is_spec_complete",
          "_is_spec_complete",
          "PipelineTestingSpecBuilder._validate_specs_completeness",
          "_validate_specs_completeness",
          "PipelineTestingSpecBuilder.update_script_spec_interactive",
          "update_script_spec_interactive",
          "PipelineTestingSpecBuilder.get_script_main_params",
          "get_script_main_params",
          "PipelineTestingSpecBuilder.resolve_script_execution_spec_from_node",
          "resolve_script_execution_spec_from_node",
          "PipelineTestingSpecBuilder._canonical_to_script_name",
          "_canonical_to_script_name",
          "PipelineTestingSpecBuilder._find_script_file",
          "_find_script_file",
          "PipelineTestingSpecBuilder._find_in_workspace",
          "_find_in_workspace",
          "PipelineTestingSpecBuilder._find_fuzzy_match",
          "_find_fuzzy_match",
          "PipelineTestingSpecBuilder._create_placeholder_script",
          "_create_placeholder_script",
          "PipelineTestingSpecBuilder._get_contract_aware_input_paths",
          "_get_contract_aware_input_paths",
          "PipelineTestingSpecBuilder._get_contract_aware_output_paths",
          "_get_contract_aware_output_paths",
          "PipelineTestingSpecBuilder._get_contract_aware_environ_vars",
          "_get_contract_aware_environ_vars",
          "PipelineTestingSpecBuilder._get_contract_aware_job_args",
          "_get_contract_aware_job_args",
          "PipelineTestingSpecBuilder._get_default_input_paths",
          "_get_default_input_paths",
          "PipelineTestingSpecBuilder._get_default_output_paths",
          "_get_default_output_paths",
          "PipelineTestingSpecBuilder._get_default_environ_vars",
          "_get_default_environ_vars",
          "PipelineTestingSpecBuilder._get_default_job_args",
          "_get_default_job_args",
          "__init__",
          "_initialize_step_catalog",
          "_resolve_script_with_step_catalog_if_available",
          "_get_contract_aware_paths_if_available",
          "build_from_dag",
          "_load_or_create_script_spec",
          "save_script_spec",
          "update_script_spec",
          "list_saved_specs",
          "get_script_spec_by_name",
          "match_step_to_spec",
          "_is_spec_complete",
          "_validate_specs_completeness",
          "update_script_spec_interactive",
          "get_script_main_params",
          "resolve_script_execution_spec_from_node",
          "_canonical_to_script_name",
          "_find_script_file",
          "_find_in_workspace",
          "_find_fuzzy_match",
          "_create_placeholder_script",
          "_get_contract_aware_input_paths",
          "_get_contract_aware_output_paths",
          "_get_contract_aware_environ_vars",
          "_get_contract_aware_job_args",
          "_get_default_input_paths",
          "_get_default_output_paths",
          "_get_default_environ_vars",
          "_get_default_job_args",
          "get_step_name_from_spec_type"
        ],
        "validation/utils/import_resolver.py": [
          "ImportResolver.ensure_cursus_imports",
          "ensure_cursus_imports",
          "ImportResolver._try_installed_import",
          "_try_installed_import",
          "ImportResolver._try_relative_import_pattern",
          "_try_relative_import_pattern",
          "ImportResolver._try_step_catalog_discovery",
          "_try_step_catalog_discovery",
          "ImportResolver._validate_cursus_structure_with_ast",
          "_validate_cursus_structure_with_ast",
          "ImportResolver._setup_development_imports",
          "_setup_development_imports",
          "ImportResolver._find_project_root",
          "_find_project_root",
          "ImportResolver._try_fallback_patterns",
          "_try_fallback_patterns",
          "ImportResolver.get_project_info",
          "get_project_info",
          "ImportResolver.reset",
          "reset",
          "ensure_cursus_imports",
          "get_project_info",
          "auto_setup_imports",
          "ensure_cursus_imports",
          "_try_installed_import",
          "_try_relative_import_pattern",
          "_try_step_catalog_discovery",
          "_validate_cursus_structure_with_ast",
          "_setup_development_imports",
          "_find_project_root",
          "_try_fallback_patterns",
          "get_project_info",
          "reset"
        ],
        "validation/shared/chart_utils.py": [
          "get_quality_color",
          "get_quality_rating",
          "create_score_bar_chart",
          "create_comparison_chart",
          "create_trend_chart",
          "create_quality_distribution_chart"
        ],
        "validation/alignment/unified_alignment_tester.py": [
          "UnifiedAlignmentTester.__init__",
          "__init__",
          "UnifiedAlignmentTester.run_full_validation",
          "run_full_validation",
          "UnifiedAlignmentTester.run_validation_for_step",
          "run_validation_for_step",
          "UnifiedAlignmentTester.run_validation_for_all_steps",
          "run_validation_for_all_steps",
          "UnifiedAlignmentTester._discover_all_steps",
          "_discover_all_steps",
          "UnifiedAlignmentTester._has_script_file",
          "_has_script_file",
          "UnifiedAlignmentTester._run_validation_level",
          "_run_validation_level",
          "UnifiedAlignmentTester._run_enabled_validation_levels",
          "_run_enabled_validation_levels",
          "UnifiedAlignmentTester._handle_excluded_step",
          "_handle_excluded_step",
          "UnifiedAlignmentTester.validate_specific_script",
          "validate_specific_script",
          "UnifiedAlignmentTester.discover_scripts",
          "discover_scripts",
          "UnifiedAlignmentTester.get_validation_summary",
          "get_validation_summary",
          "UnifiedAlignmentTester.export_report",
          "export_report",
          "UnifiedAlignmentTester.print_summary",
          "print_summary",
          "UnifiedAlignmentTester.get_critical_issues",
          "get_critical_issues",
          "UnifiedAlignmentTester.get_step_info_from_catalog",
          "get_step_info_from_catalog",
          "UnifiedAlignmentTester.get_component_path_from_catalog",
          "get_component_path_from_catalog",
          "UnifiedAlignmentTester.validate_cross_workspace_compatibility",
          "validate_cross_workspace_compatibility",
          "__init__",
          "run_full_validation",
          "run_validation_for_step",
          "run_validation_for_all_steps",
          "_discover_all_steps",
          "_has_script_file",
          "_run_validation_level",
          "_run_enabled_validation_levels",
          "_handle_excluded_step",
          "validate_specific_script",
          "discover_scripts",
          "get_validation_summary",
          "export_report",
          "print_summary",
          "get_critical_issues",
          "get_step_info_from_catalog",
          "get_component_path_from_catalog",
          "validate_cross_workspace_compatibility"
        ],
        "validation/builders/reporting/scoring.py": [
          "StreamlinedStepBuilderScorer.__init__",
          "__init__",
          "StreamlinedStepBuilderScorer.calculate_component_score",
          "calculate_component_score",
          "StreamlinedStepBuilderScorer._score_alignment_validation",
          "_score_alignment_validation",
          "StreamlinedStepBuilderScorer._score_integration_testing",
          "_score_integration_testing",
          "StreamlinedStepBuilderScorer._score_step_creation",
          "_score_step_creation",
          "StreamlinedStepBuilderScorer.calculate_overall_score",
          "calculate_overall_score",
          "StreamlinedStepBuilderScorer.get_rating",
          "get_rating",
          "StreamlinedStepBuilderScorer.generate_report",
          "generate_report",
          "StreamlinedStepBuilderScorer.save_report",
          "save_report",
          "StreamlinedStepBuilderScorer.print_report",
          "print_report",
          "score_builder_validation_results",
          "score_builder_results",
          "__init__",
          "calculate_component_score",
          "_score_alignment_validation",
          "_score_integration_testing",
          "_score_step_creation",
          "calculate_overall_score",
          "get_rating",
          "generate_report",
          "save_report",
          "print_report"
        ],
        "validation/builders/reporting/builder_reporter.py": [
          "StreamlinedBuilderTestReport.__init__",
          "__init__",
          "StreamlinedBuilderTestReport.add_alignment_results",
          "add_alignment_results",
          "StreamlinedBuilderTestReport.add_integration_results",
          "add_integration_results",
          "StreamlinedBuilderTestReport.add_scoring_data",
          "add_scoring_data",
          "StreamlinedBuilderTestReport.get_overall_status",
          "get_overall_status",
          "StreamlinedBuilderTestReport.get_quality_score",
          "get_quality_score",
          "StreamlinedBuilderTestReport.get_quality_rating",
          "get_quality_rating",
          "StreamlinedBuilderTestReport.is_passing",
          "is_passing",
          "StreamlinedBuilderTestReport.get_critical_issues",
          "get_critical_issues",
          "StreamlinedBuilderTestReport.export_to_json",
          "export_to_json",
          "StreamlinedBuilderTestReport.save_to_file",
          "save_to_file",
          "StreamlinedBuilderTestReport.print_summary",
          "print_summary",
          "StreamlinedBuilderTestReporter.__init__",
          "__init__",
          "StreamlinedBuilderTestReporter.test_and_report_builder",
          "test_and_report_builder",
          "StreamlinedBuilderTestReporter.test_and_save_builder_report",
          "test_and_save_builder_report",
          "StreamlinedBuilderTestReporter.test_step_type_builders",
          "test_step_type_builders",
          "StreamlinedBuilderTestReporter._infer_step_name",
          "_infer_step_name",
          "StreamlinedBuilderTestReporter._load_builder_class",
          "_load_builder_class",
          "StreamlinedBuilderTestReporter._generate_streamlined_step_type_summary",
          "_generate_streamlined_step_type_summary",
          "__init__",
          "add_alignment_results",
          "add_integration_results",
          "add_scoring_data",
          "get_overall_status",
          "get_quality_score",
          "get_quality_rating",
          "is_passing",
          "get_critical_issues",
          "export_to_json",
          "save_to_file",
          "print_summary",
          "__init__",
          "test_and_report_builder",
          "test_and_save_builder_report",
          "test_step_type_builders",
          "_infer_step_name",
          "_load_builder_class",
          "_generate_streamlined_step_type_summary"
        ],
        "validation/alignment/reporting/validation_reporter.py": [
          "ValidationReporter.__init__",
          "__init__",
          "ValidationReporter.add_result",
          "add_result",
          "ValidationReporter.add_results",
          "add_results",
          "ValidationReporter.generate_report",
          "generate_report",
          "ValidationReporter._generate_text_report",
          "_generate_text_report",
          "ValidationReporter._generate_json_report",
          "_generate_json_report",
          "ValidationReporter._generate_html_report",
          "_generate_html_report",
          "ValidationReporter._format_result_text",
          "_format_result_text",
          "ValidationReporter._generate_issue_breakdown",
          "_generate_issue_breakdown",
          "ValidationReporter._generate_recommendations",
          "_generate_recommendations",
          "ValidationReporter._generate_html_summary",
          "_generate_html_summary",
          "ValidationReporter._generate_html_results",
          "_generate_html_results",
          "ValidationReporter._get_html_styles",
          "_get_html_styles",
          "ValidationReporter._should_include_result",
          "_should_include_result",
          "ValidationReporter._colorize",
          "_colorize",
          "ValidationReporter._get_status_color",
          "_get_status_color",
          "ValidationReporter._get_status_symbol",
          "_get_status_symbol",
          "ValidationReporter._get_issue_color",
          "_get_issue_color",
          "ValidationReporter.calculate_score",
          "calculate_score",
          "ValidationReporter.print_summary",
          "print_summary",
          "ValidationReporter.export_to_json",
          "export_to_json",
          "ValidationReporter.export_to_html",
          "export_to_html",
          "ValidationReporter.generate_console_report",
          "generate_console_report",
          "generate_quick_report",
          "print_validation_summary",
          "calculate_validation_scores",
          "__init__",
          "add_result",
          "add_results",
          "generate_report",
          "_generate_text_report",
          "_generate_json_report",
          "_generate_html_report",
          "_format_result_text",
          "_generate_issue_breakdown",
          "_generate_recommendations",
          "_generate_html_summary",
          "_generate_html_results",
          "_get_html_styles",
          "_should_include_result",
          "_colorize",
          "_get_status_color",
          "_get_status_symbol",
          "_get_issue_color",
          "calculate_score",
          "print_summary",
          "export_to_json",
          "export_to_html",
          "generate_console_report"
        ],
        "validation/alignment/core/script_contract_alignment.py": [
          "ScriptContractAlignmentTester.__init__",
          "__init__",
          "ScriptContractAlignmentTester.validate_all_scripts",
          "validate_all_scripts",
          "ScriptContractAlignmentTester.validate_script",
          "validate_script",
          "ScriptContractAlignmentTester._load_python_contract",
          "_load_python_contract",
          "ScriptContractAlignmentTester._resolve_logical_name_from_contract",
          "_resolve_logical_name_from_contract",
          "ScriptContractAlignmentTester._build_entry_point_mapping",
          "_build_entry_point_mapping",
          "ScriptContractAlignmentTester._discover_scripts",
          "_discover_scripts",
          "ScriptContractAlignmentTester._enhance_with_step_type_validation",
          "_enhance_with_step_type_validation",
          "ScriptContractAlignmentTester._validate_training_specific",
          "_validate_training_specific",
          "ScriptContractAlignmentTester._validate_xgboost_training_patterns",
          "_validate_xgboost_training_patterns",
          "ScriptContractAlignmentTester._validate_processing_framework_specific",
          "_validate_processing_framework_specific",
          "ScriptContractAlignmentTester.get_validation_summary",
          "get_validation_summary",
          "__init__",
          "validate_all_scripts",
          "validate_script",
          "_load_python_contract",
          "_resolve_logical_name_from_contract",
          "_build_entry_point_mapping",
          "_discover_scripts",
          "_enhance_with_step_type_validation",
          "_validate_training_specific",
          "_validate_xgboost_training_patterns",
          "_validate_processing_framework_specific",
          "get_validation_summary"
        ],
        "validation/alignment/core/level_validators.py": [
          "LevelValidators.__init__",
          "__init__",
          "LevelValidators.run_level_1_validation",
          "run_level_1_validation",
          "LevelValidators.run_level_2_validation",
          "run_level_2_validation",
          "LevelValidators.run_level_3_validation",
          "run_level_3_validation",
          "LevelValidators.run_level_4_validation",
          "run_level_4_validation",
          "LevelValidators._get_step_type_validator",
          "_get_step_type_validator",
          "LevelValidators.validate_level_configuration",
          "validate_level_configuration",
          "LevelValidators.get_available_levels",
          "get_available_levels",
          "__init__",
          "run_level_1_validation",
          "run_level_2_validation",
          "run_level_3_validation",
          "run_level_4_validation",
          "_get_step_type_validator",
          "validate_level_configuration",
          "get_available_levels"
        ],
        "validation/alignment/core/spec_dependency_alignment.py": [
          "SpecificationDependencyAlignmentTester.__init__",
          "__init__",
          "SpecificationDependencyAlignmentTester.validate_all_specifications",
          "validate_all_specifications",
          "SpecificationDependencyAlignmentTester._validate_all_specifications_fallback",
          "_validate_all_specifications_fallback",
          "SpecificationDependencyAlignmentTester.validate_specification",
          "validate_specification",
          "SpecificationDependencyAlignmentTester.validate_specification_object",
          "validate_specification_object",
          "SpecificationDependencyAlignmentTester._create_missing_spec_error",
          "_create_missing_spec_error",
          "SpecificationDependencyAlignmentTester._create_serialization_error",
          "_create_serialization_error",
          "SpecificationDependencyAlignmentTester._validate_dependency_resolution",
          "_validate_dependency_resolution",
          "SpecificationDependencyAlignmentTester._generate_compatibility_recommendation",
          "_generate_compatibility_recommendation",
          "SpecificationDependencyAlignmentTester._get_available_canonical_step_names",
          "_get_available_canonical_step_names",
          "SpecificationDependencyAlignmentTester._populate_resolver_registry",
          "_populate_resolver_registry",
          "SpecificationDependencyAlignmentTester._dict_to_step_specification",
          "_dict_to_step_specification",
          "SpecificationDependencyAlignmentTester.get_dependency_resolution_report",
          "get_dependency_resolution_report",
          "SpecificationDependencyAlignmentTester._is_compatible_output",
          "_is_compatible_output",
          "SpecificationDependencyAlignmentTester._validate_circular_dependencies",
          "_validate_circular_dependencies",
          "SpecificationDependencyAlignmentTester._validate_dependency_data_types",
          "_validate_dependency_data_types",
          "SpecificationDependencyAlignmentTester._load_all_specifications",
          "_load_all_specifications",
          "SpecificationDependencyAlignmentTester._load_all_specifications_legacy",
          "_load_all_specifications_legacy",
          "__init__",
          "validate_all_specifications",
          "_validate_all_specifications_fallback",
          "validate_specification",
          "validate_specification_object",
          "_create_missing_spec_error",
          "_create_serialization_error",
          "_validate_dependency_resolution",
          "_generate_compatibility_recommendation",
          "_get_available_canonical_step_names",
          "_populate_resolver_registry",
          "_dict_to_step_specification",
          "get_dependency_resolution_report",
          "_is_compatible_output",
          "_validate_circular_dependencies",
          "_validate_dependency_data_types",
          "_load_all_specifications",
          "_load_all_specifications_legacy"
        ],
        "validation/alignment/core/level3_validation_config.py": [
          "Level3ValidationConfig.__init__",
          "__init__",
          "Level3ValidationConfig.determine_severity_from_score",
          "determine_severity_from_score",
          "Level3ValidationConfig.should_pass_validation",
          "should_pass_validation",
          "Level3ValidationConfig.get_threshold_description",
          "get_threshold_description",
          "Level3ValidationConfig._get_mode_description",
          "_get_mode_description",
          "Level3ValidationConfig.create_strict_config",
          "create_strict_config",
          "Level3ValidationConfig.create_relaxed_config",
          "create_relaxed_config",
          "Level3ValidationConfig.create_permissive_config",
          "create_permissive_config",
          "Level3ValidationConfig.create_custom_config",
          "create_custom_config",
          "__init__",
          "determine_severity_from_score",
          "should_pass_validation",
          "get_threshold_description",
          "_get_mode_description",
          "create_strict_config",
          "create_relaxed_config",
          "create_permissive_config",
          "create_custom_config"
        ],
        "validation/alignment/core/contract_spec_alignment.py": [
          "ContractSpecificationAlignmentTester.__init__",
          "__init__",
          "ContractSpecificationAlignmentTester.validate_all_contracts",
          "validate_all_contracts",
          "ContractSpecificationAlignmentTester.validate_contract",
          "validate_contract",
          "ContractSpecificationAlignmentTester._discover_contracts_with_scripts",
          "_discover_contracts_with_scripts",
          "ContractSpecificationAlignmentTester._contract_to_dict",
          "_contract_to_dict",
          "ContractSpecificationAlignmentTester._find_specifications_by_contract",
          "_find_specifications_by_contract",
          "ContractSpecificationAlignmentTester._validate_property_paths",
          "_validate_property_paths",
          "__init__",
          "validate_all_contracts",
          "validate_contract",
          "_discover_contracts_with_scripts",
          "_contract_to_dict",
          "_find_specifications_by_contract",
          "_validate_property_paths"
        ],
        "validation/alignment/config/step_type_specific_rules.py": [
          "get_step_type_validation_rules",
          "get_validation_rules_for_step_type",
          "get_required_methods_for_step_type",
          "get_optional_methods_for_step_type",
          "get_all_methods_for_step_type",
          "get_step_types_by_category",
          "is_step_type_excluded",
          "get_step_type_category",
          "validate_step_type_compliance",
          "get_validation_summary"
        ],
        "validation/alignment/config/universal_builder_rules.py": [
          "get_universal_validation_rules",
          "get_required_methods",
          "get_inherited_methods",
          "get_validation_rules",
          "validate_universal_compliance"
        ],
        "validation/alignment/config/validation_ruleset.py": [
          "get_validation_ruleset",
          "is_validation_level_enabled",
          "get_enabled_validation_levels",
          "get_level_4_validator_class",
          "is_step_type_excluded",
          "get_step_types_by_category",
          "get_all_step_types",
          "validate_step_type_configuration",
          "get_validation_ruleset_for_step_name",
          "is_validation_level_enabled_for_step_name",
          "get_enabled_validation_levels_for_step_name",
          "is_step_name_excluded"
        ],
        "validation/alignment/utils/validation_models.py": [
          "ValidationIssue.to_dict",
          "to_dict",
          "ValidationResult.__post_init__",
          "__post_init__",
          "ValidationResult.error_count",
          "error_count",
          "ValidationResult.warning_count",
          "warning_count",
          "ValidationResult.info_count",
          "info_count",
          "ValidationResult.total_issues",
          "total_issues",
          "ValidationResult.add_issue",
          "add_issue",
          "ValidationResult.to_dict",
          "to_dict",
          "MethodValidationInfo.__post_init__",
          "__post_init__",
          "StepValidationContext.__post_init__",
          "__post_init__",
          "ValidationSummary.__init__",
          "__init__",
          "ValidationSummary.add_result",
          "add_result",
          "ValidationSummary.success_rate",
          "success_rate",
          "ValidationSummary.to_dict",
          "to_dict",
          "create_validation_issue",
          "create_validation_result",
          "merge_validation_results",
          "filter_issues_by_level",
          "group_issues_by_method",
          "format_validation_summary",
          "to_dict",
          "__post_init__",
          "error_count",
          "warning_count",
          "info_count",
          "total_issues",
          "add_issue",
          "to_dict",
          "__post_init__",
          "__post_init__",
          "__init__",
          "add_result",
          "success_rate",
          "to_dict"
        ],
        "validation/alignment/utils/utils.py": [
          "normalize_path",
          "extract_logical_name_from_path",
          "is_sagemaker_path",
          "format_alignment_issue",
          "group_issues_by_severity",
          "get_highest_severity",
          "validate_environment_setup",
          "get_validation_summary_stats"
        ],
        "validation/alignment/validators/dependency_validator.py": [
          "DependencyValidator.__init__",
          "__init__",
          "DependencyValidator.validate_dependency_resolution",
          "validate_dependency_resolution",
          "DependencyValidator.validate_circular_dependencies",
          "validate_circular_dependencies",
          "DependencyValidator.validate_dependency_data_types",
          "validate_dependency_data_types",
          "DependencyValidator.get_dependency_resolution_report",
          "get_dependency_resolution_report",
          "DependencyValidator._generate_compatibility_recommendation",
          "_generate_compatibility_recommendation",
          "DependencyValidator._get_available_canonical_step_names",
          "_get_available_canonical_step_names",
          "DependencyValidator._get_canonical_step_name",
          "_get_canonical_step_name",
          "DependencyValidator._populate_resolver_registry",
          "_populate_resolver_registry",
          "DependencyValidator._dict_to_step_specification",
          "_dict_to_step_specification",
          "__init__",
          "validate_dependency_resolution",
          "validate_circular_dependencies",
          "validate_dependency_data_types",
          "get_dependency_resolution_report",
          "_generate_compatibility_recommendation",
          "_get_available_canonical_step_names",
          "_get_canonical_step_name",
          "_populate_resolver_registry",
          "_dict_to_step_specification",
          "has_cycle"
        ],
        "validation/alignment/validators/processing_step_validator.py": [
          "ProcessingStepBuilderValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "ProcessingStepBuilderValidator._validate_create_processor_method",
          "_validate_create_processor_method",
          "ProcessingStepBuilderValidator._validate_processing_outputs",
          "_validate_processing_outputs",
          "ProcessingStepBuilderValidator._validate_processing_input_output_handling",
          "_validate_processing_input_output_handling",
          "ProcessingStepBuilderValidator._validate_job_arguments_override",
          "_validate_job_arguments_override",
          "ProcessingStepBuilderValidator.validate_processing_step_patterns",
          "validate_processing_step_patterns",
          "ProcessingStepBuilderValidator._validate_processor_creation_pattern",
          "_validate_processor_creation_pattern",
          "ProcessingStepBuilderValidator._validate_script_execution_pattern",
          "_validate_script_execution_pattern",
          "_validate_step_type_specifics",
          "_validate_create_processor_method",
          "_validate_processing_outputs",
          "_validate_processing_input_output_handling",
          "_validate_job_arguments_override",
          "validate_processing_step_patterns",
          "_validate_processor_creation_pattern",
          "_validate_script_execution_pattern"
        ],
        "validation/alignment/validators/training_step_validator.py": [
          "TrainingStepBuilderValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "TrainingStepBuilderValidator._validate_create_estimator_method",
          "_validate_create_estimator_method",
          "TrainingStepBuilderValidator._validate_training_outputs",
          "_validate_training_outputs",
          "TrainingStepBuilderValidator._validate_training_configuration",
          "_validate_training_configuration",
          "TrainingStepBuilderValidator._validate_estimator_type_patterns",
          "_validate_estimator_type_patterns",
          "TrainingStepBuilderValidator._validate_xgboost_patterns",
          "_validate_xgboost_patterns",
          "TrainingStepBuilderValidator._validate_pytorch_patterns",
          "_validate_pytorch_patterns",
          "TrainingStepBuilderValidator.validate_training_step_patterns",
          "validate_training_step_patterns",
          "TrainingStepBuilderValidator._validate_estimator_creation_pattern",
          "_validate_estimator_creation_pattern",
          "TrainingStepBuilderValidator._validate_training_job_configuration",
          "_validate_training_job_configuration",
          "_validate_step_type_specifics",
          "_validate_create_estimator_method",
          "_validate_training_outputs",
          "_validate_training_configuration",
          "_validate_estimator_type_patterns",
          "_validate_xgboost_patterns",
          "_validate_pytorch_patterns",
          "validate_training_step_patterns",
          "_validate_estimator_creation_pattern",
          "_validate_training_job_configuration"
        ],
        "validation/alignment/validators/step_type_specific_validator.py": [
          "StepTypeSpecificValidator.__init__",
          "__init__",
          "StepTypeSpecificValidator.validate_builder_config_alignment",
          "validate_builder_config_alignment",
          "StepTypeSpecificValidator._apply_universal_validation",
          "_apply_universal_validation",
          "StepTypeSpecificValidator._apply_step_specific_validation",
          "_apply_step_specific_validation",
          "StepTypeSpecificValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "StepTypeSpecificValidator._resolve_validation_priorities",
          "_resolve_validation_priorities",
          "StepTypeSpecificValidator._get_builder_class",
          "_get_builder_class",
          "StepTypeSpecificValidator._is_method_overridden",
          "_is_method_overridden",
          "StepTypeSpecificValidator._combine_validation_results",
          "_combine_validation_results",
          "__init__",
          "validate_builder_config_alignment",
          "_apply_universal_validation",
          "_apply_step_specific_validation",
          "_validate_step_type_specifics",
          "_resolve_validation_priorities",
          "_get_builder_class",
          "_is_method_overridden",
          "_combine_validation_results"
        ],
        "validation/alignment/validators/transform_step_validator.py": [
          "TransformStepBuilderValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "TransformStepBuilderValidator._validate_create_transformer_method",
          "_validate_create_transformer_method",
          "TransformStepBuilderValidator._validate_transform_outputs",
          "_validate_transform_outputs",
          "TransformStepBuilderValidator._validate_transform_configuration",
          "_validate_transform_configuration",
          "TransformStepBuilderValidator._validate_transformer_type_patterns",
          "_validate_transformer_type_patterns",
          "TransformStepBuilderValidator._validate_model_transformer_patterns",
          "_validate_model_transformer_patterns",
          "TransformStepBuilderValidator.validate_transform_step_patterns",
          "validate_transform_step_patterns",
          "TransformStepBuilderValidator._validate_transformer_creation_pattern",
          "_validate_transformer_creation_pattern",
          "TransformStepBuilderValidator._validate_batch_transform_configuration",
          "_validate_batch_transform_configuration",
          "_validate_step_type_specifics",
          "_validate_create_transformer_method",
          "_validate_transform_outputs",
          "_validate_transform_configuration",
          "_validate_transformer_type_patterns",
          "_validate_model_transformer_patterns",
          "validate_transform_step_patterns",
          "_validate_transformer_creation_pattern",
          "_validate_batch_transform_configuration"
        ],
        "validation/alignment/validators/property_path_validator.py": [
          "SageMakerPropertyPathValidator.__init__",
          "__init__",
          "SageMakerPropertyPathValidator.validate_specification_property_paths",
          "validate_specification_property_paths",
          "SageMakerPropertyPathValidator._get_valid_property_paths_for_step_type",
          "_get_valid_property_paths_for_step_type",
          "SageMakerPropertyPathValidator._validate_single_property_path",
          "_validate_single_property_path",
          "SageMakerPropertyPathValidator._matches_property_path_pattern",
          "_matches_property_path_pattern",
          "SageMakerPropertyPathValidator._get_property_path_suggestions",
          "_get_property_path_suggestions",
          "SageMakerPropertyPathValidator._calculate_path_similarity",
          "_calculate_path_similarity",
          "SageMakerPropertyPathValidator.get_step_type_documentation",
          "get_step_type_documentation",
          "SageMakerPropertyPathValidator.list_supported_step_types",
          "list_supported_step_types",
          "validate_property_paths",
          "__init__",
          "validate_specification_property_paths",
          "_get_valid_property_paths_for_step_type",
          "_validate_single_property_path",
          "_matches_property_path_pattern",
          "_get_property_path_suggestions",
          "_calculate_path_similarity",
          "get_step_type_documentation",
          "list_supported_step_types",
          "get_step_name_from_spec_type",
          "get_sagemaker_step_type",
          "validate_step_name"
        ],
        "validation/alignment/validators/contract_spec_validator.py": [
          "ConsolidatedContractSpecValidator.validate_logical_names",
          "validate_logical_names",
          "ConsolidatedContractSpecValidator.validate_input_output_alignment",
          "validate_input_output_alignment",
          "validate_logical_names",
          "validate_input_output_alignment"
        ],
        "validation/alignment/validators/method_interface_validator.py": [
          "ValidationIssue.__init__",
          "__init__",
          "ValidationIssue.to_dict",
          "to_dict",
          "MethodInterfaceValidator.__init__",
          "__init__",
          "MethodInterfaceValidator.validate_builder_interface",
          "validate_builder_interface",
          "MethodInterfaceValidator._validate_universal_methods",
          "_validate_universal_methods",
          "MethodInterfaceValidator._validate_step_type_methods",
          "_validate_step_type_methods",
          "MethodInterfaceValidator._validate_method_signature",
          "_validate_method_signature",
          "MethodInterfaceValidator._is_method_overridden",
          "_is_method_overridden",
          "MethodInterfaceValidator.validate_builder_by_name",
          "validate_builder_by_name",
          "MethodInterfaceValidator._get_builder_class",
          "_get_builder_class",
          "MethodInterfaceValidator.get_validation_summary",
          "get_validation_summary",
          "__init__",
          "to_dict",
          "__init__",
          "validate_builder_interface",
          "_validate_universal_methods",
          "_validate_step_type_methods",
          "_validate_method_signature",
          "_is_method_overridden",
          "validate_builder_by_name",
          "_get_builder_class",
          "get_validation_summary"
        ],
        "validation/alignment/validators/validator_factory.py": [
          "ValidatorFactory.__init__",
          "__init__",
          "ValidatorFactory.get_validator",
          "get_validator",
          "ValidatorFactory.get_validator_for_step_type",
          "get_validator_for_step_type",
          "ValidatorFactory.get_validator_for_step_name",
          "get_validator_for_step_name",
          "ValidatorFactory.validate_step_with_priority_system",
          "validate_step_with_priority_system",
          "ValidatorFactory.is_validator_available",
          "is_validator_available",
          "ValidatorFactory.get_validator_registry_status",
          "get_validator_registry_status",
          "ValidatorFactory.get_factory_health_status",
          "get_factory_health_status",
          "ValidatorFactory.get_factory_statistics",
          "get_factory_statistics",
          "ValidatorFactory.get_available_validators",
          "get_available_validators",
          "ValidatorFactory.get_available_validators_detailed",
          "get_available_validators_detailed",
          "ValidatorFactory.get_step_type_validator_mapping",
          "get_step_type_validator_mapping",
          "ValidatorFactory.validate_factory_configuration",
          "validate_factory_configuration",
          "ValidatorFactory.validate_factory_configuration_list",
          "validate_factory_configuration_list",
          "ValidatorFactory.get_validation_statistics",
          "get_validation_statistics",
          "StepTypeValidatorIntegration.__init__",
          "__init__",
          "StepTypeValidatorIntegration.validate_step_with_full_integration",
          "validate_step_with_full_integration",
          "StepTypeValidatorIntegration.validate_multiple_steps",
          "validate_multiple_steps",
          "StepTypeValidatorIntegration.get_integration_status",
          "get_integration_status",
          "__init__",
          "get_validator",
          "get_validator_for_step_type",
          "get_validator_for_step_name",
          "validate_step_with_priority_system",
          "is_validator_available",
          "get_validator_registry_status",
          "get_factory_health_status",
          "get_factory_statistics",
          "get_available_validators",
          "get_available_validators_detailed",
          "get_step_type_validator_mapping",
          "validate_factory_configuration",
          "validate_factory_configuration_list",
          "get_validation_statistics",
          "__init__",
          "validate_step_with_full_integration",
          "validate_multiple_steps",
          "get_integration_status"
        ],
        "validation/alignment/validators/createmodel_step_validator.py": [
          "CreateModelStepBuilderValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "CreateModelStepBuilderValidator._validate_create_model_method",
          "_validate_create_model_method",
          "CreateModelStepBuilderValidator._validate_createmodel_outputs",
          "_validate_createmodel_outputs",
          "CreateModelStepBuilderValidator._validate_model_configuration",
          "_validate_model_configuration",
          "CreateModelStepBuilderValidator._validate_image_uri_method",
          "_validate_image_uri_method",
          "CreateModelStepBuilderValidator.validate_createmodel_step_patterns",
          "validate_createmodel_step_patterns",
          "CreateModelStepBuilderValidator._validate_model_creation_pattern",
          "_validate_model_creation_pattern",
          "CreateModelStepBuilderValidator._validate_container_configuration",
          "_validate_container_configuration",
          "CreateModelStepBuilderValidator._validate_xgboost_model_patterns",
          "_validate_xgboost_model_patterns",
          "CreateModelStepBuilderValidator._validate_pytorch_model_patterns",
          "_validate_pytorch_model_patterns",
          "_validate_step_type_specifics",
          "_validate_create_model_method",
          "_validate_createmodel_outputs",
          "_validate_model_configuration",
          "_validate_image_uri_method",
          "validate_createmodel_step_patterns",
          "_validate_model_creation_pattern",
          "_validate_container_configuration",
          "_validate_xgboost_model_patterns",
          "_validate_pytorch_model_patterns"
        ],
        "validation/alignment/analyzer/script_analyzer.py": [
          "ScriptAnalyzer.__init__",
          "__init__",
          "ScriptAnalyzer._read_script",
          "_read_script",
          "ScriptAnalyzer._parse_script",
          "_parse_script",
          "ScriptAnalyzer.validate_main_function_signature",
          "validate_main_function_signature",
          "ScriptAnalyzer.extract_parameter_usage",
          "extract_parameter_usage",
          "ScriptAnalyzer.validate_contract_alignment",
          "validate_contract_alignment",
          "ScriptAnalyzer._find_main_function",
          "_find_main_function",
          "ScriptAnalyzer._extract_function_parameters",
          "_extract_function_parameters",
          "ScriptAnalyzer._validate_signature",
          "_validate_signature",
          "ScriptAnalyzer._get_signature_issues",
          "_get_signature_issues",
          "ScriptAnalyzer._find_parameter_usage",
          "_find_parameter_usage",
          "ScriptAnalyzer._collect_string_literals",
          "_collect_string_literals",
          "ScriptAnalyzer._find_keys_from_loops",
          "_find_keys_from_loops",
          "__init__",
          "_read_script",
          "_parse_script",
          "validate_main_function_signature",
          "extract_parameter_usage",
          "validate_contract_alignment",
          "_find_main_function",
          "_extract_function_parameters",
          "_validate_signature",
          "_get_signature_issues",
          "_find_parameter_usage",
          "_collect_string_literals",
          "_find_keys_from_loops"
        ]
      },
      "test_functions_by_file": {
        "validation/test_unified_alignment_tester.py": [
          "create_test_files",
          "test_unified_alignment_tester",
          "test_individual_levels"
        ],
        "validation/test_step_type_enhancement_system.py": [
          "TestStepTypeEnhancementRouter.router",
          "router",
          "TestStepTypeEnhancementRouter.test_router_initialization",
          "test_router_initialization",
          "TestStepTypeEnhancementRouter.test_step_type_detection",
          "test_step_type_detection",
          "TestStepTypeEnhancementRouter.test_enhancement_routing",
          "test_enhancement_routing",
          "TestStepTypeEnhancementRouter.test_unknown_step_type_handling",
          "test_unknown_step_type_handling",
          "TestTrainingStepEnhancer.enhancer",
          "enhancer",
          "TestTrainingStepEnhancer.test_training_enhancer_initialization",
          "test_training_enhancer_initialization",
          "TestTrainingStepEnhancer.test_training_loop_validation",
          "test_training_loop_validation",
          "TestTrainingStepEnhancer.test_xgboost_specific_validation",
          "test_xgboost_specific_validation",
          "TestTrainingStepEnhancer.test_pytorch_specific_validation",
          "test_pytorch_specific_validation",
          "TestProcessingStepEnhancer.enhancer",
          "enhancer",
          "TestProcessingStepEnhancer.test_processing_enhancer_initialization",
          "test_processing_enhancer_initialization",
          "TestProcessingStepEnhancer.test_data_processing_validation",
          "test_data_processing_validation",
          "TestProcessingStepEnhancer.test_pandas_specific_validation",
          "test_pandas_specific_validation",
          "TestFrameworkPatterns.test_xgboost_pattern_detection",
          "test_xgboost_pattern_detection",
          "TestFrameworkPatterns.test_pytorch_pattern_detection",
          "test_pytorch_pattern_detection",
          "TestFrameworkPatterns.test_training_pattern_detection",
          "test_training_pattern_detection",
          "TestFrameworkPatterns.test_get_framework_patterns",
          "test_get_framework_patterns",
          "TestFrameworkPatterns.test_get_all_framework_patterns",
          "test_get_all_framework_patterns",
          "TestStepTypeEnhancementIntegration.temp_dirs",
          "temp_dirs",
          "TestStepTypeEnhancementIntegration.test_unified_tester_with_step_type_enhancement",
          "test_unified_tester_with_step_type_enhancement",
          "TestStepTypeEnhancementIntegration.test_step_type_enhancement_feature_flag",
          "test_step_type_enhancement_feature_flag",
          "TestStepTypeEnhancementEndToEnd.test_training_script_enhancement_flow",
          "test_training_script_enhancement_flow",
          "TestStepTypeEnhancementEndToEnd.test_processing_script_enhancement_flow",
          "test_processing_script_enhancement_flow",
          "TestStepTypeEnhancementEndToEnd.test_multiple_step_types_enhancement",
          "test_multiple_step_types_enhancement",
          "router",
          "test_router_initialization",
          "test_step_type_detection",
          "test_enhancement_routing",
          "test_unknown_step_type_handling",
          "enhancer",
          "test_training_enhancer_initialization",
          "test_training_loop_validation",
          "test_xgboost_specific_validation",
          "test_pytorch_specific_validation",
          "enhancer",
          "test_processing_enhancer_initialization",
          "test_data_processing_validation",
          "test_pandas_specific_validation",
          "test_xgboost_pattern_detection",
          "test_pytorch_pattern_detection",
          "test_training_pattern_detection",
          "test_get_framework_patterns",
          "test_get_all_framework_patterns",
          "temp_dirs",
          "test_unified_tester_with_step_type_enhancement",
          "test_step_type_enhancement_feature_flag",
          "test_training_script_enhancement_flow",
          "test_processing_script_enhancement_flow",
          "test_multiple_step_types_enhancement"
        ],
        "validation/test_simple_integration.py": [
          "TestSimpleValidationCoordinator.coordinator",
          "coordinator",
          "TestSimpleValidationCoordinator.mock_builder",
          "mock_builder",
          "TestSimpleValidationCoordinator.sample_std_results",
          "sample_std_results",
          "TestSimpleValidationCoordinator.sample_align_results",
          "sample_align_results",
          "TestSimpleValidationCoordinator.test_init",
          "test_init",
          "TestSimpleValidationCoordinator.test_validate_development_success",
          "test_validate_development_success",
          "TestSimpleValidationCoordinator.test_validate_development_error",
          "test_validate_development_error",
          "TestSimpleValidationCoordinator.test_validate_development_caching",
          "test_validate_development_caching",
          "TestSimpleValidationCoordinator.test_validate_integration_success",
          "test_validate_integration_success",
          "TestSimpleValidationCoordinator.test_validate_integration_error",
          "test_validate_integration_error",
          "TestSimpleValidationCoordinator.test_validate_integration_caching",
          "test_validate_integration_caching",
          "TestSimpleValidationCoordinator.test_validate_production_both_pass",
          "test_validate_production_both_pass",
          "TestSimpleValidationCoordinator.test_validate_production_std_fails",
          "test_validate_production_std_fails",
          "TestSimpleValidationCoordinator.test_validate_production_integration_fails",
          "test_validate_production_integration_fails",
          "TestSimpleValidationCoordinator.test_validate_production_error",
          "test_validate_production_error",
          "TestSimpleValidationCoordinator.test_clear_cache",
          "test_clear_cache",
          "TestSimpleValidationCoordinator.test_get_statistics_empty",
          "test_get_statistics_empty",
          "TestSimpleValidationCoordinator.test_get_statistics_with_data",
          "test_get_statistics_with_data",
          "TestPublicAPIFunctions.setup_coordinator",
          "setup_coordinator",
          "TestPublicAPIFunctions.mock_builder",
          "mock_builder",
          "TestPublicAPIFunctions.test_validate_development_function",
          "test_validate_development_function",
          "TestPublicAPIFunctions.test_validate_integration_function",
          "test_validate_integration_function",
          "TestPublicAPIFunctions.test_validate_production_function",
          "test_validate_production_function",
          "TestPublicAPIFunctions.test_clear_validation_cache_function",
          "test_clear_validation_cache_function",
          "TestPublicAPIFunctions.test_get_validation_statistics_function",
          "test_get_validation_statistics_function",
          "TestLegacyCompatibilityFunctions.mock_builder",
          "mock_builder",
          "TestLegacyCompatibilityFunctions.test_validate_step_builder_deprecation",
          "test_validate_step_builder_deprecation",
          "TestLegacyCompatibilityFunctions.test_validate_step_integration_deprecation",
          "test_validate_step_integration_deprecation",
          "TestIntegrationScenarios.coordinator",
          "coordinator",
          "TestIntegrationScenarios.mock_builder",
          "mock_builder",
          "TestIntegrationScenarios.test_cache_key_generation",
          "test_cache_key_generation",
          "TestIntegrationScenarios.test_statistics_accuracy",
          "test_statistics_accuracy",
          "TestIntegrationScenarios.test_error_resilience",
          "test_error_resilience",
          "TestIntegrationScenarios.test_production_validation_workflow",
          "test_production_validation_workflow",
          "TestIntegrationScenarios.test_empty_script_names",
          "test_empty_script_names",
          "TestIntegrationScenarios.test_large_cache_behavior",
          "test_large_cache_behavior",
          "coordinator",
          "mock_builder",
          "sample_std_results",
          "sample_align_results",
          "test_init",
          "test_validate_development_success",
          "test_validate_development_error",
          "test_validate_development_caching",
          "test_validate_integration_success",
          "test_validate_integration_error",
          "test_validate_integration_caching",
          "test_validate_production_both_pass",
          "test_validate_production_std_fails",
          "test_validate_production_integration_fails",
          "test_validate_production_error",
          "test_clear_cache",
          "test_get_statistics_empty",
          "test_get_statistics_with_data",
          "setup_coordinator",
          "mock_builder",
          "test_validate_development_function",
          "test_validate_integration_function",
          "test_validate_production_function",
          "test_clear_validation_cache_function",
          "test_get_validation_statistics_function",
          "mock_builder",
          "test_validate_step_builder_deprecation",
          "test_validate_step_integration_deprecation",
          "coordinator",
          "mock_builder",
          "test_cache_key_generation",
          "test_statistics_accuracy",
          "test_error_resilience",
          "test_production_validation_workflow",
          "test_empty_script_names",
          "test_large_cache_behavior"
        ],
        "validation/builders/test_universal_test.py": [
          "TestUniversalStepBuilderTestInitialization.test_init_with_default_parameters",
          "test_init_with_default_parameters",
          "TestUniversalStepBuilderTestInitialization.test_init_with_custom_parameters",
          "test_init_with_custom_parameters",
          "TestUniversalStepBuilderTestInitialization.test_init_with_step_catalog_available",
          "test_init_with_step_catalog_available",
          "TestUniversalStepBuilderTestInitialization.test_init_with_step_catalog_import_error",
          "test_init_with_step_catalog_import_error",
          "TestUniversalStepBuilderTestInitialization.test_init_with_alignment_tester_available",
          "test_init_with_alignment_tester_available",
          "TestUniversalStepBuilderTestInitialization.test_init_with_alignment_tester_import_error",
          "test_init_with_alignment_tester_import_error",
          "TestUniversalStepBuilderTestValidation.mock_tester_with_catalog",
          "mock_tester_with_catalog",
          "TestUniversalStepBuilderTestValidation.mock_builder_class",
          "mock_builder_class",
          "TestUniversalStepBuilderTestValidation.test_run_validation_for_step_success",
          "test_run_validation_for_step_success",
          "TestUniversalStepBuilderTestValidation.test_run_validation_for_step_no_builder_found",
          "test_run_validation_for_step_no_builder_found",
          "TestUniversalStepBuilderTestValidation.test_run_validation_for_step_with_exception",
          "test_run_validation_for_step_with_exception",
          "TestUniversalStepBuilderTestIntegrationChecks.mock_builder_class",
          "mock_builder_class",
          "TestUniversalStepBuilderTestIntegrationChecks.test_check_dependency_resolution_success",
          "test_check_dependency_resolution_success",
          "TestUniversalStepBuilderTestIntegrationChecks.test_check_dependency_resolution_no_methods",
          "test_check_dependency_resolution_no_methods",
          "TestUniversalStepBuilderTestIntegrationChecks.test_check_cache_configuration_success",
          "test_check_cache_configuration_success",
          "TestUniversalStepBuilderTestIntegrationChecks.test_check_cache_configuration_no_methods",
          "test_check_cache_configuration_no_methods",
          "TestUniversalStepBuilderTestStepInstantiation.mock_tester_with_catalog",
          "mock_tester_with_catalog",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_config_class_exists_success",
          "test_check_config_class_exists_success",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_config_class_exists_not_found",
          "test_check_config_class_exists_not_found",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_config_import_success",
          "test_check_config_import_success",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_config_import_no_config_param",
          "test_check_config_import_no_config_param",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_input_output_methods_success",
          "test_check_input_output_methods_success",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_input_output_methods_partial",
          "test_check_input_output_methods_partial",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_sagemaker_methods_training_step",
          "test_check_sagemaker_methods_training_step",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_sagemaker_methods_processing_step",
          "test_check_sagemaker_methods_processing_step",
          "TestUniversalStepBuilderTestStepInstantiation.test_check_sagemaker_methods_missing_required_method",
          "test_check_sagemaker_methods_missing_required_method",
          "TestUniversalStepBuilderTestStepCreation.mock_tester_with_catalog",
          "mock_tester_with_catalog",
          "TestUniversalStepBuilderTestStepCreation.test_check_config_availability_success",
          "test_check_config_availability_success",
          "TestUniversalStepBuilderTestStepCreation.test_check_config_availability_not_found",
          "test_check_config_availability_not_found",
          "TestUniversalStepBuilderTestStepCreation.test_check_required_methods_success",
          "test_check_required_methods_success",
          "TestUniversalStepBuilderTestStepCreation.test_check_required_methods_missing",
          "test_check_required_methods_missing",
          "TestUniversalStepBuilderTestStepCreation.test_check_field_requirements_with_categorization",
          "test_check_field_requirements_with_categorization",
          "TestUniversalStepBuilderTestStepTypeValidation.test_run_step_type_specific_validation_processing",
          "test_run_step_type_specific_validation_processing",
          "TestUniversalStepBuilderTestStepTypeValidation.test_run_step_type_specific_validation_training",
          "test_run_step_type_specific_validation_training",
          "TestUniversalStepBuilderTestStepTypeValidation.test_run_step_type_specific_validation_unknown_type",
          "test_run_step_type_specific_validation_unknown_type",
          "TestUniversalStepBuilderTestDiscovery.mock_tester_with_catalog",
          "mock_tester_with_catalog",
          "TestUniversalStepBuilderTestDiscovery.test_discover_all_steps_with_catalog",
          "test_discover_all_steps_with_catalog",
          "TestUniversalStepBuilderTestDiscovery.test_discover_all_steps_fallback_to_registry",
          "test_discover_all_steps_fallback_to_registry",
          "TestUniversalStepBuilderTestDiscovery.test_get_builder_class_from_catalog_success",
          "test_get_builder_class_from_catalog_success",
          "TestUniversalStepBuilderTestDiscovery.test_get_builder_class_from_catalog_not_found",
          "test_get_builder_class_from_catalog_not_found",
          "TestUniversalStepBuilderTestUtilityMethods.test_determine_overall_status_passed",
          "test_determine_overall_status_passed",
          "TestUniversalStepBuilderTestUtilityMethods.test_determine_overall_status_issues_found",
          "test_determine_overall_status_issues_found",
          "TestUniversalStepBuilderTestUtilityMethods.test_determine_overall_status_failed",
          "test_determine_overall_status_failed",
          "TestUniversalStepBuilderTestUtilityMethods.test_generate_validation_summary",
          "test_generate_validation_summary",
          "TestUniversalStepBuilderTestUtilityMethods.test_extract_base_name_with_suffix",
          "test_extract_base_name_with_suffix",
          "TestUniversalStepBuilderTestUtilityMethods.test_extract_base_name_without_suffix",
          "test_extract_base_name_without_suffix",
          "TestUniversalStepBuilderTestClassMethods.test_from_builder_class_method",
          "test_from_builder_class_method",
          "TestUniversalStepBuilderTestClassMethods.test_test_all_builders_by_type",
          "test_test_all_builders_by_type",
          "TestUniversalStepBuilderTestErrorHandling.test_run_validation_for_step_scoring_error",
          "test_run_validation_for_step_scoring_error",
          "TestUniversalStepBuilderTestErrorHandling.test_check_config_class_exists_exception",
          "test_check_config_class_exists_exception",
          "TestUniversalStepBuilderTestErrorHandling.test_check_sagemaker_methods_exception_handling",
          "test_check_sagemaker_methods_exception_handling",
          "TestUniversalStepBuilderTestBackwardCompatibility.test_validate_specific_script_compatibility",
          "test_validate_specific_script_compatibility",
          "TestUniversalStepBuilderTestBackwardCompatibility.test_discover_scripts_compatibility",
          "test_discover_scripts_compatibility",
          "TestUniversalStepBuilderTestBackwardCompatibility.test_get_validation_summary_compatibility",
          "test_get_validation_summary_compatibility",
          "TestUniversalStepBuilderTestFullValidation.mock_tester_setup",
          "mock_tester_setup",
          "TestUniversalStepBuilderTestFullValidation.test_run_full_validation_success",
          "test_run_full_validation_success",
          "TestUniversalStepBuilderTestFullValidation.test_run_full_validation_with_exception",
          "test_run_full_validation_with_exception",
          "TestUniversalStepBuilderTestScoring.test_calculate_scoring_with_streamlined_scorer",
          "test_calculate_scoring_with_streamlined_scorer",
          "TestUniversalStepBuilderTestScoring.test_calculate_basic_scoring_fallback",
          "test_calculate_basic_scoring_fallback",
          "TestUniversalStepBuilderTestExportAndReporting.test_export_results_to_json",
          "test_export_results_to_json",
          "TestUniversalStepBuilderTestExportAndReporting.test_export_results_to_json_with_file",
          "test_export_results_to_json_with_file",
          "TestUniversalStepBuilderTestExportAndReporting.test_generate_report_with_reporter",
          "test_generate_report_with_reporter",
          "TestUniversalStepBuilderTestExportAndReporting.test_generate_report_import_error_fallback",
          "test_generate_report_import_error_fallback",
          "test_init_with_default_parameters",
          "test_init_with_custom_parameters",
          "test_init_with_step_catalog_available",
          "test_init_with_step_catalog_import_error",
          "test_init_with_alignment_tester_available",
          "test_init_with_alignment_tester_import_error",
          "mock_tester_with_catalog",
          "mock_builder_class",
          "test_run_validation_for_step_success",
          "test_run_validation_for_step_no_builder_found",
          "test_run_validation_for_step_with_exception",
          "mock_builder_class",
          "test_check_dependency_resolution_success",
          "test_check_dependency_resolution_no_methods",
          "test_check_cache_configuration_success",
          "test_check_cache_configuration_no_methods",
          "mock_tester_with_catalog",
          "test_check_config_class_exists_success",
          "test_check_config_class_exists_not_found",
          "test_check_config_import_success",
          "test_check_config_import_no_config_param",
          "test_check_input_output_methods_success",
          "test_check_input_output_methods_partial",
          "test_check_sagemaker_methods_training_step",
          "test_check_sagemaker_methods_processing_step",
          "test_check_sagemaker_methods_missing_required_method",
          "mock_tester_with_catalog",
          "test_check_config_availability_success",
          "test_check_config_availability_not_found",
          "test_check_required_methods_success",
          "test_check_required_methods_missing",
          "test_check_field_requirements_with_categorization",
          "test_run_step_type_specific_validation_processing",
          "test_run_step_type_specific_validation_training",
          "test_run_step_type_specific_validation_unknown_type",
          "mock_tester_with_catalog",
          "test_discover_all_steps_with_catalog",
          "test_discover_all_steps_fallback_to_registry",
          "test_get_builder_class_from_catalog_success",
          "test_get_builder_class_from_catalog_not_found",
          "test_determine_overall_status_passed",
          "test_determine_overall_status_issues_found",
          "test_determine_overall_status_failed",
          "test_generate_validation_summary",
          "test_extract_base_name_with_suffix",
          "test_extract_base_name_without_suffix",
          "test_from_builder_class_method",
          "test_test_all_builders_by_type",
          "test_run_validation_for_step_scoring_error",
          "test_check_config_class_exists_exception",
          "test_check_sagemaker_methods_exception_handling",
          "test_validate_specific_script_compatibility",
          "test_discover_scripts_compatibility",
          "test_get_validation_summary_compatibility",
          "mock_tester_setup",
          "test_run_full_validation_success",
          "test_run_full_validation_with_exception",
          "test_calculate_scoring_with_streamlined_scorer",
          "test_calculate_basic_scoring_fallback",
          "test_export_results_to_json",
          "test_export_results_to_json_with_file",
          "test_generate_report_with_reporter",
          "test_generate_report_import_error_fallback",
          "MockBuilderClass.__init__",
          "__init__",
          "MockBuilderClass.__init__",
          "__init__",
          "__init__",
          "__init__"
        ],
        "validation/runtime/test_workspace_aware_spec_builder.py": [
          "TestWorkspaceAwarePipelineTestingSpecBuilder.setup_method",
          "setup_method",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.teardown_method",
          "teardown_method",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_initialization",
          "test_initialization",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_find_actual_script_file_test_data_priority",
          "test_find_actual_script_file_test_data_priority",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_canonical_to_script_name_conversion",
          "test_canonical_to_script_name_conversion",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_workspace_discovery_disabled",
          "test_workspace_discovery_disabled",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_workspace_discovery_fallback",
          "test_workspace_discovery_fallback",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_workspace_discovery_success",
          "test_workspace_discovery_success",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_workspace_cache",
          "test_workspace_cache",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_clear_workspace_cache",
          "test_clear_workspace_cache",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_get_workspace_discovery_status",
          "test_get_workspace_discovery_status",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_configure_workspace_discovery",
          "test_configure_workspace_discovery",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_discover_available_scripts",
          "test_discover_available_scripts",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_validate_workspace_setup",
          "test_validate_workspace_setup",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_fuzzy_matching_in_workspace_discovery",
          "test_fuzzy_matching_in_workspace_discovery",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_error_handling_no_scripts_found",
          "test_error_handling_no_scripts_found",
          "TestWorkspaceAwarePipelineTestingSpecBuilder.test_resolve_script_execution_spec_from_node",
          "test_resolve_script_execution_spec_from_node",
          "TestWorkspaceAwareIntegration.setup_method",
          "setup_method",
          "TestWorkspaceAwareIntegration.teardown_method",
          "teardown_method",
          "TestWorkspaceAwareIntegration.test_inheritance_from_base_builder",
          "test_inheritance_from_base_builder",
          "TestWorkspaceAwareIntegration.test_workspace_configuration_persistence",
          "test_workspace_configuration_persistence",
          "setup_method",
          "teardown_method",
          "test_initialization",
          "test_find_actual_script_file_test_data_priority",
          "test_canonical_to_script_name_conversion",
          "test_workspace_discovery_disabled",
          "test_workspace_discovery_fallback",
          "test_workspace_discovery_success",
          "test_workspace_cache",
          "test_clear_workspace_cache",
          "test_get_workspace_discovery_status",
          "test_configure_workspace_discovery",
          "test_discover_available_scripts",
          "test_validate_workspace_setup",
          "test_fuzzy_matching_in_workspace_discovery",
          "test_error_handling_no_scripts_found",
          "test_resolve_script_execution_spec_from_node",
          "setup_method",
          "teardown_method",
          "test_inheritance_from_base_builder",
          "test_workspace_configuration_persistence"
        ],
        "validation/runtime/test_inference_testing.py": [
          "TestInferenceHandlerSpec.temp_dir",
          "temp_dir",
          "TestInferenceHandlerSpec.test_inference_handler_spec_creation",
          "test_inference_handler_spec_creation",
          "TestInferenceHandlerSpec.test_inference_handler_spec_create_default",
          "test_inference_handler_spec_create_default",
          "TestInferenceHandlerSpec.test_inference_handler_spec_validation_missing_files",
          "test_inference_handler_spec_validation_missing_files",
          "TestInferenceHandlerSpec.test_inference_handler_spec_validation_invalid_format",
          "test_inference_handler_spec_validation_invalid_format",
          "TestInferenceHandlerSpec.test_inference_handler_spec_convenience_methods",
          "test_inference_handler_spec_convenience_methods",
          "TestInferenceTestResult.test_inference_test_result_creation",
          "test_inference_test_result_creation",
          "TestInferenceTestResult.test_inference_test_result_success_rate_calculation",
          "test_inference_test_result_success_rate_calculation",
          "TestInferenceTestResult.test_inference_test_result_empty_results",
          "test_inference_test_result_empty_results",
          "TestInferencePipelineTestingSpec.temp_dir",
          "temp_dir",
          "TestInferencePipelineTestingSpec.test_dag",
          "test_dag",
          "TestInferencePipelineTestingSpec.script_spec",
          "script_spec",
          "TestInferencePipelineTestingSpec.handler_spec",
          "handler_spec",
          "TestInferencePipelineTestingSpec.test_inference_pipeline_spec_creation",
          "test_inference_pipeline_spec_creation",
          "TestInferencePipelineTestingSpec.test_mixed_step_types",
          "test_mixed_step_types",
          "TestInferencePipelineTestingSpec.test_mixed_pipeline_validation",
          "test_mixed_pipeline_validation",
          "TestInferencePipelineTestingSpec.test_mixed_pipeline_validation_conflicts",
          "test_mixed_pipeline_validation_conflicts",
          "TestRuntimeTesterInferenceMethods.temp_dir",
          "temp_dir",
          "TestRuntimeTesterInferenceMethods.tester",
          "tester",
          "TestRuntimeTesterInferenceMethods.mock_handler_module",
          "mock_handler_module",
          "TestRuntimeTesterInferenceMethods.handler_spec",
          "handler_spec",
          "TestRuntimeTesterInferenceMethods.test_test_inference_function_model_fn",
          "test_test_inference_function_model_fn",
          "TestRuntimeTesterInferenceMethods.test_test_inference_function_input_fn",
          "test_test_inference_function_input_fn",
          "TestRuntimeTesterInferenceMethods.test_test_inference_function_error",
          "test_test_inference_function_error",
          "TestRuntimeTesterInferenceMethods.test_validate_function_result",
          "test_validate_function_result",
          "TestRuntimeTesterInferenceMethods.test_extract_packaged_model",
          "test_extract_packaged_model",
          "TestRuntimeTesterInferenceMethods.test_load_handler_module",
          "test_load_handler_module",
          "TestRuntimeTesterInferenceMethods.test_load_payload_samples",
          "test_load_payload_samples",
          "TestRuntimeTesterInferenceMethods.test_cleanup_extraction_directory",
          "test_cleanup_extraction_directory",
          "TestInferenceTestingErrorHandling.temp_dir",
          "temp_dir",
          "TestInferenceTestingErrorHandling.tester",
          "tester",
          "TestInferenceTestingErrorHandling.test_comprehensive_error_scenarios",
          "test_comprehensive_error_scenarios",
          "TestInferenceTestingErrorHandling.test_error_message_quality",
          "test_error_message_quality",
          "TestInferenceTestingErrorHandling.test_resource_cleanup_comprehensive",
          "test_resource_cleanup_comprehensive",
          "temp_dir",
          "test_inference_handler_spec_creation",
          "test_inference_handler_spec_create_default",
          "test_inference_handler_spec_validation_missing_files",
          "test_inference_handler_spec_validation_invalid_format",
          "test_inference_handler_spec_convenience_methods",
          "test_inference_test_result_creation",
          "test_inference_test_result_success_rate_calculation",
          "test_inference_test_result_empty_results",
          "temp_dir",
          "test_dag",
          "script_spec",
          "handler_spec",
          "test_inference_pipeline_spec_creation",
          "test_mixed_step_types",
          "test_mixed_pipeline_validation",
          "test_mixed_pipeline_validation_conflicts",
          "temp_dir",
          "tester",
          "mock_handler_module",
          "handler_spec",
          "test_test_inference_function_model_fn",
          "test_test_inference_function_input_fn",
          "test_test_inference_function_error",
          "test_validate_function_result",
          "test_extract_packaged_model",
          "test_load_handler_module",
          "test_load_payload_samples",
          "test_cleanup_extraction_directory",
          "temp_dir",
          "tester",
          "test_comprehensive_error_scenarios",
          "test_error_message_quality",
          "test_resource_cleanup_comprehensive"
        ],
        "validation/runtime/test_step_catalog_integration.py": [
          "MockPipelineDAG.__init__",
          "__init__",
          "MockPipelineDAG.topological_sort",
          "topological_sort",
          "TestStepCatalogIntegration.temp_workspace",
          "temp_workspace",
          "TestStepCatalogIntegration.mock_step_catalog",
          "mock_step_catalog",
          "TestStepCatalogIntegration.runtime_tester_with_step_catalog",
          "runtime_tester_with_step_catalog",
          "TestStepCatalogIntegration.runtime_tester_without_step_catalog",
          "runtime_tester_without_step_catalog",
          "TestStepCatalogIntegration.spec_builder_with_step_catalog",
          "spec_builder_with_step_catalog",
          "TestStepCatalogIntegration.sample_script_spec",
          "sample_script_spec",
          "TestStepCatalogIntegration.test_optional_enhancement_pattern",
          "test_optional_enhancement_pattern",
          "TestStepCatalogIntegration.test_workspace_resolution_priority",
          "test_workspace_resolution_priority",
          "TestStepCatalogIntegration.test_fallback_behavior",
          "test_fallback_behavior",
          "TestStepCatalogIntegration.test_user_story_1_individual_script_testing",
          "test_user_story_1_individual_script_testing",
          "TestStepCatalogIntegration.test_user_story_2_data_compatibility_testing",
          "test_user_story_2_data_compatibility_testing",
          "TestStepCatalogIntegration.test_user_story_3_pipeline_testing",
          "test_user_story_3_pipeline_testing",
          "TestStepCatalogIntegration.test_step_catalog_initialization",
          "test_step_catalog_initialization",
          "TestStepCatalogIntegration.test_contract_aware_path_resolution",
          "test_contract_aware_path_resolution",
          "TestStepCatalogIntegration.test_framework_detection",
          "test_framework_detection",
          "TestStepCatalogIntegration.test_builder_consistency_validation",
          "test_builder_consistency_validation",
          "TestStepCatalogIntegration.test_multi_workspace_component_discovery",
          "test_multi_workspace_component_discovery",
          "TestStepCatalogIntegration.test_step_catalog_import_error_handling",
          "test_step_catalog_import_error_handling",
          "TestStepCatalogIntegration.test_step_catalog_method_error_handling",
          "test_step_catalog_method_error_handling",
          "TestStepCatalogIntegration.test_performance_with_step_catalog_disabled",
          "test_performance_with_step_catalog_disabled",
          "TestStepCatalogSpecBuilderIntegration.temp_workspace",
          "temp_workspace",
          "TestStepCatalogSpecBuilderIntegration.mock_step_catalog",
          "mock_step_catalog",
          "TestStepCatalogSpecBuilderIntegration.test_script_resolution_with_step_catalog",
          "test_script_resolution_with_step_catalog",
          "TestStepCatalogSpecBuilderIntegration.test_script_resolution_fallback",
          "test_script_resolution_fallback",
          "TestStepCatalogSpecBuilderIntegration.test_contract_aware_paths",
          "test_contract_aware_paths",
          "__init__",
          "topological_sort",
          "temp_workspace",
          "mock_step_catalog",
          "runtime_tester_with_step_catalog",
          "runtime_tester_without_step_catalog",
          "spec_builder_with_step_catalog",
          "sample_script_spec",
          "test_optional_enhancement_pattern",
          "test_workspace_resolution_priority",
          "test_fallback_behavior",
          "test_user_story_1_individual_script_testing",
          "test_user_story_2_data_compatibility_testing",
          "test_user_story_3_pipeline_testing",
          "test_step_catalog_initialization",
          "test_contract_aware_path_resolution",
          "test_framework_detection",
          "test_builder_consistency_validation",
          "test_multi_workspace_component_discovery",
          "test_step_catalog_import_error_handling",
          "test_step_catalog_method_error_handling",
          "test_performance_with_step_catalog_disabled",
          "temp_workspace",
          "mock_step_catalog",
          "test_script_resolution_with_step_catalog",
          "test_script_resolution_fallback",
          "test_contract_aware_paths"
        ],
        "validation/runtime/test_runtime_spec_builder.py": [
          "TestPipelineTestingSpecBuilder.temp_dir",
          "temp_dir",
          "TestPipelineTestingSpecBuilder.test_dag",
          "test_dag",
          "TestPipelineTestingSpecBuilder.builder",
          "builder",
          "TestPipelineTestingSpecBuilder.test_builder_initialization",
          "test_builder_initialization",
          "TestPipelineTestingSpecBuilder.test_builder_initialization_with_params",
          "test_builder_initialization_with_params",
          "TestPipelineTestingSpecBuilder.test_build_from_dag",
          "test_build_from_dag",
          "TestPipelineTestingSpecBuilder.test_load_or_create_script_spec_new",
          "test_load_or_create_script_spec_new",
          "TestPipelineTestingSpecBuilder.test_load_or_create_script_spec_existing",
          "test_load_or_create_script_spec_existing",
          "TestPipelineTestingSpecBuilder.test_save_script_spec",
          "test_save_script_spec",
          "TestPipelineTestingSpecBuilder.test_update_script_spec",
          "test_update_script_spec",
          "TestPipelineTestingSpecBuilder.test_list_saved_specs",
          "test_list_saved_specs",
          "TestPipelineTestingSpecBuilder.test_get_script_spec_by_name",
          "test_get_script_spec_by_name",
          "TestPipelineTestingSpecBuilder.test_get_script_spec_by_name_nonexistent",
          "test_get_script_spec_by_name_nonexistent",
          "TestPipelineTestingSpecBuilder.test_match_step_to_spec_direct_match",
          "test_match_step_to_spec_direct_match",
          "TestPipelineTestingSpecBuilder.test_match_step_to_spec_variation_match",
          "test_match_step_to_spec_variation_match",
          "TestPipelineTestingSpecBuilder.test_match_step_to_spec_no_match",
          "test_match_step_to_spec_no_match",
          "TestPipelineTestingSpecBuilder.test_is_spec_complete_valid",
          "test_is_spec_complete_valid",
          "TestPipelineTestingSpecBuilder.test_is_spec_complete_invalid",
          "test_is_spec_complete_invalid",
          "TestPipelineTestingSpecBuilder.test_validate_specs_completeness_valid",
          "test_validate_specs_completeness_valid",
          "TestPipelineTestingSpecBuilder.test_validate_specs_completeness_invalid",
          "test_validate_specs_completeness_invalid",
          "TestPipelineTestingSpecBuilder.test_get_script_main_params",
          "test_get_script_main_params",
          "TestPipelineTestingSpecBuilder.test_update_script_spec_interactive",
          "test_update_script_spec_interactive",
          "TestPipelineTestingSpecBuilderIntegration.temp_dir",
          "temp_dir",
          "TestPipelineTestingSpecBuilderIntegration.builder",
          "builder",
          "TestPipelineTestingSpecBuilderIntegration.test_end_to_end_spec_building",
          "test_end_to_end_spec_building",
          "TestPipelineTestingSpecBuilderIntegration.test_spec_persistence_and_updates",
          "test_spec_persistence_and_updates",
          "temp_dir",
          "test_dag",
          "builder",
          "test_builder_initialization",
          "test_builder_initialization_with_params",
          "test_build_from_dag",
          "test_load_or_create_script_spec_new",
          "test_load_or_create_script_spec_existing",
          "test_save_script_spec",
          "test_update_script_spec",
          "test_list_saved_specs",
          "test_get_script_spec_by_name",
          "test_get_script_spec_by_name_nonexistent",
          "test_match_step_to_spec_direct_match",
          "test_match_step_to_spec_variation_match",
          "test_match_step_to_spec_no_match",
          "test_is_spec_complete_valid",
          "test_is_spec_complete_invalid",
          "test_validate_specs_completeness_valid",
          "test_validate_specs_completeness_invalid",
          "test_get_script_main_params",
          "test_update_script_spec_interactive",
          "temp_dir",
          "builder",
          "test_end_to_end_spec_building",
          "test_spec_persistence_and_updates"
        ],
        "validation/runtime/test_contract_discovery.py": [
          "TestContractDiscoveryResult.test_contract_discovery_result_creation",
          "test_contract_discovery_result_creation",
          "TestContractDiscoveryResult.test_contract_discovery_result_with_error",
          "test_contract_discovery_result_with_error",
          "TestModernizedContractDiscoveryManager.temp_dir",
          "temp_dir",
          "TestModernizedContractDiscoveryManager.discovery_manager",
          "discovery_manager",
          "TestModernizedContractDiscoveryManager.test_contract_discovery_manager_initialization",
          "test_contract_discovery_manager_initialization",
          "TestModernizedContractDiscoveryManager.test_discover_contract_using_step_catalog",
          "test_discover_contract_using_step_catalog",
          "TestModernizedContractDiscoveryManager.test_discover_contract_fallback_to_direct_import",
          "test_discover_contract_fallback_to_direct_import",
          "TestModernizedContractDiscoveryManager.test_discover_contract_caching",
          "test_discover_contract_caching",
          "TestModernizedContractDiscoveryManager.test_contract_input_paths_adaptation",
          "test_contract_input_paths_adaptation",
          "TestModernizedContractDiscoveryManager.test_contract_output_paths_adaptation",
          "test_contract_output_paths_adaptation",
          "TestModernizedContractDiscoveryManager.test_contract_environ_vars",
          "test_contract_environ_vars",
          "TestModernizedContractDiscoveryManager.test_contract_job_args",
          "test_contract_job_args",
          "TestModernizedContractDiscoveryManager.test_sagemaker_path_adaptation_patterns",
          "test_sagemaker_path_adaptation_patterns",
          "TestModernizedContractDiscoveryManager.test_non_sagemaker_path_adaptation",
          "test_non_sagemaker_path_adaptation",
          "TestModernizedContractDiscoveryIntegration.temp_dir",
          "temp_dir",
          "TestModernizedContractDiscoveryIntegration.discovery_manager",
          "discovery_manager",
          "TestModernizedContractDiscoveryIntegration.test_end_to_end_step_catalog_discovery",
          "test_end_to_end_step_catalog_discovery",
          "TestModernizedContractDiscoveryIntegration.test_step_catalog_not_found_fallback",
          "test_step_catalog_not_found_fallback",
          "TestModernizedContractDiscoveryIntegration.test_multiple_discovery_caching_with_step_catalog",
          "test_multiple_discovery_caching_with_step_catalog",
          "TestModernizedContractDiscoveryEngine.temp_dir",
          "temp_dir",
          "TestModernizedContractDiscoveryEngine.test_discover_contracts_with_scripts_using_step_catalog",
          "test_discover_contracts_with_scripts_using_step_catalog",
          "TestModernizedContractDiscoveryEngine.test_discover_contracts_with_scripts_error_handling",
          "test_discover_contracts_with_scripts_error_handling",
          "TestModernizedUtilities.test_contract_loading_using_step_catalog",
          "test_contract_loading_using_step_catalog",
          "TestModernizedUtilities.test_step_catalog_integration",
          "test_step_catalog_integration",
          "test_contract_discovery_result_creation",
          "test_contract_discovery_result_with_error",
          "temp_dir",
          "discovery_manager",
          "test_contract_discovery_manager_initialization",
          "test_discover_contract_using_step_catalog",
          "test_discover_contract_fallback_to_direct_import",
          "test_discover_contract_caching",
          "test_contract_input_paths_adaptation",
          "test_contract_output_paths_adaptation",
          "test_contract_environ_vars",
          "test_contract_job_args",
          "test_sagemaker_path_adaptation_patterns",
          "test_non_sagemaker_path_adaptation",
          "temp_dir",
          "discovery_manager",
          "test_end_to_end_step_catalog_discovery",
          "test_step_catalog_not_found_fallback",
          "test_multiple_discovery_caching_with_step_catalog",
          "temp_dir",
          "test_discover_contracts_with_scripts_using_step_catalog",
          "test_discover_contracts_with_scripts_error_handling",
          "test_contract_loading_using_step_catalog",
          "test_step_catalog_integration"
        ],
        "validation/runtime/test_logical_name_matching.py": [
          "TestPathSpec.test_path_spec_creation",
          "test_path_spec_creation",
          "TestPathSpec.test_matches_name_or_alias_logical_name",
          "test_matches_name_or_alias_logical_name",
          "TestPathSpec.test_matches_name_or_alias_aliases",
          "test_matches_name_or_alias_aliases",
          "TestPathMatch.test_path_match_creation",
          "test_path_match_creation",
          "TestEnhancedScriptExecutionSpec.test_enhanced_spec_creation",
          "test_enhanced_spec_creation",
          "TestEnhancedScriptExecutionSpec.test_backward_compatibility_properties",
          "test_backward_compatibility_properties",
          "TestEnhancedScriptExecutionSpec.test_from_script_execution_spec",
          "test_from_script_execution_spec",
          "TestPathMatcher.path_matcher",
          "path_matcher",
          "TestPathMatcher.test_path_matcher_initialization",
          "test_path_matcher_initialization",
          "TestPathMatcher.test_find_path_matches_exact_logical",
          "test_find_path_matches_exact_logical",
          "TestPathMatcher.test_find_path_matches_logical_to_alias",
          "test_find_path_matches_logical_to_alias",
          "TestPathMatcher.test_find_path_matches_semantic",
          "test_find_path_matches_semantic",
          "TestPathMatcher.test_find_path_matches_no_matches",
          "test_find_path_matches_no_matches",
          "TestPathMatcher.test_generate_matching_report_no_matches",
          "test_generate_matching_report_no_matches",
          "TestPathMatcher.test_generate_matching_report_with_matches",
          "test_generate_matching_report_with_matches",
          "TestTopologicalExecutor.dag",
          "dag",
          "TestTopologicalExecutor.executor",
          "executor",
          "TestTopologicalExecutor.test_get_execution_order",
          "test_get_execution_order",
          "TestTopologicalExecutor.test_get_execution_order_with_error",
          "test_get_execution_order_with_error",
          "TestTopologicalExecutor.test_validate_dag_structure",
          "test_validate_dag_structure",
          "TestTopologicalExecutor.test_validate_dag_structure_missing_specs",
          "test_validate_dag_structure_missing_specs",
          "TestTopologicalExecutor.test_validate_dag_structure_extra_specs",
          "test_validate_dag_structure_extra_specs",
          "TestLogicalNameMatchingTester.temp_dir",
          "temp_dir",
          "TestLogicalNameMatchingTester.tester",
          "tester",
          "TestLogicalNameMatchingTester.test_test_data_compatibility_with_logical_matching_success",
          "test_test_data_compatibility_with_logical_matching_success",
          "TestLogicalNameMatchingTester.test_test_data_compatibility_no_matches",
          "test_test_data_compatibility_no_matches",
          "TestLogicalNameMatchingTester.test_test_pipeline_with_topological_order_success",
          "test_test_pipeline_with_topological_order_success",
          "TestLogicalNameMatchingTester.test_test_pipeline_with_topological_order_dag_error",
          "test_test_pipeline_with_topological_order_dag_error",
          "TestLogicalNameMatchingTester.test_find_best_file_for_logical_name",
          "test_find_best_file_for_logical_name",
          "TestLogicalNameMatchingTester.test_detect_primary_format",
          "test_detect_primary_format",
          "TestLogicalNameMatchingIntegration.temp_dir",
          "temp_dir",
          "TestLogicalNameMatchingIntegration.tester",
          "tester",
          "TestLogicalNameMatchingIntegration.test_end_to_end_matching_workflow",
          "test_end_to_end_matching_workflow",
          "TestMatchTypeEnum.test_match_type_enum_values",
          "test_match_type_enum_values",
          "TestMatchTypeEnum.test_match_type_string_values",
          "test_match_type_string_values",
          "TestEnhancedDataCompatibilityResult.test_enhanced_data_compatibility_result_creation",
          "test_enhanced_data_compatibility_result_creation",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_with_no_matches",
          "test_enhanced_result_with_no_matches",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_multiple_matches",
          "test_enhanced_result_multiple_matches",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_inheritance_from_basic",
          "test_enhanced_result_inheritance_from_basic",
          "test_path_spec_creation",
          "test_matches_name_or_alias_logical_name",
          "test_matches_name_or_alias_aliases",
          "test_path_match_creation",
          "test_enhanced_spec_creation",
          "test_backward_compatibility_properties",
          "test_from_script_execution_spec",
          "path_matcher",
          "test_path_matcher_initialization",
          "test_find_path_matches_exact_logical",
          "test_find_path_matches_logical_to_alias",
          "test_find_path_matches_semantic",
          "test_find_path_matches_no_matches",
          "test_generate_matching_report_no_matches",
          "test_generate_matching_report_with_matches",
          "dag",
          "executor",
          "test_get_execution_order",
          "test_get_execution_order_with_error",
          "test_validate_dag_structure",
          "test_validate_dag_structure_missing_specs",
          "test_validate_dag_structure_extra_specs",
          "temp_dir",
          "tester",
          "test_test_data_compatibility_with_logical_matching_success",
          "test_test_data_compatibility_no_matches",
          "test_test_pipeline_with_topological_order_success",
          "test_test_pipeline_with_topological_order_dag_error",
          "test_find_best_file_for_logical_name",
          "test_detect_primary_format",
          "temp_dir",
          "tester",
          "test_end_to_end_matching_workflow",
          "test_match_type_enum_values",
          "test_match_type_string_values",
          "test_enhanced_data_compatibility_result_creation",
          "test_enhanced_result_with_no_matches",
          "test_enhanced_result_multiple_matches",
          "test_enhanced_result_inheritance_from_basic",
          "mock_script_tester",
          "mock_similarity"
        ],
        "validation/runtime/test_runtime_testing.py": [
          "TestRuntimeTester.temp_dir",
          "temp_dir",
          "TestRuntimeTester.test_dag",
          "test_dag",
          "TestRuntimeTester.script_spec_a",
          "script_spec_a",
          "TestRuntimeTester.script_spec_b",
          "script_spec_b",
          "TestRuntimeTester.pipeline_spec",
          "pipeline_spec",
          "TestRuntimeTester.config",
          "config",
          "TestRuntimeTester.tester",
          "tester",
          "TestRuntimeTester.script_specs",
          "script_specs",
          "TestRuntimeTester.test_script_missing_main_function_with_spec",
          "test_script_missing_main_function_with_spec",
          "TestRuntimeTester.test_data_compatibility_with_specs",
          "test_data_compatibility_with_specs",
          "TestRuntimeTester.test_data_compatibility_script_a_fails",
          "test_data_compatibility_script_a_fails",
          "TestRuntimeTester.test_pipeline_flow_with_spec",
          "test_pipeline_flow_with_spec",
          "TestRuntimeTester.test_pipeline_flow_empty_dag",
          "test_pipeline_flow_empty_dag",
          "TestRuntimeTester.test_backward_compatibility_test_script_with_spec",
          "test_backward_compatibility_test_script_with_spec",
          "TestRuntimeTester.test_backward_compatibility_test_data_compatibility_with_specs",
          "test_backward_compatibility_test_data_compatibility_with_specs",
          "TestRuntimeTester.test_pipeline_flow_with_spec_comprehensive",
          "test_pipeline_flow_with_spec_comprehensive",
          "TestRuntimeTester.test_find_script_path",
          "test_find_script_path",
          "TestRuntimeTester.test_find_script_path_not_found",
          "test_find_script_path_not_found",
          "TestRuntimeTester.test_execute_script_with_data",
          "test_execute_script_with_data",
          "TestRuntimeTester.test_clear_error_feedback",
          "test_clear_error_feedback",
          "TestRuntimeTester.test_performance_requirements",
          "test_performance_requirements",
          "TestRuntimeTesterIntegration.temp_dir",
          "temp_dir",
          "TestRuntimeTesterIntegration.complex_dag",
          "complex_dag",
          "TestRuntimeTesterIntegration.script_specs",
          "script_specs",
          "TestRuntimeTesterIntegration.pipeline_spec",
          "pipeline_spec",
          "TestRuntimeTesterIntegration.config",
          "config",
          "TestRuntimeTesterIntegration.tester",
          "tester",
          "TestRuntimeTesterIntegration.test_end_to_end_workflow",
          "test_end_to_end_workflow",
          "TestEnhancedFileFormatSupport.temp_dir",
          "temp_dir",
          "TestEnhancedFileFormatSupport.test_dag",
          "test_dag",
          "TestEnhancedFileFormatSupport.script_spec",
          "script_spec",
          "TestEnhancedFileFormatSupport.pipeline_spec",
          "pipeline_spec",
          "TestEnhancedFileFormatSupport.config",
          "config",
          "TestEnhancedFileFormatSupport.tester",
          "tester",
          "TestEnhancedFileFormatSupport.test_find_valid_output_files_csv_only",
          "test_find_valid_output_files_csv_only",
          "TestEnhancedFileFormatSupport.test_find_valid_output_files_enhanced_mode",
          "test_find_valid_output_files_enhanced_mode",
          "TestEnhancedFileFormatSupport.test_is_temp_or_system_file",
          "test_is_temp_or_system_file",
          "TestEnhancedFileFormatSupport.test_enhanced_mode_detection",
          "test_enhanced_mode_detection",
          "TestLogicalNameMatchingIntegration.temp_dir",
          "temp_dir",
          "TestLogicalNameMatchingIntegration.test_dag",
          "test_dag",
          "TestLogicalNameMatchingIntegration.preprocessing_spec",
          "preprocessing_spec",
          "TestLogicalNameMatchingIntegration.training_spec",
          "training_spec",
          "TestLogicalNameMatchingIntegration.script_specs",
          "script_specs",
          "TestLogicalNameMatchingIntegration.pipeline_spec",
          "pipeline_spec",
          "TestLogicalNameMatchingIntegration.config",
          "config",
          "TestLogicalNameMatchingIntegration.tester",
          "tester",
          "TestLogicalNameMatchingIntegration.test_enhanced_data_compatibility_with_logical_matching",
          "test_enhanced_data_compatibility_with_logical_matching",
          "TestLogicalNameMatchingIntegration.test_independent_input_handling",
          "test_independent_input_handling",
          "TestLogicalNameMatchingIntegration.test_fallback_to_basic_mode",
          "test_fallback_to_basic_mode",
          "TestTopologicalExecution.temp_dir",
          "temp_dir",
          "TestTopologicalExecution.complex_dag",
          "complex_dag",
          "TestTopologicalExecution.script_specs",
          "script_specs",
          "TestTopologicalExecution.pipeline_spec",
          "pipeline_spec",
          "TestTopologicalExecution.config",
          "config",
          "TestTopologicalExecution.tester",
          "tester",
          "TestTopologicalExecution.test_topological_execution_order",
          "test_topological_execution_order",
          "TestTopologicalExecution.test_topological_execution_with_failure",
          "test_topological_execution_with_failure",
          "TestPipelineTestingSpecCompatibility.temp_dir",
          "temp_dir",
          "TestPipelineTestingSpecCompatibility.test_dag",
          "test_dag",
          "TestPipelineTestingSpecCompatibility.basic_spec",
          "basic_spec",
          "TestPipelineTestingSpecCompatibility.enhanced_spec",
          "enhanced_spec",
          "TestPipelineTestingSpecCompatibility.test_mixed_spec_types_in_pipeline",
          "test_mixed_spec_types_in_pipeline",
          "TestPipelineTestingSpecCompatibility.test_auto_enable_enhanced_features",
          "test_auto_enable_enhanced_features",
          "TestPipelineTestingSpecCompatibility.test_basic_specs_only_no_auto_enable",
          "test_basic_specs_only_no_auto_enable",
          "TestPipelineTestingSpecCompatibility.test_inheritance_compatibility",
          "test_inheritance_compatibility",
          "TestRealScriptIntegration.temp_dir",
          "temp_dir",
          "TestRealScriptIntegration.xgboost_training_spec",
          "xgboost_training_spec",
          "TestRealScriptIntegration.tabular_preprocessing_spec",
          "tabular_preprocessing_spec",
          "TestRealScriptIntegration.real_pipeline_dag",
          "real_pipeline_dag",
          "TestRealScriptIntegration.real_pipeline_spec",
          "real_pipeline_spec",
          "TestRealScriptIntegration.config",
          "config",
          "TestRealScriptIntegration.tester",
          "tester",
          "TestRealScriptIntegration.test_xgboost_training_script_contract_compatibility",
          "test_xgboost_training_script_contract_compatibility",
          "TestRealScriptIntegration.test_real_script_data_compatibility",
          "test_real_script_data_compatibility",
          "TestRealScriptIntegration.test_real_pipeline_flow",
          "test_real_pipeline_flow",
          "TestRealScriptIntegration.test_contract_based_path_resolution",
          "test_contract_based_path_resolution",
          "TestRealScriptIntegration.test_semantic_matching_with_real_logical_names",
          "test_semantic_matching_with_real_logical_names",
          "TestRuntimeTesterErrorHandling.temp_dir",
          "temp_dir",
          "TestRuntimeTesterErrorHandling.test_dag",
          "test_dag",
          "TestRuntimeTesterErrorHandling.script_spec",
          "script_spec",
          "TestRuntimeTesterErrorHandling.pipeline_spec",
          "pipeline_spec",
          "TestRuntimeTesterErrorHandling.config",
          "config",
          "TestRuntimeTesterErrorHandling.tester",
          "tester",
          "TestRuntimeTesterErrorHandling.test_script_import_error",
          "test_script_import_error",
          "TestRuntimeTesterErrorHandling.test_script_execution_error",
          "test_script_execution_error",
          "TestRuntimeTesterErrorHandling.test_invalid_pipeline_spec",
          "test_invalid_pipeline_spec",
          "TestRuntimeTesterErrorHandling.test_workspace_permission_error",
          "test_workspace_permission_error",
          "temp_dir",
          "test_dag",
          "script_spec_a",
          "script_spec_b",
          "pipeline_spec",
          "config",
          "tester",
          "script_specs",
          "test_script_missing_main_function_with_spec",
          "test_data_compatibility_with_specs",
          "test_data_compatibility_script_a_fails",
          "test_pipeline_flow_with_spec",
          "test_pipeline_flow_empty_dag",
          "test_backward_compatibility_test_script_with_spec",
          "test_backward_compatibility_test_data_compatibility_with_specs",
          "test_pipeline_flow_with_spec_comprehensive",
          "test_find_script_path",
          "test_find_script_path_not_found",
          "test_execute_script_with_data",
          "test_clear_error_feedback",
          "test_performance_requirements",
          "temp_dir",
          "complex_dag",
          "script_specs",
          "pipeline_spec",
          "config",
          "tester",
          "test_end_to_end_workflow",
          "temp_dir",
          "test_dag",
          "script_spec",
          "pipeline_spec",
          "config",
          "tester",
          "test_find_valid_output_files_csv_only",
          "test_find_valid_output_files_enhanced_mode",
          "test_is_temp_or_system_file",
          "test_enhanced_mode_detection",
          "temp_dir",
          "test_dag",
          "preprocessing_spec",
          "training_spec",
          "script_specs",
          "pipeline_spec",
          "config",
          "tester",
          "test_enhanced_data_compatibility_with_logical_matching",
          "test_independent_input_handling",
          "test_fallback_to_basic_mode",
          "temp_dir",
          "complex_dag",
          "script_specs",
          "pipeline_spec",
          "config",
          "tester",
          "test_topological_execution_order",
          "test_topological_execution_with_failure",
          "temp_dir",
          "test_dag",
          "basic_spec",
          "enhanced_spec",
          "test_mixed_spec_types_in_pipeline",
          "test_auto_enable_enhanced_features",
          "test_basic_specs_only_no_auto_enable",
          "test_inheritance_compatibility",
          "temp_dir",
          "xgboost_training_spec",
          "tabular_preprocessing_spec",
          "real_pipeline_dag",
          "real_pipeline_spec",
          "config",
          "tester",
          "test_xgboost_training_script_contract_compatibility",
          "test_real_script_data_compatibility",
          "test_real_pipeline_flow",
          "test_contract_based_path_resolution",
          "test_semantic_matching_with_real_logical_names",
          "temp_dir",
          "test_dag",
          "script_spec",
          "pipeline_spec",
          "config",
          "tester",
          "test_script_import_error",
          "test_script_execution_error",
          "test_invalid_pipeline_spec",
          "test_workspace_permission_error",
          "mock_path_exists",
          "mock_test_script",
          "mock_test_script",
          "accepts_script_spec"
        ],
        "validation/runtime/test_runtime_models.py": [
          "TestScriptTestResult.test_script_test_result_creation",
          "test_script_test_result_creation",
          "TestScriptTestResult.test_script_test_result_with_error",
          "test_script_test_result_with_error",
          "TestDataCompatibilityResult.test_data_compatibility_result_creation",
          "test_data_compatibility_result_creation",
          "TestDataCompatibilityResult.test_data_compatibility_result_with_issues",
          "test_data_compatibility_result_with_issues",
          "TestScriptExecutionSpec.temp_dir",
          "temp_dir",
          "TestScriptExecutionSpec.specs_dir",
          "specs_dir",
          "TestScriptExecutionSpec.test_script_execution_spec_creation",
          "test_script_execution_spec_creation",
          "TestScriptExecutionSpec.test_create_default_spec",
          "test_create_default_spec",
          "TestScriptExecutionSpec.test_save_and_load_spec",
          "test_save_and_load_spec",
          "TestScriptExecutionSpec.test_load_nonexistent_spec",
          "test_load_nonexistent_spec",
          "TestScriptExecutionSpec.test_filename_generation",
          "test_filename_generation",
          "TestPipelineTestingSpec.test_pipeline_testing_spec_creation",
          "test_pipeline_testing_spec_creation",
          "TestRuntimeTestingConfiguration.test_runtime_testing_configuration_creation",
          "test_runtime_testing_configuration_creation",
          "TestRuntimeTestingConfiguration.test_runtime_testing_configuration_defaults",
          "test_runtime_testing_configuration_defaults",
          "TestEnhancedScriptExecutionSpec.temp_dir",
          "temp_dir",
          "TestEnhancedScriptExecutionSpec.test_enhanced_script_execution_spec_creation",
          "test_enhanced_script_execution_spec_creation",
          "TestEnhancedScriptExecutionSpec.test_enhanced_spec_backward_compatibility_properties",
          "test_enhanced_spec_backward_compatibility_properties",
          "TestEnhancedScriptExecutionSpec.test_enhanced_spec_from_script_execution_spec",
          "test_enhanced_spec_from_script_execution_spec",
          "TestEnhancedDataCompatibilityResult.test_enhanced_data_compatibility_result_creation",
          "test_enhanced_data_compatibility_result_creation",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_with_no_matches",
          "test_enhanced_result_with_no_matches",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_multiple_matches",
          "test_enhanced_result_multiple_matches",
          "TestEnhancedDataCompatibilityResult.test_enhanced_result_inheritance_from_basic",
          "test_enhanced_result_inheritance_from_basic",
          "TestPathSpecAndPathMatch.test_path_spec_creation",
          "test_path_spec_creation",
          "TestPathSpecAndPathMatch.test_path_spec_with_minimal_fields",
          "test_path_spec_with_minimal_fields",
          "TestPathSpecAndPathMatch.test_path_spec_matches_name_or_alias",
          "test_path_spec_matches_name_or_alias",
          "TestPathSpecAndPathMatch.test_path_match_creation",
          "test_path_match_creation",
          "TestPathSpecAndPathMatch.test_match_type_enum_values",
          "test_match_type_enum_values",
          "TestPathSpecAndPathMatch.test_path_match_with_different_match_types",
          "test_path_match_with_different_match_types",
          "TestModelSerialization.temp_dir",
          "temp_dir",
          "TestModelSerialization.test_script_execution_spec_json_serialization",
          "test_script_execution_spec_json_serialization",
          "TestModelSerialization.test_script_test_result_serialization",
          "test_script_test_result_serialization",
          "TestModelSerialization.test_data_compatibility_result_serialization",
          "test_data_compatibility_result_serialization",
          "TestModelValidation.test_script_execution_spec_required_fields",
          "test_script_execution_spec_required_fields",
          "TestModelValidation.test_script_test_result_required_fields",
          "test_script_test_result_required_fields",
          "TestModelValidation.test_data_compatibility_result_required_fields",
          "test_data_compatibility_result_required_fields",
          "TestModelValidation.test_script_execution_spec_default_values",
          "test_script_execution_spec_default_values",
          "TestModelValidation.test_script_test_result_default_values",
          "test_script_test_result_default_values",
          "TestModelValidation.test_data_compatibility_result_default_values",
          "test_data_compatibility_result_default_values",
          "TestModelIntegration.test_pipeline_testing_spec_with_multiple_scripts",
          "test_pipeline_testing_spec_with_multiple_scripts",
          "TestModelIntegration.test_runtime_testing_configuration_integration",
          "test_runtime_testing_configuration_integration",
          "TestModelIntegration.test_model_relationships_and_dependencies",
          "test_model_relationships_and_dependencies",
          "TestModelEdgeCases.test_empty_script_execution_spec",
          "test_empty_script_execution_spec",
          "TestModelEdgeCases.test_script_test_result_zero_execution_time",
          "test_script_test_result_zero_execution_time",
          "TestModelEdgeCases.test_data_compatibility_result_empty_issues",
          "test_data_compatibility_result_empty_issues",
          "TestModelEdgeCases.test_pipeline_testing_spec_single_node",
          "test_pipeline_testing_spec_single_node",
          "TestModelEdgeCases.test_large_job_args_and_environ_vars",
          "test_large_job_args_and_environ_vars",
          "TestModelEdgeCases.test_special_characters_in_paths",
          "test_special_characters_in_paths",
          "TestModelPerformance.test_large_pipeline_spec_creation",
          "test_large_pipeline_spec_creation",
          "TestModelPerformance.test_model_serialization_performance",
          "test_model_serialization_performance",
          "test_script_test_result_creation",
          "test_script_test_result_with_error",
          "test_data_compatibility_result_creation",
          "test_data_compatibility_result_with_issues",
          "temp_dir",
          "specs_dir",
          "test_script_execution_spec_creation",
          "test_create_default_spec",
          "test_save_and_load_spec",
          "test_load_nonexistent_spec",
          "test_filename_generation",
          "test_pipeline_testing_spec_creation",
          "test_runtime_testing_configuration_creation",
          "test_runtime_testing_configuration_defaults",
          "temp_dir",
          "test_enhanced_script_execution_spec_creation",
          "test_enhanced_spec_backward_compatibility_properties",
          "test_enhanced_spec_from_script_execution_spec",
          "test_enhanced_data_compatibility_result_creation",
          "test_enhanced_result_with_no_matches",
          "test_enhanced_result_multiple_matches",
          "test_enhanced_result_inheritance_from_basic",
          "test_path_spec_creation",
          "test_path_spec_with_minimal_fields",
          "test_path_spec_matches_name_or_alias",
          "test_path_match_creation",
          "test_match_type_enum_values",
          "test_path_match_with_different_match_types",
          "temp_dir",
          "test_script_execution_spec_json_serialization",
          "test_script_test_result_serialization",
          "test_data_compatibility_result_serialization",
          "test_script_execution_spec_required_fields",
          "test_script_test_result_required_fields",
          "test_data_compatibility_result_required_fields",
          "test_script_execution_spec_default_values",
          "test_script_test_result_default_values",
          "test_data_compatibility_result_default_values",
          "test_pipeline_testing_spec_with_multiple_scripts",
          "test_runtime_testing_configuration_integration",
          "test_model_relationships_and_dependencies",
          "test_empty_script_execution_spec",
          "test_script_test_result_zero_execution_time",
          "test_data_compatibility_result_empty_issues",
          "test_pipeline_testing_spec_single_node",
          "test_large_job_args_and_environ_vars",
          "test_special_characters_in_paths",
          "test_large_pipeline_spec_creation",
          "test_model_serialization_performance"
        ],
        "validation/runtime/test_inference_integration.py": [
          "TestRealWorldIntegration.temp_dir",
          "temp_dir",
          "TestRealWorldIntegration.tester",
          "tester",
          "TestRealWorldIntegration.test_package_step_output_structure",
          "test_package_step_output_structure",
          "TestRealWorldIntegration.test_payload_step_output_structure",
          "test_payload_step_output_structure",
          "TestRealWorldIntegration.test_xgboost_inference_handler_structure",
          "test_xgboost_inference_handler_structure",
          "TestRealWorldIntegration.test_registration_step_input_format_compatibility",
          "test_registration_step_input_format_compatibility",
          "TestRealWorldIntegration.test_end_to_end_package_payload_inference_workflow",
          "test_end_to_end_package_payload_inference_workflow",
          "TestRealWorldIntegration.test_package_step_contract_compatibility",
          "test_package_step_contract_compatibility",
          "TestRealWorldIntegration.test_payload_step_contract_compatibility",
          "test_payload_step_contract_compatibility",
          "TestRealWorldIntegration.test_xgboost_handler_real_signature_compatibility",
          "test_xgboost_handler_real_signature_compatibility",
          "TestRealWorldIntegration._create_package_step_output",
          "_create_package_step_output",
          "TestRealWorldIntegration._create_payload_step_output",
          "_create_payload_step_output",
          "TestRealWorldIntegration._create_mock_xgboost_handler",
          "_create_mock_xgboost_handler",
          "temp_dir",
          "tester",
          "test_package_step_output_structure",
          "test_payload_step_output_structure",
          "test_xgboost_inference_handler_structure",
          "test_registration_step_input_format_compatibility",
          "test_end_to_end_package_payload_inference_workflow",
          "test_package_step_contract_compatibility",
          "test_payload_step_contract_compatibility",
          "test_xgboost_handler_real_signature_compatibility",
          "_create_package_step_output",
          "_create_payload_step_output",
          "_create_mock_xgboost_handler"
        ],
        "validation/shared/test_chart_utils.py": [
          "TestQualityColorMapping.test_get_quality_color_excellent",
          "test_get_quality_color_excellent",
          "TestQualityColorMapping.test_get_quality_color_good",
          "test_get_quality_color_good",
          "TestQualityColorMapping.test_get_quality_color_satisfactory",
          "test_get_quality_color_satisfactory",
          "TestQualityColorMapping.test_get_quality_color_needs_work",
          "test_get_quality_color_needs_work",
          "TestQualityColorMapping.test_get_quality_color_poor",
          "test_get_quality_color_poor",
          "TestQualityColorMapping.test_get_quality_color_custom_config",
          "test_get_quality_color_custom_config",
          "TestQualityColorMapping.test_get_quality_color_edge_cases",
          "test_get_quality_color_edge_cases",
          "TestQualityRating.test_get_quality_rating_excellent",
          "test_get_quality_rating_excellent",
          "TestQualityRating.test_get_quality_rating_good",
          "test_get_quality_rating_good",
          "TestQualityRating.test_get_quality_rating_satisfactory",
          "test_get_quality_rating_satisfactory",
          "TestQualityRating.test_get_quality_rating_needs_work",
          "test_get_quality_rating_needs_work",
          "TestQualityRating.test_get_quality_rating_poor",
          "test_get_quality_rating_poor",
          "TestScoreBarChart.test_create_score_bar_chart_no_matplotlib",
          "test_create_score_bar_chart_no_matplotlib",
          "TestScoreBarChart.test_create_score_bar_chart_basic",
          "test_create_score_bar_chart_basic",
          "TestScoreBarChart.test_create_score_bar_chart_with_output",
          "test_create_score_bar_chart_with_output",
          "TestScoreBarChart.test_create_score_bar_chart_with_overall_score",
          "test_create_score_bar_chart_with_overall_score",
          "TestScoreBarChart.test_create_score_bar_chart_many_levels",
          "test_create_score_bar_chart_many_levels",
          "TestScoreBarChart.test_create_score_bar_chart_exception_handling",
          "test_create_score_bar_chart_exception_handling",
          "TestComparisonChart.test_create_comparison_chart_basic",
          "test_create_comparison_chart_basic",
          "TestComparisonChart.test_create_comparison_chart_no_matplotlib",
          "test_create_comparison_chart_no_matplotlib",
          "TestTrendChart.test_create_trend_chart_basic",
          "test_create_trend_chart_basic",
          "TestTrendChart.test_create_trend_chart_no_matplotlib",
          "test_create_trend_chart_no_matplotlib",
          "TestQualityDistributionChart.test_create_quality_distribution_chart_basic",
          "test_create_quality_distribution_chart_basic",
          "TestQualityDistributionChart.test_create_quality_distribution_chart_no_matplotlib",
          "test_create_quality_distribution_chart_no_matplotlib",
          "TestChartConfiguration.test_default_chart_config_structure",
          "test_default_chart_config_structure",
          "TestChartConfiguration.test_quality_thresholds_structure",
          "test_quality_thresholds_structure",
          "TestEdgeCasesAndErrorHandling.test_empty_data_handling",
          "test_empty_data_handling",
          "TestEdgeCasesAndErrorHandling.test_mismatched_data_lengths",
          "test_mismatched_data_lengths",
          "TestEdgeCasesAndErrorHandling.test_invalid_scores",
          "test_invalid_scores",
          "TestEdgeCasesAndErrorHandling.test_file_path_edge_cases",
          "test_file_path_edge_cases",
          "TestEdgeCasesAndErrorHandling.test_custom_config_partial",
          "test_custom_config_partial",
          "test_get_quality_color_excellent",
          "test_get_quality_color_good",
          "test_get_quality_color_satisfactory",
          "test_get_quality_color_needs_work",
          "test_get_quality_color_poor",
          "test_get_quality_color_custom_config",
          "test_get_quality_color_edge_cases",
          "test_get_quality_rating_excellent",
          "test_get_quality_rating_good",
          "test_get_quality_rating_satisfactory",
          "test_get_quality_rating_needs_work",
          "test_get_quality_rating_poor",
          "test_create_score_bar_chart_no_matplotlib",
          "test_create_score_bar_chart_basic",
          "test_create_score_bar_chart_with_output",
          "test_create_score_bar_chart_with_overall_score",
          "test_create_score_bar_chart_many_levels",
          "test_create_score_bar_chart_exception_handling",
          "test_create_comparison_chart_basic",
          "test_create_comparison_chart_no_matplotlib",
          "test_create_trend_chart_basic",
          "test_create_trend_chart_no_matplotlib",
          "test_create_quality_distribution_chart_basic",
          "test_create_quality_distribution_chart_no_matplotlib",
          "test_default_chart_config_structure",
          "test_quality_thresholds_structure",
          "test_empty_data_handling",
          "test_mismatched_data_lengths",
          "test_invalid_scores",
          "test_file_path_edge_cases",
          "test_custom_config_partial"
        ],
        "validation/alignment/test_unified_alignment_tester_refactored.py": [
          "TestUnifiedAlignmentTesterRefactored.mock_workspace_dirs",
          "mock_workspace_dirs",
          "TestUnifiedAlignmentTesterRefactored.tester",
          "tester",
          "TestUnifiedAlignmentTesterRefactored.test_initialization_with_configuration_validation",
          "test_initialization_with_configuration_validation",
          "TestUnifiedAlignmentTesterRefactored.test_initialization_with_configuration_issues",
          "test_initialization_with_configuration_issues",
          "TestUnifiedAlignmentTesterRefactored.test_run_validation_for_step_excluded_step",
          "test_run_validation_for_step_excluded_step",
          "TestUnifiedAlignmentTesterRefactored.test_run_validation_for_step_script_based",
          "test_run_validation_for_step_script_based",
          "TestUnifiedAlignmentTesterRefactored.test_run_validation_for_step_non_script",
          "test_run_validation_for_step_non_script",
          "TestUnifiedAlignmentTesterRefactored.test_run_validation_for_step_with_failures",
          "test_run_validation_for_step_with_failures",
          "TestUnifiedAlignmentTesterRefactored.test_discover_scripts_integration",
          "test_discover_scripts_integration",
          "TestUnifiedAlignmentTesterRefactored.test_run_full_validation_with_mixed_step_types",
          "test_run_full_validation_with_mixed_step_types",
          "TestUnifiedAlignmentTesterRefactored.test_get_validation_summary_with_step_types",
          "test_get_validation_summary_with_step_types",
          "TestUnifiedAlignmentTesterRefactored.test_performance_optimization_level_skipping",
          "test_performance_optimization_level_skipping",
          "TestUnifiedAlignmentTesterBackwardCompatibility.tester",
          "tester",
          "TestUnifiedAlignmentTesterBackwardCompatibility.test_validate_specific_script_backward_compatibility",
          "test_validate_specific_script_backward_compatibility",
          "TestUnifiedAlignmentTesterBackwardCompatibility.test_old_api_parameters_still_work",
          "test_old_api_parameters_still_work",
          "mock_workspace_dirs",
          "tester",
          "test_initialization_with_configuration_validation",
          "test_initialization_with_configuration_issues",
          "test_run_validation_for_step_excluded_step",
          "test_run_validation_for_step_script_based",
          "test_run_validation_for_step_non_script",
          "test_run_validation_for_step_with_failures",
          "test_discover_scripts_integration",
          "test_run_full_validation_with_mixed_step_types",
          "test_get_validation_summary_with_step_types",
          "test_performance_optimization_level_skipping",
          "tester",
          "test_validate_specific_script_backward_compatibility",
          "test_old_api_parameters_still_work",
          "mock_step_type_side_effect",
          "mock_exclusion_side_effect",
          "mock_ruleset_side_effect"
        ],
        "validation/builders/reporting/test_scoring.py": [
          "TestStreamlinedStepBuilderScorerInitialization.test_init_with_validation_results",
          "test_init_with_validation_results",
          "TestStreamlinedStepBuilderScorerInitialization.test_init_with_empty_components",
          "test_init_with_empty_components",
          "TestStreamlinedStepBuilderScorerAlignmentValidation.test_score_alignment_validation_passed_status",
          "test_score_alignment_validation_passed_status",
          "TestStreamlinedStepBuilderScorerAlignmentValidation.test_score_alignment_validation_completed_status",
          "test_score_alignment_validation_completed_status",
          "TestStreamlinedStepBuilderScorerAlignmentValidation.test_score_alignment_validation_failed_status",
          "test_score_alignment_validation_failed_status",
          "TestStreamlinedStepBuilderScorerAlignmentValidation.test_score_alignment_validation_no_data",
          "test_score_alignment_validation_no_data",
          "TestStreamlinedStepBuilderScorerAlignmentValidation.test_score_alignment_validation_with_penalty_cap",
          "test_score_alignment_validation_with_penalty_cap",
          "TestStreamlinedStepBuilderScorerIntegrationTesting.test_score_integration_testing_completed",
          "test_score_integration_testing_completed",
          "TestStreamlinedStepBuilderScorerIntegrationTesting.test_score_integration_testing_issues_found",
          "test_score_integration_testing_issues_found",
          "TestStreamlinedStepBuilderScorerIntegrationTesting.test_score_integration_testing_error",
          "test_score_integration_testing_error",
          "TestStreamlinedStepBuilderScorerIntegrationTesting.test_score_integration_testing_no_data",
          "test_score_integration_testing_no_data",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_completed_with_capability",
          "test_score_step_creation_completed_with_capability",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_completed_without_capability",
          "test_score_step_creation_completed_without_capability",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_config_error",
          "test_score_step_creation_config_error",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_other_error",
          "test_score_step_creation_other_error",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_unknown_status",
          "test_score_step_creation_unknown_status",
          "TestStreamlinedStepBuilderScorerStepCreation.test_score_step_creation_no_data",
          "test_score_step_creation_no_data",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_calculate_overall_score_all_components",
          "test_calculate_overall_score_all_components",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_calculate_overall_score_mixed_results",
          "test_calculate_overall_score_mixed_results",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_calculate_overall_score_no_components",
          "test_calculate_overall_score_no_components",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_get_rating_excellent",
          "test_get_rating_excellent",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_get_rating_good",
          "test_get_rating_good",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_get_rating_satisfactory",
          "test_get_rating_satisfactory",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_get_rating_needs_work",
          "test_get_rating_needs_work",
          "TestStreamlinedStepBuilderScorerOverallScoring.test_get_rating_poor",
          "test_get_rating_poor",
          "TestStreamlinedStepBuilderScorerReportGeneration.test_generate_report_complete",
          "test_generate_report_complete",
          "TestStreamlinedStepBuilderScorerReportGeneration.test_generate_report_minimal_data",
          "test_generate_report_minimal_data",
          "TestStreamlinedStepBuilderScorerReportGeneration.test_save_report",
          "test_save_report",
          "TestStreamlinedStepBuilderScorerReportGeneration.test_print_report",
          "test_print_report",
          "TestStreamlinedStepBuilderScorerComponentScoring.test_calculate_component_score_alignment_validation",
          "test_calculate_component_score_alignment_validation",
          "TestStreamlinedStepBuilderScorerComponentScoring.test_calculate_component_score_integration_testing",
          "test_calculate_component_score_integration_testing",
          "TestStreamlinedStepBuilderScorerComponentScoring.test_calculate_component_score_step_creation",
          "test_calculate_component_score_step_creation",
          "TestStreamlinedStepBuilderScorerComponentScoring.test_calculate_component_score_unknown_component",
          "test_calculate_component_score_unknown_component",
          "TestStreamlinedStepBuilderScorerUtilityFunctions.test_score_builder_validation_results_function",
          "test_score_builder_validation_results_function",
          "TestStreamlinedStepBuilderScorerUtilityFunctions.test_score_builder_validation_results_no_save",
          "test_score_builder_validation_results_no_save",
          "TestStreamlinedStepBuilderScorerUtilityFunctions.test_score_builder_results_legacy_compatibility",
          "test_score_builder_results_legacy_compatibility",
          "TestStreamlinedStepBuilderScorerConstants.test_level_weights_constants",
          "test_level_weights_constants",
          "TestStreamlinedStepBuilderScorerConstants.test_rating_levels_constants",
          "test_rating_levels_constants",
          "TestStreamlinedStepBuilderScorerErrorHandling.test_score_alignment_validation_exception_handling",
          "test_score_alignment_validation_exception_handling",
          "TestStreamlinedStepBuilderScorerErrorHandling.test_calculate_overall_score_with_missing_components",
          "test_calculate_overall_score_with_missing_components",
          "TestStreamlinedStepBuilderScorerErrorHandling.test_save_report_directory_creation",
          "test_save_report_directory_creation",
          "TestStreamlinedStepBuilderScorerEdgeCases.test_score_with_zero_total_levels",
          "test_score_with_zero_total_levels",
          "TestStreamlinedStepBuilderScorerEdgeCases.test_score_with_all_failed_levels",
          "test_score_with_all_failed_levels",
          "TestStreamlinedStepBuilderScorerEdgeCases.test_integration_testing_with_no_checks",
          "test_integration_testing_with_no_checks",
          "test_init_with_validation_results",
          "test_init_with_empty_components",
          "test_score_alignment_validation_passed_status",
          "test_score_alignment_validation_completed_status",
          "test_score_alignment_validation_failed_status",
          "test_score_alignment_validation_no_data",
          "test_score_alignment_validation_with_penalty_cap",
          "test_score_integration_testing_completed",
          "test_score_integration_testing_issues_found",
          "test_score_integration_testing_error",
          "test_score_integration_testing_no_data",
          "test_score_step_creation_completed_with_capability",
          "test_score_step_creation_completed_without_capability",
          "test_score_step_creation_config_error",
          "test_score_step_creation_other_error",
          "test_score_step_creation_unknown_status",
          "test_score_step_creation_no_data",
          "test_calculate_overall_score_all_components",
          "test_calculate_overall_score_mixed_results",
          "test_calculate_overall_score_no_components",
          "test_get_rating_excellent",
          "test_get_rating_good",
          "test_get_rating_satisfactory",
          "test_get_rating_needs_work",
          "test_get_rating_poor",
          "test_generate_report_complete",
          "test_generate_report_minimal_data",
          "test_save_report",
          "test_print_report",
          "test_calculate_component_score_alignment_validation",
          "test_calculate_component_score_integration_testing",
          "test_calculate_component_score_step_creation",
          "test_calculate_component_score_unknown_component",
          "test_score_builder_validation_results_function",
          "test_score_builder_validation_results_no_save",
          "test_score_builder_results_legacy_compatibility",
          "test_level_weights_constants",
          "test_rating_levels_constants",
          "test_score_alignment_validation_exception_handling",
          "test_calculate_overall_score_with_missing_components",
          "test_save_report_directory_creation",
          "test_score_with_zero_total_levels",
          "test_score_with_all_failed_levels",
          "test_integration_testing_with_no_checks"
        ],
        "validation/builders/reporting/test_builder_reporter.py": [
          "TestStreamlinedBuilderTestReportInitialization.test_init_with_basic_parameters",
          "test_init_with_basic_parameters",
          "TestStreamlinedBuilderTestReportInitialization.test_init_timestamp_is_recent",
          "test_init_timestamp_is_recent",
          "TestStreamlinedBuilderTestReportDataManagement.sample_report",
          "sample_report",
          "TestStreamlinedBuilderTestReportDataManagement.test_add_alignment_results",
          "test_add_alignment_results",
          "TestStreamlinedBuilderTestReportDataManagement.test_add_integration_results",
          "test_add_integration_results",
          "TestStreamlinedBuilderTestReportDataManagement.test_add_scoring_data",
          "test_add_scoring_data",
          "TestStreamlinedBuilderTestReportStatusDetermination.sample_report",
          "sample_report",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_passing_with_alignment_and_integration",
          "test_get_overall_status_passing_with_alignment_and_integration",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_mostly_passing_with_issues",
          "test_get_overall_status_mostly_passing_with_issues",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_partially_passing_with_integration_error",
          "test_get_overall_status_partially_passing_with_integration_error",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_failing_with_alignment_failure",
          "test_get_overall_status_failing_with_alignment_failure",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_unknown_without_results",
          "test_get_overall_status_unknown_without_results",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_passing_with_integration_only",
          "test_get_overall_status_passing_with_integration_only",
          "TestStreamlinedBuilderTestReportStatusDetermination.test_get_overall_status_failing_with_integration_only",
          "test_get_overall_status_failing_with_integration_only",
          "TestStreamlinedBuilderTestReportQualityMetrics.sample_report",
          "sample_report",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_get_quality_score_with_scoring_data",
          "test_get_quality_score_with_scoring_data",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_get_quality_score_without_scoring_data",
          "test_get_quality_score_without_scoring_data",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_get_quality_rating_with_scoring_data",
          "test_get_quality_rating_with_scoring_data",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_get_quality_rating_without_scoring_data",
          "test_get_quality_rating_without_scoring_data",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_is_passing_true",
          "test_is_passing_true",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_is_passing_mostly_passing",
          "test_is_passing_mostly_passing",
          "TestStreamlinedBuilderTestReportQualityMetrics.test_is_passing_false",
          "test_is_passing_false",
          "TestStreamlinedBuilderTestReportIssueExtraction.sample_report",
          "sample_report",
          "TestStreamlinedBuilderTestReportIssueExtraction.test_get_critical_issues_from_alignment_results",
          "test_get_critical_issues_from_alignment_results",
          "TestStreamlinedBuilderTestReportIssueExtraction.test_get_critical_issues_from_integration_results",
          "test_get_critical_issues_from_integration_results",
          "TestStreamlinedBuilderTestReportIssueExtraction.test_get_critical_issues_from_both_sources",
          "test_get_critical_issues_from_both_sources",
          "TestStreamlinedBuilderTestReportIssueExtraction.test_get_critical_issues_empty_when_no_issues",
          "test_get_critical_issues_empty_when_no_issues",
          "TestStreamlinedBuilderTestReportIssueExtraction.test_get_critical_issues_handles_non_dict_failed_tests",
          "test_get_critical_issues_handles_non_dict_failed_tests",
          "TestStreamlinedBuilderTestReportExportAndSerialization.complete_report",
          "complete_report",
          "TestStreamlinedBuilderTestReportExportAndSerialization.test_export_to_json_structure",
          "test_export_to_json_structure",
          "TestStreamlinedBuilderTestReportExportAndSerialization.test_export_to_json_minimal_data",
          "test_export_to_json_minimal_data",
          "TestStreamlinedBuilderTestReportExportAndSerialization.test_save_to_file",
          "test_save_to_file",
          "TestStreamlinedBuilderTestReportExportAndSerialization.test_save_to_file_creates_directories",
          "test_save_to_file_creates_directories",
          "TestStreamlinedBuilderTestReportPrintSummary.complete_report",
          "complete_report",
          "TestStreamlinedBuilderTestReportPrintSummary.test_print_summary_output",
          "test_print_summary_output",
          "TestStreamlinedBuilderTestReportPrintSummary.test_print_summary_failing_status",
          "test_print_summary_failing_status",
          "TestStreamlinedBuilderTestReportPrintSummary.test_print_summary_with_critical_issues",
          "test_print_summary_with_critical_issues",
          "TestStreamlinedBuilderTestReportPrintSummary.test_print_summary_minimal_data",
          "test_print_summary_minimal_data",
          "TestStreamlinedBuilderTestReporterInitialization.test_init_with_default_output_dir",
          "test_init_with_default_output_dir",
          "TestStreamlinedBuilderTestReporterInitialization.test_init_with_custom_output_dir",
          "test_init_with_custom_output_dir",
          "TestStreamlinedBuilderTestReporterStepNameInference.reporter",
          "reporter",
          "TestStreamlinedBuilderTestReporterStepNameInference.test_infer_step_name_with_suffix",
          "test_infer_step_name_with_suffix",
          "TestStreamlinedBuilderTestReporterStepNameInference.test_infer_step_name_without_suffix",
          "test_infer_step_name_without_suffix",
          "TestStreamlinedBuilderTestReporterStepNameInference.test_infer_step_name_with_registry_lookup",
          "test_infer_step_name_with_registry_lookup",
          "TestStreamlinedBuilderTestReporterStepNameInference.test_infer_step_name_no_registry_match",
          "test_infer_step_name_no_registry_match",
          "TestStreamlinedBuilderTestReporterBuilderLoading.reporter",
          "reporter",
          "TestStreamlinedBuilderTestReporterBuilderLoading.test_load_builder_class_success",
          "test_load_builder_class_success",
          "TestStreamlinedBuilderTestReporterBuilderLoading.test_load_builder_class_not_found",
          "test_load_builder_class_not_found",
          "TestStreamlinedBuilderTestReporterBuilderLoading.test_load_builder_class_exception",
          "test_load_builder_class_exception",
          "TestStreamlinedBuilderTestReporterBuilderLoading.test_load_builder_class_caches_catalog",
          "test_load_builder_class_caches_catalog",
          "TestStreamlinedBuilderTestReporterTestAndReport.reporter",
          "reporter",
          "TestStreamlinedBuilderTestReporterTestAndReport.mock_builder_class",
          "mock_builder_class",
          "TestStreamlinedBuilderTestReporterTestAndReport.test_test_and_report_builder_success",
          "test_test_and_report_builder_success",
          "TestStreamlinedBuilderTestReporterTestAndReport.test_test_and_report_builder_infers_step_name",
          "test_test_and_report_builder_infers_step_name",
          "TestStreamlinedBuilderTestReporterTestAndReport.test_test_and_report_builder_with_exception",
          "test_test_and_report_builder_with_exception",
          "TestStreamlinedBuilderTestReporterTestAndReport.test_test_and_save_builder_report",
          "test_test_and_save_builder_report",
          "TestStreamlinedBuilderTestReporterStepTypeReporting.reporter",
          "reporter",
          "TestStreamlinedBuilderTestReporterStepTypeReporting.test_test_step_type_builders_success",
          "test_test_step_type_builders_success",
          "TestStreamlinedBuilderTestReporterStepTypeReporting.test_test_step_type_builders_no_steps_found",
          "test_test_step_type_builders_no_steps_found",
          "TestStreamlinedBuilderTestReporterStepTypeReporting.test_test_step_type_builders_with_load_failures",
          "test_test_step_type_builders_with_load_failures",
          "TestStreamlinedBuilderTestReporterStepTypeReporting.test_generate_streamlined_step_type_summary",
          "test_generate_streamlined_step_type_summary",
          "TestStreamlinedBuilderTestReporterErrorHandling.reporter",
          "reporter",
          "TestStreamlinedBuilderTestReporterErrorHandling.test_test_and_report_builder_handles_missing_step_info",
          "test_test_and_report_builder_handles_missing_step_info",
          "TestStreamlinedBuilderTestReporterErrorHandling.test_test_step_type_builders_handles_exception",
          "test_test_step_type_builders_handles_exception",
          "TestStreamlinedBuilderTestReporterErrorHandling.test_generate_summary_handles_empty_reports",
          "test_generate_summary_handles_empty_reports",
          "TestStreamlinedBuilderTestReporterBackwardCompatibility.test_backward_compatibility_aliases",
          "test_backward_compatibility_aliases",
          "test_init_with_basic_parameters",
          "test_init_timestamp_is_recent",
          "sample_report",
          "test_add_alignment_results",
          "test_add_integration_results",
          "test_add_scoring_data",
          "sample_report",
          "test_get_overall_status_passing_with_alignment_and_integration",
          "test_get_overall_status_mostly_passing_with_issues",
          "test_get_overall_status_partially_passing_with_integration_error",
          "test_get_overall_status_failing_with_alignment_failure",
          "test_get_overall_status_unknown_without_results",
          "test_get_overall_status_passing_with_integration_only",
          "test_get_overall_status_failing_with_integration_only",
          "sample_report",
          "test_get_quality_score_with_scoring_data",
          "test_get_quality_score_without_scoring_data",
          "test_get_quality_rating_with_scoring_data",
          "test_get_quality_rating_without_scoring_data",
          "test_is_passing_true",
          "test_is_passing_mostly_passing",
          "test_is_passing_false",
          "sample_report",
          "test_get_critical_issues_from_alignment_results",
          "test_get_critical_issues_from_integration_results",
          "test_get_critical_issues_from_both_sources",
          "test_get_critical_issues_empty_when_no_issues",
          "test_get_critical_issues_handles_non_dict_failed_tests",
          "complete_report",
          "test_export_to_json_structure",
          "test_export_to_json_minimal_data",
          "test_save_to_file",
          "test_save_to_file_creates_directories",
          "complete_report",
          "test_print_summary_output",
          "test_print_summary_failing_status",
          "test_print_summary_with_critical_issues",
          "test_print_summary_minimal_data",
          "test_init_with_default_output_dir",
          "test_init_with_custom_output_dir",
          "reporter",
          "test_infer_step_name_with_suffix",
          "test_infer_step_name_without_suffix",
          "test_infer_step_name_with_registry_lookup",
          "test_infer_step_name_no_registry_match",
          "reporter",
          "test_load_builder_class_success",
          "test_load_builder_class_not_found",
          "test_load_builder_class_exception",
          "test_load_builder_class_caches_catalog",
          "reporter",
          "mock_builder_class",
          "test_test_and_report_builder_success",
          "test_test_and_report_builder_infers_step_name",
          "test_test_and_report_builder_with_exception",
          "test_test_and_save_builder_report",
          "reporter",
          "test_test_step_type_builders_success",
          "test_test_step_type_builders_no_steps_found",
          "test_test_step_type_builders_with_load_failures",
          "test_generate_streamlined_step_type_summary",
          "reporter",
          "test_test_and_report_builder_handles_missing_step_info",
          "test_test_step_type_builders_handles_exception",
          "test_generate_summary_handles_empty_reports",
          "test_backward_compatibility_aliases"
        ],
        "validation/alignment/reporting/test_validation_reporter.py": [
          "TestValidationReporter.setup_method",
          "setup_method",
          "TestValidationReporter.teardown_method",
          "teardown_method",
          "TestValidationReporter.test_reporter_initialization",
          "test_reporter_initialization",
          "TestValidationReporter.test_generate_console_report",
          "test_generate_console_report",
          "TestValidationReporter.test_generate_detailed_console_report",
          "test_generate_detailed_console_report",
          "TestValidationReporter.test_export_to_json",
          "test_export_to_json",
          "TestValidationReporter.test_export_to_html",
          "test_export_to_html",
          "TestValidationReporter.test_calculate_score",
          "test_calculate_score",
          "TestValidationReporter.test_print_summary",
          "test_print_summary",
          "TestValidationReporter.test_add_result",
          "test_add_result",
          "TestValidationReporter.test_add_results",
          "test_add_results",
          "TestValidationReporter.test_generate_text_report",
          "test_generate_text_report",
          "TestValidationReporter.test_generate_json_report",
          "test_generate_json_report",
          "TestValidationReporter.test_generate_html_report",
          "test_generate_html_report",
          "TestValidationReporter.test_reporting_config",
          "test_reporting_config",
          "TestValidationReporter.test_colorize_functionality",
          "test_colorize_functionality",
          "TestValidationReporter.test_status_symbols_and_colors",
          "test_status_symbols_and_colors",
          "TestValidationReporter.test_issue_colors",
          "test_issue_colors",
          "TestValidationReporter.test_empty_summary_handling",
          "test_empty_summary_handling",
          "TestValidationReporter.test_report_filtering",
          "test_report_filtering",
          "TestValidationReporter.test_large_dataset_handling",
          "test_large_dataset_handling",
          "TestValidationReporter.test_issue_breakdown_generation",
          "test_issue_breakdown_generation",
          "TestValidationReporter.test_recommendations_generation",
          "test_recommendations_generation",
          "TestValidationReporter.test_report_error_handling",
          "test_report_error_handling",
          "TestValidationReporter.test_html_styles_generation",
          "test_html_styles_generation",
          "TestValidationReporter.test_html_summary_generation",
          "test_html_summary_generation",
          "TestValidationReporter.test_html_results_generation",
          "test_html_results_generation",
          "setup_method",
          "teardown_method",
          "test_reporter_initialization",
          "test_generate_console_report",
          "test_generate_detailed_console_report",
          "test_export_to_json",
          "test_export_to_html",
          "test_calculate_score",
          "test_print_summary",
          "test_add_result",
          "test_add_results",
          "test_generate_text_report",
          "test_generate_json_report",
          "test_generate_html_report",
          "test_reporting_config",
          "test_colorize_functionality",
          "test_status_symbols_and_colors",
          "test_issue_colors",
          "test_empty_summary_handling",
          "test_report_filtering",
          "test_large_dataset_handling",
          "test_issue_breakdown_generation",
          "test_recommendations_generation",
          "test_report_error_handling",
          "test_html_styles_generation",
          "test_html_summary_generation",
          "test_html_results_generation"
        ],
        "validation/alignment/core/test_contract_spec_alignment.py": [
          "TestContractSpecAlignment.workspace_dirs",
          "workspace_dirs",
          "TestContractSpecAlignment.contract_spec_alignment",
          "contract_spec_alignment",
          "TestContractSpecAlignment.sample_contract",
          "sample_contract",
          "TestContractSpecAlignment.sample_specification",
          "sample_specification",
          "TestContractSpecAlignment.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestContractSpecAlignment.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestContractSpecAlignment.test_step_catalog_initialization",
          "test_step_catalog_initialization",
          "TestContractSpecAlignment.test_validate_contract_with_valid_data",
          "test_validate_contract_with_valid_data",
          "TestContractSpecAlignment.test_validate_contract_with_logical_name_issues",
          "test_validate_contract_with_logical_name_issues",
          "TestContractSpecAlignment.test_validate_contract_with_io_alignment_issues",
          "test_validate_contract_with_io_alignment_issues",
          "TestContractSpecAlignment.test_validate_contract_with_multiple_issues",
          "test_validate_contract_with_multiple_issues",
          "TestContractSpecAlignment.test_validate_contract_with_malformed_contract",
          "test_validate_contract_with_malformed_contract",
          "TestContractSpecAlignment.test_validate_contract_with_missing_specification",
          "test_validate_contract_with_missing_specification",
          "TestContractSpecAlignment.test_validate_contract_error_handling",
          "test_validate_contract_error_handling",
          "TestContractSpecAlignment.test_integration_with_consolidated_validator",
          "test_integration_with_consolidated_validator",
          "TestContractSpecAlignment.test_validate_contract_result_structure",
          "test_validate_contract_result_structure",
          "TestContractSpecAlignment.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestContractSpecAlignment.test_performance_with_large_contract",
          "test_performance_with_large_contract",
          "workspace_dirs",
          "contract_spec_alignment",
          "sample_contract",
          "sample_specification",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_step_catalog_initialization",
          "test_validate_contract_with_valid_data",
          "test_validate_contract_with_logical_name_issues",
          "test_validate_contract_with_io_alignment_issues",
          "test_validate_contract_with_multiple_issues",
          "test_validate_contract_with_malformed_contract",
          "test_validate_contract_with_missing_specification",
          "test_validate_contract_error_handling",
          "test_integration_with_consolidated_validator",
          "test_validate_contract_result_structure",
          "test_workspace_directory_propagation",
          "test_performance_with_large_contract"
        ],
        "validation/alignment/core/test_level_validators.py": [
          "TestLevelValidators.setup_method",
          "setup_method",
          "TestLevelValidators.test_run_level_1_validation",
          "test_run_level_1_validation",
          "TestLevelValidators.test_run_level_2_validation",
          "test_run_level_2_validation",
          "TestLevelValidators.test_run_level_3_validation",
          "test_run_level_3_validation",
          "TestLevelValidators.test_run_level_4_validation_with_validator_class",
          "test_run_level_4_validation_with_validator_class",
          "TestLevelValidators.test_run_level_4_validation_without_validator_class",
          "test_run_level_4_validation_without_validator_class",
          "TestLevelValidators.test_run_level_4_validation_with_invalid_validator_class",
          "test_run_level_4_validation_with_invalid_validator_class",
          "TestLevelValidators.test_get_step_type_validator_success",
          "test_get_step_type_validator_success",
          "TestLevelValidators.test_get_step_type_validator_failure",
          "test_get_step_type_validator_failure",
          "TestLevelValidators.test_get_step_type_validator_exception_handling",
          "test_get_step_type_validator_exception_handling",
          "TestLevelValidators.test_integration_with_all_levels",
          "test_integration_with_all_levels",
          "TestLevelValidators.test_error_handling_in_validation_levels",
          "test_error_handling_in_validation_levels",
          "TestLevelValidators.test_workspace_dirs_propagation",
          "test_workspace_dirs_propagation",
          "TestLevelValidators.test_validation_result_structure",
          "test_validation_result_structure",
          "setup_method",
          "test_run_level_1_validation",
          "test_run_level_2_validation",
          "test_run_level_3_validation",
          "test_run_level_4_validation_with_validator_class",
          "test_run_level_4_validation_without_validator_class",
          "test_run_level_4_validation_with_invalid_validator_class",
          "test_get_step_type_validator_success",
          "test_get_step_type_validator_failure",
          "test_get_step_type_validator_exception_handling",
          "test_integration_with_all_levels",
          "test_error_handling_in_validation_levels",
          "test_workspace_dirs_propagation",
          "test_validation_result_structure"
        ],
        "validation/alignment/core/test_script_contract_alignment.py": [
          "TestScriptContractAlignment.workspace_dirs",
          "workspace_dirs",
          "TestScriptContractAlignment.script_contract_alignment",
          "script_contract_alignment",
          "TestScriptContractAlignment.sample_contract",
          "sample_contract",
          "TestScriptContractAlignment.sample_step_info",
          "sample_step_info",
          "TestScriptContractAlignment.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestScriptContractAlignment.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestScriptContractAlignment.test_step_catalog_initialization",
          "test_step_catalog_initialization",
          "TestScriptContractAlignment.test_validate_script_with_valid_main_function",
          "test_validate_script_with_valid_main_function",
          "TestScriptContractAlignment.test_validate_script_with_missing_main_function",
          "test_validate_script_with_missing_main_function",
          "TestScriptContractAlignment.test_validate_script_with_invalid_signature",
          "test_validate_script_with_invalid_signature",
          "TestScriptContractAlignment.test_validate_script_with_contract_alignment_issues",
          "test_validate_script_with_contract_alignment_issues",
          "TestScriptContractAlignment.test_validate_script_with_step_info_error",
          "test_validate_script_with_step_info_error",
          "TestScriptContractAlignment.test_validate_script_with_contract_loading_error",
          "test_validate_script_with_contract_loading_error",
          "TestScriptContractAlignment.test_validate_script_with_script_analyzer_error",
          "test_validate_script_with_script_analyzer_error",
          "TestScriptContractAlignment.test_validate_script_result_structure",
          "test_validate_script_result_structure",
          "TestScriptContractAlignment.test_integration_with_script_analyzer",
          "test_integration_with_script_analyzer",
          "TestScriptContractAlignment.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestScriptContractAlignment.test_validate_script_with_complex_parameter_usage",
          "test_validate_script_with_complex_parameter_usage",
          "TestScriptContractAlignment.test_validate_script_performance_with_large_script",
          "test_validate_script_performance_with_large_script",
          "workspace_dirs",
          "script_contract_alignment",
          "sample_contract",
          "sample_step_info",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_step_catalog_initialization",
          "test_validate_script_with_valid_main_function",
          "test_validate_script_with_missing_main_function",
          "test_validate_script_with_invalid_signature",
          "test_validate_script_with_contract_alignment_issues",
          "test_validate_script_with_step_info_error",
          "test_validate_script_with_contract_loading_error",
          "test_validate_script_with_script_analyzer_error",
          "test_validate_script_result_structure",
          "test_integration_with_script_analyzer",
          "test_workspace_directory_propagation",
          "test_validate_script_with_complex_parameter_usage",
          "test_validate_script_performance_with_large_script"
        ],
        "validation/alignment/core/test_spec_dependency_alignment.py": [
          "TestSpecDependencyAlignment.workspace_dirs",
          "workspace_dirs",
          "TestSpecDependencyAlignment.spec_dependency_alignment",
          "spec_dependency_alignment",
          "TestSpecDependencyAlignment.sample_specification",
          "sample_specification",
          "TestSpecDependencyAlignment.sample_dependency_info",
          "sample_dependency_info",
          "TestSpecDependencyAlignment.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestSpecDependencyAlignment.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestSpecDependencyAlignment.test_step_catalog_initialization",
          "test_step_catalog_initialization",
          "TestSpecDependencyAlignment.test_validate_specification_with_resolved_dependencies",
          "test_validate_specification_with_resolved_dependencies",
          "TestSpecDependencyAlignment.test_validate_specification_with_unresolved_dependencies",
          "test_validate_specification_with_unresolved_dependencies",
          "TestSpecDependencyAlignment.test_validate_specification_with_circular_dependencies",
          "test_validate_specification_with_circular_dependencies",
          "TestSpecDependencyAlignment.test_validate_specification_with_missing_specification",
          "test_validate_specification_with_missing_specification",
          "TestSpecDependencyAlignment.test_validate_specification_with_malformed_specification",
          "test_validate_specification_with_malformed_specification",
          "TestSpecDependencyAlignment.test_validate_specification_error_handling",
          "test_validate_specification_error_handling",
          "TestSpecDependencyAlignment.test_validate_specification_result_structure",
          "test_validate_specification_result_structure",
          "TestSpecDependencyAlignment.test_integration_with_dependency_validator",
          "test_integration_with_dependency_validator",
          "TestSpecDependencyAlignment.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestSpecDependencyAlignment.test_validate_specification_with_complex_dependencies",
          "test_validate_specification_with_complex_dependencies",
          "TestSpecDependencyAlignment.test_validate_specification_with_mixed_dependency_types",
          "test_validate_specification_with_mixed_dependency_types",
          "TestSpecDependencyAlignment.test_validate_specification_performance_with_large_spec",
          "test_validate_specification_performance_with_large_spec",
          "workspace_dirs",
          "spec_dependency_alignment",
          "sample_specification",
          "sample_dependency_info",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_step_catalog_initialization",
          "test_validate_specification_with_resolved_dependencies",
          "test_validate_specification_with_unresolved_dependencies",
          "test_validate_specification_with_circular_dependencies",
          "test_validate_specification_with_missing_specification",
          "test_validate_specification_with_malformed_specification",
          "test_validate_specification_error_handling",
          "test_validate_specification_result_structure",
          "test_integration_with_dependency_validator",
          "test_workspace_directory_propagation",
          "test_validate_specification_with_complex_dependencies",
          "test_validate_specification_with_mixed_dependency_types",
          "test_validate_specification_performance_with_large_spec"
        ],
        "validation/alignment/config/test_validation_ruleset.py": [
          "TestValidationRuleset.test_validation_rulesets_structure",
          "test_validation_rulesets_structure",
          "TestValidationRuleset.test_step_type_categories_are_valid",
          "test_step_type_categories_are_valid",
          "TestValidationRuleset.test_get_validation_ruleset",
          "test_get_validation_ruleset",
          "TestValidationRuleset.test_is_validation_level_enabled",
          "test_is_validation_level_enabled",
          "TestValidationRuleset.test_get_enabled_validation_levels",
          "test_get_enabled_validation_levels",
          "TestValidationRuleset.test_is_step_type_excluded",
          "test_is_step_type_excluded",
          "TestValidationRuleset.test_get_all_step_types",
          "test_get_all_step_types",
          "TestValidationRuleset.test_validate_step_type_configuration",
          "test_validate_step_type_configuration",
          "TestValidationRuleset.test_get_step_types_by_category",
          "test_get_step_types_by_category",
          "TestValidationRuleset.test_get_level_4_validator_class",
          "test_get_level_4_validator_class",
          "TestValidationRuleset.test_registry_integration_functions",
          "test_registry_integration_functions",
          "TestValidationRuleset.test_validation_level_enum_values",
          "test_validation_level_enum_values",
          "TestValidationRuleset.test_step_type_category_enum_values",
          "test_step_type_category_enum_values",
          "TestValidationRuleset.test_validation_ruleset_dataclass",
          "test_validation_ruleset_dataclass",
          "TestValidationRuleset.test_api_function_error_handling",
          "test_api_function_error_handling",
          "TestValidationRuleset.test_ruleset_completeness",
          "test_ruleset_completeness",
          "test_validation_rulesets_structure",
          "test_step_type_categories_are_valid",
          "test_get_validation_ruleset",
          "test_is_validation_level_enabled",
          "test_get_enabled_validation_levels",
          "test_is_step_type_excluded",
          "test_get_all_step_types",
          "test_validate_step_type_configuration",
          "test_get_step_types_by_category",
          "test_get_level_4_validator_class",
          "test_registry_integration_functions",
          "test_validation_level_enum_values",
          "test_step_type_category_enum_values",
          "test_validation_ruleset_dataclass",
          "test_api_function_error_handling",
          "test_ruleset_completeness"
        ],
        "validation/alignment/config/test_configuration_system.py": [
          "TestValidationRulesetConfiguration.test_validation_level_enum",
          "test_validation_level_enum",
          "TestValidationRulesetConfiguration.test_step_type_category_enum",
          "test_step_type_category_enum",
          "TestValidationRulesetConfiguration.test_validation_ruleset_dataclass",
          "test_validation_ruleset_dataclass",
          "TestValidationRulesetConfiguration.test_validation_rulesets_completeness",
          "test_validation_rulesets_completeness",
          "TestValidationRulesetConfiguration.test_script_based_step_types",
          "test_script_based_step_types",
          "TestValidationRulesetConfiguration.test_non_script_step_types",
          "test_non_script_step_types",
          "TestValidationRulesetConfiguration.test_excluded_step_types",
          "test_excluded_step_types",
          "TestValidationRulesetConfiguration.test_universal_level_3_requirement",
          "test_universal_level_3_requirement",
          "TestConfigurationAPI.test_get_validation_ruleset_existing",
          "test_get_validation_ruleset_existing",
          "TestConfigurationAPI.test_get_validation_ruleset_nonexistent",
          "test_get_validation_ruleset_nonexistent",
          "TestConfigurationAPI.test_get_validation_ruleset_case_sensitivity",
          "test_get_validation_ruleset_case_sensitivity",
          "TestConfigurationAPI.test_get_enabled_validation_levels",
          "test_get_enabled_validation_levels",
          "TestConfigurationAPI.test_is_validation_level_enabled",
          "test_is_validation_level_enabled",
          "TestConfigurationAPI.test_is_step_type_excluded",
          "test_is_step_type_excluded",
          "TestConfigurationAPI.test_validate_step_type_configuration",
          "test_validate_step_type_configuration",
          "TestConfigurationAPI.test_get_universal_validation_rules",
          "test_get_universal_validation_rules",
          "TestConfigurationAPI.test_get_step_type_validation_rules",
          "test_get_step_type_validation_rules",
          "TestConfigurationIntegration.test_registry_integration",
          "test_registry_integration",
          "TestConfigurationIntegration.test_configuration_consistency",
          "test_configuration_consistency",
          "TestConfigurationIntegration.test_performance_optimization_potential",
          "test_performance_optimization_potential",
          "TestConfigurationEdgeCases.test_empty_step_type",
          "test_empty_step_type",
          "TestConfigurationEdgeCases.test_none_step_type",
          "test_none_step_type",
          "TestConfigurationEdgeCases.test_whitespace_step_type",
          "test_whitespace_step_type",
          "TestConfigurationEdgeCases.test_special_characters_step_type",
          "test_special_characters_step_type",
          "TestConfigurationEdgeCases.test_very_long_step_type",
          "test_very_long_step_type",
          "TestConfigurationEdgeCases.test_unicode_step_type",
          "test_unicode_step_type",
          "TestConfigurationPerformance.test_configuration_lookup_performance",
          "test_configuration_lookup_performance",
          "TestConfigurationPerformance.test_level_checking_performance",
          "test_level_checking_performance",
          "TestConfigurationPerformance.test_configuration_memory_usage",
          "test_configuration_memory_usage",
          "test_validation_level_enum",
          "test_step_type_category_enum",
          "test_validation_ruleset_dataclass",
          "test_validation_rulesets_completeness",
          "test_script_based_step_types",
          "test_non_script_step_types",
          "test_excluded_step_types",
          "test_universal_level_3_requirement",
          "test_get_validation_ruleset_existing",
          "test_get_validation_ruleset_nonexistent",
          "test_get_validation_ruleset_case_sensitivity",
          "test_get_enabled_validation_levels",
          "test_is_validation_level_enabled",
          "test_is_step_type_excluded",
          "test_validate_step_type_configuration",
          "test_get_universal_validation_rules",
          "test_get_step_type_validation_rules",
          "test_registry_integration",
          "test_configuration_consistency",
          "test_performance_optimization_potential",
          "test_empty_step_type",
          "test_none_step_type",
          "test_whitespace_step_type",
          "test_special_characters_step_type",
          "test_very_long_step_type",
          "test_unicode_step_type",
          "test_configuration_lookup_performance",
          "test_level_checking_performance",
          "test_configuration_memory_usage"
        ],
        "validation/alignment/config/test_step_type_specific_rules.py": [
          "TestStepTypeSpecificRules.test_step_type_specific_validation_rules_structure",
          "test_step_type_specific_validation_rules_structure",
          "TestStepTypeSpecificRules.test_step_type_categories_are_valid",
          "test_step_type_categories_are_valid",
          "TestStepTypeSpecificRules.test_get_step_type_validation_rules",
          "test_get_step_type_validation_rules",
          "TestStepTypeSpecificRules.test_get_required_methods_for_step_type_processing",
          "test_get_required_methods_for_step_type_processing",
          "TestStepTypeSpecificRules.test_get_required_methods_for_step_type_training",
          "test_get_required_methods_for_step_type_training",
          "TestStepTypeSpecificRules.test_get_required_methods_for_step_type_createmodel",
          "test_get_required_methods_for_step_type_createmodel",
          "TestStepTypeSpecificRules.test_get_required_methods_for_step_type_transform",
          "test_get_required_methods_for_step_type_transform",
          "TestStepTypeSpecificRules.test_get_required_methods_for_step_type_invalid_step_type",
          "test_get_required_methods_for_step_type_invalid_step_type",
          "TestStepTypeSpecificRules.test_get_step_type_category",
          "test_get_step_type_category",
          "TestStepTypeSpecificRules.test_is_step_type_excluded",
          "test_is_step_type_excluded",
          "TestStepTypeSpecificRules.test_get_step_types_by_category",
          "test_get_step_types_by_category",
          "TestStepTypeSpecificRules.test_get_all_methods_for_step_type",
          "test_get_all_methods_for_step_type",
          "TestStepTypeSpecificRules.test_validate_step_type_compliance",
          "test_validate_step_type_compliance",
          "TestStepTypeSpecificRules.test_get_validation_summary",
          "test_get_validation_summary",
          "TestStepTypeSpecificRules.test_get_validation_rules_for_step_type",
          "test_get_validation_rules_for_step_type",
          "TestStepTypeSpecificRules.test_get_optional_methods_for_step_type",
          "test_get_optional_methods_for_step_type",
          "TestStepTypeSpecificRules.test_processing_step_specific_rules",
          "test_processing_step_specific_rules",
          "TestStepTypeSpecificRules.test_training_step_specific_rules",
          "test_training_step_specific_rules",
          "TestStepTypeSpecificRules.test_createmodel_step_specific_rules",
          "test_createmodel_step_specific_rules",
          "TestStepTypeSpecificRules.test_transform_step_specific_rules",
          "test_transform_step_specific_rules",
          "TestStepTypeSpecificRules.test_step_type_rules_completeness",
          "test_step_type_rules_completeness",
          "TestStepTypeSpecificRules.test_step_type_method_parameter_specifications",
          "test_step_type_method_parameter_specifications",
          "TestStepTypeSpecificRules.test_step_type_return_type_consistency",
          "test_step_type_return_type_consistency",
          "TestStepTypeSpecificRules.test_step_type_category_consistency",
          "test_step_type_category_consistency",
          "TestStepTypeSpecificRules.test_api_function_error_handling",
          "test_api_function_error_handling",
          "TestStepTypeSpecificRules.test_step_type_rules_integration_with_validation_system",
          "test_step_type_rules_integration_with_validation_system",
          "test_step_type_specific_validation_rules_structure",
          "test_step_type_categories_are_valid",
          "test_get_step_type_validation_rules",
          "test_get_required_methods_for_step_type_processing",
          "test_get_required_methods_for_step_type_training",
          "test_get_required_methods_for_step_type_createmodel",
          "test_get_required_methods_for_step_type_transform",
          "test_get_required_methods_for_step_type_invalid_step_type",
          "test_get_step_type_category",
          "test_is_step_type_excluded",
          "test_get_step_types_by_category",
          "test_get_all_methods_for_step_type",
          "test_validate_step_type_compliance",
          "test_get_validation_summary",
          "test_get_validation_rules_for_step_type",
          "test_get_optional_methods_for_step_type",
          "test_processing_step_specific_rules",
          "test_training_step_specific_rules",
          "test_createmodel_step_specific_rules",
          "test_transform_step_specific_rules",
          "test_step_type_rules_completeness",
          "test_step_type_method_parameter_specifications",
          "test_step_type_return_type_consistency",
          "test_step_type_category_consistency",
          "test_api_function_error_handling",
          "test_step_type_rules_integration_with_validation_system",
          "MockProcessingBuilder._create_processor",
          "_create_processor",
          "MockProcessingBuilder._get_outputs",
          "_get_outputs",
          "MockIncompleteBuilder._create_processor",
          "_create_processor",
          "_create_processor",
          "_get_outputs",
          "_create_processor"
        ],
        "validation/alignment/config/test_universal_builder_rules.py": [
          "TestUniversalBuilderRules.test_universal_builder_validation_rules_structure",
          "test_universal_builder_validation_rules_structure",
          "TestUniversalBuilderRules.test_universal_method_categories_are_valid",
          "test_universal_method_categories_are_valid",
          "TestUniversalBuilderRules.test_get_universal_validation_rules",
          "test_get_universal_validation_rules",
          "TestUniversalBuilderRules.test_get_required_methods",
          "test_get_required_methods",
          "TestUniversalBuilderRules.test_get_inherited_methods",
          "test_get_inherited_methods",
          "TestUniversalBuilderRules.test_validate_universal_compliance",
          "test_validate_universal_compliance",
          "TestUniversalBuilderRules.test_get_validation_rules",
          "test_get_validation_rules",
          "TestUniversalBuilderRules.test_universal_builder_validation_rules_content",
          "test_universal_builder_validation_rules_content",
          "TestUniversalBuilderRules.test_method_categorization_from_rules",
          "test_method_categorization_from_rules",
          "TestUniversalBuilderRules.test_implementation_patterns_content",
          "test_implementation_patterns_content",
          "TestUniversalBuilderRules.test_required_methods_specifications",
          "test_required_methods_specifications",
          "TestUniversalBuilderRules.test_inherited_methods_specifications",
          "test_inherited_methods_specifications",
          "TestUniversalBuilderRules.test_method_categorization_consistency",
          "test_method_categorization_consistency",
          "TestUniversalBuilderRules.test_universal_rules_completeness",
          "test_universal_rules_completeness",
          "TestUniversalBuilderRules.test_api_function_error_handling",
          "test_api_function_error_handling",
          "TestUniversalBuilderRules.test_universal_rules_integration_with_validation_system",
          "test_universal_rules_integration_with_validation_system",
          "TestUniversalBuilderRules.test_implementation_patterns_structure",
          "test_implementation_patterns_structure",
          "TestUniversalBuilderRules.test_universal_method_category_enum_coverage",
          "test_universal_method_category_enum_coverage",
          "test_universal_builder_validation_rules_structure",
          "test_universal_method_categories_are_valid",
          "test_get_universal_validation_rules",
          "test_get_required_methods",
          "test_get_inherited_methods",
          "test_validate_universal_compliance",
          "test_get_validation_rules",
          "test_universal_builder_validation_rules_content",
          "test_method_categorization_from_rules",
          "test_implementation_patterns_content",
          "test_required_methods_specifications",
          "test_inherited_methods_specifications",
          "test_method_categorization_consistency",
          "test_universal_rules_completeness",
          "test_api_function_error_handling",
          "test_universal_rules_integration_with_validation_system",
          "test_implementation_patterns_structure",
          "test_universal_method_category_enum_coverage",
          "MockCompliantBuilder.validate_configuration",
          "validate_configuration",
          "MockCompliantBuilder._get_inputs",
          "_get_inputs",
          "MockCompliantBuilder.create_step",
          "create_step",
          "MockIncompliantBuilder.validate_configuration",
          "validate_configuration",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "validate_configuration"
        ],
        "validation/alignment/utils/test_utils.py": [
          "TestValidationAlignmentUtils.temp_workspace",
          "temp_workspace",
          "TestValidationAlignmentUtils.test_normalize_path",
          "test_normalize_path",
          "TestValidationAlignmentUtils.test_extract_logical_name_from_path",
          "test_extract_logical_name_from_path",
          "TestValidationAlignmentUtils.test_is_sagemaker_path",
          "test_is_sagemaker_path",
          "TestValidationAlignmentUtils.test_format_alignment_issue",
          "test_format_alignment_issue",
          "TestValidationAlignmentUtils.test_group_issues_by_severity",
          "test_group_issues_by_severity",
          "TestValidationAlignmentUtils.test_get_highest_severity",
          "test_get_highest_severity",
          "TestValidationAlignmentUtils.test_validate_environment_setup",
          "test_validate_environment_setup",
          "TestValidationAlignmentUtils.test_get_validation_summary_stats",
          "test_get_validation_summary_stats",
          "TestValidationAlignmentUtils.test_normalize_path_edge_cases",
          "test_normalize_path_edge_cases",
          "TestValidationAlignmentUtils.test_extract_logical_name_edge_cases",
          "test_extract_logical_name_edge_cases",
          "TestValidationAlignmentUtils.test_is_sagemaker_path_edge_cases",
          "test_is_sagemaker_path_edge_cases",
          "TestValidationAlignmentUtils.test_format_alignment_issue_edge_cases",
          "test_format_alignment_issue_edge_cases",
          "TestValidationAlignmentUtils.test_group_issues_by_severity_edge_cases",
          "test_group_issues_by_severity_edge_cases",
          "TestValidationAlignmentUtils.test_get_validation_summary_stats_edge_cases",
          "test_get_validation_summary_stats_edge_cases",
          "TestValidationAlignmentUtils.test_validate_environment_setup_integration",
          "test_validate_environment_setup_integration",
          "TestValidationAlignmentUtils.test_utility_functions_error_handling",
          "test_utility_functions_error_handling",
          "temp_workspace",
          "test_normalize_path",
          "test_extract_logical_name_from_path",
          "test_is_sagemaker_path",
          "test_format_alignment_issue",
          "test_group_issues_by_severity",
          "test_get_highest_severity",
          "test_validate_environment_setup",
          "test_get_validation_summary_stats",
          "test_normalize_path_edge_cases",
          "test_extract_logical_name_edge_cases",
          "test_is_sagemaker_path_edge_cases",
          "test_format_alignment_issue_edge_cases",
          "test_group_issues_by_severity_edge_cases",
          "test_get_validation_summary_stats_edge_cases",
          "test_validate_environment_setup_integration",
          "test_utility_functions_error_handling"
        ],
        "validation/alignment/utils/test_validation_models.py": [
          "TestValidationEnums.test_validation_level_enum",
          "test_validation_level_enum",
          "TestValidationEnums.test_validation_status_enum",
          "test_validation_status_enum",
          "TestValidationEnums.test_issue_level_enum",
          "test_issue_level_enum",
          "TestValidationIssue.test_validation_issue_creation",
          "test_validation_issue_creation",
          "TestValidationIssue.test_validation_issue_optional_fields",
          "test_validation_issue_optional_fields",
          "TestValidationIssue.test_validation_issue_to_dict",
          "test_validation_issue_to_dict",
          "TestValidationIssue.test_validation_issue_from_dict",
          "test_validation_issue_from_dict",
          "TestValidationResult.test_validation_result_creation",
          "test_validation_result_creation",
          "TestValidationResult.test_validation_result_passed_status",
          "test_validation_result_passed_status",
          "TestValidationResult.test_validation_result_has_errors",
          "test_validation_result_has_errors",
          "TestValidationResult.test_validation_result_get_issues_by_level",
          "test_validation_result_get_issues_by_level",
          "TestValidationSummary.test_validation_summary_creation",
          "test_validation_summary_creation",
          "TestValidationSummary.test_validation_summary_success_rate",
          "test_validation_summary_success_rate",
          "TestValidationSummary.test_validation_summary_issue_breakdown",
          "test_validation_summary_issue_breakdown",
          "TestUtilityFunctions.test_create_validation_issue_helper",
          "test_create_validation_issue_helper",
          "TestUtilityFunctions.test_validation_result_factory",
          "test_validation_result_factory",
          "TestUtilityFunctions.test_validation_models_serialization",
          "test_validation_models_serialization",
          "test_validation_level_enum",
          "test_validation_status_enum",
          "test_issue_level_enum",
          "test_validation_issue_creation",
          "test_validation_issue_optional_fields",
          "test_validation_issue_to_dict",
          "test_validation_issue_from_dict",
          "test_validation_result_creation",
          "test_validation_result_passed_status",
          "test_validation_result_has_errors",
          "test_validation_result_get_issues_by_level",
          "test_validation_summary_creation",
          "test_validation_summary_success_rate",
          "test_validation_summary_issue_breakdown",
          "test_create_validation_issue_helper",
          "test_validation_result_factory",
          "test_validation_models_serialization"
        ],
        "validation/alignment/validators/test_createmodel_step_validator.py": [
          "TestCreateModelStepBuilderValidator.workspace_dirs",
          "workspace_dirs",
          "TestCreateModelStepBuilderValidator.validator",
          "validator",
          "TestCreateModelStepBuilderValidator.sample_createmodel_builder",
          "sample_createmodel_builder",
          "TestCreateModelStepBuilderValidator.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestCreateModelStepBuilderValidator.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestCreateModelStepBuilderValidator.test_validate_builder_config_alignment_with_valid_createmodel_builder",
          "test_validate_builder_config_alignment_with_valid_createmodel_builder",
          "TestCreateModelStepBuilderValidator.test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "TestCreateModelStepBuilderValidator.test_apply_step_specific_validation_missing_create_model",
          "test_apply_step_specific_validation_missing_create_model",
          "TestCreateModelStepBuilderValidator.test_validate_create_model_method_with_valid_implementation",
          "test_validate_create_model_method_with_valid_implementation",
          "TestCreateModelStepBuilderValidator.test_validate_create_model_method_with_invalid_return_type",
          "test_validate_create_model_method_with_invalid_return_type",
          "TestCreateModelStepBuilderValidator.test_validate_createmodel_outputs_with_valid_outputs",
          "test_validate_createmodel_outputs_with_valid_outputs",
          "TestCreateModelStepBuilderValidator.test_validate_createmodel_outputs_with_invalid_return_type",
          "test_validate_createmodel_outputs_with_invalid_return_type",
          "TestCreateModelStepBuilderValidator.test_validate_model_configuration_with_valid_config",
          "test_validate_model_configuration_with_valid_config",
          "TestCreateModelStepBuilderValidator.test_validate_model_configuration_missing_primary_container",
          "test_validate_model_configuration_missing_primary_container",
          "TestCreateModelStepBuilderValidator.test_validate_image_uri_method_with_get_image_uri_method",
          "test_validate_image_uri_method_with_get_image_uri_method",
          "TestCreateModelStepBuilderValidator.test_validate_image_uri_method_without_get_image_uri_method",
          "test_validate_image_uri_method_without_get_image_uri_method",
          "TestCreateModelStepBuilderValidator.test_integration_with_step_type_specific_validator_base",
          "test_integration_with_step_type_specific_validator_base",
          "TestCreateModelStepBuilderValidator.test_error_handling_during_validation",
          "test_error_handling_during_validation",
          "TestCreateModelStepBuilderValidator.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestCreateModelStepBuilderValidator.test_validate_with_complex_createmodel_configuration",
          "test_validate_with_complex_createmodel_configuration",
          "TestCreateModelStepBuilderValidator.test_performance_with_large_createmodel_configuration",
          "test_performance_with_large_createmodel_configuration",
          "TestCreateModelStepBuilderValidator.test_validation_result_consistency",
          "test_validation_result_consistency",
          "workspace_dirs",
          "validator",
          "sample_createmodel_builder",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_validate_builder_config_alignment_with_valid_createmodel_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_missing_create_model",
          "test_validate_create_model_method_with_valid_implementation",
          "test_validate_create_model_method_with_invalid_return_type",
          "test_validate_createmodel_outputs_with_valid_outputs",
          "test_validate_createmodel_outputs_with_invalid_return_type",
          "test_validate_model_configuration_with_valid_config",
          "test_validate_model_configuration_missing_primary_container",
          "test_validate_image_uri_method_with_get_image_uri_method",
          "test_validate_image_uri_method_without_get_image_uri_method",
          "test_integration_with_step_type_specific_validator_base",
          "test_error_handling_during_validation",
          "test_workspace_directory_propagation",
          "test_validate_with_complex_createmodel_configuration",
          "test_performance_with_large_createmodel_configuration",
          "test_validation_result_consistency",
          "SampleCreateModelBuilder.validate_configuration",
          "validate_configuration",
          "SampleCreateModelBuilder._get_inputs",
          "_get_inputs",
          "SampleCreateModelBuilder.create_step",
          "create_step",
          "SampleCreateModelBuilder._create_model",
          "_create_model",
          "SampleCreateModelBuilder._get_outputs",
          "_get_outputs",
          "IncompleteCreateModelBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteCreateModelBuilder._get_inputs",
          "_get_inputs",
          "IncompleteCreateModelBuilder.create_step",
          "create_step",
          "IncompleteCreateModelBuilder._get_outputs",
          "_get_outputs",
          "InvalidCreateModelBuilder._create_model",
          "_create_model",
          "InvalidOutputsBuilder._get_outputs",
          "_get_outputs",
          "InvalidModelBuilder._create_model",
          "_create_model",
          "ImageUriBuilder._create_model",
          "_create_model",
          "ImageUriBuilder._get_image_uri",
          "_get_image_uri",
          "ComplexCreateModelBuilder.validate_configuration",
          "validate_configuration",
          "ComplexCreateModelBuilder._get_inputs",
          "_get_inputs",
          "ComplexCreateModelBuilder.create_step",
          "create_step",
          "ComplexCreateModelBuilder._create_model",
          "_create_model",
          "ComplexCreateModelBuilder._get_outputs",
          "_get_outputs",
          "ComplexCreateModelBuilder._get_image_uri",
          "_get_image_uri",
          "LargeCreateModelBuilder.validate_configuration",
          "validate_configuration",
          "LargeCreateModelBuilder._get_inputs",
          "_get_inputs",
          "LargeCreateModelBuilder.create_step",
          "create_step",
          "LargeCreateModelBuilder._create_model",
          "_create_model",
          "LargeCreateModelBuilder._get_outputs",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_model",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "_create_model",
          "_get_outputs",
          "_create_model",
          "_create_model",
          "_get_image_uri",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_model",
          "_get_outputs",
          "_get_image_uri",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_model",
          "_get_outputs"
        ],
        "validation/alignment/validators/test_property_path_validator.py": [
          "TestSageMakerPropertyPathValidator.validator",
          "validator",
          "TestSageMakerPropertyPathValidator.test_validator_initialization",
          "test_validator_initialization",
          "TestSageMakerPropertyPathValidator.test_validate_specification_property_paths_empty_spec",
          "test_validate_specification_property_paths_empty_spec",
          "TestSageMakerPropertyPathValidator.test_validate_specification_property_paths_training_step",
          "test_validate_specification_property_paths_training_step",
          "TestSageMakerPropertyPathValidator.test_validate_specification_property_paths_processing_step",
          "test_validate_specification_property_paths_processing_step",
          "TestSageMakerPropertyPathValidator.test_validate_specification_property_paths_unknown_step_type",
          "test_validate_specification_property_paths_unknown_step_type",
          "TestSageMakerPropertyPathValidator.test_step_registry_integration",
          "test_step_registry_integration",
          "TestSageMakerPropertyPathValidator.test_step_registry_unavailable",
          "test_step_registry_unavailable",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_training",
          "test_get_valid_property_paths_for_step_type_training",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_processing",
          "test_get_valid_property_paths_for_step_type_processing",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_transform",
          "test_get_valid_property_paths_for_step_type_transform",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_tuning",
          "test_get_valid_property_paths_for_step_type_tuning",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_create_model",
          "test_get_valid_property_paths_for_step_type_create_model",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_lambda",
          "test_get_valid_property_paths_for_step_type_lambda",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_callback",
          "test_get_valid_property_paths_for_step_type_callback",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_quality_check",
          "test_get_valid_property_paths_for_step_type_quality_check",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_clarify",
          "test_get_valid_property_paths_for_step_type_clarify",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_for_step_type_emr",
          "test_get_valid_property_paths_for_step_type_emr",
          "TestSageMakerPropertyPathValidator.test_get_valid_property_paths_caching",
          "test_get_valid_property_paths_caching",
          "TestSageMakerPropertyPathValidator.test_validate_single_property_path_exact_match",
          "test_validate_single_property_path_exact_match",
          "TestSageMakerPropertyPathValidator.test_validate_single_property_path_pattern_match",
          "test_validate_single_property_path_pattern_match",
          "TestSageMakerPropertyPathValidator.test_validate_single_property_path_invalid",
          "test_validate_single_property_path_invalid",
          "TestSageMakerPropertyPathValidator.test_matches_property_path_pattern_exact",
          "test_matches_property_path_pattern_exact",
          "TestSageMakerPropertyPathValidator.test_matches_property_path_pattern_wildcard",
          "test_matches_property_path_pattern_wildcard",
          "TestSageMakerPropertyPathValidator.test_matches_property_path_pattern_complex",
          "test_matches_property_path_pattern_complex",
          "TestSageMakerPropertyPathValidator.test_get_property_path_suggestions",
          "test_get_property_path_suggestions",
          "TestSageMakerPropertyPathValidator.test_calculate_path_similarity",
          "test_calculate_path_similarity",
          "TestSageMakerPropertyPathValidator.test_get_step_type_documentation",
          "test_get_step_type_documentation",
          "TestSageMakerPropertyPathValidator.test_list_supported_step_types",
          "test_list_supported_step_types",
          "TestValidatePropertyPathsConvenienceFunction.test_validate_property_paths_function",
          "test_validate_property_paths_function",
          "TestEdgeCasesAndErrorHandling.validator",
          "validator",
          "TestEdgeCasesAndErrorHandling.test_validate_specification_with_no_outputs",
          "test_validate_specification_with_no_outputs",
          "TestEdgeCasesAndErrorHandling.test_validate_specification_with_outputs_no_property_paths",
          "test_validate_specification_with_outputs_no_property_paths",
          "TestEdgeCasesAndErrorHandling.test_validate_specification_with_empty_property_path",
          "test_validate_specification_with_empty_property_path",
          "TestEdgeCasesAndErrorHandling.test_validate_specification_with_malformed_data",
          "test_validate_specification_with_malformed_data",
          "TestEdgeCasesAndErrorHandling.test_step_registry_exception_handling",
          "test_step_registry_exception_handling",
          "TestEdgeCasesAndErrorHandling.test_pattern_matching_with_invalid_regex",
          "test_pattern_matching_with_invalid_regex",
          "TestEdgeCasesAndErrorHandling.test_similarity_calculation_with_empty_paths",
          "test_similarity_calculation_with_empty_paths",
          "TestEdgeCasesAndErrorHandling.test_property_path_suggestions_with_no_valid_paths",
          "test_property_path_suggestions_with_no_valid_paths",
          "TestEdgeCasesAndErrorHandling.test_validate_single_property_path_with_empty_valid_paths",
          "test_validate_single_property_path_with_empty_valid_paths",
          "TestEdgeCasesAndErrorHandling.test_case_insensitive_step_type_matching",
          "test_case_insensitive_step_type_matching",
          "validator",
          "test_validator_initialization",
          "test_validate_specification_property_paths_empty_spec",
          "test_validate_specification_property_paths_training_step",
          "test_validate_specification_property_paths_processing_step",
          "test_validate_specification_property_paths_unknown_step_type",
          "test_step_registry_integration",
          "test_step_registry_unavailable",
          "test_get_valid_property_paths_for_step_type_training",
          "test_get_valid_property_paths_for_step_type_processing",
          "test_get_valid_property_paths_for_step_type_transform",
          "test_get_valid_property_paths_for_step_type_tuning",
          "test_get_valid_property_paths_for_step_type_create_model",
          "test_get_valid_property_paths_for_step_type_lambda",
          "test_get_valid_property_paths_for_step_type_callback",
          "test_get_valid_property_paths_for_step_type_quality_check",
          "test_get_valid_property_paths_for_step_type_clarify",
          "test_get_valid_property_paths_for_step_type_emr",
          "test_get_valid_property_paths_caching",
          "test_validate_single_property_path_exact_match",
          "test_validate_single_property_path_pattern_match",
          "test_validate_single_property_path_invalid",
          "test_matches_property_path_pattern_exact",
          "test_matches_property_path_pattern_wildcard",
          "test_matches_property_path_pattern_complex",
          "test_get_property_path_suggestions",
          "test_calculate_path_similarity",
          "test_get_step_type_documentation",
          "test_list_supported_step_types",
          "test_validate_property_paths_function",
          "validator",
          "test_validate_specification_with_no_outputs",
          "test_validate_specification_with_outputs_no_property_paths",
          "test_validate_specification_with_empty_property_path",
          "test_validate_specification_with_malformed_data",
          "test_step_registry_exception_handling",
          "test_pattern_matching_with_invalid_regex",
          "test_similarity_calculation_with_empty_paths",
          "test_property_path_suggestions_with_no_valid_paths",
          "test_validate_single_property_path_with_empty_valid_paths",
          "test_case_insensitive_step_type_matching"
        ],
        "validation/alignment/validators/test_method_interface_validation.py": [
          "MockStepBuilder.validate_configuration",
          "validate_configuration",
          "MockStepBuilder._get_inputs",
          "_get_inputs",
          "MockStepBuilder.create_step",
          "create_step",
          "MockStepBuilder._get_outputs",
          "_get_outputs",
          "MockProcessingStepBuilder._create_processor",
          "_create_processor",
          "MockTrainingStepBuilder._create_estimator",
          "_create_estimator",
          "MockIncompleteStepBuilder.validate_configuration",
          "validate_configuration",
          "TestMethodInterfaceValidator.validator",
          "validator",
          "TestMethodInterfaceValidator.test_initialization",
          "test_initialization",
          "TestMethodInterfaceValidator.test_validate_universal_methods_complete_builder",
          "test_validate_universal_methods_complete_builder",
          "TestMethodInterfaceValidator.test_validate_universal_methods_incomplete_builder",
          "test_validate_universal_methods_incomplete_builder",
          "TestMethodInterfaceValidator.test_validate_step_type_methods_processing",
          "test_validate_step_type_methods_processing",
          "TestMethodInterfaceValidator.test_validate_step_type_methods_training",
          "test_validate_step_type_methods_training",
          "TestMethodInterfaceValidator.test_validate_step_type_methods_no_rules",
          "test_validate_step_type_methods_no_rules",
          "TestMethodInterfaceValidator.test_validate_builder_interface_priority_system",
          "test_validate_builder_interface_priority_system",
          "TestMethodInterfaceValidator.test_validate_builder_interface_incomplete_builder",
          "test_validate_builder_interface_incomplete_builder",
          "TestMethodInterfaceValidator.test_method_signature_validation",
          "test_method_signature_validation",
          "TestMethodInterfaceValidator.test_inheritance_compliance_checking",
          "test_inheritance_compliance_checking",
          "TestMethodInterfaceValidator.test_universal_rules_integration",
          "test_universal_rules_integration",
          "TestMethodInterfaceValidator.test_step_type_rules_integration",
          "test_step_type_rules_integration",
          "TestMethodInterfaceValidator.test_validation_issue_structure",
          "test_validation_issue_structure",
          "TestMethodInterfaceValidator.test_builder_class_discovery_integration",
          "test_builder_class_discovery_integration",
          "TestMethodInterfaceValidator.test_comprehensive_validation_workflow",
          "test_comprehensive_validation_workflow",
          "TestMethodInterfaceValidator.test_error_handling_malformed_builder",
          "test_error_handling_malformed_builder",
          "TestMethodInterfaceValidator.test_performance_with_large_builder",
          "test_performance_with_large_builder",
          "TestMethodInterfaceValidatorEdgeCases.validator",
          "validator",
          "TestMethodInterfaceValidatorEdgeCases.test_empty_workspace_dirs",
          "test_empty_workspace_dirs",
          "TestMethodInterfaceValidatorEdgeCases.test_none_workspace_dirs",
          "test_none_workspace_dirs",
          "TestMethodInterfaceValidatorEdgeCases.test_invalid_step_type",
          "test_invalid_step_type",
          "TestMethodInterfaceValidatorEdgeCases.test_builder_with_property_methods",
          "test_builder_with_property_methods",
          "TestMethodInterfaceValidatorEdgeCases.test_builder_with_static_methods",
          "test_builder_with_static_methods",
          "TestMethodInterfaceValidatorEdgeCases.test_builder_with_class_methods",
          "test_builder_with_class_methods",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "_create_processor",
          "_create_estimator",
          "validate_configuration",
          "validator",
          "test_initialization",
          "test_validate_universal_methods_complete_builder",
          "test_validate_universal_methods_incomplete_builder",
          "test_validate_step_type_methods_processing",
          "test_validate_step_type_methods_training",
          "test_validate_step_type_methods_no_rules",
          "test_validate_builder_interface_priority_system",
          "test_validate_builder_interface_incomplete_builder",
          "test_method_signature_validation",
          "test_inheritance_compliance_checking",
          "test_universal_rules_integration",
          "test_step_type_rules_integration",
          "test_validation_issue_structure",
          "test_builder_class_discovery_integration",
          "test_comprehensive_validation_workflow",
          "test_error_handling_malformed_builder",
          "test_performance_with_large_builder",
          "validator",
          "test_empty_workspace_dirs",
          "test_none_workspace_dirs",
          "test_invalid_step_type",
          "test_builder_with_property_methods",
          "test_builder_with_static_methods",
          "test_builder_with_class_methods",
          "CorrectSignatureBuilder.validate_configuration",
          "validate_configuration",
          "OverridingBuilder._get_step_name",
          "_get_step_name",
          "PropertyBuilder.some_property",
          "some_property",
          "StaticMethodBuilder.static_method",
          "static_method",
          "ClassMethodBuilder.class_method",
          "class_method",
          "validate_configuration",
          "_get_step_name",
          "some_property",
          "static_method",
          "class_method"
        ],
        "validation/alignment/validators/test_training_step_validator.py": [
          "TestTrainingStepBuilderValidator.workspace_dirs",
          "workspace_dirs",
          "TestTrainingStepBuilderValidator.validator",
          "validator",
          "TestTrainingStepBuilderValidator.sample_training_builder",
          "sample_training_builder",
          "TestTrainingStepBuilderValidator.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestTrainingStepBuilderValidator.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestTrainingStepBuilderValidator.test_validate_builder_config_alignment_with_valid_training_builder",
          "test_validate_builder_config_alignment_with_valid_training_builder",
          "TestTrainingStepBuilderValidator.test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "TestTrainingStepBuilderValidator.test_apply_step_specific_validation_missing_create_estimator",
          "test_apply_step_specific_validation_missing_create_estimator",
          "TestTrainingStepBuilderValidator.test_apply_step_specific_validation_missing_get_outputs",
          "test_apply_step_specific_validation_missing_get_outputs",
          "TestTrainingStepBuilderValidator.test_validate_create_estimator_method_with_valid_implementation",
          "test_validate_create_estimator_method_with_valid_implementation",
          "TestTrainingStepBuilderValidator.test_validate_create_estimator_method_missing_output_path_parameter",
          "test_validate_create_estimator_method_missing_output_path_parameter",
          "TestTrainingStepBuilderValidator.test_validate_create_estimator_method_with_invalid_return_type",
          "test_validate_create_estimator_method_with_invalid_return_type",
          "TestTrainingStepBuilderValidator.test_validate_training_outputs_with_valid_outputs",
          "test_validate_training_outputs_with_valid_outputs",
          "TestTrainingStepBuilderValidator.test_validate_training_outputs_with_invalid_return_type",
          "test_validate_training_outputs_with_invalid_return_type",
          "TestTrainingStepBuilderValidator.test_validate_training_configuration_with_valid_configuration",
          "test_validate_training_configuration_with_valid_configuration",
          "TestTrainingStepBuilderValidator.test_validate_estimator_type_patterns_with_valid_patterns",
          "test_validate_estimator_type_patterns_with_valid_patterns",
          "TestTrainingStepBuilderValidator.test_integration_with_step_type_specific_validator_base",
          "test_integration_with_step_type_specific_validator_base",
          "TestTrainingStepBuilderValidator.test_error_handling_during_validation",
          "test_error_handling_during_validation",
          "TestTrainingStepBuilderValidator.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestTrainingStepBuilderValidator.test_validate_with_complex_training_configuration",
          "test_validate_with_complex_training_configuration",
          "TestTrainingStepBuilderValidator.test_performance_with_large_training_configuration",
          "test_performance_with_large_training_configuration",
          "TestTrainingStepBuilderValidator.test_validation_result_consistency",
          "test_validation_result_consistency",
          "workspace_dirs",
          "validator",
          "sample_training_builder",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_validate_builder_config_alignment_with_valid_training_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_missing_create_estimator",
          "test_apply_step_specific_validation_missing_get_outputs",
          "test_validate_create_estimator_method_with_valid_implementation",
          "test_validate_create_estimator_method_missing_output_path_parameter",
          "test_validate_create_estimator_method_with_invalid_return_type",
          "test_validate_training_outputs_with_valid_outputs",
          "test_validate_training_outputs_with_invalid_return_type",
          "test_validate_training_configuration_with_valid_configuration",
          "test_validate_estimator_type_patterns_with_valid_patterns",
          "test_integration_with_step_type_specific_validator_base",
          "test_error_handling_during_validation",
          "test_workspace_directory_propagation",
          "test_validate_with_complex_training_configuration",
          "test_performance_with_large_training_configuration",
          "test_validation_result_consistency",
          "SampleTrainingBuilder.validate_configuration",
          "validate_configuration",
          "SampleTrainingBuilder._get_inputs",
          "_get_inputs",
          "SampleTrainingBuilder.create_step",
          "create_step",
          "SampleTrainingBuilder._create_estimator",
          "_create_estimator",
          "SampleTrainingBuilder._get_outputs",
          "_get_outputs",
          "IncompleteTrainingBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteTrainingBuilder._get_inputs",
          "_get_inputs",
          "IncompleteTrainingBuilder.create_step",
          "create_step",
          "IncompleteTrainingBuilder._get_outputs",
          "_get_outputs",
          "IncompleteTrainingBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteTrainingBuilder._get_inputs",
          "_get_inputs",
          "IncompleteTrainingBuilder.create_step",
          "create_step",
          "IncompleteTrainingBuilder._create_estimator",
          "_create_estimator",
          "InvalidTrainingBuilder._create_estimator",
          "_create_estimator",
          "InvalidTrainingBuilder._create_estimator",
          "_create_estimator",
          "InvalidOutputsBuilder._get_outputs",
          "_get_outputs",
          "ComplexTrainingBuilder.validate_configuration",
          "validate_configuration",
          "ComplexTrainingBuilder._get_inputs",
          "_get_inputs",
          "ComplexTrainingBuilder.create_step",
          "create_step",
          "ComplexTrainingBuilder._create_estimator",
          "_create_estimator",
          "ComplexTrainingBuilder._get_outputs",
          "_get_outputs",
          "LargeTrainingBuilder.validate_configuration",
          "validate_configuration",
          "LargeTrainingBuilder._get_inputs",
          "_get_inputs",
          "LargeTrainingBuilder.create_step",
          "create_step",
          "LargeTrainingBuilder._create_estimator",
          "_create_estimator",
          "LargeTrainingBuilder._get_outputs",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_estimator",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_estimator",
          "_create_estimator",
          "_create_estimator",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_estimator",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_estimator",
          "_get_outputs"
        ],
        "validation/alignment/validators/test_validator_factory.py": [
          "TestValidatorFactory.setup_method",
          "setup_method",
          "TestValidatorFactory.test_factory_initialization",
          "test_factory_initialization",
          "TestValidatorFactory.test_factory_initialization_with_rules",
          "test_factory_initialization_with_rules",
          "TestValidatorFactory.test_get_validator_success",
          "test_get_validator_success",
          "TestValidatorFactory.test_get_validator_not_found",
          "test_get_validator_not_found",
          "TestValidatorFactory.test_get_validator_none_in_registry",
          "test_get_validator_none_in_registry",
          "TestValidatorFactory.test_get_validator_for_step_type_success",
          "test_get_validator_for_step_type_success",
          "TestValidatorFactory.test_get_validator_for_step_type_no_ruleset",
          "test_get_validator_for_step_type_no_ruleset",
          "TestValidatorFactory.test_get_validator_for_step_type_no_validator_class",
          "test_get_validator_for_step_type_no_validator_class",
          "TestValidatorFactory.test_get_available_validators",
          "test_get_available_validators",
          "TestValidatorFactory.test_is_validator_available",
          "test_is_validator_available",
          "TestValidatorFactory.test_get_validator_registry_status",
          "test_get_validator_registry_status",
          "TestValidatorFactory.test_validate_step_with_priority_system",
          "test_validate_step_with_priority_system",
          "TestValidatorFactory.test_validate_step_excluded_type",
          "test_validate_step_excluded_type",
          "TestValidatorFactory.test_validate_step_no_validator",
          "test_validate_step_no_validator",
          "TestValidatorFactory.test_factory_configuration_validation",
          "test_factory_configuration_validation",
          "TestValidatorFactory.test_factory_health_check",
          "test_factory_health_check",
          "TestValidatorFactory.test_multiple_workspace_dirs",
          "test_multiple_workspace_dirs",
          "TestValidatorFactory.test_factory_error_handling",
          "test_factory_error_handling",
          "TestValidatorFactory.test_factory_statistics",
          "test_factory_statistics",
          "setup_method",
          "test_factory_initialization",
          "test_factory_initialization_with_rules",
          "test_get_validator_success",
          "test_get_validator_not_found",
          "test_get_validator_none_in_registry",
          "test_get_validator_for_step_type_success",
          "test_get_validator_for_step_type_no_ruleset",
          "test_get_validator_for_step_type_no_validator_class",
          "test_get_available_validators",
          "test_is_validator_available",
          "test_get_validator_registry_status",
          "test_validate_step_with_priority_system",
          "test_validate_step_excluded_type",
          "test_validate_step_no_validator",
          "test_factory_configuration_validation",
          "test_factory_health_check",
          "test_multiple_workspace_dirs",
          "test_factory_error_handling",
          "test_factory_statistics"
        ],
        "validation/alignment/validators/test_step_type_specific_validator.py": [
          "ConcreteStepTypeValidator._validate_step_type_specifics",
          "_validate_step_type_specifics",
          "TestStepTypeSpecificValidator.workspace_dirs",
          "workspace_dirs",
          "TestStepTypeSpecificValidator.validator",
          "validator",
          "TestStepTypeSpecificValidator.sample_builder_class",
          "sample_builder_class",
          "TestStepTypeSpecificValidator.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestStepTypeSpecificValidator.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestStepTypeSpecificValidator.test_init_loads_validation_rules",
          "test_init_loads_validation_rules",
          "TestStepTypeSpecificValidator.test_validate_builder_config_alignment_priority_system",
          "test_validate_builder_config_alignment_priority_system",
          "TestStepTypeSpecificValidator.test_apply_universal_validation_with_valid_builder",
          "test_apply_universal_validation_with_valid_builder",
          "TestStepTypeSpecificValidator.test_apply_universal_validation_with_missing_methods",
          "test_apply_universal_validation_with_missing_methods",
          "TestStepTypeSpecificValidator.test_apply_universal_validation_with_overridden_final_methods",
          "test_apply_universal_validation_with_overridden_final_methods",
          "TestStepTypeSpecificValidator.test_apply_step_specific_validation_implementation",
          "test_apply_step_specific_validation_implementation",
          "TestStepTypeSpecificValidator.test_resolve_validation_priorities_no_issues",
          "test_resolve_validation_priorities_no_issues",
          "TestStepTypeSpecificValidator.test_resolve_validation_priorities_with_errors",
          "test_resolve_validation_priorities_with_errors",
          "TestStepTypeSpecificValidator.test_resolve_validation_priorities_warnings_only",
          "test_resolve_validation_priorities_warnings_only",
          "TestStepTypeSpecificValidator.test_get_builder_class_integration",
          "test_get_builder_class_integration",
          "TestStepTypeSpecificValidator.test_is_method_overridden_detection",
          "test_is_method_overridden_detection",
          "TestStepTypeSpecificValidator.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestStepTypeSpecificValidator.test_error_handling_in_validation",
          "test_error_handling_in_validation",
          "TestStepTypeSpecificValidator.test_integration_with_validation_rules",
          "test_integration_with_validation_rules",
          "TestStepTypeSpecificValidator.test_abstract_base_class_enforcement",
          "test_abstract_base_class_enforcement",
          "TestStepTypeSpecificValidator.test_validation_with_complex_builder_hierarchy",
          "test_validation_with_complex_builder_hierarchy",
          "TestStepTypeSpecificValidator.test_performance_with_large_validation_rules",
          "test_performance_with_large_validation_rules",
          "TestStepTypeSpecificValidator.test_validation_result_consistency",
          "test_validation_result_consistency",
          "_validate_step_type_specifics",
          "workspace_dirs",
          "validator",
          "sample_builder_class",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_init_loads_validation_rules",
          "test_validate_builder_config_alignment_priority_system",
          "test_apply_universal_validation_with_valid_builder",
          "test_apply_universal_validation_with_missing_methods",
          "test_apply_universal_validation_with_overridden_final_methods",
          "test_apply_step_specific_validation_implementation",
          "test_resolve_validation_priorities_no_issues",
          "test_resolve_validation_priorities_with_errors",
          "test_resolve_validation_priorities_warnings_only",
          "test_get_builder_class_integration",
          "test_is_method_overridden_detection",
          "test_workspace_directory_propagation",
          "test_error_handling_in_validation",
          "test_integration_with_validation_rules",
          "test_abstract_base_class_enforcement",
          "test_validation_with_complex_builder_hierarchy",
          "test_performance_with_large_validation_rules",
          "test_validation_result_consistency",
          "SampleBuilder.validate_configuration",
          "validate_configuration",
          "SampleBuilder._get_inputs",
          "_get_inputs",
          "SampleBuilder.create_step",
          "create_step",
          "SampleBuilder._get_outputs",
          "_get_outputs",
          "IncompleteBuilder.validate_configuration",
          "validate_configuration",
          "OverridingBuilder.validate_configuration",
          "validate_configuration",
          "OverridingBuilder._get_inputs",
          "_get_inputs",
          "OverridingBuilder.create_step",
          "create_step",
          "OverridingBuilder._get_cache_config",
          "_get_cache_config",
          "BaseClass.base_method",
          "base_method",
          "DerivedClass.base_method",
          "base_method",
          "DerivedClass.derived_method",
          "derived_method",
          "BaseStepBuilder.validate_configuration",
          "validate_configuration",
          "MiddleStepBuilder._get_inputs",
          "_get_inputs",
          "ConcreteStepBuilder.create_step",
          "create_step",
          "ConcreteStepBuilder._get_outputs",
          "_get_outputs",
          "LargeBuilder.validate_configuration",
          "validate_configuration",
          "LargeBuilder._get_inputs",
          "_get_inputs",
          "LargeBuilder.create_step",
          "create_step",
          "LargeBuilder.__getattr__",
          "__getattr__",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "validate_configuration",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_cache_config",
          "base_method",
          "base_method",
          "derived_method",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "__getattr__"
        ],
        "validation/alignment/validators/test_processing_step_validator.py": [
          "TestProcessingStepBuilderValidator.workspace_dirs",
          "workspace_dirs",
          "TestProcessingStepBuilderValidator.validator",
          "validator",
          "TestProcessingStepBuilderValidator.sample_processing_builder",
          "sample_processing_builder",
          "TestProcessingStepBuilderValidator.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestProcessingStepBuilderValidator.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestProcessingStepBuilderValidator.test_validate_builder_config_alignment_with_valid_processing_builder",
          "test_validate_builder_config_alignment_with_valid_processing_builder",
          "TestProcessingStepBuilderValidator.test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "TestProcessingStepBuilderValidator.test_apply_step_specific_validation_missing_create_processor",
          "test_apply_step_specific_validation_missing_create_processor",
          "TestProcessingStepBuilderValidator.test_apply_step_specific_validation_missing_get_outputs",
          "test_apply_step_specific_validation_missing_get_outputs",
          "TestProcessingStepBuilderValidator.test_validate_create_processor_method_with_valid_implementation",
          "test_validate_create_processor_method_with_valid_implementation",
          "TestProcessingStepBuilderValidator.test_validate_create_processor_method_with_invalid_return_type",
          "test_validate_create_processor_method_with_invalid_return_type",
          "TestProcessingStepBuilderValidator.test_validate_processing_outputs_with_valid_outputs",
          "test_validate_processing_outputs_with_valid_outputs",
          "TestProcessingStepBuilderValidator.test_validate_processing_outputs_with_invalid_return_type",
          "test_validate_processing_outputs_with_invalid_return_type",
          "TestProcessingStepBuilderValidator.test_validate_job_arguments_override_with_valid_arguments",
          "test_validate_job_arguments_override_with_valid_arguments",
          "TestProcessingStepBuilderValidator.test_validate_processing_input_output_handling_with_valid_handling",
          "test_validate_processing_input_output_handling_with_valid_handling",
          "TestProcessingStepBuilderValidator.test_integration_with_step_type_specific_validator_base",
          "test_integration_with_step_type_specific_validator_base",
          "TestProcessingStepBuilderValidator.test_error_handling_during_validation",
          "test_error_handling_during_validation",
          "TestProcessingStepBuilderValidator.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestProcessingStepBuilderValidator.test_validate_with_complex_processing_configuration",
          "test_validate_with_complex_processing_configuration",
          "TestProcessingStepBuilderValidator.test_performance_with_large_processing_configuration",
          "test_performance_with_large_processing_configuration",
          "TestProcessingStepBuilderValidator.test_validation_result_consistency",
          "test_validation_result_consistency",
          "workspace_dirs",
          "validator",
          "sample_processing_builder",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_validate_builder_config_alignment_with_valid_processing_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_missing_create_processor",
          "test_apply_step_specific_validation_missing_get_outputs",
          "test_validate_create_processor_method_with_valid_implementation",
          "test_validate_create_processor_method_with_invalid_return_type",
          "test_validate_processing_outputs_with_valid_outputs",
          "test_validate_processing_outputs_with_invalid_return_type",
          "test_validate_job_arguments_override_with_valid_arguments",
          "test_validate_processing_input_output_handling_with_valid_handling",
          "test_integration_with_step_type_specific_validator_base",
          "test_error_handling_during_validation",
          "test_workspace_directory_propagation",
          "test_validate_with_complex_processing_configuration",
          "test_performance_with_large_processing_configuration",
          "test_validation_result_consistency",
          "SampleProcessingBuilder.validate_configuration",
          "validate_configuration",
          "SampleProcessingBuilder._get_inputs",
          "_get_inputs",
          "SampleProcessingBuilder.create_step",
          "create_step",
          "SampleProcessingBuilder._create_processor",
          "_create_processor",
          "SampleProcessingBuilder._get_outputs",
          "_get_outputs",
          "SampleProcessingBuilder._get_job_arguments",
          "_get_job_arguments",
          "IncompleteProcessingBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteProcessingBuilder._get_inputs",
          "_get_inputs",
          "IncompleteProcessingBuilder.create_step",
          "create_step",
          "IncompleteProcessingBuilder._get_outputs",
          "_get_outputs",
          "IncompleteProcessingBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteProcessingBuilder._get_inputs",
          "_get_inputs",
          "IncompleteProcessingBuilder.create_step",
          "create_step",
          "IncompleteProcessingBuilder._create_processor",
          "_create_processor",
          "InvalidProcessingBuilder._create_processor",
          "_create_processor",
          "InvalidOutputsBuilder._get_outputs",
          "_get_outputs",
          "ComplexProcessingBuilder.validate_configuration",
          "validate_configuration",
          "ComplexProcessingBuilder._get_inputs",
          "_get_inputs",
          "ComplexProcessingBuilder.create_step",
          "create_step",
          "ComplexProcessingBuilder._create_processor",
          "_create_processor",
          "ComplexProcessingBuilder._get_outputs",
          "_get_outputs",
          "ComplexProcessingBuilder._get_job_arguments",
          "_get_job_arguments",
          "LargeProcessingBuilder.validate_configuration",
          "validate_configuration",
          "LargeProcessingBuilder._get_inputs",
          "_get_inputs",
          "LargeProcessingBuilder.create_step",
          "create_step",
          "LargeProcessingBuilder._create_processor",
          "_create_processor",
          "LargeProcessingBuilder._get_outputs",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_processor",
          "_get_outputs",
          "_get_job_arguments",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_processor",
          "_create_processor",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_processor",
          "_get_outputs",
          "_get_job_arguments",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_processor",
          "_get_outputs"
        ],
        "validation/alignment/validators/test_contract_spec_validator.py": [
          "TestConsolidatedContractSpecValidator.setup_method",
          "setup_method",
          "TestConsolidatedContractSpecValidator.test_validate_logical_names_success",
          "test_validate_logical_names_success",
          "TestConsolidatedContractSpecValidator.test_validate_logical_names_missing_dependencies",
          "test_validate_logical_names_missing_dependencies",
          "TestConsolidatedContractSpecValidator.test_validate_logical_names_missing_outputs",
          "test_validate_logical_names_missing_outputs",
          "TestConsolidatedContractSpecValidator.test_validate_logical_names_malformed_contract",
          "test_validate_logical_names_malformed_contract",
          "TestConsolidatedContractSpecValidator.test_validate_logical_names_malformed_specification",
          "test_validate_logical_names_malformed_specification",
          "TestConsolidatedContractSpecValidator.test_validate_input_output_alignment_success",
          "test_validate_input_output_alignment_success",
          "TestConsolidatedContractSpecValidator.test_validate_input_output_alignment_unmatched_dependencies",
          "test_validate_input_output_alignment_unmatched_dependencies",
          "TestConsolidatedContractSpecValidator.test_validate_input_output_alignment_unmatched_outputs",
          "test_validate_input_output_alignment_unmatched_outputs",
          "TestConsolidatedContractSpecValidator.test_validate_input_output_alignment_malformed_data",
          "test_validate_input_output_alignment_malformed_data",
          "TestConsolidatedContractSpecValidator.test_comprehensive_validation_workflow",
          "test_comprehensive_validation_workflow",
          "TestConsolidatedContractSpecValidator.test_empty_contract_and_specification",
          "test_empty_contract_and_specification",
          "TestConsolidatedContractSpecValidator.test_validation_with_job_type_parameter",
          "test_validation_with_job_type_parameter",
          "TestConsolidatedContractSpecValidator.test_detailed_issue_structure",
          "test_detailed_issue_structure",
          "setup_method",
          "test_validate_logical_names_success",
          "test_validate_logical_names_missing_dependencies",
          "test_validate_logical_names_missing_outputs",
          "test_validate_logical_names_malformed_contract",
          "test_validate_logical_names_malformed_specification",
          "test_validate_input_output_alignment_success",
          "test_validate_input_output_alignment_unmatched_dependencies",
          "test_validate_input_output_alignment_unmatched_outputs",
          "test_validate_input_output_alignment_malformed_data",
          "test_comprehensive_validation_workflow",
          "test_empty_contract_and_specification",
          "test_validation_with_job_type_parameter",
          "test_detailed_issue_structure"
        ],
        "validation/alignment/validators/test_transform_step_validator.py": [
          "TestTransformStepBuilderValidator.workspace_dirs",
          "workspace_dirs",
          "TestTransformStepBuilderValidator.validator",
          "validator",
          "TestTransformStepBuilderValidator.sample_transform_builder",
          "sample_transform_builder",
          "TestTransformStepBuilderValidator.test_init_with_workspace_dirs",
          "test_init_with_workspace_dirs",
          "TestTransformStepBuilderValidator.test_init_without_workspace_dirs",
          "test_init_without_workspace_dirs",
          "TestTransformStepBuilderValidator.test_validate_builder_config_alignment_with_valid_transform_builder",
          "test_validate_builder_config_alignment_with_valid_transform_builder",
          "TestTransformStepBuilderValidator.test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "TestTransformStepBuilderValidator.test_apply_step_specific_validation_missing_create_transformer",
          "test_apply_step_specific_validation_missing_create_transformer",
          "TestTransformStepBuilderValidator.test_validate_create_transformer_method_with_valid_implementation",
          "test_validate_create_transformer_method_with_valid_implementation",
          "TestTransformStepBuilderValidator.test_validate_create_transformer_method_missing_output_path_parameter",
          "test_validate_create_transformer_method_missing_output_path_parameter",
          "TestTransformStepBuilderValidator.test_validate_transform_outputs_with_valid_outputs",
          "test_validate_transform_outputs_with_valid_outputs",
          "TestTransformStepBuilderValidator.test_validate_transform_outputs_with_invalid_return_type",
          "test_validate_transform_outputs_with_invalid_return_type",
          "TestTransformStepBuilderValidator.test_validate_transform_configuration_with_valid_configuration",
          "test_validate_transform_configuration_with_valid_configuration",
          "TestTransformStepBuilderValidator.test_validate_transformer_type_patterns_with_valid_patterns",
          "test_validate_transformer_type_patterns_with_valid_patterns",
          "TestTransformStepBuilderValidator.test_integration_with_step_type_specific_validator_base",
          "test_integration_with_step_type_specific_validator_base",
          "TestTransformStepBuilderValidator.test_error_handling_during_validation",
          "test_error_handling_during_validation",
          "TestTransformStepBuilderValidator.test_workspace_directory_propagation",
          "test_workspace_directory_propagation",
          "TestTransformStepBuilderValidator.test_validate_with_complex_transform_configuration",
          "test_validate_with_complex_transform_configuration",
          "TestTransformStepBuilderValidator.test_performance_with_large_transform_configuration",
          "test_performance_with_large_transform_configuration",
          "TestTransformStepBuilderValidator.test_validation_result_consistency",
          "test_validation_result_consistency",
          "workspace_dirs",
          "validator",
          "sample_transform_builder",
          "test_init_with_workspace_dirs",
          "test_init_without_workspace_dirs",
          "test_validate_builder_config_alignment_with_valid_transform_builder",
          "test_apply_step_specific_validation_with_valid_builder",
          "test_apply_step_specific_validation_missing_create_transformer",
          "test_validate_create_transformer_method_with_valid_implementation",
          "test_validate_create_transformer_method_missing_output_path_parameter",
          "test_validate_transform_outputs_with_valid_outputs",
          "test_validate_transform_outputs_with_invalid_return_type",
          "test_validate_transform_configuration_with_valid_configuration",
          "test_validate_transformer_type_patterns_with_valid_patterns",
          "test_integration_with_step_type_specific_validator_base",
          "test_error_handling_during_validation",
          "test_workspace_directory_propagation",
          "test_validate_with_complex_transform_configuration",
          "test_performance_with_large_transform_configuration",
          "test_validation_result_consistency",
          "SampleTransformBuilder.validate_configuration",
          "validate_configuration",
          "SampleTransformBuilder._get_inputs",
          "_get_inputs",
          "SampleTransformBuilder.create_step",
          "create_step",
          "SampleTransformBuilder._create_transformer",
          "_create_transformer",
          "SampleTransformBuilder._get_outputs",
          "_get_outputs",
          "IncompleteTransformBuilder.validate_configuration",
          "validate_configuration",
          "IncompleteTransformBuilder._get_inputs",
          "_get_inputs",
          "IncompleteTransformBuilder.create_step",
          "create_step",
          "IncompleteTransformBuilder._get_outputs",
          "_get_outputs",
          "InvalidTransformBuilder._create_transformer",
          "_create_transformer",
          "InvalidOutputsBuilder._get_outputs",
          "_get_outputs",
          "ComplexTransformBuilder.validate_configuration",
          "validate_configuration",
          "ComplexTransformBuilder._get_inputs",
          "_get_inputs",
          "ComplexTransformBuilder.create_step",
          "create_step",
          "ComplexTransformBuilder._create_transformer",
          "_create_transformer",
          "ComplexTransformBuilder._get_outputs",
          "_get_outputs",
          "LargeTransformBuilder.validate_configuration",
          "validate_configuration",
          "LargeTransformBuilder._get_inputs",
          "_get_inputs",
          "LargeTransformBuilder.create_step",
          "create_step",
          "LargeTransformBuilder._create_transformer",
          "_create_transformer",
          "LargeTransformBuilder._get_outputs",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_transformer",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_get_outputs",
          "_create_transformer",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_transformer",
          "_get_outputs",
          "validate_configuration",
          "_get_inputs",
          "create_step",
          "_create_transformer",
          "_get_outputs"
        ],
        "validation/alignment/analyzer/test_script_analyzer.py": [
          "TestScriptAnalyzer.setup_method",
          "setup_method",
          "TestScriptAnalyzer.teardown_method",
          "teardown_method",
          "TestScriptAnalyzer._create_test_script",
          "_create_test_script",
          "TestScriptAnalyzer.test_valid_main_function_signature",
          "test_valid_main_function_signature",
          "TestScriptAnalyzer.test_missing_main_function",
          "test_missing_main_function",
          "TestScriptAnalyzer.test_incorrect_main_function_signature",
          "test_incorrect_main_function_signature",
          "TestScriptAnalyzer.test_parameter_usage_extraction",
          "test_parameter_usage_extraction",
          "TestScriptAnalyzer.test_contract_alignment_validation_success",
          "test_contract_alignment_validation_success",
          "TestScriptAnalyzer.test_contract_alignment_validation_errors",
          "test_contract_alignment_validation_errors",
          "TestScriptAnalyzer.test_script_parsing_error_handling",
          "test_script_parsing_error_handling",
          "TestScriptAnalyzer.test_empty_script_handling",
          "test_empty_script_handling",
          "TestScriptAnalyzer.test_complex_parameter_usage_patterns",
          "test_complex_parameter_usage_patterns",
          "TestScriptAnalyzer.test_real_world_script_patterns",
          "test_real_world_script_patterns",
          "setup_method",
          "teardown_method",
          "_create_test_script",
          "test_valid_main_function_signature",
          "test_missing_main_function",
          "test_incorrect_main_function_signature",
          "test_parameter_usage_extraction",
          "test_contract_alignment_validation_success",
          "test_contract_alignment_validation_errors",
          "test_script_parsing_error_handling",
          "test_empty_script_handling",
          "test_complex_parameter_usage_patterns",
          "test_real_world_script_patterns"
        ]
      },
      "likely_tested_functions": [
        "UniversalStepBuilderTest.__init__",
        "__init__",
        "UniversalStepBuilderTest.run_all_tests",
        "UniversalStepBuilderTest.run_validation_for_step",
        "run_validation_for_step",
        "UniversalStepBuilderTest._run_comprehensive_validation_for_step",
        "UniversalStepBuilderTest._run_alignment_validation",
        "UniversalStepBuilderTest._run_fallback_core_validation",
        "UniversalStepBuilderTest._test_integration_capabilities",
        "UniversalStepBuilderTest._check_dependency_resolution",
        "_check_dependency_resolution",
        "UniversalStepBuilderTest._check_cache_configuration",
        "_check_cache_configuration",
        "UniversalStepBuilderTest._check_step_instantiation",
        "UniversalStepBuilderTest._check_config_class_exists",
        "_check_config_class_exists",
        "UniversalStepBuilderTest._check_config_import",
        "_check_config_import",
        "UniversalStepBuilderTest._check_input_output_methods",
        "_check_input_output_methods",
        "UniversalStepBuilderTest._check_sagemaker_methods",
        "_check_sagemaker_methods",
        "UniversalStepBuilderTest._test_step_creation_capability",
        "UniversalStepBuilderTest._check_config_availability",
        "_check_config_availability",
        "UniversalStepBuilderTest._check_required_methods",
        "_check_required_methods",
        "UniversalStepBuilderTest._check_field_requirements",
        "_check_field_requirements",
        "UniversalStepBuilderTest._run_step_type_specific_validation",
        "_run_step_type_specific_validation",
        "UniversalStepBuilderTest._run_processing_tests",
        "UniversalStepBuilderTest._run_training_tests",
        "UniversalStepBuilderTest._run_transform_tests",
        "UniversalStepBuilderTest._run_create_model_tests",
        "UniversalStepBuilderTest._run_register_model_tests",
        "UniversalStepBuilderTest.run_full_validation",
        "run_full_validation",
        "UniversalStepBuilderTest._discover_all_steps",
        "_discover_all_steps",
        "UniversalStepBuilderTest._calculate_scoring",
        "_calculate_scoring",
        "UniversalStepBuilderTest._calculate_basic_scoring",
        "_calculate_basic_scoring",
        "UniversalStepBuilderTest.generate_report",
        "generate_report",
        "UniversalStepBuilderTest._get_builder_class_from_catalog",
        "_get_builder_class_from_catalog",
        "UniversalStepBuilderTest._create_minimal_config",
        "UniversalStepBuilderTest._determine_overall_status",
        "_determine_overall_status",
        "UniversalStepBuilderTest._generate_validation_summary",
        "_generate_validation_summary",
        "UniversalStepBuilderTest._infer_step_name",
        "_infer_step_name",
        "UniversalStepBuilderTest._find_step_name_with_catalog",
        "UniversalStepBuilderTest._find_step_name_legacy",
        "UniversalStepBuilderTest._extract_base_name",
        "_extract_base_name",
        "UniversalStepBuilderTest.run_all_tests_legacy",
        "UniversalStepBuilderTest.run_all_tests_with_scoring",
        "UniversalStepBuilderTest.run_all_tests_with_full_report",
        "UniversalStepBuilderTest.export_results_to_json",
        "export_results_to_json",
        "UniversalStepBuilderTest.from_builder_class",
        "from_builder_class",
        "UniversalStepBuilderTest.test_all_builders_by_type",
        "test_all_builders_by_type",
        "UniversalStepBuilderTest._report_consolidated_results",
        "UniversalStepBuilderTest._report_consolidated_results_with_scoring",
        "UniversalStepBuilderTest._generate_structured_report",
        "UniversalStepBuilderTest.validate_specific_script",
        "validate_specific_script",
        "UniversalStepBuilderTest.discover_scripts",
        "discover_scripts",
        "UniversalStepBuilderTest.get_validation_summary",
        "get_validation_summary",
        "UniversalStepBuilderTest.print_summary",
        "print_summary",
        "TestUniversalStepBuilder.test_refactored_initialization",
        "TestUniversalStepBuilder.test_backward_compatibility_methods",
        "TestUniversalStepBuilder.test_from_builder_class_method",
        "test_from_builder_class_method",
        "__init__",
        "run_validation_for_step",
        "_check_dependency_resolution",
        "_check_cache_configuration",
        "_check_config_class_exists",
        "_check_config_import",
        "_check_input_output_methods",
        "_check_sagemaker_methods",
        "_check_config_availability",
        "_check_required_methods",
        "_check_field_requirements",
        "_run_step_type_specific_validation",
        "run_full_validation",
        "_discover_all_steps",
        "_calculate_scoring",
        "_calculate_basic_scoring",
        "generate_report",
        "_get_builder_class_from_catalog",
        "_determine_overall_status",
        "_generate_validation_summary",
        "_infer_step_name",
        "_extract_base_name",
        "export_results_to_json",
        "from_builder_class",
        "test_all_builders_by_type",
        "validate_specific_script",
        "discover_scripts",
        "get_validation_summary",
        "print_summary",
        "test_from_builder_class_method",
        "MockBuilder.validate_configuration",
        "validate_configuration",
        "MockBuilder.create_step",
        "create_step",
        "MockBuilder.validate_configuration",
        "validate_configuration",
        "MockBuilder.create_step",
        "create_step",
        "validate_configuration",
        "create_step",
        "validate_configuration",
        "create_step",
        "ScriptExecutionSpec.save_to_file",
        "save_to_file",
        "ScriptExecutionSpec.load_from_file",
        "ScriptExecutionSpec.create_default",
        "create_default",
        "PipelineTestingSpec.has_enhanced_specs",
        "PipelineTestingSpec.get_enhanced_specs",
        "PipelineTestingSpec.get_basic_specs",
        "RuntimeTestingConfiguration.model_post_init",
        "save_to_file",
        "create_default",
        "RuntimeTester.__init__",
        "__init__",
        "RuntimeTester._initialize_step_catalog",
        "RuntimeTester._detect_framework_if_needed",
        "RuntimeTester._validate_builder_consistency_if_available",
        "RuntimeTester._discover_pipeline_components_if_needed",
        "RuntimeTester.test_script_with_step_catalog_enhancements",
        "RuntimeTester.test_data_compatibility_with_step_catalog_enhancements",
        "RuntimeTester.test_pipeline_flow_with_step_catalog_enhancements",
        "RuntimeTester._test_contract_aware_compatibility",
        "RuntimeTester._are_contract_specs_compatible",
        "RuntimeTester._test_contract_data_flow",
        "RuntimeTester.test_script_with_spec",
        "test_script_with_spec",
        "RuntimeTester.test_data_compatibility_with_specs",
        "test_data_compatibility_with_specs",
        "RuntimeTester._test_data_compatibility_with_semantic_matching",
        "RuntimeTester._find_semantic_path_matches",
        "RuntimeTester._find_simple_path_matches",
        "RuntimeTester._test_data_compatibility_with_logical_matching",
        "_test_data_compatibility_with_logical_matching",
        "RuntimeTester.test_pipeline_flow_with_spec",
        "test_pipeline_flow_with_spec",
        "RuntimeTester._test_pipeline_flow_with_topological_ordering",
        "RuntimeTester._test_pipeline_flow_original",
        "RuntimeTester._find_script_path",
        "_find_script_path",
        "RuntimeTester._is_temp_or_system_file",
        "_is_temp_or_system_file",
        "RuntimeTester._find_valid_output_files",
        "_find_valid_output_files",
        "RuntimeTester.test_inference_function",
        "test_inference_function",
        "RuntimeTester.test_inference_pipeline",
        "test_inference_pipeline",
        "RuntimeTester.test_script_to_inference_compatibility",
        "RuntimeTester.test_pipeline_with_inference",
        "RuntimeTester._extract_packaged_model",
        "_extract_packaged_model",
        "RuntimeTester._load_handler_module",
        "_load_handler_module",
        "RuntimeTester._load_payload_samples",
        "_load_payload_samples",
        "RuntimeTester._cleanup_extraction_directory",
        "_cleanup_extraction_directory",
        "RuntimeTester._validate_function_result",
        "_validate_function_result",
        "RuntimeTester._create_modified_spec_with_matches",
        "RuntimeTester._generate_matching_report",
        "_generate_matching_report",
        "RuntimeTester._detect_file_format",
        "RuntimeTester.test_data_compatibility_with_logical_matching",
        "test_data_compatibility_with_logical_matching",
        "RuntimeTester.test_pipeline_flow_with_topological_execution",
        "RuntimeTester.get_path_matches",
        "RuntimeTester.generate_matching_report",
        "generate_matching_report",
        "RuntimeTester.validate_pipeline_logical_names",
        "RuntimeTester._convert_to_enhanced_spec",
        "RuntimeTester._convert_from_enhanced_spec",
        "RuntimeTester._generate_default_input_aliases",
        "RuntimeTester._generate_default_output_aliases",
        "__init__",
        "test_script_with_spec",
        "test_data_compatibility_with_specs",
        "_test_data_compatibility_with_logical_matching",
        "test_pipeline_flow_with_spec",
        "_find_script_path",
        "_is_temp_or_system_file",
        "_find_valid_output_files",
        "test_inference_function",
        "test_inference_pipeline",
        "_extract_packaged_model",
        "_load_handler_module",
        "_load_payload_samples",
        "_cleanup_extraction_directory",
        "_validate_function_result",
        "_generate_matching_report",
        "test_data_compatibility_with_logical_matching",
        "generate_matching_report",
        "InferenceHandlerSpec.serialize_datetime_fields",
        "InferenceHandlerSpec.validate_configuration",
        "validate_configuration",
        "InferenceHandlerSpec.is_valid",
        "is_valid",
        "InferenceHandlerSpec.get_packaged_model_path",
        "InferenceHandlerSpec.get_payload_samples_path",
        "InferenceHandlerSpec.get_extraction_root_path",
        "InferenceHandlerSpec.get_inference_code_path",
        "InferenceHandlerSpec.get_handler_file_path",
        "InferenceHandlerSpec.create_default",
        "create_default",
        "InferenceTestResult.serialize_datetime_fields",
        "InferenceTestResult.get_overall_success_rate",
        "InferencePipelineTestingSpec.add_inference_handler",
        "InferencePipelineTestingSpec.has_inference_handlers",
        "InferencePipelineTestingSpec.get_inference_handler_names",
        "InferencePipelineTestingSpec.get_mixed_step_types",
        "InferencePipelineTestingSpec.validate_mixed_pipeline",
        "InferencePipelineTestingSpec.is_valid_mixed_pipeline",
        "validate_configuration",
        "is_valid",
        "create_default",
        "PathSpec.matches_name_or_alias",
        "matches_name_or_alias",
        "EnhancedScriptExecutionSpec.model_post_init",
        "EnhancedScriptExecutionSpec.from_script_execution_spec",
        "from_script_execution_spec",
        "PathMatcher.__init__",
        "__init__",
        "PathMatcher.find_path_matches",
        "find_path_matches",
        "PathMatcher._find_best_alias_match",
        "PathMatcher.generate_matching_report",
        "generate_matching_report",
        "TopologicalExecutor.__init__",
        "__init__",
        "TopologicalExecutor.get_execution_order",
        "get_execution_order",
        "TopologicalExecutor.validate_dag_structure",
        "validate_dag_structure",
        "LogicalNameMatchingTester.__init__",
        "__init__",
        "LogicalNameMatchingTester.test_data_compatibility_with_logical_matching",
        "test_data_compatibility_with_logical_matching",
        "LogicalNameMatchingTester._create_file_mapping",
        "LogicalNameMatchingTester._find_best_file_for_logical_name",
        "_find_best_file_for_logical_name",
        "LogicalNameMatchingTester._detect_primary_format",
        "_detect_primary_format",
        "LogicalNameMatchingTester.test_pipeline_with_topological_execution",
        "matches_name_or_alias",
        "from_script_execution_spec",
        "__init__",
        "find_path_matches",
        "generate_matching_report",
        "__init__",
        "get_execution_order",
        "validate_dag_structure",
        "__init__",
        "test_data_compatibility_with_logical_matching",
        "_find_best_file_for_logical_name",
        "_detect_primary_format",
        "WorkspaceAwarePipelineTestingSpecBuilder.__init__",
        "__init__",
        "WorkspaceAwarePipelineTestingSpecBuilder._find_actual_script_file",
        "_find_actual_script_file",
        "WorkspaceAwarePipelineTestingSpecBuilder._find_in_workspace",
        "WorkspaceAwarePipelineTestingSpecBuilder._get_fallback_workspace_dirs",
        "WorkspaceAwarePipelineTestingSpecBuilder.clear_workspace_cache",
        "clear_workspace_cache",
        "WorkspaceAwarePipelineTestingSpecBuilder.get_workspace_discovery_status",
        "get_workspace_discovery_status",
        "WorkspaceAwarePipelineTestingSpecBuilder.configure_workspace_discovery",
        "configure_workspace_discovery",
        "WorkspaceAwarePipelineTestingSpecBuilder.discover_available_scripts",
        "discover_available_scripts",
        "WorkspaceAwarePipelineTestingSpecBuilder.validate_workspace_setup",
        "validate_workspace_setup",
        "__init__",
        "_find_actual_script_file",
        "clear_workspace_cache",
        "get_workspace_discovery_status",
        "configure_workspace_discovery",
        "discover_available_scripts",
        "validate_workspace_setup",
        "PipelineTestingSpecBuilder.__init__",
        "__init__",
        "PipelineTestingSpecBuilder._initialize_step_catalog",
        "PipelineTestingSpecBuilder._resolve_script_with_step_catalog_if_available",
        "PipelineTestingSpecBuilder._get_contract_aware_paths_if_available",
        "PipelineTestingSpecBuilder.build_from_dag",
        "build_from_dag",
        "PipelineTestingSpecBuilder._load_or_create_script_spec",
        "_load_or_create_script_spec",
        "PipelineTestingSpecBuilder.save_script_spec",
        "save_script_spec",
        "PipelineTestingSpecBuilder.update_script_spec",
        "update_script_spec",
        "PipelineTestingSpecBuilder.list_saved_specs",
        "list_saved_specs",
        "PipelineTestingSpecBuilder.get_script_spec_by_name",
        "get_script_spec_by_name",
        "PipelineTestingSpecBuilder.match_step_to_spec",
        "match_step_to_spec",
        "PipelineTestingSpecBuilder._is_spec_complete",
        "_is_spec_complete",
        "PipelineTestingSpecBuilder._validate_specs_completeness",
        "_validate_specs_completeness",
        "PipelineTestingSpecBuilder.update_script_spec_interactive",
        "update_script_spec_interactive",
        "PipelineTestingSpecBuilder.get_script_main_params",
        "get_script_main_params",
        "PipelineTestingSpecBuilder.resolve_script_execution_spec_from_node",
        "resolve_script_execution_spec_from_node",
        "PipelineTestingSpecBuilder._canonical_to_script_name",
        "_canonical_to_script_name",
        "PipelineTestingSpecBuilder._find_script_file",
        "PipelineTestingSpecBuilder._find_in_workspace",
        "PipelineTestingSpecBuilder._find_fuzzy_match",
        "PipelineTestingSpecBuilder._create_placeholder_script",
        "PipelineTestingSpecBuilder._get_contract_aware_input_paths",
        "PipelineTestingSpecBuilder._get_contract_aware_output_paths",
        "PipelineTestingSpecBuilder._get_contract_aware_environ_vars",
        "PipelineTestingSpecBuilder._get_contract_aware_job_args",
        "PipelineTestingSpecBuilder._get_default_input_paths",
        "PipelineTestingSpecBuilder._get_default_output_paths",
        "PipelineTestingSpecBuilder._get_default_environ_vars",
        "PipelineTestingSpecBuilder._get_default_job_args",
        "__init__",
        "build_from_dag",
        "_load_or_create_script_spec",
        "save_script_spec",
        "update_script_spec",
        "list_saved_specs",
        "get_script_spec_by_name",
        "match_step_to_spec",
        "_is_spec_complete",
        "_validate_specs_completeness",
        "update_script_spec_interactive",
        "get_script_main_params",
        "resolve_script_execution_spec_from_node",
        "_canonical_to_script_name",
        "get_quality_color",
        "get_quality_rating",
        "create_score_bar_chart",
        "create_comparison_chart",
        "create_trend_chart",
        "create_quality_distribution_chart",
        "UnifiedAlignmentTester.__init__",
        "__init__",
        "UnifiedAlignmentTester.run_full_validation",
        "run_full_validation",
        "UnifiedAlignmentTester.run_validation_for_step",
        "run_validation_for_step",
        "UnifiedAlignmentTester.run_validation_for_all_steps",
        "UnifiedAlignmentTester._discover_all_steps",
        "_discover_all_steps",
        "UnifiedAlignmentTester._has_script_file",
        "UnifiedAlignmentTester._run_validation_level",
        "UnifiedAlignmentTester._run_enabled_validation_levels",
        "UnifiedAlignmentTester._handle_excluded_step",
        "UnifiedAlignmentTester.validate_specific_script",
        "validate_specific_script",
        "UnifiedAlignmentTester.discover_scripts",
        "discover_scripts",
        "UnifiedAlignmentTester.get_validation_summary",
        "get_validation_summary",
        "UnifiedAlignmentTester.export_report",
        "UnifiedAlignmentTester.print_summary",
        "print_summary",
        "UnifiedAlignmentTester.get_critical_issues",
        "get_critical_issues",
        "UnifiedAlignmentTester.get_step_info_from_catalog",
        "UnifiedAlignmentTester.get_component_path_from_catalog",
        "UnifiedAlignmentTester.validate_cross_workspace_compatibility",
        "__init__",
        "run_full_validation",
        "run_validation_for_step",
        "_discover_all_steps",
        "validate_specific_script",
        "discover_scripts",
        "get_validation_summary",
        "print_summary",
        "get_critical_issues",
        "StreamlinedStepBuilderScorer.__init__",
        "__init__",
        "StreamlinedStepBuilderScorer.calculate_component_score",
        "calculate_component_score",
        "StreamlinedStepBuilderScorer._score_alignment_validation",
        "_score_alignment_validation",
        "StreamlinedStepBuilderScorer._score_integration_testing",
        "_score_integration_testing",
        "StreamlinedStepBuilderScorer._score_step_creation",
        "_score_step_creation",
        "StreamlinedStepBuilderScorer.calculate_overall_score",
        "calculate_overall_score",
        "StreamlinedStepBuilderScorer.get_rating",
        "get_rating",
        "StreamlinedStepBuilderScorer.generate_report",
        "generate_report",
        "StreamlinedStepBuilderScorer.save_report",
        "save_report",
        "StreamlinedStepBuilderScorer.print_report",
        "print_report",
        "score_builder_validation_results",
        "score_builder_results",
        "__init__",
        "calculate_component_score",
        "_score_alignment_validation",
        "_score_integration_testing",
        "_score_step_creation",
        "calculate_overall_score",
        "get_rating",
        "generate_report",
        "save_report",
        "print_report",
        "StreamlinedBuilderTestReport.__init__",
        "__init__",
        "StreamlinedBuilderTestReport.add_alignment_results",
        "add_alignment_results",
        "StreamlinedBuilderTestReport.add_integration_results",
        "add_integration_results",
        "StreamlinedBuilderTestReport.add_scoring_data",
        "add_scoring_data",
        "StreamlinedBuilderTestReport.get_overall_status",
        "get_overall_status",
        "StreamlinedBuilderTestReport.get_quality_score",
        "get_quality_score",
        "StreamlinedBuilderTestReport.get_quality_rating",
        "get_quality_rating",
        "StreamlinedBuilderTestReport.is_passing",
        "is_passing",
        "StreamlinedBuilderTestReport.get_critical_issues",
        "get_critical_issues",
        "StreamlinedBuilderTestReport.export_to_json",
        "export_to_json",
        "StreamlinedBuilderTestReport.save_to_file",
        "save_to_file",
        "StreamlinedBuilderTestReport.print_summary",
        "print_summary",
        "StreamlinedBuilderTestReporter.__init__",
        "__init__",
        "StreamlinedBuilderTestReporter.test_and_report_builder",
        "test_and_report_builder",
        "StreamlinedBuilderTestReporter.test_and_save_builder_report",
        "test_and_save_builder_report",
        "StreamlinedBuilderTestReporter.test_step_type_builders",
        "test_step_type_builders",
        "StreamlinedBuilderTestReporter._infer_step_name",
        "_infer_step_name",
        "StreamlinedBuilderTestReporter._load_builder_class",
        "_load_builder_class",
        "StreamlinedBuilderTestReporter._generate_streamlined_step_type_summary",
        "_generate_streamlined_step_type_summary",
        "__init__",
        "add_alignment_results",
        "add_integration_results",
        "add_scoring_data",
        "get_overall_status",
        "get_quality_score",
        "get_quality_rating",
        "is_passing",
        "get_critical_issues",
        "export_to_json",
        "save_to_file",
        "print_summary",
        "__init__",
        "test_and_report_builder",
        "test_and_save_builder_report",
        "test_step_type_builders",
        "_infer_step_name",
        "_load_builder_class",
        "_generate_streamlined_step_type_summary",
        "ValidationReporter.__init__",
        "__init__",
        "ValidationReporter.add_result",
        "add_result",
        "ValidationReporter.add_results",
        "add_results",
        "ValidationReporter.generate_report",
        "generate_report",
        "ValidationReporter._generate_text_report",
        "_generate_text_report",
        "ValidationReporter._generate_json_report",
        "_generate_json_report",
        "ValidationReporter._generate_html_report",
        "_generate_html_report",
        "ValidationReporter._format_result_text",
        "ValidationReporter._generate_issue_breakdown",
        "ValidationReporter._generate_recommendations",
        "ValidationReporter._generate_html_summary",
        "ValidationReporter._generate_html_results",
        "ValidationReporter._get_html_styles",
        "ValidationReporter._should_include_result",
        "ValidationReporter._colorize",
        "_colorize",
        "ValidationReporter._get_status_color",
        "ValidationReporter._get_status_symbol",
        "ValidationReporter._get_issue_color",
        "ValidationReporter.calculate_score",
        "calculate_score",
        "ValidationReporter.print_summary",
        "print_summary",
        "ValidationReporter.export_to_json",
        "export_to_json",
        "ValidationReporter.export_to_html",
        "export_to_html",
        "ValidationReporter.generate_console_report",
        "generate_console_report",
        "__init__",
        "add_result",
        "add_results",
        "generate_report",
        "_generate_text_report",
        "_generate_json_report",
        "_generate_html_report",
        "_colorize",
        "calculate_score",
        "print_summary",
        "export_to_json",
        "export_to_html",
        "generate_console_report",
        "ScriptContractAlignmentTester.__init__",
        "__init__",
        "ScriptContractAlignmentTester.validate_script",
        "validate_script",
        "ScriptContractAlignmentTester._discover_scripts",
        "_discover_scripts",
        "ScriptContractAlignmentTester.get_validation_summary",
        "get_validation_summary",
        "__init__",
        "validate_script",
        "_discover_scripts",
        "get_validation_summary",
        "LevelValidators.__init__",
        "__init__",
        "LevelValidators.run_level_1_validation",
        "run_level_1_validation",
        "LevelValidators.run_level_2_validation",
        "run_level_2_validation",
        "LevelValidators.run_level_3_validation",
        "run_level_3_validation",
        "LevelValidators.run_level_4_validation",
        "run_level_4_validation",
        "LevelValidators._get_step_type_validator",
        "_get_step_type_validator",
        "LevelValidators.validate_level_configuration",
        "LevelValidators.get_available_levels",
        "__init__",
        "run_level_1_validation",
        "run_level_2_validation",
        "run_level_3_validation",
        "run_level_4_validation",
        "_get_step_type_validator",
        "SpecificationDependencyAlignmentTester.__init__",
        "__init__",
        "SpecificationDependencyAlignmentTester.validate_specification",
        "validate_specification",
        "__init__",
        "validate_specification",
        "Level3ValidationConfig.__init__",
        "__init__",
        "__init__",
        "ContractSpecificationAlignmentTester.__init__",
        "__init__",
        "ContractSpecificationAlignmentTester.validate_contract",
        "validate_contract",
        "ContractSpecificationAlignmentTester._discover_contracts_with_scripts",
        "_discover_contracts_with_scripts",
        "ContractSpecificationAlignmentTester._validate_property_paths",
        "_validate_property_paths",
        "__init__",
        "validate_contract",
        "_discover_contracts_with_scripts",
        "_validate_property_paths",
        "get_step_type_validation_rules",
        "get_validation_rules_for_step_type",
        "get_required_methods_for_step_type",
        "get_optional_methods_for_step_type",
        "get_all_methods_for_step_type",
        "get_step_types_by_category",
        "is_step_type_excluded",
        "get_step_type_category",
        "validate_step_type_compliance",
        "get_validation_summary",
        "get_universal_validation_rules",
        "get_required_methods",
        "get_inherited_methods",
        "get_validation_rules",
        "validate_universal_compliance",
        "get_validation_ruleset",
        "is_validation_level_enabled",
        "get_enabled_validation_levels",
        "get_level_4_validator_class",
        "is_step_type_excluded",
        "get_step_types_by_category",
        "get_all_step_types",
        "validate_step_type_configuration",
        "ValidationIssue.to_dict",
        "to_dict",
        "ValidationResult.__post_init__",
        "ValidationResult.error_count",
        "ValidationResult.warning_count",
        "ValidationResult.info_count",
        "ValidationResult.total_issues",
        "ValidationResult.add_issue",
        "ValidationResult.to_dict",
        "to_dict",
        "ValidationSummary.__init__",
        "__init__",
        "ValidationSummary.add_result",
        "add_result",
        "ValidationSummary.success_rate",
        "success_rate",
        "ValidationSummary.to_dict",
        "to_dict",
        "create_validation_issue",
        "to_dict",
        "to_dict",
        "__init__",
        "add_result",
        "success_rate",
        "to_dict",
        "normalize_path",
        "extract_logical_name_from_path",
        "is_sagemaker_path",
        "format_alignment_issue",
        "group_issues_by_severity",
        "get_highest_severity",
        "validate_environment_setup",
        "get_validation_summary_stats",
        "DependencyValidator.__init__",
        "__init__",
        "__init__",
        "ProcessingStepBuilderValidator._validate_step_type_specifics",
        "_validate_step_type_specifics",
        "ProcessingStepBuilderValidator._validate_create_processor_method",
        "_validate_create_processor_method",
        "ProcessingStepBuilderValidator._validate_processing_outputs",
        "_validate_processing_outputs",
        "ProcessingStepBuilderValidator._validate_processing_input_output_handling",
        "_validate_processing_input_output_handling",
        "ProcessingStepBuilderValidator._validate_job_arguments_override",
        "_validate_job_arguments_override",
        "ProcessingStepBuilderValidator.validate_processing_step_patterns",
        "ProcessingStepBuilderValidator._validate_processor_creation_pattern",
        "ProcessingStepBuilderValidator._validate_script_execution_pattern",
        "_validate_step_type_specifics",
        "_validate_create_processor_method",
        "_validate_processing_outputs",
        "_validate_processing_input_output_handling",
        "_validate_job_arguments_override",
        "TrainingStepBuilderValidator._validate_step_type_specifics",
        "_validate_step_type_specifics",
        "TrainingStepBuilderValidator._validate_create_estimator_method",
        "_validate_create_estimator_method",
        "TrainingStepBuilderValidator._validate_training_outputs",
        "_validate_training_outputs",
        "TrainingStepBuilderValidator._validate_training_configuration",
        "_validate_training_configuration",
        "TrainingStepBuilderValidator._validate_estimator_type_patterns",
        "_validate_estimator_type_patterns",
        "TrainingStepBuilderValidator._validate_xgboost_patterns",
        "TrainingStepBuilderValidator._validate_pytorch_patterns",
        "TrainingStepBuilderValidator.validate_training_step_patterns",
        "TrainingStepBuilderValidator._validate_estimator_creation_pattern",
        "TrainingStepBuilderValidator._validate_training_job_configuration",
        "_validate_step_type_specifics",
        "_validate_create_estimator_method",
        "_validate_training_outputs",
        "_validate_training_configuration",
        "_validate_estimator_type_patterns",
        "StepTypeSpecificValidator.__init__",
        "__init__",
        "StepTypeSpecificValidator.validate_builder_config_alignment",
        "validate_builder_config_alignment",
        "StepTypeSpecificValidator._apply_universal_validation",
        "_apply_universal_validation",
        "StepTypeSpecificValidator._apply_step_specific_validation",
        "_apply_step_specific_validation",
        "StepTypeSpecificValidator._validate_step_type_specifics",
        "_validate_step_type_specifics",
        "StepTypeSpecificValidator._resolve_validation_priorities",
        "_resolve_validation_priorities",
        "StepTypeSpecificValidator._get_builder_class",
        "_get_builder_class",
        "StepTypeSpecificValidator._is_method_overridden",
        "_is_method_overridden",
        "StepTypeSpecificValidator._combine_validation_results",
        "__init__",
        "validate_builder_config_alignment",
        "_apply_universal_validation",
        "_apply_step_specific_validation",
        "_validate_step_type_specifics",
        "_resolve_validation_priorities",
        "_get_builder_class",
        "_is_method_overridden",
        "TransformStepBuilderValidator._validate_step_type_specifics",
        "_validate_step_type_specifics",
        "TransformStepBuilderValidator._validate_create_transformer_method",
        "_validate_create_transformer_method",
        "TransformStepBuilderValidator._validate_transform_outputs",
        "_validate_transform_outputs",
        "TransformStepBuilderValidator._validate_transform_configuration",
        "_validate_transform_configuration",
        "TransformStepBuilderValidator._validate_transformer_type_patterns",
        "_validate_transformer_type_patterns",
        "TransformStepBuilderValidator._validate_model_transformer_patterns",
        "TransformStepBuilderValidator.validate_transform_step_patterns",
        "TransformStepBuilderValidator._validate_transformer_creation_pattern",
        "TransformStepBuilderValidator._validate_batch_transform_configuration",
        "_validate_step_type_specifics",
        "_validate_create_transformer_method",
        "_validate_transform_outputs",
        "_validate_transform_configuration",
        "_validate_transformer_type_patterns",
        "SageMakerPropertyPathValidator.__init__",
        "__init__",
        "SageMakerPropertyPathValidator.validate_specification_property_paths",
        "validate_specification_property_paths",
        "SageMakerPropertyPathValidator._get_valid_property_paths_for_step_type",
        "_get_valid_property_paths_for_step_type",
        "SageMakerPropertyPathValidator._validate_single_property_path",
        "_validate_single_property_path",
        "SageMakerPropertyPathValidator._matches_property_path_pattern",
        "_matches_property_path_pattern",
        "SageMakerPropertyPathValidator._get_property_path_suggestions",
        "_get_property_path_suggestions",
        "SageMakerPropertyPathValidator._calculate_path_similarity",
        "_calculate_path_similarity",
        "SageMakerPropertyPathValidator.get_step_type_documentation",
        "get_step_type_documentation",
        "SageMakerPropertyPathValidator.list_supported_step_types",
        "list_supported_step_types",
        "validate_property_paths",
        "__init__",
        "validate_specification_property_paths",
        "_get_valid_property_paths_for_step_type",
        "_validate_single_property_path",
        "_matches_property_path_pattern",
        "_get_property_path_suggestions",
        "_calculate_path_similarity",
        "get_step_type_documentation",
        "list_supported_step_types",
        "ConsolidatedContractSpecValidator.validate_logical_names",
        "validate_logical_names",
        "ConsolidatedContractSpecValidator.validate_input_output_alignment",
        "validate_input_output_alignment",
        "validate_logical_names",
        "validate_input_output_alignment",
        "ValidationIssue.__init__",
        "__init__",
        "ValidationIssue.to_dict",
        "to_dict",
        "MethodInterfaceValidator.__init__",
        "__init__",
        "MethodInterfaceValidator.validate_builder_interface",
        "validate_builder_interface",
        "MethodInterfaceValidator._validate_universal_methods",
        "_validate_universal_methods",
        "MethodInterfaceValidator._validate_step_type_methods",
        "_validate_step_type_methods",
        "MethodInterfaceValidator._validate_method_signature",
        "MethodInterfaceValidator._is_method_overridden",
        "_is_method_overridden",
        "MethodInterfaceValidator.validate_builder_by_name",
        "MethodInterfaceValidator._get_builder_class",
        "_get_builder_class",
        "MethodInterfaceValidator.get_validation_summary",
        "get_validation_summary",
        "__init__",
        "to_dict",
        "__init__",
        "validate_builder_interface",
        "_validate_universal_methods",
        "_validate_step_type_methods",
        "_is_method_overridden",
        "_get_builder_class",
        "get_validation_summary",
        "ValidatorFactory.__init__",
        "__init__",
        "ValidatorFactory.get_validator",
        "get_validator",
        "ValidatorFactory.get_validator_for_step_type",
        "get_validator_for_step_type",
        "ValidatorFactory.get_validator_for_step_name",
        "ValidatorFactory.validate_step_with_priority_system",
        "validate_step_with_priority_system",
        "ValidatorFactory.is_validator_available",
        "is_validator_available",
        "ValidatorFactory.get_validator_registry_status",
        "get_validator_registry_status",
        "ValidatorFactory.get_factory_health_status",
        "ValidatorFactory.get_factory_statistics",
        "ValidatorFactory.get_available_validators",
        "get_available_validators",
        "ValidatorFactory.get_available_validators_detailed",
        "ValidatorFactory.get_step_type_validator_mapping",
        "ValidatorFactory.validate_factory_configuration",
        "ValidatorFactory.validate_factory_configuration_list",
        "ValidatorFactory.get_validation_statistics",
        "get_validation_statistics",
        "StepTypeValidatorIntegration.__init__",
        "__init__",
        "__init__",
        "get_validator",
        "get_validator_for_step_type",
        "validate_step_with_priority_system",
        "is_validator_available",
        "get_validator_registry_status",
        "get_available_validators",
        "get_validation_statistics",
        "__init__",
        "CreateModelStepBuilderValidator._validate_step_type_specifics",
        "_validate_step_type_specifics",
        "CreateModelStepBuilderValidator._validate_create_model_method",
        "_validate_create_model_method",
        "CreateModelStepBuilderValidator._validate_createmodel_outputs",
        "_validate_createmodel_outputs",
        "CreateModelStepBuilderValidator._validate_model_configuration",
        "_validate_model_configuration",
        "CreateModelStepBuilderValidator._validate_image_uri_method",
        "_validate_image_uri_method",
        "CreateModelStepBuilderValidator.validate_createmodel_step_patterns",
        "CreateModelStepBuilderValidator._validate_model_creation_pattern",
        "CreateModelStepBuilderValidator._validate_container_configuration",
        "CreateModelStepBuilderValidator._validate_xgboost_model_patterns",
        "CreateModelStepBuilderValidator._validate_pytorch_model_patterns",
        "_validate_step_type_specifics",
        "_validate_create_model_method",
        "_validate_createmodel_outputs",
        "_validate_model_configuration",
        "_validate_image_uri_method",
        "ScriptAnalyzer.__init__",
        "__init__",
        "ScriptAnalyzer._read_script",
        "ScriptAnalyzer._parse_script",
        "ScriptAnalyzer.validate_main_function_signature",
        "ScriptAnalyzer.extract_parameter_usage",
        "ScriptAnalyzer.validate_contract_alignment",
        "ScriptAnalyzer._find_main_function",
        "ScriptAnalyzer._extract_function_parameters",
        "ScriptAnalyzer._validate_signature",
        "ScriptAnalyzer._get_signature_issues",
        "ScriptAnalyzer._find_parameter_usage",
        "ScriptAnalyzer._collect_string_literals",
        "ScriptAnalyzer._find_keys_from_loops",
        "__init__"
      ],
      "likely_untested_functions": [
        "run_all_tests",
        "_run_comprehensive_validation_for_step",
        "_run_alignment_validation",
        "_run_fallback_core_validation",
        "_test_integration_capabilities",
        "_check_step_instantiation",
        "_test_step_creation_capability",
        "_run_processing_tests",
        "_run_training_tests",
        "_run_transform_tests",
        "_run_create_model_tests",
        "_run_register_model_tests",
        "_create_minimal_config",
        "_find_step_name_with_catalog",
        "_find_step_name_legacy",
        "run_all_tests_legacy",
        "run_all_tests_with_scoring",
        "run_all_tests_with_full_report",
        "_report_consolidated_results",
        "_report_consolidated_results_with_scoring",
        "_generate_structured_report",
        "test_refactored_initialization",
        "test_backward_compatibility_methods",
        "run_all_tests",
        "_run_comprehensive_validation_for_step",
        "_run_alignment_validation",
        "_run_fallback_core_validation",
        "_test_integration_capabilities",
        "_check_step_instantiation",
        "_test_step_creation_capability",
        "_run_processing_tests",
        "_run_training_tests",
        "_run_transform_tests",
        "_run_create_model_tests",
        "_run_register_model_tests",
        "_create_minimal_config",
        "_find_step_name_with_catalog",
        "_find_step_name_legacy",
        "run_all_tests_legacy",
        "run_all_tests_with_scoring",
        "run_all_tests_with_full_report",
        "_report_consolidated_results",
        "_report_consolidated_results_with_scoring",
        "_generate_structured_report",
        "test_refactored_initialization",
        "test_backward_compatibility_methods",
        "load_from_file",
        "has_enhanced_specs",
        "get_enhanced_specs",
        "get_basic_specs",
        "model_post_init",
        "load_from_file",
        "has_enhanced_specs",
        "get_enhanced_specs",
        "get_basic_specs",
        "model_post_init",
        "_initialize_step_catalog",
        "_detect_framework_if_needed",
        "_validate_builder_consistency_if_available",
        "_discover_pipeline_components_if_needed",
        "test_script_with_step_catalog_enhancements",
        "test_data_compatibility_with_step_catalog_enhancements",
        "test_pipeline_flow_with_step_catalog_enhancements",
        "_test_contract_aware_compatibility",
        "_are_contract_specs_compatible",
        "_test_contract_data_flow",
        "_test_data_compatibility_with_semantic_matching",
        "_find_semantic_path_matches",
        "_find_simple_path_matches",
        "_test_pipeline_flow_with_topological_ordering",
        "_test_pipeline_flow_original",
        "test_script_to_inference_compatibility",
        "test_pipeline_with_inference",
        "_create_modified_spec_with_matches",
        "_detect_file_format",
        "test_pipeline_flow_with_topological_execution",
        "get_path_matches",
        "validate_pipeline_logical_names",
        "_convert_to_enhanced_spec",
        "_convert_from_enhanced_spec",
        "_generate_default_input_aliases",
        "_generate_default_output_aliases",
        "_initialize_step_catalog",
        "_detect_framework_if_needed",
        "_validate_builder_consistency_if_available",
        "_discover_pipeline_components_if_needed",
        "test_script_with_step_catalog_enhancements",
        "test_data_compatibility_with_step_catalog_enhancements",
        "test_pipeline_flow_with_step_catalog_enhancements",
        "_test_contract_aware_compatibility",
        "_are_contract_specs_compatible",
        "_test_contract_data_flow",
        "_test_data_compatibility_with_semantic_matching",
        "_find_semantic_path_matches",
        "_find_simple_path_matches",
        "_test_pipeline_flow_with_topological_ordering",
        "_test_pipeline_flow_original",
        "test_script_to_inference_compatibility",
        "test_pipeline_with_inference",
        "_create_modified_spec_with_matches",
        "_detect_file_format",
        "test_pipeline_flow_with_topological_execution",
        "get_path_matches",
        "validate_pipeline_logical_names",
        "_convert_to_enhanced_spec",
        "_convert_from_enhanced_spec",
        "_generate_default_input_aliases",
        "_generate_default_output_aliases",
        "script_tester_func",
        "serialize_datetime_fields",
        "get_packaged_model_path",
        "get_payload_samples_path",
        "get_extraction_root_path",
        "get_inference_code_path",
        "get_handler_file_path",
        "serialize_datetime_fields",
        "get_overall_success_rate",
        "add_inference_handler",
        "has_inference_handlers",
        "get_inference_handler_names",
        "get_mixed_step_types",
        "validate_mixed_pipeline",
        "is_valid_mixed_pipeline",
        "serialize_datetime_fields",
        "get_packaged_model_path",
        "get_payload_samples_path",
        "get_extraction_root_path",
        "get_inference_code_path",
        "get_handler_file_path",
        "serialize_datetime_fields",
        "get_overall_success_rate",
        "add_inference_handler",
        "has_inference_handlers",
        "get_inference_handler_names",
        "get_mixed_step_types",
        "validate_mixed_pipeline",
        "is_valid_mixed_pipeline",
        "model_post_init",
        "_find_best_alias_match",
        "_create_file_mapping",
        "test_pipeline_with_topological_execution",
        "model_post_init",
        "_find_best_alias_match",
        "_create_file_mapping",
        "test_pipeline_with_topological_execution",
        "_find_in_workspace",
        "_get_fallback_workspace_dirs",
        "_find_in_workspace",
        "_get_fallback_workspace_dirs",
        "_initialize_step_catalog",
        "_resolve_script_with_step_catalog_if_available",
        "_get_contract_aware_paths_if_available",
        "_find_script_file",
        "_find_in_workspace",
        "_find_fuzzy_match",
        "_create_placeholder_script",
        "_get_contract_aware_input_paths",
        "_get_contract_aware_output_paths",
        "_get_contract_aware_environ_vars",
        "_get_contract_aware_job_args",
        "_get_default_input_paths",
        "_get_default_output_paths",
        "_get_default_environ_vars",
        "_get_default_job_args",
        "_initialize_step_catalog",
        "_resolve_script_with_step_catalog_if_available",
        "_get_contract_aware_paths_if_available",
        "_find_script_file",
        "_find_in_workspace",
        "_find_fuzzy_match",
        "_create_placeholder_script",
        "_get_contract_aware_input_paths",
        "_get_contract_aware_output_paths",
        "_get_contract_aware_environ_vars",
        "_get_contract_aware_job_args",
        "_get_default_input_paths",
        "_get_default_output_paths",
        "_get_default_environ_vars",
        "_get_default_job_args",
        "get_step_name_from_spec_type",
        "ImportResolver.ensure_cursus_imports",
        "ensure_cursus_imports",
        "ImportResolver._try_installed_import",
        "_try_installed_import",
        "ImportResolver._try_relative_import_pattern",
        "_try_relative_import_pattern",
        "ImportResolver._try_step_catalog_discovery",
        "_try_step_catalog_discovery",
        "ImportResolver._validate_cursus_structure_with_ast",
        "_validate_cursus_structure_with_ast",
        "ImportResolver._setup_development_imports",
        "_setup_development_imports",
        "ImportResolver._find_project_root",
        "_find_project_root",
        "ImportResolver._try_fallback_patterns",
        "_try_fallback_patterns",
        "ImportResolver.get_project_info",
        "get_project_info",
        "ImportResolver.reset",
        "reset",
        "ensure_cursus_imports",
        "get_project_info",
        "auto_setup_imports",
        "ensure_cursus_imports",
        "_try_installed_import",
        "_try_relative_import_pattern",
        "_try_step_catalog_discovery",
        "_validate_cursus_structure_with_ast",
        "_setup_development_imports",
        "_find_project_root",
        "_try_fallback_patterns",
        "get_project_info",
        "reset",
        "run_validation_for_all_steps",
        "_has_script_file",
        "_run_validation_level",
        "_run_enabled_validation_levels",
        "_handle_excluded_step",
        "export_report",
        "get_step_info_from_catalog",
        "get_component_path_from_catalog",
        "validate_cross_workspace_compatibility",
        "run_validation_for_all_steps",
        "_has_script_file",
        "_run_validation_level",
        "_run_enabled_validation_levels",
        "_handle_excluded_step",
        "export_report",
        "get_step_info_from_catalog",
        "get_component_path_from_catalog",
        "validate_cross_workspace_compatibility",
        "_format_result_text",
        "_generate_issue_breakdown",
        "_generate_recommendations",
        "_generate_html_summary",
        "_generate_html_results",
        "_get_html_styles",
        "_should_include_result",
        "_get_status_color",
        "_get_status_symbol",
        "_get_issue_color",
        "generate_quick_report",
        "print_validation_summary",
        "calculate_validation_scores",
        "_format_result_text",
        "_generate_issue_breakdown",
        "_generate_recommendations",
        "_generate_html_summary",
        "_generate_html_results",
        "_get_html_styles",
        "_should_include_result",
        "_get_status_color",
        "_get_status_symbol",
        "_get_issue_color",
        "ScriptContractAlignmentTester.validate_all_scripts",
        "validate_all_scripts",
        "ScriptContractAlignmentTester._load_python_contract",
        "_load_python_contract",
        "ScriptContractAlignmentTester._resolve_logical_name_from_contract",
        "_resolve_logical_name_from_contract",
        "ScriptContractAlignmentTester._build_entry_point_mapping",
        "_build_entry_point_mapping",
        "ScriptContractAlignmentTester._enhance_with_step_type_validation",
        "_enhance_with_step_type_validation",
        "ScriptContractAlignmentTester._validate_training_specific",
        "_validate_training_specific",
        "ScriptContractAlignmentTester._validate_xgboost_training_patterns",
        "_validate_xgboost_training_patterns",
        "ScriptContractAlignmentTester._validate_processing_framework_specific",
        "_validate_processing_framework_specific",
        "validate_all_scripts",
        "_load_python_contract",
        "_resolve_logical_name_from_contract",
        "_build_entry_point_mapping",
        "_enhance_with_step_type_validation",
        "_validate_training_specific",
        "_validate_xgboost_training_patterns",
        "_validate_processing_framework_specific",
        "validate_level_configuration",
        "get_available_levels",
        "validate_level_configuration",
        "get_available_levels",
        "SpecificationDependencyAlignmentTester.validate_all_specifications",
        "validate_all_specifications",
        "SpecificationDependencyAlignmentTester._validate_all_specifications_fallback",
        "_validate_all_specifications_fallback",
        "SpecificationDependencyAlignmentTester.validate_specification_object",
        "validate_specification_object",
        "SpecificationDependencyAlignmentTester._create_missing_spec_error",
        "_create_missing_spec_error",
        "SpecificationDependencyAlignmentTester._create_serialization_error",
        "_create_serialization_error",
        "SpecificationDependencyAlignmentTester._validate_dependency_resolution",
        "_validate_dependency_resolution",
        "SpecificationDependencyAlignmentTester._generate_compatibility_recommendation",
        "_generate_compatibility_recommendation",
        "SpecificationDependencyAlignmentTester._get_available_canonical_step_names",
        "_get_available_canonical_step_names",
        "SpecificationDependencyAlignmentTester._populate_resolver_registry",
        "_populate_resolver_registry",
        "SpecificationDependencyAlignmentTester._dict_to_step_specification",
        "_dict_to_step_specification",
        "SpecificationDependencyAlignmentTester.get_dependency_resolution_report",
        "get_dependency_resolution_report",
        "SpecificationDependencyAlignmentTester._is_compatible_output",
        "_is_compatible_output",
        "SpecificationDependencyAlignmentTester._validate_circular_dependencies",
        "_validate_circular_dependencies",
        "SpecificationDependencyAlignmentTester._validate_dependency_data_types",
        "_validate_dependency_data_types",
        "SpecificationDependencyAlignmentTester._load_all_specifications",
        "_load_all_specifications",
        "SpecificationDependencyAlignmentTester._load_all_specifications_legacy",
        "_load_all_specifications_legacy",
        "validate_all_specifications",
        "_validate_all_specifications_fallback",
        "validate_specification_object",
        "_create_missing_spec_error",
        "_create_serialization_error",
        "_validate_dependency_resolution",
        "_generate_compatibility_recommendation",
        "_get_available_canonical_step_names",
        "_populate_resolver_registry",
        "_dict_to_step_specification",
        "get_dependency_resolution_report",
        "_is_compatible_output",
        "_validate_circular_dependencies",
        "_validate_dependency_data_types",
        "_load_all_specifications",
        "_load_all_specifications_legacy",
        "Level3ValidationConfig.determine_severity_from_score",
        "determine_severity_from_score",
        "Level3ValidationConfig.should_pass_validation",
        "should_pass_validation",
        "Level3ValidationConfig.get_threshold_description",
        "get_threshold_description",
        "Level3ValidationConfig._get_mode_description",
        "_get_mode_description",
        "Level3ValidationConfig.create_strict_config",
        "create_strict_config",
        "Level3ValidationConfig.create_relaxed_config",
        "create_relaxed_config",
        "Level3ValidationConfig.create_permissive_config",
        "create_permissive_config",
        "Level3ValidationConfig.create_custom_config",
        "create_custom_config",
        "determine_severity_from_score",
        "should_pass_validation",
        "get_threshold_description",
        "_get_mode_description",
        "create_strict_config",
        "create_relaxed_config",
        "create_permissive_config",
        "create_custom_config",
        "ContractSpecificationAlignmentTester.validate_all_contracts",
        "validate_all_contracts",
        "ContractSpecificationAlignmentTester._contract_to_dict",
        "_contract_to_dict",
        "ContractSpecificationAlignmentTester._find_specifications_by_contract",
        "_find_specifications_by_contract",
        "validate_all_contracts",
        "_contract_to_dict",
        "_find_specifications_by_contract",
        "get_validation_ruleset_for_step_name",
        "is_validation_level_enabled_for_step_name",
        "get_enabled_validation_levels_for_step_name",
        "is_step_name_excluded",
        "__post_init__",
        "error_count",
        "warning_count",
        "info_count",
        "total_issues",
        "add_issue",
        "MethodValidationInfo.__post_init__",
        "__post_init__",
        "StepValidationContext.__post_init__",
        "__post_init__",
        "create_validation_result",
        "merge_validation_results",
        "filter_issues_by_level",
        "group_issues_by_method",
        "format_validation_summary",
        "__post_init__",
        "error_count",
        "warning_count",
        "info_count",
        "total_issues",
        "add_issue",
        "__post_init__",
        "__post_init__",
        "DependencyValidator.validate_dependency_resolution",
        "validate_dependency_resolution",
        "DependencyValidator.validate_circular_dependencies",
        "validate_circular_dependencies",
        "DependencyValidator.validate_dependency_data_types",
        "validate_dependency_data_types",
        "DependencyValidator.get_dependency_resolution_report",
        "get_dependency_resolution_report",
        "DependencyValidator._generate_compatibility_recommendation",
        "_generate_compatibility_recommendation",
        "DependencyValidator._get_available_canonical_step_names",
        "_get_available_canonical_step_names",
        "DependencyValidator._get_canonical_step_name",
        "_get_canonical_step_name",
        "DependencyValidator._populate_resolver_registry",
        "_populate_resolver_registry",
        "DependencyValidator._dict_to_step_specification",
        "_dict_to_step_specification",
        "validate_dependency_resolution",
        "validate_circular_dependencies",
        "validate_dependency_data_types",
        "get_dependency_resolution_report",
        "_generate_compatibility_recommendation",
        "_get_available_canonical_step_names",
        "_get_canonical_step_name",
        "_populate_resolver_registry",
        "_dict_to_step_specification",
        "has_cycle",
        "validate_processing_step_patterns",
        "_validate_processor_creation_pattern",
        "_validate_script_execution_pattern",
        "validate_processing_step_patterns",
        "_validate_processor_creation_pattern",
        "_validate_script_execution_pattern",
        "_validate_xgboost_patterns",
        "_validate_pytorch_patterns",
        "validate_training_step_patterns",
        "_validate_estimator_creation_pattern",
        "_validate_training_job_configuration",
        "_validate_xgboost_patterns",
        "_validate_pytorch_patterns",
        "validate_training_step_patterns",
        "_validate_estimator_creation_pattern",
        "_validate_training_job_configuration",
        "_combine_validation_results",
        "_combine_validation_results",
        "_validate_model_transformer_patterns",
        "validate_transform_step_patterns",
        "_validate_transformer_creation_pattern",
        "_validate_batch_transform_configuration",
        "_validate_model_transformer_patterns",
        "validate_transform_step_patterns",
        "_validate_transformer_creation_pattern",
        "_validate_batch_transform_configuration",
        "get_step_name_from_spec_type",
        "get_sagemaker_step_type",
        "validate_step_name",
        "_validate_method_signature",
        "validate_builder_by_name",
        "_validate_method_signature",
        "validate_builder_by_name",
        "get_validator_for_step_name",
        "get_factory_health_status",
        "get_factory_statistics",
        "get_available_validators_detailed",
        "get_step_type_validator_mapping",
        "validate_factory_configuration",
        "validate_factory_configuration_list",
        "StepTypeValidatorIntegration.validate_step_with_full_integration",
        "validate_step_with_full_integration",
        "StepTypeValidatorIntegration.validate_multiple_steps",
        "validate_multiple_steps",
        "StepTypeValidatorIntegration.get_integration_status",
        "get_integration_status",
        "get_validator_for_step_name",
        "get_factory_health_status",
        "get_factory_statistics",
        "get_available_validators_detailed",
        "get_step_type_validator_mapping",
        "validate_factory_configuration",
        "validate_factory_configuration_list",
        "validate_step_with_full_integration",
        "validate_multiple_steps",
        "get_integration_status",
        "validate_createmodel_step_patterns",
        "_validate_model_creation_pattern",
        "_validate_container_configuration",
        "_validate_xgboost_model_patterns",
        "_validate_pytorch_model_patterns",
        "validate_createmodel_step_patterns",
        "_validate_model_creation_pattern",
        "_validate_container_configuration",
        "_validate_xgboost_model_patterns",
        "_validate_pytorch_model_patterns",
        "_read_script",
        "_parse_script",
        "validate_main_function_signature",
        "extract_parameter_usage",
        "validate_contract_alignment",
        "_find_main_function",
        "_extract_function_parameters",
        "_validate_signature",
        "_get_signature_issues",
        "_find_parameter_usage",
        "_collect_string_literals",
        "_find_keys_from_loops",
        "_read_script",
        "_parse_script",
        "validate_main_function_signature",
        "extract_parameter_usage",
        "validate_contract_alignment",
        "_find_main_function",
        "_extract_function_parameters",
        "_validate_signature",
        "_get_signature_issues",
        "_find_parameter_usage",
        "_collect_string_literals",
        "_find_keys_from_loops"
      ]
    },
    "workspace": {
      "component": "workspace",
      "description": "Workspace management and integration",
      "source_exists": true,
      "test_exists": true,
      "source_files": [
        "workspace/validator.py",
        "workspace/integrator.py",
        "workspace/api.py",
        "workspace/manager.py"
      ],
      "test_files": [
        "workspace/test_validator.py",
        "workspace/test_api.py",
        "workspace/test_manager.py",
        "workspace/test_integrator.py"
      ],
      "total_source_functions": 141,
      "tested_functions": 116,
      "untested_functions": 25,
      "coverage_percentage": 82.26950354609929,
      "total_source_lines": 1772,
      "total_test_lines": 1808,
      "test_to_source_ratio": 2.5460992907801416,
      "source_functions_by_file": {
        "workspace/validator.py": [
          "ValidationResult.__init__",
          "__init__",
          "CompatibilityResult.__init__",
          "__init__",
          "WorkspaceValidator.__init__",
          "__init__",
          "WorkspaceValidator.validate_workspace_components",
          "validate_workspace_components",
          "WorkspaceValidator._validate_component",
          "_validate_component",
          "WorkspaceValidator._run_existing_validation",
          "_run_existing_validation",
          "WorkspaceValidator.validate_cross_workspace_compatibility",
          "validate_cross_workspace_compatibility",
          "WorkspaceValidator._check_dependency_compatibility",
          "_check_dependency_compatibility",
          "WorkspaceValidator.validate_component_quality",
          "validate_component_quality",
          "WorkspaceValidator.get_validation_summary",
          "get_validation_summary",
          "__init__",
          "__init__",
          "__init__",
          "validate_workspace_components",
          "_validate_component",
          "_run_existing_validation",
          "validate_cross_workspace_compatibility",
          "_check_dependency_compatibility",
          "validate_component_quality",
          "get_validation_summary"
        ],
        "workspace/integrator.py": [
          "IntegrationResult.__init__",
          "__init__",
          "WorkspaceIntegrator.__init__",
          "__init__",
          "WorkspaceIntegrator.promote_component_to_core",
          "promote_component_to_core",
          "WorkspaceIntegrator._validate_promotion_readiness",
          "_validate_promotion_readiness",
          "WorkspaceIntegrator._execute_promotion",
          "_execute_promotion",
          "WorkspaceIntegrator.integrate_cross_workspace_components",
          "integrate_cross_workspace_components",
          "WorkspaceIntegrator.rollback_promotion",
          "rollback_promotion",
          "WorkspaceIntegrator.get_integration_summary",
          "get_integration_summary",
          "__init__",
          "__init__",
          "promote_component_to_core",
          "_validate_promotion_readiness",
          "_execute_promotion",
          "integrate_cross_workspace_components",
          "rollback_promotion",
          "get_integration_summary"
        ],
        "workspace/api.py": [
          "WorkspaceAPI.__init__",
          "__init__",
          "WorkspaceAPI.discover_components",
          "discover_components",
          "WorkspaceAPI.get_component_info",
          "get_component_info",
          "WorkspaceAPI.find_component_file",
          "find_component_file",
          "WorkspaceAPI.search_components",
          "search_components",
          "WorkspaceAPI.get_workspace_summary",
          "get_workspace_summary",
          "WorkspaceAPI.validate_workspace_structure",
          "validate_workspace_structure",
          "WorkspaceAPI.get_cross_workspace_components",
          "get_cross_workspace_components",
          "WorkspaceAPI.create_workspace_pipeline",
          "create_workspace_pipeline",
          "WorkspaceAPI.validate_workspace_components",
          "validate_workspace_components",
          "WorkspaceAPI.validate_component_quality",
          "validate_component_quality",
          "WorkspaceAPI.validate_cross_workspace_compatibility",
          "validate_cross_workspace_compatibility",
          "WorkspaceAPI.promote_component_to_core",
          "promote_component_to_core",
          "WorkspaceAPI.integrate_cross_workspace_components",
          "integrate_cross_workspace_components",
          "WorkspaceAPI.rollback_promotion",
          "rollback_promotion",
          "WorkspaceAPI.refresh_catalog",
          "refresh_catalog",
          "WorkspaceAPI.get_system_status",
          "get_system_status",
          "WorkspaceAPI.list_all_workspaces",
          "list_all_workspaces",
          "WorkspaceAPI.get_workspace_component_count",
          "get_workspace_component_count",
          "WorkspaceAPI.is_component_available",
          "is_component_available",
          "__init__",
          "discover_components",
          "get_component_info",
          "find_component_file",
          "search_components",
          "get_workspace_summary",
          "validate_workspace_structure",
          "get_cross_workspace_components",
          "create_workspace_pipeline",
          "validate_workspace_components",
          "validate_component_quality",
          "validate_cross_workspace_compatibility",
          "promote_component_to_core",
          "integrate_cross_workspace_components",
          "rollback_promotion",
          "refresh_catalog",
          "get_system_status",
          "list_all_workspaces",
          "get_workspace_component_count",
          "is_component_available"
        ],
        "workspace/manager.py": [
          "WorkspaceManager.__init__",
          "__init__",
          "WorkspaceManager.discover_components",
          "discover_components",
          "WorkspaceManager.get_component_info",
          "get_component_info",
          "WorkspaceManager.find_component_file",
          "find_component_file",
          "WorkspaceManager.create_workspace_pipeline",
          "create_workspace_pipeline",
          "WorkspaceManager.get_workspace_summary",
          "get_workspace_summary",
          "WorkspaceManager.validate_workspace_structure",
          "validate_workspace_structure",
          "WorkspaceManager.get_cross_workspace_components",
          "get_cross_workspace_components",
          "WorkspaceManager.refresh_catalog",
          "refresh_catalog",
          "__init__",
          "discover_components",
          "get_component_info",
          "find_component_file",
          "create_workspace_pipeline",
          "get_workspace_summary",
          "validate_workspace_structure",
          "get_cross_workspace_components",
          "refresh_catalog"
        ]
      },
      "test_functions_by_file": {
        "workspace/test_validator.py": [
          "TestWorkspaceValidator.mock_step_catalog",
          "mock_step_catalog",
          "TestWorkspaceValidator.validator",
          "validator",
          "TestWorkspaceValidator.mock_unified_tester",
          "mock_unified_tester",
          "TestWorkspaceValidator.test_initialization",
          "test_initialization",
          "TestWorkspaceValidator.test_validate_workspace_components_success",
          "test_validate_workspace_components_success",
          "TestWorkspaceValidator.test_validate_workspace_components_with_failures",
          "test_validate_workspace_components_with_failures",
          "TestWorkspaceValidator.test_validate_workspace_components_no_components",
          "test_validate_workspace_components_no_components",
          "TestWorkspaceValidator.test_validate_component_quality_success",
          "test_validate_component_quality_success",
          "TestWorkspaceValidator.test_validate_component_quality_not_found",
          "test_validate_component_quality_not_found",
          "TestWorkspaceValidator.test_validate_component_quality_low_score",
          "test_validate_component_quality_low_score",
          "TestWorkspaceValidator.test_validate_cross_workspace_compatibility_success",
          "test_validate_cross_workspace_compatibility_success",
          "TestWorkspaceValidator.test_validate_cross_workspace_compatibility_version_conflict",
          "test_validate_cross_workspace_compatibility_version_conflict",
          "TestWorkspaceValidator.test_validate_cross_workspace_compatibility_framework_conflict",
          "test_validate_cross_workspace_compatibility_framework_conflict",
          "TestWorkspaceValidator.test_get_validation_summary",
          "test_get_validation_summary",
          "TestWorkspaceValidator.test_error_handling_in_workspace_validation",
          "test_error_handling_in_workspace_validation",
          "TestWorkspaceValidator.test_error_handling_in_quality_validation",
          "test_error_handling_in_quality_validation",
          "TestWorkspaceValidator.test_validation_with_missing_scoring_info",
          "test_validation_with_missing_scoring_info",
          "TestWorkspaceValidator.test_compatibility_validation_with_missing_registry_data",
          "test_compatibility_validation_with_missing_registry_data",
          "TestWorkspaceValidator.test_validation_result_model",
          "test_validation_result_model",
          "TestWorkspaceValidator.test_compatibility_result_model",
          "test_compatibility_result_model",
          "TestWorkspaceValidator.test_validation_with_empty_workspace_list",
          "test_validation_with_empty_workspace_list",
          "TestWorkspaceValidator.test_validation_with_single_workspace",
          "test_validation_with_single_workspace",
          "TestWorkspaceValidator.test_concurrent_validation_safety",
          "test_concurrent_validation_safety",
          "TestWorkspaceValidatorIntegration.realistic_catalog",
          "realistic_catalog",
          "TestWorkspaceValidatorIntegration.test_realistic_workspace_validation",
          "test_realistic_workspace_validation",
          "TestWorkspaceValidatorIntegration.test_realistic_compatibility_validation",
          "test_realistic_compatibility_validation",
          "TestWorkspaceValidatorIntegration.test_validator_resilience_to_catalog_failures",
          "test_validator_resilience_to_catalog_failures",
          "mock_step_catalog",
          "validator",
          "mock_unified_tester",
          "test_initialization",
          "test_validate_workspace_components_success",
          "test_validate_workspace_components_with_failures",
          "test_validate_workspace_components_no_components",
          "test_validate_component_quality_success",
          "test_validate_component_quality_not_found",
          "test_validate_component_quality_low_score",
          "test_validate_cross_workspace_compatibility_success",
          "test_validate_cross_workspace_compatibility_version_conflict",
          "test_validate_cross_workspace_compatibility_framework_conflict",
          "test_get_validation_summary",
          "test_error_handling_in_workspace_validation",
          "test_error_handling_in_quality_validation",
          "test_validation_with_missing_scoring_info",
          "test_compatibility_validation_with_missing_registry_data",
          "test_validation_result_model",
          "test_compatibility_result_model",
          "test_validation_with_empty_workspace_list",
          "test_validation_with_single_workspace",
          "test_concurrent_validation_safety",
          "realistic_catalog",
          "test_realistic_workspace_validation",
          "test_realistic_compatibility_validation",
          "test_validator_resilience_to_catalog_failures",
          "worker"
        ],
        "workspace/test_api.py": [
          "TestWorkspaceAPI.temp_workspace_dirs",
          "temp_workspace_dirs",
          "TestWorkspaceAPI.mock_step_catalog",
          "mock_step_catalog",
          "TestWorkspaceAPI.api_with_workspaces",
          "api_with_workspaces",
          "TestWorkspaceAPI.api_package_only",
          "api_package_only",
          "TestWorkspaceAPI.test_initialization_package_only",
          "test_initialization_package_only",
          "TestWorkspaceAPI.test_initialization_single_workspace",
          "test_initialization_single_workspace",
          "TestWorkspaceAPI.test_initialization_multiple_workspaces",
          "test_initialization_multiple_workspaces",
          "TestWorkspaceAPI.test_discover_components_success",
          "test_discover_components_success",
          "TestWorkspaceAPI.test_discover_components_with_workspace_filter",
          "test_discover_components_with_workspace_filter",
          "TestWorkspaceAPI.test_discover_components_error_handling",
          "test_discover_components_error_handling",
          "TestWorkspaceAPI.test_get_component_info_success",
          "test_get_component_info_success",
          "TestWorkspaceAPI.test_get_component_info_not_found",
          "test_get_component_info_not_found",
          "TestWorkspaceAPI.test_find_component_file_success",
          "test_find_component_file_success",
          "TestWorkspaceAPI.test_search_components_success",
          "test_search_components_success",
          "TestWorkspaceAPI.test_search_components_with_workspace_filter",
          "test_search_components_with_workspace_filter",
          "TestWorkspaceAPI.test_get_workspace_summary",
          "test_get_workspace_summary",
          "TestWorkspaceAPI.test_validate_workspace_structure",
          "test_validate_workspace_structure",
          "TestWorkspaceAPI.test_create_workspace_pipeline_success",
          "test_create_workspace_pipeline_success",
          "TestWorkspaceAPI.test_validate_workspace_components",
          "test_validate_workspace_components",
          "TestWorkspaceAPI.test_validate_component_quality",
          "test_validate_component_quality",
          "TestWorkspaceAPI.test_validate_cross_workspace_compatibility",
          "test_validate_cross_workspace_compatibility",
          "TestWorkspaceAPI.test_promote_component_to_core",
          "test_promote_component_to_core",
          "TestWorkspaceAPI.test_integrate_cross_workspace_components",
          "test_integrate_cross_workspace_components",
          "TestWorkspaceAPI.test_rollback_promotion",
          "test_rollback_promotion",
          "TestWorkspaceAPI.test_refresh_catalog",
          "test_refresh_catalog",
          "TestWorkspaceAPI.test_get_system_status",
          "test_get_system_status",
          "TestWorkspaceAPI.test_list_all_workspaces",
          "test_list_all_workspaces",
          "TestWorkspaceAPI.test_get_workspace_component_count",
          "test_get_workspace_component_count",
          "TestWorkspaceAPI.test_is_component_available",
          "test_is_component_available",
          "TestWorkspaceAPI.test_metrics_tracking",
          "test_metrics_tracking",
          "TestWorkspaceAPI.test_error_handling_preserves_metrics",
          "test_error_handling_preserves_metrics",
          "TestWorkspaceAPI.test_success_rate_calculation",
          "test_success_rate_calculation",
          "TestWorkspaceAPIIntegration.integration_workspace",
          "integration_workspace",
          "TestWorkspaceAPIIntegration.test_end_to_end_component_discovery",
          "test_end_to_end_component_discovery",
          "TestWorkspaceAPIIntegration.test_api_resilience_to_missing_dependencies",
          "test_api_resilience_to_missing_dependencies",
          "temp_workspace_dirs",
          "mock_step_catalog",
          "api_with_workspaces",
          "api_package_only",
          "test_initialization_package_only",
          "test_initialization_single_workspace",
          "test_initialization_multiple_workspaces",
          "test_discover_components_success",
          "test_discover_components_with_workspace_filter",
          "test_discover_components_error_handling",
          "test_get_component_info_success",
          "test_get_component_info_not_found",
          "test_find_component_file_success",
          "test_search_components_success",
          "test_search_components_with_workspace_filter",
          "test_get_workspace_summary",
          "test_validate_workspace_structure",
          "test_create_workspace_pipeline_success",
          "test_validate_workspace_components",
          "test_validate_component_quality",
          "test_validate_cross_workspace_compatibility",
          "test_promote_component_to_core",
          "test_integrate_cross_workspace_components",
          "test_rollback_promotion",
          "test_refresh_catalog",
          "test_get_system_status",
          "test_list_all_workspaces",
          "test_get_workspace_component_count",
          "test_is_component_available",
          "test_metrics_tracking",
          "test_error_handling_preserves_metrics",
          "test_success_rate_calculation",
          "integration_workspace",
          "test_end_to_end_component_discovery",
          "test_api_resilience_to_missing_dependencies"
        ],
        "workspace/test_manager.py": [
          "TestWorkspaceManager.temp_workspace_dirs",
          "temp_workspace_dirs",
          "TestWorkspaceManager.mock_step_catalog",
          "mock_step_catalog",
          "TestWorkspaceManager.manager_with_workspaces",
          "manager_with_workspaces",
          "TestWorkspaceManager.manager_package_only",
          "manager_package_only",
          "TestWorkspaceManager.test_initialization_package_only",
          "test_initialization_package_only",
          "TestWorkspaceManager.test_initialization_with_workspaces",
          "test_initialization_with_workspaces",
          "TestWorkspaceManager.test_initialization_single_workspace_path",
          "test_initialization_single_workspace_path",
          "TestWorkspaceManager.test_discover_components_all",
          "test_discover_components_all",
          "TestWorkspaceManager.test_discover_components_with_workspace_filter",
          "test_discover_components_with_workspace_filter",
          "TestWorkspaceManager.test_get_component_info_success",
          "test_get_component_info_success",
          "TestWorkspaceManager.test_get_component_info_not_found",
          "test_get_component_info_not_found",
          "TestWorkspaceManager.test_find_component_file_success",
          "test_find_component_file_success",
          "TestWorkspaceManager.test_find_component_file_not_found",
          "test_find_component_file_not_found",
          "TestWorkspaceManager.test_find_component_file_component_not_found",
          "test_find_component_file_component_not_found",
          "TestWorkspaceManager.test_get_workspace_summary",
          "test_get_workspace_summary",
          "TestWorkspaceManager.test_validate_workspace_structure_valid",
          "test_validate_workspace_structure_valid",
          "TestWorkspaceManager.test_validate_workspace_structure_invalid",
          "test_validate_workspace_structure_invalid",
          "TestWorkspaceManager.test_get_cross_workspace_components",
          "test_get_cross_workspace_components",
          "TestWorkspaceManager.test_create_workspace_pipeline_success",
          "test_create_workspace_pipeline_success",
          "TestWorkspaceManager.test_create_workspace_pipeline_error",
          "test_create_workspace_pipeline_error",
          "TestWorkspaceManager.test_refresh_catalog_success",
          "test_refresh_catalog_success",
          "TestWorkspaceManager.test_refresh_catalog_no_method",
          "test_refresh_catalog_no_method",
          "TestWorkspaceManager.test_refresh_catalog_error",
          "test_refresh_catalog_error",
          "TestWorkspaceManager.test_get_workspace_summary_with_metrics",
          "test_get_workspace_summary_with_metrics",
          "TestWorkspaceManager.test_get_workspace_summary_no_metrics_method",
          "test_get_workspace_summary_no_metrics_method",
          "TestWorkspaceManager.test_error_handling_in_discover_components",
          "test_error_handling_in_discover_components",
          "TestWorkspaceManager.test_error_handling_in_get_component_info",
          "test_error_handling_in_get_component_info",
          "TestWorkspaceManager.test_workspace_directory_normalization",
          "test_workspace_directory_normalization",
          "TestWorkspaceManager.test_component_type_validation",
          "test_component_type_validation",
          "TestWorkspaceManager.test_workspace_summary_with_empty_catalog",
          "test_workspace_summary_with_empty_catalog",
          "TestWorkspaceManager.test_concurrent_access_safety",
          "test_concurrent_access_safety",
          "TestWorkspaceManagerIntegration.realistic_workspace",
          "realistic_workspace",
          "TestWorkspaceManagerIntegration.test_realistic_workspace_validation",
          "test_realistic_workspace_validation",
          "TestWorkspaceManagerIntegration.test_workspace_component_discovery_integration",
          "test_workspace_component_discovery_integration",
          "TestWorkspaceManagerIntegration.test_manager_resilience_to_catalog_failures",
          "test_manager_resilience_to_catalog_failures",
          "temp_workspace_dirs",
          "mock_step_catalog",
          "manager_with_workspaces",
          "manager_package_only",
          "test_initialization_package_only",
          "test_initialization_with_workspaces",
          "test_initialization_single_workspace_path",
          "test_discover_components_all",
          "test_discover_components_with_workspace_filter",
          "test_get_component_info_success",
          "test_get_component_info_not_found",
          "test_find_component_file_success",
          "test_find_component_file_not_found",
          "test_find_component_file_component_not_found",
          "test_get_workspace_summary",
          "test_validate_workspace_structure_valid",
          "test_validate_workspace_structure_invalid",
          "test_get_cross_workspace_components",
          "test_create_workspace_pipeline_success",
          "test_create_workspace_pipeline_error",
          "test_refresh_catalog_success",
          "test_refresh_catalog_no_method",
          "test_refresh_catalog_error",
          "test_get_workspace_summary_with_metrics",
          "test_get_workspace_summary_no_metrics_method",
          "test_error_handling_in_discover_components",
          "test_error_handling_in_get_component_info",
          "test_workspace_directory_normalization",
          "test_component_type_validation",
          "test_workspace_summary_with_empty_catalog",
          "test_concurrent_access_safety",
          "realistic_workspace",
          "test_realistic_workspace_validation",
          "test_workspace_component_discovery_integration",
          "test_manager_resilience_to_catalog_failures",
          "mock_list_available_steps",
          "mock_list_available_steps",
          "worker"
        ],
        "workspace/test_integrator.py": [
          "TestWorkspaceIntegrator.mock_step_catalog",
          "mock_step_catalog",
          "TestWorkspaceIntegrator.integrator",
          "integrator",
          "TestWorkspaceIntegrator.temp_workspace_dirs",
          "temp_workspace_dirs",
          "TestWorkspaceIntegrator.test_initialization",
          "test_initialization",
          "TestWorkspaceIntegrator.test_promote_component_to_core_success",
          "test_promote_component_to_core_success",
          "TestWorkspaceIntegrator.test_promote_component_to_core_dry_run",
          "test_promote_component_to_core_dry_run",
          "TestWorkspaceIntegrator.test_promote_component_to_core_not_found",
          "test_promote_component_to_core_not_found",
          "TestWorkspaceIntegrator.test_promote_component_to_core_wrong_workspace",
          "test_promote_component_to_core_wrong_workspace",
          "TestWorkspaceIntegrator.test_promote_component_to_core_file_error",
          "test_promote_component_to_core_file_error",
          "TestWorkspaceIntegrator.test_integrate_cross_workspace_components_success",
          "test_integrate_cross_workspace_components_success",
          "TestWorkspaceIntegrator.test_integrate_cross_workspace_components_partial_failure",
          "test_integrate_cross_workspace_components_partial_failure",
          "TestWorkspaceIntegrator.test_integrate_cross_workspace_components_empty_list",
          "test_integrate_cross_workspace_components_empty_list",
          "TestWorkspaceIntegrator.test_rollback_promotion_success",
          "test_rollback_promotion_success",
          "TestWorkspaceIntegrator.test_rollback_promotion_not_found",
          "test_rollback_promotion_not_found",
          "TestWorkspaceIntegrator.test_get_integration_summary",
          "test_get_integration_summary",
          "TestWorkspaceIntegrator.test_integration_result_model",
          "test_integration_result_model",
          "TestWorkspaceIntegrator.test_concurrent_integration_safety",
          "test_concurrent_integration_safety",
          "TestWorkspaceIntegrator.test_error_recovery_in_integration",
          "test_error_recovery_in_integration",
          "TestWorkspaceIntegratorIntegration.realistic_workspace_structure",
          "realistic_workspace_structure",
          "TestWorkspaceIntegratorIntegration.test_realistic_component_promotion",
          "test_realistic_component_promotion",
          "TestWorkspaceIntegratorIntegration.test_integrator_resilience_to_catalog_failures",
          "test_integrator_resilience_to_catalog_failures",
          "mock_step_catalog",
          "integrator",
          "temp_workspace_dirs",
          "test_initialization",
          "test_promote_component_to_core_success",
          "test_promote_component_to_core_dry_run",
          "test_promote_component_to_core_not_found",
          "test_promote_component_to_core_wrong_workspace",
          "test_promote_component_to_core_file_error",
          "test_integrate_cross_workspace_components_success",
          "test_integrate_cross_workspace_components_partial_failure",
          "test_integrate_cross_workspace_components_empty_list",
          "test_rollback_promotion_success",
          "test_rollback_promotion_not_found",
          "test_get_integration_summary",
          "test_integration_result_model",
          "test_concurrent_integration_safety",
          "test_error_recovery_in_integration",
          "realistic_workspace_structure",
          "test_realistic_component_promotion",
          "test_integrator_resilience_to_catalog_failures",
          "worker"
        ]
      },
      "likely_tested_functions": [
        "WorkspaceValidator.__init__",
        "WorkspaceValidator.validate_workspace_components",
        "validate_workspace_components",
        "WorkspaceValidator._validate_component",
        "_validate_component",
        "WorkspaceValidator._run_existing_validation",
        "WorkspaceValidator.validate_cross_workspace_compatibility",
        "validate_cross_workspace_compatibility",
        "WorkspaceValidator._check_dependency_compatibility",
        "WorkspaceValidator.validate_component_quality",
        "validate_component_quality",
        "WorkspaceValidator.get_validation_summary",
        "get_validation_summary",
        "validate_workspace_components",
        "_validate_component",
        "validate_cross_workspace_compatibility",
        "validate_component_quality",
        "get_validation_summary",
        "WorkspaceIntegrator.__init__",
        "WorkspaceIntegrator.promote_component_to_core",
        "promote_component_to_core",
        "WorkspaceIntegrator._validate_promotion_readiness",
        "WorkspaceIntegrator._execute_promotion",
        "WorkspaceIntegrator.integrate_cross_workspace_components",
        "integrate_cross_workspace_components",
        "WorkspaceIntegrator.rollback_promotion",
        "rollback_promotion",
        "WorkspaceIntegrator.get_integration_summary",
        "get_integration_summary",
        "promote_component_to_core",
        "integrate_cross_workspace_components",
        "rollback_promotion",
        "get_integration_summary",
        "WorkspaceAPI.__init__",
        "WorkspaceAPI.discover_components",
        "discover_components",
        "WorkspaceAPI.get_component_info",
        "get_component_info",
        "WorkspaceAPI.find_component_file",
        "find_component_file",
        "WorkspaceAPI.search_components",
        "search_components",
        "WorkspaceAPI.get_workspace_summary",
        "get_workspace_summary",
        "WorkspaceAPI.validate_workspace_structure",
        "validate_workspace_structure",
        "WorkspaceAPI.get_cross_workspace_components",
        "get_cross_workspace_components",
        "WorkspaceAPI.create_workspace_pipeline",
        "create_workspace_pipeline",
        "WorkspaceAPI.validate_workspace_components",
        "validate_workspace_components",
        "WorkspaceAPI.validate_component_quality",
        "validate_component_quality",
        "WorkspaceAPI.validate_cross_workspace_compatibility",
        "validate_cross_workspace_compatibility",
        "WorkspaceAPI.promote_component_to_core",
        "promote_component_to_core",
        "WorkspaceAPI.integrate_cross_workspace_components",
        "integrate_cross_workspace_components",
        "WorkspaceAPI.rollback_promotion",
        "rollback_promotion",
        "WorkspaceAPI.refresh_catalog",
        "refresh_catalog",
        "WorkspaceAPI.get_system_status",
        "get_system_status",
        "WorkspaceAPI.list_all_workspaces",
        "list_all_workspaces",
        "WorkspaceAPI.get_workspace_component_count",
        "get_workspace_component_count",
        "WorkspaceAPI.is_component_available",
        "is_component_available",
        "discover_components",
        "get_component_info",
        "find_component_file",
        "search_components",
        "get_workspace_summary",
        "validate_workspace_structure",
        "get_cross_workspace_components",
        "create_workspace_pipeline",
        "validate_workspace_components",
        "validate_component_quality",
        "validate_cross_workspace_compatibility",
        "promote_component_to_core",
        "integrate_cross_workspace_components",
        "rollback_promotion",
        "refresh_catalog",
        "get_system_status",
        "list_all_workspaces",
        "get_workspace_component_count",
        "is_component_available",
        "WorkspaceManager.__init__",
        "WorkspaceManager.discover_components",
        "discover_components",
        "WorkspaceManager.get_component_info",
        "get_component_info",
        "WorkspaceManager.find_component_file",
        "find_component_file",
        "WorkspaceManager.create_workspace_pipeline",
        "create_workspace_pipeline",
        "WorkspaceManager.get_workspace_summary",
        "get_workspace_summary",
        "WorkspaceManager.validate_workspace_structure",
        "validate_workspace_structure",
        "WorkspaceManager.get_cross_workspace_components",
        "get_cross_workspace_components",
        "WorkspaceManager.refresh_catalog",
        "refresh_catalog",
        "discover_components",
        "get_component_info",
        "find_component_file",
        "create_workspace_pipeline",
        "get_workspace_summary",
        "validate_workspace_structure",
        "get_cross_workspace_components",
        "refresh_catalog"
      ],
      "likely_untested_functions": [
        "ValidationResult.__init__",
        "__init__",
        "CompatibilityResult.__init__",
        "__init__",
        "__init__",
        "_run_existing_validation",
        "_check_dependency_compatibility",
        "__init__",
        "__init__",
        "__init__",
        "_run_existing_validation",
        "_check_dependency_compatibility",
        "IntegrationResult.__init__",
        "__init__",
        "__init__",
        "_validate_promotion_readiness",
        "_execute_promotion",
        "__init__",
        "__init__",
        "_validate_promotion_readiness",
        "_execute_promotion",
        "__init__",
        "__init__",
        "__init__",
        "__init__"
      ]
    }
  },
  "summary": {
    "total_components": 11,
    "total_source_functions": 6463,
    "total_tested_functions": 3687,
    "overall_coverage": 57.04781061426583
  }
}