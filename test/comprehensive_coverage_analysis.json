{
  "timestamp": "2025-10-04 15:37:30",
  "component_analysis": {
    "component": "core",
    "description": "Core framework components (assembler, base, compiler, config_fields, deps)",
    "source_exists": true,
    "test_exists": true,
    "source_files": [
      "core/assembler/pipeline_template_base.py",
      "core/assembler/pipeline_assembler.py",
      "core/utils/hybrid_path_resolution.py",
      "core/deps/specification_registry.py",
      "core/deps/registry_manager.py",
      "core/deps/factory.py",
      "core/deps/dependency_resolver.py",
      "core/deps/property_reference.py",
      "core/deps/semantic_matcher.py",
      "core/config_fields/tier_registry.py",
      "core/config_fields/step_catalog_aware_categorizer.py",
      "core/config_fields/config_merger.py",
      "core/config_fields/constants.py",
      "core/config_fields/type_aware_config_serializer.py",
      "core/config_fields/cradle_config_factory.py",
      "core/config_fields/unified_config_manager.py",
      "core/config_fields/performance_optimizer.py",
      "core/config_fields/config_field_categorizer.py",
      "core/config_fields/circular_reference_tracker.py",
      "core/compiler/name_generator.py",
      "core/compiler/dag_compiler.py",
      "core/compiler/dynamic_template.py",
      "core/compiler/exceptions.py",
      "core/compiler/validation.py",
      "core/base/enums.py",
      "core/base/contract_base.py",
      "core/base/specification_base.py",
      "core/base/config_base.py",
      "core/base/builder_base.py",
      "core/base/hyperparameters_base.py"
    ],
    "test_files": [
      "core/assembler/test_pipeline_template_base.py",
      "core/assembler/test_pipeline_assembler.py",
      "core/integration/test_pipeline_execution_temp_dir_integration.py",
      "core/utils/test_hybrid_path_resolution.py",
      "core/config_portability/test_processing_config_portability.py",
      "core/config_portability/test_base_config_portability.py",
      "core/deps/test_semantic_matcher.py",
      "core/deps/test_property_reference.py",
      "core/deps/test_global_state_isolation.py",
      "core/deps/test_factory.py",
      "core/deps/test_specification_registry.py",
      "core/deps/test_registry_manager.py",
      "core/deps/test_helpers.py",
      "core/deps/test_dependency_resolver.py",
      "core/config_fields/test_type_aware_serialization.py",
      "core/config_fields/test_circular_reference_tracker.py",
      "core/config_fields/test_config_field_categorizer.py",
      "core/config_fields/test_circular_reference_consolidated.py",
      "core/config_fields/test_end_to_end_integration.py",
      "core/config_fields/test_bug_fixes_consolidated.py",
      "core/config_fields/test_config_class_detector.py",
      "core/config_fields/test_tier_registry.py",
      "core/config_fields/test_config_merger.py",
      "core/config_fields/test_type_aware_deserialization.py",
      "core/config_fields/test_config_class_store.py",
      "core/config_fields/test_integration.py",
      "core/config_fields/test_load_configs_correctness.py",
      "core/config_fields/test_constants.py",
      "core/compiler/test_validation.py",
      "core/compiler/test_config_resolver.py",
      "core/compiler/test_exceptions.py",
      "core/compiler/test_name_generator.py",
      "core/compiler/test_dynamic_template.py",
      "core/compiler/test_dag_compiler.py",
      "core/compiler/test_enhanced_config_resolver.py",
      "core/base/test_hyperparameters_base.py",
      "core/base/test_contract_base.py",
      "core/base/test_config_base.py",
      "core/base/test_all_base.py",
      "core/base/test_enums.py",
      "core/base/test_builder_base.py",
      "core/base/test_specification_base.py",
      "core/base/test_get_script_contract_simple.py"
    ],
    "total_source_functions": 991,
    "tested_functions": 679,
    "untested_functions": 312,
    "coverage_percentage": 68.51664984863774,
    "total_source_lines": 12092,
    "total_test_lines": 19317,
    "test_to_source_ratio": 2.2411705348133197,
    "source_functions_by_file": {
      "core/assembler/pipeline_template_base.py": [
        "PipelineTemplateBase.__init__",
        "__init__",
        "PipelineTemplateBase._load_configs",
        "_load_configs",
        "PipelineTemplateBase._get_base_config",
        "_get_base_config",
        "PipelineTemplateBase._initialize_components",
        "_initialize_components",
        "PipelineTemplateBase._validate_configuration",
        "_validate_configuration",
        "PipelineTemplateBase._create_pipeline_dag",
        "_create_pipeline_dag",
        "PipelineTemplateBase._create_config_map",
        "_create_config_map",
        "PipelineTemplateBase._create_step_builder_map",
        "_create_step_builder_map",
        "PipelineTemplateBase.set_pipeline_parameters",
        "set_pipeline_parameters",
        "PipelineTemplateBase._get_pipeline_parameters",
        "_get_pipeline_parameters",
        "PipelineTemplateBase.generate_pipeline",
        "generate_pipeline",
        "PipelineTemplateBase._get_pipeline_name",
        "_get_pipeline_name",
        "PipelineTemplateBase._store_pipeline_metadata",
        "_store_pipeline_metadata",
        "PipelineTemplateBase.create_with_components",
        "create_with_components",
        "PipelineTemplateBase.build_with_context",
        "build_with_context",
        "PipelineTemplateBase.build_in_thread",
        "build_in_thread",
        "__init__",
        "_load_configs",
        "_get_base_config",
        "_initialize_components",
        "_validate_configuration",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "set_pipeline_parameters",
        "_get_pipeline_parameters",
        "generate_pipeline",
        "_get_pipeline_name",
        "_store_pipeline_metadata",
        "create_with_components",
        "build_with_context",
        "build_in_thread"
      ],
      "core/assembler/pipeline_assembler.py": [
        "safe_value_for_logging",
        "PipelineAssembler.__init__",
        "__init__",
        "PipelineAssembler._initialize_step_builders",
        "_initialize_step_builders",
        "PipelineAssembler._propagate_messages",
        "_propagate_messages",
        "PipelineAssembler._generate_outputs",
        "_generate_outputs",
        "PipelineAssembler._instantiate_step",
        "_instantiate_step",
        "PipelineAssembler.create_with_components",
        "create_with_components",
        "PipelineAssembler._get_registry_manager",
        "_get_registry_manager",
        "PipelineAssembler._get_dependency_resolver",
        "_get_dependency_resolver",
        "PipelineAssembler.generate_pipeline",
        "generate_pipeline",
        "__init__",
        "_initialize_step_builders",
        "_propagate_messages",
        "_generate_outputs",
        "_instantiate_step",
        "create_with_components",
        "_get_registry_manager",
        "_get_dependency_resolver",
        "generate_pipeline"
      ],
      "core/utils/hybrid_path_resolution.py": [
        "HybridResolutionMetrics.__init__",
        "__init__",
        "HybridResolutionMetrics.record_strategy_1_success",
        "record_strategy_1_success",
        "HybridResolutionMetrics.record_strategy_2_success",
        "record_strategy_2_success",
        "HybridResolutionMetrics.record_failure",
        "record_failure",
        "HybridResolutionMetrics.get_metrics",
        "get_metrics",
        "HybridResolutionConfig.is_hybrid_resolution_enabled",
        "is_hybrid_resolution_enabled",
        "HybridResolutionConfig.get_hybrid_resolution_mode",
        "get_hybrid_resolution_mode",
        "get_hybrid_resolution_metrics",
        "HybridPathResolver.__init__",
        "__init__",
        "HybridPathResolver.resolve_path",
        "resolve_path",
        "HybridPathResolver._package_location_discovery",
        "_package_location_discovery",
        "HybridPathResolver._working_directory_discovery",
        "_working_directory_discovery",
        "resolve_hybrid_path",
        "__init__",
        "record_strategy_1_success",
        "record_strategy_2_success",
        "record_failure",
        "get_metrics",
        "is_hybrid_resolution_enabled",
        "get_hybrid_resolution_mode",
        "__init__",
        "resolve_path",
        "_package_location_discovery",
        "_working_directory_discovery"
      ],
      "core/deps/specification_registry.py": [
        "SpecificationRegistry.__init__",
        "__init__",
        "SpecificationRegistry.register",
        "register",
        "SpecificationRegistry.get_specification",
        "get_specification",
        "SpecificationRegistry.get_specifications_by_type",
        "get_specifications_by_type",
        "SpecificationRegistry.list_step_names",
        "list_step_names",
        "SpecificationRegistry.list_step_types",
        "list_step_types",
        "SpecificationRegistry.find_compatible_outputs",
        "find_compatible_outputs",
        "SpecificationRegistry._are_compatible",
        "_are_compatible",
        "SpecificationRegistry._calculate_compatibility_score",
        "_calculate_compatibility_score",
        "SpecificationRegistry.__repr__",
        "__repr__",
        "__init__",
        "register",
        "get_specification",
        "get_specifications_by_type",
        "list_step_names",
        "list_step_types",
        "find_compatible_outputs",
        "_are_compatible",
        "_calculate_compatibility_score",
        "__repr__"
      ],
      "core/deps/registry_manager.py": [
        "RegistryManager.__init__",
        "__init__",
        "RegistryManager._get_hybrid_manager",
        "_get_hybrid_manager",
        "RegistryManager._get_workspace_aware_context_name",
        "_get_workspace_aware_context_name",
        "RegistryManager.get_registry",
        "get_registry",
        "RegistryManager.list_contexts",
        "list_contexts",
        "RegistryManager.clear_context",
        "clear_context",
        "RegistryManager.clear_all_contexts",
        "clear_all_contexts",
        "RegistryManager.get_context_stats",
        "get_context_stats",
        "RegistryManager.__repr__",
        "__repr__",
        "get_registry",
        "list_contexts",
        "clear_context",
        "get_context_stats",
        "get_pipeline_registry",
        "get_default_registry",
        "integrate_with_pipeline_builder",
        "__init__",
        "_get_hybrid_manager",
        "_get_workspace_aware_context_name",
        "get_registry",
        "list_contexts",
        "clear_context",
        "clear_all_contexts",
        "get_context_stats",
        "__repr__",
        "new_init"
      ],
      "core/deps/factory.py": [
        "create_pipeline_components",
        "get_thread_components",
        "dependency_resolution_context"
      ],
      "core/deps/dependency_resolver.py": [
        "UnifiedDependencyResolver.__init__",
        "__init__",
        "UnifiedDependencyResolver.register_specification",
        "register_specification",
        "UnifiedDependencyResolver.resolve_all_dependencies",
        "resolve_all_dependencies",
        "UnifiedDependencyResolver.resolve_step_dependencies",
        "resolve_step_dependencies",
        "UnifiedDependencyResolver.resolve_with_scoring",
        "resolve_with_scoring",
        "UnifiedDependencyResolver._get_all_candidates_with_scores",
        "_get_all_candidates_with_scores",
        "UnifiedDependencyResolver._get_score_breakdown",
        "_get_score_breakdown",
        "UnifiedDependencyResolver._generate_resolution_details",
        "_generate_resolution_details",
        "UnifiedDependencyResolver._resolve_single_dependency",
        "_resolve_single_dependency",
        "UnifiedDependencyResolver._calculate_compatibility",
        "_calculate_compatibility",
        "UnifiedDependencyResolver._are_types_compatible",
        "_are_types_compatible",
        "UnifiedDependencyResolver._are_data_types_compatible",
        "_are_data_types_compatible",
        "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
        "_normalize_step_type_for_compatibility",
        "UnifiedDependencyResolver._calculate_keyword_match",
        "_calculate_keyword_match",
        "UnifiedDependencyResolver.get_resolution_report",
        "get_resolution_report",
        "UnifiedDependencyResolver.clear_cache",
        "clear_cache",
        "create_dependency_resolver",
        "__init__",
        "register_specification",
        "resolve_all_dependencies",
        "resolve_step_dependencies",
        "resolve_with_scoring",
        "_get_all_candidates_with_scores",
        "_get_score_breakdown",
        "_generate_resolution_details",
        "_resolve_single_dependency",
        "_calculate_compatibility",
        "_are_types_compatible",
        "_are_data_types_compatible",
        "_normalize_step_type_for_compatibility",
        "_calculate_keyword_match",
        "get_resolution_report",
        "clear_cache"
      ],
      "core/deps/property_reference.py": [
        "PropertyReference.validate_step_name",
        "validate_step_name",
        "PropertyReference.to_sagemaker_property",
        "to_sagemaker_property",
        "PropertyReference.to_runtime_property",
        "to_runtime_property",
        "PropertyReference._get_property_value",
        "_get_property_value",
        "PropertyReference._parse_property_path",
        "_parse_property_path",
        "PropertyReference.__str__",
        "__str__",
        "PropertyReference.__repr__",
        "__repr__",
        "validate_step_name",
        "to_sagemaker_property",
        "to_runtime_property",
        "_get_property_value",
        "_parse_property_path",
        "__str__",
        "__repr__"
      ],
      "core/deps/semantic_matcher.py": [
        "SemanticMatcher.__init__",
        "__init__",
        "SemanticMatcher.calculate_similarity",
        "calculate_similarity",
        "SemanticMatcher.calculate_similarity_with_aliases",
        "calculate_similarity_with_aliases",
        "SemanticMatcher._normalize_name",
        "_normalize_name",
        "SemanticMatcher._calculate_string_similarity",
        "_calculate_string_similarity",
        "SemanticMatcher._calculate_token_similarity",
        "_calculate_token_similarity",
        "SemanticMatcher._calculate_semantic_similarity",
        "_calculate_semantic_similarity",
        "SemanticMatcher._calculate_substring_similarity",
        "_calculate_substring_similarity",
        "SemanticMatcher._are_synonyms",
        "_are_synonyms",
        "SemanticMatcher.find_best_matches",
        "find_best_matches",
        "SemanticMatcher.explain_similarity",
        "explain_similarity",
        "__init__",
        "calculate_similarity",
        "calculate_similarity_with_aliases",
        "_normalize_name",
        "_calculate_string_similarity",
        "_calculate_token_similarity",
        "_calculate_semantic_similarity",
        "_calculate_substring_similarity",
        "_are_synonyms",
        "find_best_matches",
        "explain_similarity"
      ],
      "core/config_fields/tier_registry.py": [
        "ConfigFieldTierRegistryAdapter.get_tier",
        "get_tier",
        "ConfigFieldTierRegistryAdapter.register_field",
        "register_field",
        "ConfigFieldTierRegistryAdapter.register_fields",
        "register_fields",
        "ConfigFieldTierRegistryAdapter.get_fields_by_tier",
        "get_fields_by_tier",
        "ConfigFieldTierRegistryAdapter.reset_to_defaults",
        "reset_to_defaults",
        "get_tier",
        "register_field",
        "register_fields",
        "get_fields_by_tier",
        "reset_to_defaults"
      ],
      "core/config_fields/step_catalog_aware_categorizer.py": [
        "StepCatalogAwareConfigFieldCategorizer.__init__",
        "__init__",
        "StepCatalogAwareConfigFieldCategorizer._initialize_enhanced_mappings",
        "_initialize_enhanced_mappings",
        "StepCatalogAwareConfigFieldCategorizer._get_workspace_field_mappings",
        "_get_workspace_field_mappings",
        "StepCatalogAwareConfigFieldCategorizer._get_framework_field_mappings",
        "_get_framework_field_mappings",
        "StepCatalogAwareConfigFieldCategorizer._categorize_field_with_step_catalog_context",
        "_categorize_field_with_step_catalog_context",
        "StepCatalogAwareConfigFieldCategorizer._categorize_field",
        "_categorize_field",
        "StepCatalogAwareConfigFieldCategorizer.get_enhanced_categorization_info",
        "get_enhanced_categorization_info",
        "StepCatalogAwareConfigFieldCategorizer.categorize_with_enhanced_metadata",
        "categorize_with_enhanced_metadata",
        "create_step_catalog_aware_categorizer",
        "__init__",
        "_initialize_enhanced_mappings",
        "_get_workspace_field_mappings",
        "_get_framework_field_mappings",
        "_categorize_field_with_step_catalog_context",
        "_categorize_field",
        "get_enhanced_categorization_info",
        "categorize_with_enhanced_metadata"
      ],
      "core/config_fields/config_merger.py": [
        "ConfigMerger.__init__",
        "__init__",
        "ConfigMerger.merge",
        "merge",
        "ConfigMerger._verify_merged_output",
        "_verify_merged_output",
        "ConfigMerger._generate_step_name",
        "_generate_step_name",
        "ConfigMerger._check_mutual_exclusivity",
        "_check_mutual_exclusivity",
        "ConfigMerger._check_special_fields_placement",
        "_check_special_fields_placement",
        "ConfigMerger._check_required_fields",
        "_check_required_fields",
        "ConfigMerger.save",
        "save",
        "ConfigMerger.load",
        "load",
        "ConfigMerger.merge_with_direction",
        "merge_with_direction",
        "merge_and_save_configs",
        "load_configs",
        "__init__",
        "merge",
        "_verify_merged_output",
        "_generate_step_name",
        "_check_mutual_exclusivity",
        "_check_special_fields_placement",
        "_check_required_fields",
        "save",
        "load",
        "merge_with_direction"
      ],
      "core/config_fields/constants.py": [],
      "core/config_fields/type_aware_config_serializer.py": [
        "TypeAwareConfigSerializer.__init__",
        "__init__",
        "TypeAwareConfigSerializer.serialize",
        "serialize",
        "TypeAwareConfigSerializer.deserialize",
        "deserialize",
        "TypeAwareConfigSerializer._deserialize_model",
        "_deserialize_model",
        "TypeAwareConfigSerializer._get_class_by_name",
        "_get_class_by_name",
        "TypeAwareConfigSerializer.generate_step_name",
        "generate_step_name",
        "TypeAwareConfigSerializer._generate_step_name_fallback",
        "_generate_step_name_fallback",
        "serialize_config",
        "deserialize_config",
        "__init__",
        "serialize",
        "deserialize",
        "_deserialize_model",
        "_get_class_by_name",
        "generate_step_name",
        "_generate_step_name_fallback",
        "build_complete_config_classes"
      ],
      "core/config_fields/cradle_config_factory.py": [
        "_map_region_to_aws_region",
        "_create_field_schema",
        "_format_edx_manifest_key",
        "_create_edx_manifest",
        "_create_edx_manifest_from_key",
        "_generate_transform_sql",
        "_get_all_fields",
        "create_cradle_data_load_config",
        "create_training_and_calibration_configs"
      ],
      "core/config_fields/unified_config_manager.py": [
        "SimpleTierAwareTracker.__init__",
        "__init__",
        "SimpleTierAwareTracker.enter_object",
        "enter_object",
        "SimpleTierAwareTracker.exit_object",
        "exit_object",
        "SimpleTierAwareTracker.reset",
        "reset",
        "UnifiedConfigManager.__init__",
        "__init__",
        "UnifiedConfigManager.step_catalog",
        "step_catalog",
        "UnifiedConfigManager.get_config_classes",
        "get_config_classes",
        "UnifiedConfigManager.get_field_tiers",
        "get_field_tiers",
        "UnifiedConfigManager.serialize_with_tier_awareness",
        "serialize_with_tier_awareness",
        "UnifiedConfigManager._serialize_recursive",
        "_serialize_recursive",
        "UnifiedConfigManager._get_basic_config_classes",
        "_get_basic_config_classes",
        "UnifiedConfigManager._basic_field_categorization",
        "_basic_field_categorization",
        "get_unified_config_manager",
        "__init__",
        "enter_object",
        "exit_object",
        "reset",
        "__init__",
        "step_catalog",
        "get_config_classes",
        "get_field_tiers",
        "serialize_with_tier_awareness",
        "_serialize_recursive",
        "_get_basic_config_classes",
        "_basic_field_categorization"
      ],
      "core/config_fields/performance_optimizer.py": [
        "ConfigClassDiscoveryCache.__init__",
        "__init__",
        "ConfigClassDiscoveryCache.get",
        "get",
        "ConfigClassDiscoveryCache.set",
        "set",
        "ConfigClassDiscoveryCache.invalidate",
        "invalidate",
        "ConfigClassDiscoveryCache.get_stats",
        "get_stats",
        "PerformanceOptimizer.__init__",
        "__init__",
        "PerformanceOptimizer.cached_config_discovery",
        "cached_config_discovery",
        "PerformanceOptimizer.optimized_config_loading",
        "optimized_config_loading",
        "PerformanceOptimizer.optimized_serialization",
        "optimized_serialization",
        "PerformanceOptimizer.get_performance_stats",
        "get_performance_stats",
        "PerformanceOptimizer.clear_performance_stats",
        "clear_performance_stats",
        "PerformanceOptimizer.invalidate_cache",
        "invalidate_cache",
        "get_performance_optimizer",
        "performance_monitor",
        "cached_file_stat",
        "optimize_logging_for_production",
        "MemoryOptimizer.get_memory_usage",
        "get_memory_usage",
        "MemoryOptimizer.optimize_garbage_collection",
        "optimize_garbage_collection",
        "__init__",
        "get",
        "set",
        "invalidate",
        "get_stats",
        "__init__",
        "cached_config_discovery",
        "optimized_config_loading",
        "optimized_serialization",
        "get_performance_stats",
        "clear_performance_stats",
        "invalidate_cache",
        "decorator",
        "get_memory_usage",
        "optimize_garbage_collection",
        "wrapper"
      ],
      "core/config_fields/config_field_categorizer.py": [
        "ConfigFieldCategorizer.__init__",
        "__init__",
        "ConfigFieldCategorizer._collect_field_info",
        "_collect_field_info",
        "ConfigFieldCategorizer._is_special_field",
        "_is_special_field",
        "ConfigFieldCategorizer._is_likely_static",
        "_is_likely_static",
        "ConfigFieldCategorizer._categorize_fields",
        "_categorize_fields",
        "ConfigFieldCategorizer._categorize_field",
        "_categorize_field",
        "ConfigFieldCategorizer._place_field",
        "_place_field",
        "ConfigFieldCategorizer.get_category_for_field",
        "get_category_for_field",
        "ConfigFieldCategorizer.get_categorized_fields",
        "get_categorized_fields",
        "ConfigFieldCategorizer.get_field_sources",
        "get_field_sources",
        "ConfigFieldCategorizer.print_categorization_stats",
        "print_categorization_stats",
        "__init__",
        "_collect_field_info",
        "_is_special_field",
        "_is_likely_static",
        "_categorize_fields",
        "_categorize_field",
        "_place_field",
        "get_category_for_field",
        "get_categorized_fields",
        "get_field_sources",
        "print_categorization_stats"
      ],
      "core/config_fields/circular_reference_tracker.py": [
        "SimplifiedCircularReferenceTracker.__init__",
        "__init__",
        "SimplifiedCircularReferenceTracker.enter_object",
        "enter_object",
        "SimplifiedCircularReferenceTracker.exit_object",
        "exit_object",
        "SimplifiedCircularReferenceTracker.get_current_path_str",
        "get_current_path_str",
        "SimplifiedCircularReferenceTracker.reset",
        "reset",
        "SimplifiedCircularReferenceTracker._get_module_from_step_catalog",
        "_get_module_from_step_catalog",
        "SimplifiedCircularReferenceTracker._format_simple_cycle_error",
        "_format_simple_cycle_error",
        "__init__",
        "enter_object",
        "exit_object",
        "get_current_path_str",
        "reset",
        "_get_module_from_step_catalog",
        "_format_simple_cycle_error"
      ],
      "core/compiler/name_generator.py": [
        "generate_random_word",
        "validate_pipeline_name",
        "sanitize_pipeline_name",
        "generate_pipeline_name"
      ],
      "core/compiler/dag_compiler.py": [
        "compile_dag_to_pipeline",
        "PipelineDAGCompiler.__init__",
        "__init__",
        "PipelineDAGCompiler.validate_dag_compatibility",
        "validate_dag_compatibility",
        "PipelineDAGCompiler.preview_resolution",
        "preview_resolution",
        "PipelineDAGCompiler.compile",
        "compile",
        "PipelineDAGCompiler.compile_with_report",
        "compile_with_report",
        "PipelineDAGCompiler.create_template",
        "create_template",
        "PipelineDAGCompiler.get_supported_step_types",
        "get_supported_step_types",
        "PipelineDAGCompiler.validate_config_file",
        "validate_config_file",
        "PipelineDAGCompiler.get_last_template",
        "get_last_template",
        "__init__",
        "validate_dag_compatibility",
        "preview_resolution",
        "compile",
        "compile_with_report",
        "create_template",
        "get_supported_step_types",
        "validate_config_file",
        "get_last_template"
      ],
      "core/compiler/dynamic_template.py": [
        "DynamicPipelineTemplate.__init__",
        "__init__",
        "DynamicPipelineTemplate._detect_config_classes",
        "_detect_config_classes",
        "DynamicPipelineTemplate._create_pipeline_dag",
        "_create_pipeline_dag",
        "DynamicPipelineTemplate._create_config_map",
        "_create_config_map",
        "DynamicPipelineTemplate._create_step_builder_map",
        "_create_step_builder_map",
        "DynamicPipelineTemplate._validate_configuration",
        "_validate_configuration",
        "DynamicPipelineTemplate.get_resolution_preview",
        "get_resolution_preview",
        "DynamicPipelineTemplate._store_pipeline_metadata",
        "_store_pipeline_metadata",
        "DynamicPipelineTemplate.get_step_catalog_stats",
        "get_step_catalog_stats",
        "DynamicPipelineTemplate.validate_before_build",
        "validate_before_build",
        "DynamicPipelineTemplate.get_step_dependencies",
        "get_step_dependencies",
        "DynamicPipelineTemplate.get_execution_order",
        "get_execution_order",
        "__init__",
        "_detect_config_classes",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "_validate_configuration",
        "get_resolution_preview",
        "_store_pipeline_metadata",
        "get_step_catalog_stats",
        "validate_before_build",
        "get_step_dependencies",
        "get_execution_order"
      ],
      "core/compiler/exceptions.py": [
        "ConfigurationError.__init__",
        "__init__",
        "ConfigurationError.__str__",
        "__str__",
        "AmbiguityError.__init__",
        "__init__",
        "AmbiguityError.__str__",
        "__str__",
        "ValidationError.__init__",
        "__init__",
        "ValidationError.__str__",
        "__str__",
        "ResolutionError.__init__",
        "__init__",
        "ResolutionError.__str__",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__str__"
      ],
      "core/compiler/validation.py": [
        "ValidationResult.summary",
        "summary",
        "ValidationResult.detailed_report",
        "detailed_report",
        "ResolutionPreview.display",
        "display",
        "ConversionReport.summary",
        "summary",
        "ConversionReport.detailed_report",
        "detailed_report",
        "ValidationEngine.__init__",
        "__init__",
        "ValidationEngine.validate_dag_compatibility",
        "validate_dag_compatibility",
        "summary",
        "detailed_report",
        "display",
        "summary",
        "detailed_report",
        "__init__",
        "validate_dag_compatibility"
      ],
      "core/base/enums.py": [
        "DependencyType.__eq__",
        "__eq__",
        "DependencyType.__hash__",
        "__hash__",
        "NodeType.__eq__",
        "__eq__",
        "NodeType.__hash__",
        "__hash__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__"
      ],
      "core/base/contract_base.py": [
        "ValidationResult.success",
        "success",
        "ValidationResult.error",
        "error",
        "ValidationResult.combine",
        "combine",
        "ValidationResult.add_error",
        "add_error",
        "ValidationResult.add_warning",
        "add_warning",
        "AlignmentResult.success",
        "success",
        "AlignmentResult.error",
        "error",
        "ScriptContract.validate_entry_point",
        "validate_entry_point",
        "ScriptContract.validate_input_paths",
        "validate_input_paths",
        "ScriptContract.validate_output_paths",
        "validate_output_paths",
        "ScriptContract.validate_arguments",
        "validate_arguments",
        "ScriptContract.validate_implementation",
        "validate_implementation",
        "ScriptContract._validate_against_analysis",
        "_validate_against_analysis",
        "ScriptAnalyzer.__init__",
        "__init__",
        "ScriptAnalyzer.ast_tree",
        "ast_tree",
        "ScriptAnalyzer.get_input_paths",
        "get_input_paths",
        "ScriptAnalyzer.get_output_paths",
        "get_output_paths",
        "ScriptAnalyzer.get_env_var_usage",
        "get_env_var_usage",
        "ScriptAnalyzer.get_argument_usage",
        "get_argument_usage",
        "success",
        "error",
        "combine",
        "add_error",
        "add_warning",
        "success",
        "error",
        "validate_entry_point",
        "validate_input_paths",
        "validate_output_paths",
        "validate_arguments",
        "validate_implementation",
        "_validate_against_analysis",
        "__init__",
        "ast_tree",
        "get_input_paths",
        "get_output_paths",
        "get_env_var_usage",
        "get_argument_usage"
      ],
      "core/base/specification_base.py": [
        "DependencySpec.validate_logical_name",
        "validate_logical_name",
        "DependencySpec.validate_dependency_type",
        "validate_dependency_type",
        "DependencySpec.validate_compatible_sources",
        "validate_compatible_sources",
        "DependencySpec.validate_semantic_keywords",
        "validate_semantic_keywords",
        "DependencySpec.matches_name_or_alias",
        "matches_name_or_alias",
        "OutputSpec.validate_logical_name",
        "validate_logical_name",
        "OutputSpec.validate_output_type",
        "validate_output_type",
        "OutputSpec.validate_aliases",
        "validate_aliases",
        "OutputSpec.validate_property_path",
        "validate_property_path",
        "OutputSpec.validate_aliases_no_conflict",
        "validate_aliases_no_conflict",
        "OutputSpec.matches_name_or_alias",
        "matches_name_or_alias",
        "StepSpecification.__init__",
        "__init__",
        "StepSpecification.validate_step_type",
        "validate_step_type",
        "StepSpecification.validate_node_type",
        "validate_node_type",
        "StepSpecification.validate_node_type_constraints",
        "validate_node_type_constraints",
        "StepSpecification._validate_output_aliases",
        "_validate_output_aliases",
        "StepSpecification.get_dependency",
        "get_dependency",
        "StepSpecification.get_output",
        "get_output",
        "StepSpecification.get_output_by_name_or_alias",
        "get_output_by_name_or_alias",
        "StepSpecification.list_all_output_names",
        "list_all_output_names",
        "StepSpecification.list_required_dependencies",
        "list_required_dependencies",
        "StepSpecification.list_optional_dependencies",
        "list_optional_dependencies",
        "StepSpecification.list_dependencies_by_type",
        "list_dependencies_by_type",
        "StepSpecification.list_outputs_by_type",
        "list_outputs_by_type",
        "StepSpecification.validate_specification",
        "validate_specification",
        "StepSpecification.validate_contract_alignment",
        "validate_contract_alignment",
        "StepSpecification.validate_script_compliance",
        "validate_script_compliance",
        "StepSpecification.__repr__",
        "__repr__",
        "StepSpecification.model_validate",
        "model_validate",
        "validate_logical_name",
        "validate_dependency_type",
        "validate_compatible_sources",
        "validate_semantic_keywords",
        "matches_name_or_alias",
        "validate_logical_name",
        "validate_output_type",
        "validate_aliases",
        "validate_property_path",
        "validate_aliases_no_conflict",
        "matches_name_or_alias",
        "__init__",
        "validate_step_type",
        "validate_node_type",
        "validate_node_type_constraints",
        "_validate_output_aliases",
        "get_dependency",
        "get_output",
        "get_output_by_name_or_alias",
        "list_all_output_names",
        "list_required_dependencies",
        "list_optional_dependencies",
        "list_dependencies_by_type",
        "list_outputs_by_type",
        "validate_specification",
        "validate_contract_alignment",
        "validate_script_compliance",
        "__repr__",
        "model_validate"
      ],
      "core/base/config_base.py": [
        "BasePipelineConfig.aws_region",
        "aws_region",
        "BasePipelineConfig.pipeline_name",
        "pipeline_name",
        "BasePipelineConfig.pipeline_description",
        "pipeline_description",
        "BasePipelineConfig.pipeline_s3_loc",
        "pipeline_s3_loc",
        "BasePipelineConfig.effective_source_dir",
        "effective_source_dir",
        "BasePipelineConfig.model_dump",
        "model_dump",
        "BasePipelineConfig.__str__",
        "__str__",
        "BasePipelineConfig._validate_custom_region",
        "_validate_custom_region",
        "BasePipelineConfig.initialize_derived_fields",
        "initialize_derived_fields",
        "BasePipelineConfig.step_catalog",
        "step_catalog",
        "BasePipelineConfig._detect_workspace_dirs",
        "_detect_workspace_dirs",
        "BasePipelineConfig._derive_step_name",
        "_derive_step_name",
        "BasePipelineConfig.get_script_contract",
        "get_script_contract",
        "BasePipelineConfig.script_contract",
        "script_contract",
        "BasePipelineConfig.get_script_path",
        "get_script_path",
        "BasePipelineConfig.resolve_hybrid_path",
        "resolve_hybrid_path",
        "BasePipelineConfig.resolved_source_dir",
        "resolved_source_dir",
        "BasePipelineConfig.get_step_name",
        "get_step_name",
        "BasePipelineConfig.get_config_class_name",
        "get_config_class_name",
        "BasePipelineConfig._get_step_registry",
        "_get_step_registry",
        "BasePipelineConfig.from_base_config",
        "from_base_config",
        "BasePipelineConfig.categorize_fields",
        "categorize_fields",
        "BasePipelineConfig.print_config",
        "print_config",
        "BasePipelineConfig.get_public_init_fields",
        "get_public_init_fields",
        "aws_region",
        "pipeline_name",
        "pipeline_description",
        "pipeline_s3_loc",
        "effective_source_dir",
        "model_dump",
        "__str__",
        "_validate_custom_region",
        "initialize_derived_fields",
        "step_catalog",
        "_detect_workspace_dirs",
        "_derive_step_name",
        "get_script_contract",
        "script_contract",
        "get_script_path",
        "resolve_hybrid_path",
        "resolved_source_dir",
        "get_step_name",
        "get_config_class_name",
        "_get_step_registry",
        "from_base_config",
        "categorize_fields",
        "print_config",
        "get_public_init_fields"
      ],
      "core/base/builder_base.py": [
        "safe_value_for_logging",
        "StepBuilderBase.STEP_NAMES",
        "STEP_NAMES",
        "StepBuilderBase._get_workspace_context",
        "_get_workspace_context",
        "StepBuilderBase.__init__",
        "__init__",
        "StepBuilderBase._sanitize_name_for_sagemaker",
        "_sanitize_name_for_sagemaker",
        "StepBuilderBase._get_step_name",
        "_get_step_name",
        "StepBuilderBase._generate_job_name",
        "_generate_job_name",
        "StepBuilderBase.get_property_path",
        "get_property_path",
        "StepBuilderBase.get_all_property_paths",
        "get_all_property_paths",
        "StepBuilderBase.log_info",
        "log_info",
        "StepBuilderBase.log_debug",
        "log_debug",
        "StepBuilderBase.log_warning",
        "log_warning",
        "StepBuilderBase.log_error",
        "log_error",
        "StepBuilderBase._get_cache_config",
        "_get_cache_config",
        "StepBuilderBase._get_environment_variables",
        "_get_environment_variables",
        "StepBuilderBase._get_job_arguments",
        "_get_job_arguments",
        "StepBuilderBase.set_execution_prefix",
        "set_execution_prefix",
        "StepBuilderBase._get_base_output_path",
        "_get_base_output_path",
        "StepBuilderBase.validate_configuration",
        "validate_configuration",
        "StepBuilderBase.get_required_dependencies",
        "get_required_dependencies",
        "StepBuilderBase.get_optional_dependencies",
        "get_optional_dependencies",
        "StepBuilderBase.get_outputs",
        "get_outputs",
        "StepBuilderBase._get_inputs",
        "_get_inputs",
        "StepBuilderBase._get_outputs",
        "_get_outputs",
        "StepBuilderBase._get_context_name",
        "_get_context_name",
        "StepBuilderBase._get_registry_manager",
        "_get_registry_manager",
        "StepBuilderBase._get_registry",
        "_get_registry",
        "StepBuilderBase._get_dependency_resolver",
        "_get_dependency_resolver",
        "StepBuilderBase.extract_inputs_from_dependencies",
        "extract_inputs_from_dependencies",
        "StepBuilderBase._enhance_dependency_steps_with_specs",
        "_enhance_dependency_steps_with_specs",
        "StepBuilderBase.create_step",
        "create_step",
        "STEP_NAMES",
        "_get_workspace_context",
        "__init__",
        "_sanitize_name_for_sagemaker",
        "_get_step_name",
        "_generate_job_name",
        "get_property_path",
        "get_all_property_paths",
        "log_info",
        "log_debug",
        "log_warning",
        "log_error",
        "_get_cache_config",
        "_get_environment_variables",
        "_get_job_arguments",
        "set_execution_prefix",
        "_get_base_output_path",
        "validate_configuration",
        "get_required_dependencies",
        "get_optional_dependencies",
        "get_outputs",
        "_get_inputs",
        "_get_outputs",
        "_get_context_name",
        "_get_registry_manager",
        "_get_registry",
        "_get_dependency_resolver",
        "extract_inputs_from_dependencies",
        "_enhance_dependency_steps_with_specs",
        "create_step"
      ],
      "core/base/hyperparameters_base.py": [
        "ModelHyperparameters.input_tab_dim",
        "input_tab_dim",
        "ModelHyperparameters.num_classes",
        "num_classes",
        "ModelHyperparameters.is_binary",
        "is_binary",
        "ModelHyperparameters.validate_dimensions",
        "validate_dimensions",
        "ModelHyperparameters.categorize_fields",
        "categorize_fields",
        "ModelHyperparameters.__str__",
        "__str__",
        "ModelHyperparameters.print_hyperparam",
        "print_hyperparam",
        "ModelHyperparameters.get_public_init_fields",
        "get_public_init_fields",
        "ModelHyperparameters.from_base_hyperparam",
        "from_base_hyperparam",
        "ModelHyperparameters.get_config",
        "get_config",
        "ModelHyperparameters.serialize_config",
        "serialize_config",
        "input_tab_dim",
        "num_classes",
        "is_binary",
        "validate_dimensions",
        "categorize_fields",
        "__str__",
        "print_hyperparam",
        "get_public_init_fields",
        "from_base_hyperparam",
        "get_config",
        "serialize_config"
      ]
    },
    "test_functions_by_file": {
      "core/assembler/test_pipeline_template_base.py": [
        "MockConfig.__init__",
        "__init__",
        "ConcretePipelineTemplate._validate_configuration",
        "_validate_configuration",
        "ConcretePipelineTemplate._create_pipeline_dag",
        "_create_pipeline_dag",
        "ConcretePipelineTemplate._create_config_map",
        "_create_config_map",
        "ConcretePipelineTemplate._create_step_builder_map",
        "_create_step_builder_map",
        "TestPipelineTemplateBase.temp_config_file",
        "temp_config_file",
        "TestPipelineTemplateBase.mock_session",
        "mock_session",
        "TestPipelineTemplateBase.mock_registry_manager",
        "mock_registry_manager",
        "TestPipelineTemplateBase.mock_dependency_resolver",
        "mock_dependency_resolver",
        "TestPipelineTemplateBase.pipeline_parameters",
        "pipeline_parameters",
        "TestPipelineTemplateBase.test_init_successful_initialization",
        "test_init_successful_initialization",
        "TestPipelineTemplateBase.test_init_with_pipeline_parameters",
        "test_init_with_pipeline_parameters",
        "TestPipelineTemplateBase.test_init_loads_raw_config_data",
        "test_init_loads_raw_config_data",
        "TestPipelineTemplateBase.test_init_handles_config_loading_error",
        "test_init_handles_config_loading_error",
        "TestPipelineTemplateBase.test_load_configs_validates_config_classes",
        "test_load_configs_validates_config_classes",
        "TestPipelineTemplateBase.test_get_base_config_returns_base_config",
        "test_get_base_config_returns_base_config",
        "TestPipelineTemplateBase.test_get_base_config_raises_error_when_missing",
        "test_get_base_config_raises_error_when_missing",
        "TestPipelineTemplateBase.test_initialize_components_creates_components_when_missing",
        "test_initialize_components_creates_components_when_missing",
        "TestPipelineTemplateBase.test_set_pipeline_parameters_stores_parameters",
        "test_set_pipeline_parameters_stores_parameters",
        "TestPipelineTemplateBase.test_get_pipeline_parameters_returns_stored_parameters",
        "test_get_pipeline_parameters_returns_stored_parameters",
        "TestPipelineTemplateBase.test_get_pipeline_parameters_returns_empty_list_when_none_stored",
        "test_get_pipeline_parameters_returns_empty_list_when_none_stored",
        "TestPipelineTemplateBase.test_generate_pipeline_creates_assembler_and_pipeline",
        "test_generate_pipeline_creates_assembler_and_pipeline",
        "TestPipelineTemplateBase.test_get_pipeline_name_uses_rule_based_generator",
        "test_get_pipeline_name_uses_rule_based_generator",
        "TestPipelineTemplateBase.test_store_pipeline_metadata_stores_step_instances",
        "test_store_pipeline_metadata_stores_step_instances",
        "TestPipelineTemplateBase.test_create_with_components_factory_method",
        "test_create_with_components_factory_method",
        "TestPipelineTemplateBase.test_build_with_context_class_method",
        "test_build_with_context_class_method",
        "TestPipelineTemplateBase.test_build_in_thread_class_method",
        "test_build_in_thread_class_method",
        "TestPipelineTemplateBase.test_init_default_parameters_handling",
        "test_init_default_parameters_handling",
        "TestPipelineTemplateBase.test_validate_configuration_abstract_method_called",
        "test_validate_configuration_abstract_method_called",
        "TestPipelineTemplateBase.test_abstract_methods_integration",
        "test_abstract_methods_integration",
        "TestPipelineTemplateBase.test_error_handling_in_generate_pipeline",
        "test_error_handling_in_generate_pipeline",
        "TestPipelineTemplateBase.test_step_catalog_integration",
        "test_step_catalog_integration",
        "TestPipelineTemplateBase.test_step_catalog_provided_integration",
        "test_step_catalog_provided_integration",
        "TestPipelineTemplateBase.test_get_pipeline_name_fallback_behavior",
        "test_get_pipeline_name_fallback_behavior",
        "TestPipelineTemplateBase.test_store_pipeline_metadata_handles_missing_step_instances",
        "test_store_pipeline_metadata_handles_missing_step_instances",
        "TestPipelineTemplateBase.test_context_name_handling_in_initialize_components",
        "test_context_name_handling_in_initialize_components",
        "TestPipelineTemplateBase.test_config_loading_with_invalid_json",
        "test_config_loading_with_invalid_json",
        "TestPipelineTemplateBase.test_component_initialization_error_handling",
        "test_component_initialization_error_handling",
        "TestPipelineTemplateBase.test_pipeline_name_generation_error_handling",
        "test_pipeline_name_generation_error_handling",
        "TestPipelineTemplateBase.test_all_init_parameters_coverage",
        "test_all_init_parameters_coverage",
        "TestPipelineTemplateBase.test_generate_pipeline_complete_flow",
        "test_generate_pipeline_complete_flow",
        "__init__",
        "_validate_configuration",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "temp_config_file",
        "mock_session",
        "mock_registry_manager",
        "mock_dependency_resolver",
        "pipeline_parameters",
        "test_init_successful_initialization",
        "test_init_with_pipeline_parameters",
        "test_init_loads_raw_config_data",
        "test_init_handles_config_loading_error",
        "test_load_configs_validates_config_classes",
        "test_get_base_config_returns_base_config",
        "test_get_base_config_raises_error_when_missing",
        "test_initialize_components_creates_components_when_missing",
        "test_set_pipeline_parameters_stores_parameters",
        "test_get_pipeline_parameters_returns_stored_parameters",
        "test_get_pipeline_parameters_returns_empty_list_when_none_stored",
        "test_generate_pipeline_creates_assembler_and_pipeline",
        "test_get_pipeline_name_uses_rule_based_generator",
        "test_store_pipeline_metadata_stores_step_instances",
        "test_create_with_components_factory_method",
        "test_build_with_context_class_method",
        "test_build_in_thread_class_method",
        "test_init_default_parameters_handling",
        "test_validate_configuration_abstract_method_called",
        "test_abstract_methods_integration",
        "test_error_handling_in_generate_pipeline",
        "test_step_catalog_integration",
        "test_step_catalog_provided_integration",
        "test_get_pipeline_name_fallback_behavior",
        "test_store_pipeline_metadata_handles_missing_step_instances",
        "test_context_name_handling_in_initialize_components",
        "test_config_loading_with_invalid_json",
        "test_component_initialization_error_handling",
        "test_pipeline_name_generation_error_handling",
        "test_all_init_parameters_coverage",
        "test_generate_pipeline_complete_flow",
        "EmptyConfigTemplate._validate_configuration",
        "_validate_configuration",
        "EmptyConfigTemplate._create_pipeline_dag",
        "_create_pipeline_dag",
        "EmptyConfigTemplate._create_config_map",
        "_create_config_map",
        "EmptyConfigTemplate._create_step_builder_map",
        "_create_step_builder_map",
        "_validate_configuration",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map"
      ],
      "core/assembler/test_pipeline_assembler.py": [
        "TestSafeValueForLogging.test_safe_value_for_logging_pipeline_variable_with_expr",
        "test_safe_value_for_logging_pipeline_variable_with_expr",
        "TestSafeValueForLogging.test_safe_value_for_logging_dict_always_returns_ellipsis",
        "test_safe_value_for_logging_dict_always_returns_ellipsis",
        "TestSafeValueForLogging.test_safe_value_for_logging_list_with_length",
        "test_safe_value_for_logging_list_with_length",
        "TestSafeValueForLogging.test_safe_value_for_logging_tuple_with_length",
        "test_safe_value_for_logging_tuple_with_length",
        "TestSafeValueForLogging.test_safe_value_for_logging_set_with_length",
        "test_safe_value_for_logging_set_with_length",
        "TestSafeValueForLogging.test_safe_value_for_logging_simple_values_use_str",
        "test_safe_value_for_logging_simple_values_use_str",
        "TestSafeValueForLogging.test_safe_value_for_logging_exception_handling",
        "test_safe_value_for_logging_exception_handling",
        "TestSafeValueForLogging.test_safe_value_for_logging_custom_object_without_expr",
        "test_safe_value_for_logging_custom_object_without_expr",
        "TestSafeValueForLogging.test_safe_value_for_logging_priority_expr_over_collections",
        "test_safe_value_for_logging_priority_expr_over_collections",
        "TestSafeValueForLogging.test_safe_value_for_logging_edge_cases",
        "test_safe_value_for_logging_edge_cases",
        "MockConfig.__init__",
        "__init__",
        "MockStepBuilder.__init__",
        "__init__",
        "MockStepBuilder.validate_configuration",
        "validate_configuration",
        "MockStepBuilder._get_inputs",
        "_get_inputs",
        "MockStepBuilder._get_outputs",
        "_get_outputs",
        "MockStepBuilder.create_step",
        "create_step",
        "TestPipelineAssembler.simple_dag",
        "simple_dag",
        "TestPipelineAssembler.simple_config_map",
        "simple_config_map",
        "TestPipelineAssembler.mock_step_catalog",
        "mock_step_catalog",
        "TestPipelineAssembler.mock_registry_manager",
        "mock_registry_manager",
        "TestPipelineAssembler.mock_dependency_resolver",
        "mock_dependency_resolver",
        "TestPipelineAssembler.test_init_successful_initialization",
        "test_init_successful_initialization",
        "TestPipelineAssembler.test_init_missing_configs_raises_error",
        "test_init_missing_configs_raises_error",
        "TestPipelineAssembler.test_init_missing_step_builders_raises_error",
        "test_init_missing_step_builders_raises_error",
        "TestPipelineAssembler.test_initialize_step_builders_creates_builders",
        "test_initialize_step_builders_creates_builders",
        "TestPipelineAssembler.test_initialize_step_builders_with_pipeline_parameters",
        "test_initialize_step_builders_with_pipeline_parameters",
        "TestPipelineAssembler.test_propagate_messages_uses_dependency_resolver",
        "test_propagate_messages_uses_dependency_resolver",
        "TestPipelineAssembler.test_generate_outputs_creates_join_objects",
        "test_generate_outputs_creates_join_objects",
        "TestPipelineAssembler.test_instantiate_step_creates_step",
        "test_instantiate_step_creates_step",
        "TestPipelineAssembler.test_get_registry_manager_returns_manager",
        "test_get_registry_manager_returns_manager",
        "TestPipelineAssembler.test_get_dependency_resolver_returns_resolver",
        "test_get_dependency_resolver_returns_resolver",
        "TestPipelineAssembler.test_generate_pipeline_creates_pipeline",
        "test_generate_pipeline_creates_pipeline",
        "TestPipelineAssembler.test_generate_pipeline_with_cyclic_dag_raises_error",
        "test_generate_pipeline_with_cyclic_dag_raises_error",
        "TestPipelineAssembler.test_create_with_components_factory_method",
        "test_create_with_components_factory_method",
        "TestPipelineAssembler.test_pipeline_regeneration_clears_instances",
        "test_pipeline_regeneration_clears_instances",
        "TestPipelineAssembler.test_init_edge_validation_invalid_dag_edges",
        "test_init_edge_validation_invalid_dag_edges",
        "TestPipelineAssembler.test_init_default_parameters_handling",
        "test_init_default_parameters_handling",
        "TestPipelineAssembler.test_initialize_step_builders_error_handling",
        "test_initialize_step_builders_error_handling",
        "TestPipelineAssembler.test_generate_outputs_no_specification_returns_empty",
        "test_generate_outputs_no_specification_returns_empty",
        "TestPipelineAssembler.test_instantiate_step_with_dependencies",
        "test_instantiate_step_with_dependencies",
        "TestPipelineAssembler.test_instantiate_step_error_handling",
        "test_instantiate_step_error_handling",
        "TestPipelineAssembler.test_generate_pipeline_topological_sort_error",
        "test_generate_pipeline_topological_sort_error",
        "TestPipelineAssembler.test_generate_pipeline_step_instantiation_error",
        "test_generate_pipeline_step_instantiation_error",
        "TestPipelineAssembler.test_propagate_messages_with_no_specifications",
        "test_propagate_messages_with_no_specifications",
        "TestPipelineAssembler.test_propagate_messages_compatibility_scoring",
        "test_propagate_messages_compatibility_scoring",
        "TestPipelineAssembler.test_generate_outputs_uses_safe_value_for_logging",
        "test_generate_outputs_uses_safe_value_for_logging",
        "test_safe_value_for_logging_pipeline_variable_with_expr",
        "test_safe_value_for_logging_dict_always_returns_ellipsis",
        "test_safe_value_for_logging_list_with_length",
        "test_safe_value_for_logging_tuple_with_length",
        "test_safe_value_for_logging_set_with_length",
        "test_safe_value_for_logging_simple_values_use_str",
        "test_safe_value_for_logging_exception_handling",
        "test_safe_value_for_logging_custom_object_without_expr",
        "test_safe_value_for_logging_priority_expr_over_collections",
        "test_safe_value_for_logging_edge_cases",
        "__init__",
        "__init__",
        "validate_configuration",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "simple_dag",
        "simple_config_map",
        "mock_step_catalog",
        "mock_registry_manager",
        "mock_dependency_resolver",
        "test_init_successful_initialization",
        "test_init_missing_configs_raises_error",
        "test_init_missing_step_builders_raises_error",
        "test_initialize_step_builders_creates_builders",
        "test_initialize_step_builders_with_pipeline_parameters",
        "test_propagate_messages_uses_dependency_resolver",
        "test_generate_outputs_creates_join_objects",
        "test_instantiate_step_creates_step",
        "test_get_registry_manager_returns_manager",
        "test_get_dependency_resolver_returns_resolver",
        "test_generate_pipeline_creates_pipeline",
        "test_generate_pipeline_with_cyclic_dag_raises_error",
        "test_create_with_components_factory_method",
        "test_pipeline_regeneration_clears_instances",
        "test_init_edge_validation_invalid_dag_edges",
        "test_init_default_parameters_handling",
        "test_initialize_step_builders_error_handling",
        "test_generate_outputs_no_specification_returns_empty",
        "test_instantiate_step_with_dependencies",
        "test_instantiate_step_error_handling",
        "test_generate_pipeline_topological_sort_error",
        "test_generate_pipeline_step_instantiation_error",
        "test_propagate_messages_with_no_specifications",
        "test_propagate_messages_compatibility_scoring",
        "test_generate_outputs_uses_safe_value_for_logging",
        "ProblematicObject.__str__",
        "__str__",
        "CustomObject.__init__",
        "__init__",
        "CustomObject.__str__",
        "__str__",
        "ListWithExpr.__init__",
        "__init__",
        "FailingMockStepBuilder.__init__",
        "__init__",
        "mock_instantiate",
        "__str__",
        "__init__",
        "__str__",
        "__init__",
        "__init__"
      ],
      "core/integration/test_pipeline_execution_temp_dir_integration.py": [
        "MockConfig.__init__",
        "__init__",
        "MockStepBuilder.__init__",
        "__init__",
        "MockStepBuilder.validate_configuration",
        "validate_configuration",
        "MockStepBuilder._get_inputs",
        "_get_inputs",
        "MockStepBuilder._get_outputs",
        "_get_outputs",
        "MockStepBuilder.create_step",
        "create_step",
        "TestPipelineExecutionTempDirIntegration.setup_method",
        "setup_method",
        "TestPipelineExecutionTempDirIntegration.test_end_to_end_parameter_flow_with_custom_execution_prefix",
        "test_end_to_end_parameter_flow_with_custom_execution_prefix",
        "TestPipelineExecutionTempDirIntegration.test_end_to_end_parameter_flow_with_assembler_integration",
        "test_end_to_end_parameter_flow_with_assembler_integration",
        "TestPipelineExecutionTempDirIntegration.test_step_builder_base_output_path_resolution_with_execution_prefix",
        "test_step_builder_base_output_path_resolution_with_execution_prefix",
        "TestPipelineExecutionTempDirIntegration.test_output_generation_with_join_pattern",
        "test_output_generation_with_join_pattern",
        "TestPipelineExecutionTempDirIntegration.test_backward_compatibility_without_parameters",
        "test_backward_compatibility_without_parameters",
        "TestPipelineExecutionTempDirIntegration.test_parameter_type_compatibility",
        "test_parameter_type_compatibility",
        "TestPipelineExecutionTempDirIntegration.test_multiple_parameter_handling",
        "test_multiple_parameter_handling",
        "TestPipelineExecutionTempDirIntegration.test_parameter_extraction_logic",
        "test_parameter_extraction_logic",
        "TestPipelineExecutionTempDirIntegration.test_error_handling_with_invalid_parameters",
        "test_error_handling_with_invalid_parameters",
        "TestPipelineExecutionTempDirIntegration.test_logging_integration",
        "test_logging_integration",
        "__init__",
        "__init__",
        "validate_configuration",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "setup_method",
        "test_end_to_end_parameter_flow_with_custom_execution_prefix",
        "test_end_to_end_parameter_flow_with_assembler_integration",
        "test_step_builder_base_output_path_resolution_with_execution_prefix",
        "test_output_generation_with_join_pattern",
        "test_backward_compatibility_without_parameters",
        "test_parameter_type_compatibility",
        "test_multiple_parameter_handling",
        "test_parameter_extraction_logic",
        "test_error_handling_with_invalid_parameters",
        "test_logging_integration"
      ],
      "core/utils/test_hybrid_path_resolution.py": [
        "TestHybridPathResolver.setup_method",
        "setup_method",
        "TestHybridPathResolver.test_resolver_initialization",
        "test_resolver_initialization",
        "TestHybridPathResolver.test_empty_relative_path",
        "test_empty_relative_path",
        "TestThreeDeploymentScenarios.setup_method",
        "setup_method",
        "TestThreeDeploymentScenarios.test_scenario_1_lambda_mods_bundled_deployment",
        "test_scenario_1_lambda_mods_bundled_deployment",
        "TestThreeDeploymentScenarios.test_scenario_2_development_monorepo",
        "test_scenario_2_development_monorepo",
        "TestThreeDeploymentScenarios.test_scenario_3_pip_installed_separated",
        "test_scenario_3_pip_installed_separated",
        "TestThreeDeploymentScenarios.test_hybrid_resolution_strategy_progression",
        "test_hybrid_resolution_strategy_progression",
        "TestHybridPathResolverEdgeCases.setup_method",
        "setup_method",
        "TestHybridPathResolverEdgeCases.test_working_directory_discovery_direct",
        "test_working_directory_discovery_direct",
        "TestHybridPathResolverEdgeCases.test_working_directory_discovery_current_dir_match",
        "test_working_directory_discovery_current_dir_match",
        "TestHybridResolutionConfig.test_default_enabled",
        "test_default_enabled",
        "TestHybridResolutionConfig.test_default_mode",
        "test_default_mode",
        "TestHybridResolutionConfig.test_environment_variable_override",
        "test_environment_variable_override",
        "TestResolveHybridPath.test_disabled_resolution",
        "test_disabled_resolution",
        "TestResolveHybridPath.test_fallback_only_mode",
        "test_fallback_only_mode",
        "TestHybridResolutionMetrics.test_metrics_collection",
        "test_metrics_collection",
        "setup_method",
        "test_resolver_initialization",
        "test_empty_relative_path",
        "setup_method",
        "test_scenario_1_lambda_mods_bundled_deployment",
        "test_scenario_2_development_monorepo",
        "test_scenario_3_pip_installed_separated",
        "test_hybrid_resolution_strategy_progression",
        "setup_method",
        "test_working_directory_discovery_direct",
        "test_working_directory_discovery_current_dir_match",
        "test_default_enabled",
        "test_default_mode",
        "test_environment_variable_override",
        "test_disabled_resolution",
        "test_fallback_only_mode",
        "test_metrics_collection",
        "mock_package_discovery_func",
        "mock_wd_discovery_func"
      ],
      "core/config_portability/test_processing_config_portability.py": [
        "TestProcessingStepConfigHybridResolution.temp_cursus_structure",
        "temp_cursus_structure",
        "TestProcessingStepConfigHybridResolution.sample_config_data",
        "sample_config_data",
        "TestProcessingStepConfigHybridResolution.test_processing_config_inherits_hybrid_resolution",
        "test_processing_config_inherits_hybrid_resolution",
        "TestProcessingStepConfigHybridResolution.test_processing_source_dir_property",
        "test_processing_source_dir_property",
        "TestProcessingStepConfigHybridResolution.test_effective_source_dir_prioritizes_processing",
        "test_effective_source_dir_prioritizes_processing",
        "TestProcessingStepConfigHybridResolution.test_effective_source_dir_fallback_to_base",
        "test_effective_source_dir_fallback_to_base",
        "TestProcessingStepConfigHybridResolution.test_script_path_property",
        "test_script_path_property",
        "TestProcessingStepConfigHybridResolution.test_script_path_with_none_entry_point",
        "test_script_path_with_none_entry_point",
        "TestProcessingStepConfigHybridResolution.test_get_script_path_method",
        "test_get_script_path_method",
        "TestProcessingStepConfigHybridResolution.test_get_script_path_with_default",
        "test_get_script_path_with_default",
        "TestProcessingStepConfigHybridResolution.test_hybrid_resolution_with_processing_paths",
        "test_hybrid_resolution_with_processing_paths",
        "TestProcessingStepConfigHybridResolution.test_model_dump_includes_processing_fields",
        "test_model_dump_includes_processing_fields",
        "TestProcessingStepConfigHybridResolution.test_backward_compatibility",
        "test_backward_compatibility",
        "TestProcessingStepConfigHybridResolution.test_s3_path_handling",
        "test_s3_path_handling",
        "TestProcessingStepConfigHybridResolution.test_hybrid_resolution_integration",
        "test_hybrid_resolution_integration",
        "TestProcessingStepConfigEdgeCases.sample_config_data",
        "sample_config_data",
        "TestProcessingStepConfigEdgeCases.test_none_processing_source_dir",
        "test_none_processing_source_dir",
        "TestProcessingStepConfigEdgeCases.test_none_processing_entry_point",
        "test_none_processing_entry_point",
        "TestProcessingStepConfigEdgeCases.test_empty_string_processing_paths",
        "test_empty_string_processing_paths",
        "TestProcessingStepConfigEdgeCases.test_relative_processing_paths",
        "test_relative_processing_paths",
        "TestProcessingStepConfigEdgeCases.test_unicode_processing_paths",
        "test_unicode_processing_paths",
        "TestProcessingStepConfigEdgeCases.test_very_long_processing_paths",
        "test_very_long_processing_paths",
        "TestProcessingStepConfigEdgeCases.test_mixed_path_types",
        "test_mixed_path_types",
        "temp_cursus_structure",
        "sample_config_data",
        "test_processing_config_inherits_hybrid_resolution",
        "test_processing_source_dir_property",
        "test_effective_source_dir_prioritizes_processing",
        "test_effective_source_dir_fallback_to_base",
        "test_script_path_property",
        "test_script_path_with_none_entry_point",
        "test_get_script_path_method",
        "test_get_script_path_with_default",
        "test_hybrid_resolution_with_processing_paths",
        "test_model_dump_includes_processing_fields",
        "test_backward_compatibility",
        "test_s3_path_handling",
        "test_hybrid_resolution_integration",
        "sample_config_data",
        "test_none_processing_source_dir",
        "test_none_processing_entry_point",
        "test_empty_string_processing_paths",
        "test_relative_processing_paths",
        "test_unicode_processing_paths",
        "test_very_long_processing_paths",
        "test_mixed_path_types"
      ],
      "core/config_portability/test_base_config_portability.py": [
        "TestBasePipelineConfigHybridResolution.temp_cursus_structure",
        "temp_cursus_structure",
        "TestBasePipelineConfigHybridResolution.sample_config_data",
        "sample_config_data",
        "TestBasePipelineConfigHybridResolution.test_resolve_hybrid_path_method_exists",
        "test_resolve_hybrid_path_method_exists",
        "TestBasePipelineConfigHybridResolution.test_resolved_source_dir_property_exists",
        "test_resolved_source_dir_property_exists",
        "TestBasePipelineConfigHybridResolution.test_resolved_source_dir_with_none_source_dir",
        "test_resolved_source_dir_with_none_source_dir",
        "TestBasePipelineConfigHybridResolution.test_effective_source_dir_property",
        "test_effective_source_dir_property",
        "TestBasePipelineConfigHybridResolution.test_hybrid_path_resolution_with_s3_paths",
        "test_hybrid_path_resolution_with_s3_paths",
        "TestBasePipelineConfigHybridResolution.test_hybrid_path_resolution_with_relative_paths",
        "test_hybrid_path_resolution_with_relative_paths",
        "TestBasePipelineConfigHybridResolution.test_model_dump_includes_resolved_paths",
        "test_model_dump_includes_resolved_paths",
        "TestBasePipelineConfigHybridResolution.test_model_dump_excludes_none_paths",
        "test_model_dump_excludes_none_paths",
        "TestBasePipelineConfigHybridResolution.test_backward_compatibility",
        "test_backward_compatibility",
        "TestBasePipelineConfigHybridResolution.test_project_root_folder_required",
        "test_project_root_folder_required",
        "TestBasePipelineConfigHybridResolution.test_hybrid_resolution_integration",
        "test_hybrid_resolution_integration",
        "TestBasePipelineConfigEdgeCases.sample_config_data",
        "sample_config_data",
        "TestBasePipelineConfigEdgeCases.test_empty_string_source_dir",
        "test_empty_string_source_dir",
        "TestBasePipelineConfigEdgeCases.test_s3_path_source_dir",
        "test_s3_path_source_dir",
        "TestBasePipelineConfigEdgeCases.test_windows_absolute_path",
        "test_windows_absolute_path",
        "TestBasePipelineConfigEdgeCases.test_unicode_paths",
        "test_unicode_paths",
        "TestBasePipelineConfigEdgeCases.test_very_long_paths",
        "test_very_long_paths",
        "temp_cursus_structure",
        "sample_config_data",
        "test_resolve_hybrid_path_method_exists",
        "test_resolved_source_dir_property_exists",
        "test_resolved_source_dir_with_none_source_dir",
        "test_effective_source_dir_property",
        "test_hybrid_path_resolution_with_s3_paths",
        "test_hybrid_path_resolution_with_relative_paths",
        "test_model_dump_includes_resolved_paths",
        "test_model_dump_excludes_none_paths",
        "test_backward_compatibility",
        "test_project_root_folder_required",
        "test_hybrid_resolution_integration",
        "sample_config_data",
        "test_empty_string_source_dir",
        "test_s3_path_source_dir",
        "test_windows_absolute_path",
        "test_unicode_paths",
        "test_very_long_paths"
      ],
      "core/deps/test_semantic_matcher.py": [
        "TestSemanticMatcher.test_calculate_similarity_with_aliases",
        "test_calculate_similarity_with_aliases",
        "TestSemanticMatcher.test_weight_calculation",
        "test_weight_calculation",
        "TestSemanticMatcher.test_name_normalization",
        "test_name_normalization",
        "TestSemanticMatcher.test_individual_similarity_metrics",
        "test_individual_similarity_metrics",
        "TestSemanticMatcher.test_synonym_matching",
        "test_synonym_matching",
        "TestSemanticMatcher.test_find_best_matches",
        "test_find_best_matches",
        "TestSemanticMatcher.test_similarity_explanation",
        "test_similarity_explanation",
        "TestSemanticMatcher.test_edge_cases",
        "test_edge_cases",
        "TestSemanticMatcher.test_integration_with_dependency_resolver",
        "test_integration_with_dependency_resolver",
        "TestSemanticMatcher.test_direct_name_matching",
        "test_direct_name_matching",
        "TestSemanticMatcher.test_domain_specific_synonyms",
        "test_domain_specific_synonyms",
        "test_calculate_similarity_with_aliases",
        "test_weight_calculation",
        "test_name_normalization",
        "test_individual_similarity_metrics",
        "test_synonym_matching",
        "test_find_best_matches",
        "test_similarity_explanation",
        "test_edge_cases",
        "test_integration_with_dependency_resolver",
        "test_direct_name_matching",
        "test_domain_specific_synonyms"
      ],
      "core/deps/test_property_reference.py": [
        "TestPropertyReference.setup_method",
        "setup_method",
        "TestPropertyReference.test_init_and_validation",
        "test_init_and_validation",
        "TestPropertyReference.test_parse_property_path",
        "test_parse_property_path",
        "TestPropertyReference.test_to_sagemaker_property",
        "test_to_sagemaker_property",
        "TestPropertyReference.test_get_property_value",
        "test_get_property_value",
        "TestPropertyReference.test_to_runtime_property",
        "test_to_runtime_property",
        "TestPropertyReference.test_string_representation",
        "test_string_representation",
        "TestPropertyReference._create_mock_processing_step",
        "_create_mock_processing_step",
        "TestPropertyReference._create_mock_training_step",
        "_create_mock_training_step",
        "TestPropertyReference._create_mock_eval_step",
        "_create_mock_eval_step",
        "TestPropertyReference._create_mock_transform_step",
        "_create_mock_transform_step",
        "setup_method",
        "test_init_and_validation",
        "test_parse_property_path",
        "test_to_sagemaker_property",
        "test_get_property_value",
        "test_to_runtime_property",
        "test_string_representation",
        "_create_mock_processing_step",
        "_create_mock_training_step",
        "_create_mock_eval_step",
        "_create_mock_transform_step"
      ],
      "core/deps/test_global_state_isolation.py": [
        "TestWithoutIsolation.test_registry_state_1",
        "test_registry_state_1",
        "TestWithoutIsolation.test_registry_state_2",
        "test_registry_state_2",
        "TestWithManualIsolation.setup_method",
        "setup_method",
        "TestWithManualIsolation.test_registry_state_1",
        "test_registry_state_1",
        "TestWithManualIsolation.test_registry_state_2",
        "test_registry_state_2",
        "TestWithHelperIsolation.setup_method",
        "setup_method",
        "TestWithHelperIsolation.test_registry_state_1",
        "test_registry_state_1",
        "TestWithHelperIsolation.test_registry_state_2",
        "test_registry_state_2",
        "run_tests_individually",
        "run_tests_together",
        "test_registry_state_1",
        "test_registry_state_2",
        "setup_method",
        "test_registry_state_1",
        "test_registry_state_2",
        "setup_method",
        "test_registry_state_1",
        "test_registry_state_2"
      ],
      "core/deps/test_factory.py": [
        "TestFactoryFunctions.setup_method",
        "setup_method",
        "TestFactoryFunctions.test_create_pipeline_components_default",
        "test_create_pipeline_components_default",
        "TestFactoryFunctions.test_create_pipeline_components_custom_context",
        "test_create_pipeline_components_custom_context",
        "TestFactoryFunctions.test_create_pipeline_components_wiring",
        "test_create_pipeline_components_wiring",
        "TestFactoryFunctions.test_create_pipeline_components_isolation",
        "test_create_pipeline_components_isolation",
        "TestThreadLocalComponents.setup_method",
        "setup_method",
        "TestThreadLocalComponents.test_get_thread_components_single_thread",
        "test_get_thread_components_single_thread",
        "TestThreadLocalComponents.test_get_thread_components_multi_thread",
        "test_get_thread_components_multi_thread",
        "TestThreadLocalComponents.test_thread_components_persistence",
        "test_thread_components_persistence",
        "TestDependencyResolutionContext.setup_method",
        "setup_method",
        "TestDependencyResolutionContext.test_dependency_resolution_context_basic",
        "test_dependency_resolution_context_basic",
        "TestDependencyResolutionContext.test_dependency_resolution_context_cleanup",
        "test_dependency_resolution_context_cleanup",
        "TestDependencyResolutionContext.test_dependency_resolution_context_no_cleanup",
        "test_dependency_resolution_context_no_cleanup",
        "TestDependencyResolutionContext.test_dependency_resolution_context_exception_handling",
        "test_dependency_resolution_context_exception_handling",
        "TestDependencyResolutionContext.test_dependency_resolution_context_nested",
        "test_dependency_resolution_context_nested",
        "TestFactoryIntegration.setup_method",
        "setup_method",
        "TestFactoryIntegration.test_end_to_end_pipeline_creation",
        "test_end_to_end_pipeline_creation",
        "TestFactoryIntegration.test_multi_context_pipeline_isolation",
        "test_multi_context_pipeline_isolation",
        "setup_method",
        "test_create_pipeline_components_default",
        "test_create_pipeline_components_custom_context",
        "test_create_pipeline_components_wiring",
        "test_create_pipeline_components_isolation",
        "setup_method",
        "test_get_thread_components_single_thread",
        "test_get_thread_components_multi_thread",
        "test_thread_components_persistence",
        "setup_method",
        "test_dependency_resolution_context_basic",
        "test_dependency_resolution_context_cleanup",
        "test_dependency_resolution_context_no_cleanup",
        "test_dependency_resolution_context_exception_handling",
        "test_dependency_resolution_context_nested",
        "setup_method",
        "test_end_to_end_pipeline_creation",
        "test_multi_context_pipeline_isolation",
        "thread_worker"
      ],
      "core/deps/test_specification_registry.py": [
        "TestSpecificationRegistry.setup_method",
        "setup_method",
        "TestSpecificationRegistry.test_registry_initialization",
        "test_registry_initialization",
        "TestSpecificationRegistry.test_register_specification",
        "test_register_specification",
        "TestSpecificationRegistry.test_register_invalid_specification",
        "test_register_invalid_specification",
        "TestSpecificationRegistry.test_get_specifications_by_type",
        "test_get_specifications_by_type",
        "TestSpecificationRegistry.test_find_compatible_outputs",
        "test_find_compatible_outputs",
        "TestSpecificationRegistry.test_compatibility_checking",
        "test_compatibility_checking",
        "TestSpecificationRegistry.test_context_isolation",
        "test_context_isolation",
        "TestSpecificationRegistry.test_registry_string_representation",
        "test_registry_string_representation",
        "TestSpecificationRegistry.test_empty_registry_operations",
        "test_empty_registry_operations",
        "TestSpecificationRegistry.test_compatibility_scoring_algorithm",
        "test_compatibility_scoring_algorithm",
        "TestSpecificationRegistry.test_complex_pipeline_compatibility",
        "test_complex_pipeline_compatibility",
        "TestSpecificationRegistry.test_multiple_compatible_outputs",
        "test_multiple_compatible_outputs",
        "TestSpecificationRegistry.test_data_type_compatibility",
        "test_data_type_compatibility",
        "TestSpecificationRegistry.test_register_multiple_specifications",
        "test_register_multiple_specifications",
        "TestSpecificationRegistry.test_get_specification_detailed",
        "test_get_specification_detailed",
        "TestSpecificationRegistry.test_get_specification_by_type_detailed",
        "test_get_specification_by_type_detailed",
        "TestSpecificationRegistry.test_list_operations_detailed",
        "test_list_operations_detailed",
        "TestSpecificationRegistry.test_find_compatible_outputs_detailed",
        "test_find_compatible_outputs_detailed",
        "setup_method",
        "test_registry_initialization",
        "test_register_specification",
        "test_register_invalid_specification",
        "test_get_specifications_by_type",
        "test_find_compatible_outputs",
        "test_compatibility_checking",
        "test_context_isolation",
        "test_registry_string_representation",
        "test_empty_registry_operations",
        "test_compatibility_scoring_algorithm",
        "test_complex_pipeline_compatibility",
        "test_multiple_compatible_outputs",
        "test_data_type_compatibility",
        "test_register_multiple_specifications",
        "test_get_specification_detailed",
        "test_get_specification_by_type_detailed",
        "test_list_operations_detailed",
        "test_find_compatible_outputs_detailed"
      ],
      "core/deps/test_registry_manager.py": [
        "TestRegistryManagerCore.setup_method",
        "setup_method",
        "TestRegistryManagerCore.test_manager_initialization",
        "test_manager_initialization",
        "TestRegistryManagerCore.test_get_registry_creates_new",
        "test_get_registry_creates_new",
        "TestRegistryManagerCore.test_get_registry_returns_existing",
        "test_get_registry_returns_existing",
        "TestRegistryManagerCore.test_get_registry_no_create",
        "test_get_registry_no_create",
        "TestRegistryManagerCore.test_registry_isolation",
        "test_registry_isolation",
        "TestRegistryManagerCore.test_list_contexts",
        "test_list_contexts",
        "TestRegistryManagerCore.test_clear_context",
        "test_clear_context",
        "TestRegistryManagerCore.test_clear_all_contexts",
        "test_clear_all_contexts",
        "TestRegistryManagerCore.test_get_context_stats",
        "test_get_context_stats",
        "TestRegistryManagerCore.test_manager_string_representation",
        "test_manager_string_representation",
        "TestConvenienceFunctions.setup_method",
        "setup_method",
        "TestConvenienceFunctions.test_get_registry_function",
        "test_get_registry_function",
        "TestConvenienceFunctions.test_get_pipeline_registry_backward_compatibility",
        "test_get_pipeline_registry_backward_compatibility",
        "TestConvenienceFunctions.test_get_default_registry_backward_compatibility",
        "test_get_default_registry_backward_compatibility",
        "TestConvenienceFunctions.test_list_contexts_function",
        "test_list_contexts_function",
        "TestConvenienceFunctions.test_clear_context_function",
        "test_clear_context_function",
        "TestConvenienceFunctions.test_get_context_stats_function",
        "test_get_context_stats_function",
        "TestConvenienceFunctions.test_multiple_contexts_isolation",
        "test_multiple_contexts_isolation",
        "TestRegistryManagerErrorHandling.setup_method",
        "setup_method",
        "TestRegistryManagerErrorHandling.test_invalid_context_name_handling",
        "test_invalid_context_name_handling",
        "TestRegistryManagerErrorHandling.test_registry_operations_on_cleared_context",
        "test_registry_operations_on_cleared_context",
        "TestRegistryManagerErrorHandling.test_concurrent_access_safety",
        "test_concurrent_access_safety",
        "TestRegistryManagerMonitoring.setup_method",
        "setup_method",
        "TestRegistryManagerMonitoring.test_context_statistics_detailed",
        "test_context_statistics_detailed",
        "TestRegistryManagerMonitoring.test_memory_usage_monitoring",
        "test_memory_usage_monitoring",
        "setup_method",
        "test_manager_initialization",
        "test_get_registry_creates_new",
        "test_get_registry_returns_existing",
        "test_get_registry_no_create",
        "test_registry_isolation",
        "test_list_contexts",
        "test_clear_context",
        "test_clear_all_contexts",
        "test_get_context_stats",
        "test_manager_string_representation",
        "setup_method",
        "test_get_registry_function",
        "test_get_pipeline_registry_backward_compatibility",
        "test_get_default_registry_backward_compatibility",
        "test_list_contexts_function",
        "test_clear_context_function",
        "test_get_context_stats_function",
        "test_multiple_contexts_isolation",
        "setup_method",
        "test_invalid_context_name_handling",
        "test_registry_operations_on_cleared_context",
        "test_concurrent_access_safety",
        "setup_method",
        "test_context_statistics_detailed",
        "test_memory_usage_monitoring",
        "create_registry"
      ],
      "core/deps/test_helpers.py": [
        "reset_all_global_state",
        "isolated_test_setup"
      ],
      "core/deps/test_dependency_resolver.py": [
        "TestDependencyResolver.registry",
        "registry",
        "TestDependencyResolver.semantic_matcher",
        "semantic_matcher",
        "TestDependencyResolver.resolver",
        "resolver",
        "TestDependencyResolver.test_dependency_resolution_with_aliases",
        "test_dependency_resolution_with_aliases",
        "TestDependencyResolver.test_weight_calculation",
        "test_weight_calculation",
        "TestDependencyResolver.test_multiple_competing_candidates",
        "test_multiple_competing_candidates",
        "TestDependencyResolver.test_type_compatibility_matrix",
        "test_type_compatibility_matrix",
        "TestDependencyResolver.test_data_type_compatibility",
        "test_data_type_compatibility",
        "TestDependencyResolver.test_semantic_matching",
        "test_semantic_matching",
        "TestDependencyResolver.test_required_vs_optional_dependencies",
        "test_required_vs_optional_dependencies",
        "TestDependencyResolver.test_unresolvable_dependencies",
        "test_unresolvable_dependencies",
        "TestDependencyResolver.test_registry_isolation",
        "test_registry_isolation",
        "TestDependencyResolver.test_property_reference_functionality",
        "test_property_reference_functionality",
        "TestDependencyResolver.test_end_to_end_resolution",
        "test_end_to_end_resolution",
        "TestDependencyResolver.test_job_type_normalization",
        "test_job_type_normalization",
        "registry",
        "semantic_matcher",
        "resolver",
        "test_dependency_resolution_with_aliases",
        "test_weight_calculation",
        "test_multiple_competing_candidates",
        "test_type_compatibility_matrix",
        "test_data_type_compatibility",
        "test_semantic_matching",
        "test_required_vs_optional_dependencies",
        "test_unresolvable_dependencies",
        "test_registry_isolation",
        "test_property_reference_functionality",
        "test_end_to_end_resolution",
        "test_job_type_normalization"
      ],
      "core/config_fields/test_type_aware_serialization.py": [
        "TestTypeAwareSerialization.setUp",
        "setUp",
        "TestTypeAwareSerialization.test_basic_serialization",
        "test_basic_serialization",
        "TestTypeAwareSerialization.test_nested_serialization",
        "test_nested_serialization",
        "TestTypeAwareSerialization.test_generate_step_name_basic",
        "test_generate_step_name_basic",
        "TestTypeAwareSerialization.test_generate_step_name_job_type",
        "test_generate_step_name_job_type",
        "TestTypeAwareSerialization.test_generate_step_name_multiple_attributes",
        "test_generate_step_name_multiple_attributes",
        "TestTypeAwareSerialization.test_serialize_config_includes_step_name",
        "test_serialize_config_includes_step_name",
        "TestTypeAwareSerialization.test_serialize_deserialize_preserves_job_type",
        "test_serialize_deserialize_preserves_job_type",
        "TestTypeAwareSerialization.test_full_serialize_config_cycle",
        "test_full_serialize_config_cycle",
        "setUp",
        "test_basic_serialization",
        "test_nested_serialization",
        "test_generate_step_name_basic",
        "test_generate_step_name_job_type",
        "test_generate_step_name_multiple_attributes",
        "test_serialize_config_includes_step_name",
        "test_serialize_deserialize_preserves_job_type",
        "test_full_serialize_config_cycle"
      ],
      "core/config_fields/test_circular_reference_tracker.py": [
        "TestCircularReferenceTracker.setup_and_teardown",
        "setup_and_teardown",
        "TestCircularReferenceTracker.test_simple_object_tracking",
        "test_simple_object_tracking",
        "TestCircularReferenceTracker.test_nested_object_tracking",
        "test_nested_object_tracking",
        "TestCircularReferenceTracker.test_circular_reference_detection",
        "test_circular_reference_detection",
        "TestCircularReferenceTracker.test_max_depth_detection",
        "test_max_depth_detection",
        "TestCircularReferenceTracker.test_object_identification",
        "test_object_identification",
        "TestCircularReferenceTracker.test_integration_with_serializer_simulation",
        "test_integration_with_serializer_simulation",
        "TestCircularReferenceTracker.test_complex_nested_paths",
        "test_complex_nested_paths",
        "TestCircularReferenceTracker.test_actual_integration_with_serializer",
        "test_actual_integration_with_serializer",
        "TestCircularReferenceTracker.test_error_message_formatting",
        "test_error_message_formatting",
        "TestCircularReferenceTracker._format_cycle_error_manual",
        "_format_cycle_error_manual",
        "setup_and_teardown",
        "test_simple_object_tracking",
        "test_nested_object_tracking",
        "test_circular_reference_detection",
        "test_max_depth_detection",
        "test_object_identification",
        "test_integration_with_serializer_simulation",
        "test_complex_nested_paths",
        "test_actual_integration_with_serializer",
        "test_error_message_formatting",
        "_format_cycle_error_manual",
        "deserialize"
      ],
      "core/config_fields/test_config_field_categorizer.py": [
        "BaseTestConfig.__init__",
        "__init__",
        "TestConfigFieldCategorizer.setup_and_teardown",
        "setup_and_teardown",
        "TestConfigFieldCategorizer.test_init_categorizes_configs",
        "test_init_categorizes_configs",
        "TestConfigFieldCategorizer.test_is_special_field",
        "test_is_special_field",
        "TestConfigFieldCategorizer.test_is_likely_static",
        "test_is_likely_static",
        "TestConfigFieldCategorizer.test_categorize_field",
        "test_categorize_field",
        "TestConfigFieldCategorizer.test_categorize_fields_structure",
        "test_categorize_fields_structure",
        "TestConfigFieldCategorizer.test_place_field_shared",
        "test_place_field_shared",
        "TestConfigFieldCategorizer.test_place_field_specific",
        "test_place_field_specific",
        "TestConfigFieldCategorizer.test_get_categorized_fields",
        "test_get_categorized_fields",
        "TestConfigFieldCategorizer.test_end_to_end_categorization",
        "test_end_to_end_categorization",
        "__init__",
        "setup_and_teardown",
        "test_init_categorizes_configs",
        "test_is_special_field",
        "test_is_likely_static",
        "test_categorize_field",
        "test_categorize_fields_structure",
        "test_place_field_shared",
        "test_place_field_specific",
        "test_get_categorized_fields",
        "test_end_to_end_categorization",
        "mock_serialize_impl",
        "mock_serialize_impl",
        "mock_serialize_impl",
        "mock_serialize_impl"
      ],
      "core/config_fields/test_circular_reference_consolidated.py": [
        "TestLogHandler.__init__",
        "__init__",
        "TestLogHandler.emit",
        "emit",
        "TestCircularReferenceConsolidated.setUp",
        "setUp",
        "TestCircularReferenceConsolidated.tearDown",
        "tearDown",
        "TestCircularReferenceConsolidated.test_enhanced_placeholders_for_circular_refs",
        "test_enhanced_placeholders_for_circular_refs",
        "TestCircularReferenceConsolidated.test_list_items_avoid_false_positives",
        "test_list_items_avoid_false_positives",
        "TestCircularReferenceConsolidated.test_nested_complex_structure",
        "test_nested_complex_structure",
        "TestCircularReferenceConsolidated.test_true_circular_references_still_detected",
        "test_true_circular_references_still_detected",
        "TestCircularReferenceConsolidated.test_special_list_format_handling",
        "test_special_list_format_handling",
        "TestCircularReferenceConsolidated.test_type_metadata_handling_with_circular_refs",
        "test_type_metadata_handling_with_circular_refs",
        "TestCircularReferenceConsolidated.test_deep_nesting_without_circularity",
        "test_deep_nesting_without_circularity",
        "TestCircularReferenceConsolidated.test_circular_reference_error_messages",
        "test_circular_reference_error_messages",
        "TestCircularReferenceConsolidated.test_performance_with_large_structures",
        "test_performance_with_large_structures",
        "__init__",
        "emit",
        "setUp",
        "tearDown",
        "test_enhanced_placeholders_for_circular_refs",
        "test_list_items_avoid_false_positives",
        "test_nested_complex_structure",
        "test_true_circular_references_still_detected",
        "test_special_list_format_handling",
        "test_type_metadata_handling_with_circular_refs",
        "test_deep_nesting_without_circularity",
        "test_circular_reference_error_messages",
        "test_performance_with_large_structures"
      ],
      "core/config_fields/test_end_to_end_integration.py": [
        "TestEndToEndIntegration.setup_and_teardown",
        "setup_and_teardown",
        "TestEndToEndIntegration.create_test_configs",
        "create_test_configs",
        "TestEndToEndIntegration.test_end_to_end_config_workflow",
        "test_end_to_end_config_workflow",
        "TestEndToEndIntegration.test_config_round_trip_integrity",
        "test_config_round_trip_integrity",
        "TestEndToEndIntegration.test_shared_vs_specific_field_categorization",
        "test_shared_vs_specific_field_categorization",
        "TestEndToEndIntegration.test_hyperparameters_preservation",
        "test_hyperparameters_preservation",
        "TestEndToEndIntegration.test_metadata_completeness",
        "test_metadata_completeness",
        "TestEndToEndIntegration.test_error_handling",
        "test_error_handling",
        "TestEndToEndIntegration.test_performance_and_file_size",
        "test_performance_and_file_size",
        "TestEndToEndIntegration.test_json_structure_matches_expected_format",
        "test_json_structure_matches_expected_format",
        "TestEndToEndIntegration.test_field_sources_inverted_index_validation",
        "test_field_sources_inverted_index_validation",
        "setup_and_teardown",
        "create_test_configs",
        "test_end_to_end_config_workflow",
        "test_config_round_trip_integrity",
        "test_shared_vs_specific_field_categorization",
        "test_hyperparameters_preservation",
        "test_metadata_completeness",
        "test_error_handling",
        "test_performance_and_file_size",
        "test_json_structure_matches_expected_format",
        "test_field_sources_inverted_index_validation"
      ],
      "core/config_fields/test_bug_fixes_consolidated.py": [
        "TestBugFixesConsolidated.setUp",
        "setUp",
        "TestBugFixesConsolidated.tearDown",
        "tearDown",
        "TestBugFixesConsolidated.test_circular_reference_handling_in_data_sources",
        "test_circular_reference_handling_in_data_sources",
        "TestBugFixesConsolidated.test_special_list_format_handling",
        "test_special_list_format_handling",
        "TestBugFixesConsolidated.test_circular_reference_handling_in_hyperparameters",
        "test_circular_reference_handling_in_hyperparameters",
        "TestBugFixesConsolidated.test_payload_config_recursion_fix",
        "test_payload_config_recursion_fix",
        "TestBugFixesConsolidated.test_load_real_config_file",
        "test_load_real_config_file",
        "TestBugFixesConsolidated.test_additional_config_with_special_list",
        "test_additional_config_with_special_list",
        "TestBugFixesConsolidated.test_deep_recursion_prevention",
        "test_deep_recursion_prevention",
        "TestBugFixesConsolidated.test_memory_leak_prevention",
        "test_memory_leak_prevention",
        "TestBugFixesConsolidated.test_error_handling_improvements",
        "test_error_handling_improvements",
        "setUp",
        "tearDown",
        "test_circular_reference_handling_in_data_sources",
        "test_special_list_format_handling",
        "test_circular_reference_handling_in_hyperparameters",
        "test_payload_config_recursion_fix",
        "test_load_real_config_file",
        "test_additional_config_with_special_list",
        "test_deep_recursion_prevention",
        "test_memory_leak_prevention",
        "test_error_handling_improvements",
        "create_nested_config"
      ],
      "core/config_fields/test_config_class_detector.py": [
        "test_workspace_root",
        "TestModernConfigClassDetector.test_detect_from_json_returns_real_config_classes",
        "test_detect_from_json_returns_real_config_classes",
        "TestModernConfigClassDetector.test_detect_from_json_includes_common_config_classes",
        "test_detect_from_json_includes_common_config_classes",
        "TestModernConfigClassDetector.test_from_config_store_same_as_detect_from_json",
        "test_from_config_store_same_as_detect_from_json",
        "TestModernConfigClassDetector.test_build_complete_config_classes_function",
        "test_build_complete_config_classes_function",
        "TestModernConfigClassDetector.test_detect_config_classes_from_json_function",
        "test_detect_config_classes_from_json_function",
        "TestModernConfigClassDetector.test_field_constants_available",
        "test_field_constants_available",
        "TestModernConfigClassDetector.test_extract_class_names_legacy_compatibility",
        "test_extract_class_names_legacy_compatibility",
        "TestModernConfigClassDetector.test_extract_class_names_empty_data",
        "test_extract_class_names_empty_data",
        "TestModernConfigClassDetector.test_extract_class_names_partial_data",
        "test_extract_class_names_partial_data",
        "TestModernConfigClassDetector.test_extract_class_names_malformed_data",
        "test_extract_class_names_malformed_data",
        "TestModernConfigClassDetector.test_detect_from_json_with_mocked_catalog",
        "test_detect_from_json_with_mocked_catalog",
        "TestModernConfigClassDetector.test_detect_from_json_fallback_behavior",
        "test_detect_from_json_fallback_behavior",
        "TestModernConfigClassDetector.test_real_step_catalog_integration",
        "test_real_step_catalog_integration",
        "TestModernConfigClassDetector.test_performance_reasonable",
        "test_performance_reasonable",
        "TestModernConfigClassDetector.test_consistency_across_calls",
        "test_consistency_across_calls",
        "TestModernConfigClassDetector.test_adapter_backward_compatibility",
        "test_adapter_backward_compatibility",
        "TestModernConfigClassDetector.test_modern_vs_legacy_approach_comparison",
        "test_modern_vs_legacy_approach_comparison",
        "test_detect_from_json_returns_real_config_classes",
        "test_detect_from_json_includes_common_config_classes",
        "test_from_config_store_same_as_detect_from_json",
        "test_build_complete_config_classes_function",
        "test_detect_config_classes_from_json_function",
        "test_field_constants_available",
        "test_extract_class_names_legacy_compatibility",
        "test_extract_class_names_empty_data",
        "test_extract_class_names_partial_data",
        "test_extract_class_names_malformed_data",
        "test_detect_from_json_with_mocked_catalog",
        "test_detect_from_json_fallback_behavior",
        "test_real_step_catalog_integration",
        "test_performance_reasonable",
        "test_consistency_across_calls",
        "test_adapter_backward_compatibility",
        "test_modern_vs_legacy_approach_comparison"
      ],
      "core/config_fields/test_tier_registry.py": [
        "TestConfigFieldTierRegistry.setup_and_teardown",
        "setup_and_teardown",
        "TestConfigFieldTierRegistry.test_get_tier_method",
        "test_get_tier_method",
        "TestConfigFieldTierRegistry.test_register_field_method",
        "test_register_field_method",
        "TestConfigFieldTierRegistry.test_register_field_validation",
        "test_register_field_validation",
        "TestConfigFieldTierRegistry.test_register_fields_method",
        "test_register_fields_method",
        "TestConfigFieldTierRegistry.test_register_fields_validation",
        "test_register_fields_validation",
        "TestConfigFieldTierRegistry.test_get_fields_by_tier_method",
        "test_get_fields_by_tier_method",
        "TestConfigFieldTierRegistry.test_get_fields_by_tier_validation",
        "test_get_fields_by_tier_validation",
        "TestConfigFieldTierRegistry.test_reset_to_defaults_method",
        "test_reset_to_defaults_method",
        "TestConfigFieldTierRegistry.test_default_tier_assignments_validation",
        "test_default_tier_assignments_validation",
        "TestConfigFieldTierRegistry.test_tier_distribution",
        "test_tier_distribution",
        "TestConfigFieldTierRegistry.test_field_name_consistency",
        "test_field_name_consistency",
        "TestConfigFieldTierRegistry.test_registry_immutability_during_get_operations",
        "test_registry_immutability_during_get_operations",
        "TestConfigFieldTierRegistry.test_comprehensive_field_coverage",
        "test_comprehensive_field_coverage",
        "TestConfigFieldTierRegistry.test_api_methods_exist",
        "test_api_methods_exist",
        "TestConfigFieldTierRegistry.test_basic_functionality_integration",
        "test_basic_functionality_integration",
        "TestConfigFieldTierRegistry.test_context_aware_tier_classification",
        "test_context_aware_tier_classification",
        "TestConfigFieldTierRegistry.test_get_fields_by_tier_with_context",
        "test_get_fields_by_tier_with_context",
        "setup_and_teardown",
        "test_get_tier_method",
        "test_register_field_method",
        "test_register_field_validation",
        "test_register_fields_method",
        "test_register_fields_validation",
        "test_get_fields_by_tier_method",
        "test_get_fields_by_tier_validation",
        "test_reset_to_defaults_method",
        "test_default_tier_assignments_validation",
        "test_tier_distribution",
        "test_field_name_consistency",
        "test_registry_immutability_during_get_operations",
        "test_comprehensive_field_coverage",
        "test_api_methods_exist",
        "test_basic_functionality_integration",
        "test_context_aware_tier_classification",
        "test_get_fields_by_tier_with_context"
      ],
      "core/config_fields/test_config_merger.py": [
        "TestConfig.__init__",
        "__init__",
        "TestConfigMerger.setup_and_teardown",
        "setup_and_teardown",
        "TestConfigMerger.test_init_creates_categorizer",
        "test_init_creates_categorizer",
        "TestConfigMerger.test_merge_returns_simplified_structure",
        "test_merge_returns_simplified_structure",
        "TestConfigMerger.test_verify_merged_output_checks_structure",
        "test_verify_merged_output_checks_structure",
        "TestConfigMerger.test_check_mutual_exclusivity",
        "test_check_mutual_exclusivity",
        "TestConfigMerger.test_check_special_fields_placement",
        "test_check_special_fields_placement",
        "TestConfigMerger.test_config_types_format",
        "test_config_types_format",
        "TestConfigMerger.test_save_creates_correct_output_structure",
        "test_save_creates_correct_output_structure",
        "TestConfigMerger.test_load_from_simplified_structure",
        "test_load_from_simplified_structure",
        "TestConfigMerger.test_load_from_simplified_structure_with_legacy_data",
        "test_load_from_simplified_structure_with_legacy_data",
        "TestConfigMerger.test_merge_with_direction",
        "test_merge_with_direction",
        "TestConfigMerger.test_field_sources_generation_and_inclusion_in_metadata",
        "test_field_sources_generation_and_inclusion_in_metadata",
        "TestConfigMerger.test_field_sources_inverted_index_correctness",
        "test_field_sources_inverted_index_correctness",
        "__init__",
        "setup_and_teardown",
        "test_init_creates_categorizer",
        "test_merge_returns_simplified_structure",
        "test_verify_merged_output_checks_structure",
        "test_check_mutual_exclusivity",
        "test_check_special_fields_placement",
        "test_config_types_format",
        "test_save_creates_correct_output_structure",
        "test_load_from_simplified_structure",
        "test_load_from_simplified_structure_with_legacy_data",
        "test_merge_with_direction",
        "test_field_sources_generation_and_inclusion_in_metadata",
        "test_field_sources_inverted_index_correctness",
        "mock_generate_step_name",
        "mock_generate_step_name_2"
      ],
      "core/config_fields/test_type_aware_deserialization.py": [
        "build_complete_config_classes",
        "TestBaseConfig.validate_config",
        "validate_config",
        "TestProcessingConfig.validate_config",
        "validate_config",
        "TestTrainingConfig.validate_config",
        "validate_config",
        "TestTypeAwareDeserialization.setup_and_teardown",
        "setup_and_teardown",
        "TestTypeAwareDeserialization.test_type_preservation",
        "test_type_preservation",
        "TestTypeAwareDeserialization.test_type_metadata_in_serialized_output",
        "test_type_metadata_in_serialized_output",
        "TestTypeAwareDeserialization.test_config_types_format",
        "test_config_types_format",
        "TestTypeAwareDeserialization.test_custom_config_with_hyperparameters",
        "test_custom_config_with_hyperparameters",
        "TestTypeAwareDeserialization.test_config_types_format_with_custom_configs",
        "test_config_types_format_with_custom_configs",
        "TestTypeAwareDeserialization.test_multiple_config_scenarios",
        "test_multiple_config_scenarios",
        "TestTypeAwareDeserialization.test_fallback_behavior",
        "test_fallback_behavior",
        "validate_config",
        "validate_config",
        "validate_config",
        "setup_and_teardown",
        "test_type_preservation",
        "test_type_metadata_in_serialized_output",
        "test_config_types_format",
        "test_custom_config_with_hyperparameters",
        "test_config_types_format_with_custom_configs",
        "test_multiple_config_scenarios",
        "test_fallback_behavior"
      ],
      "core/config_fields/test_config_class_store.py": [
        "TestConfigClassStore.setup_and_teardown",
        "setup_and_teardown",
        "TestConfigClassStore.test_register_decorator_functionality",
        "test_register_decorator_functionality",
        "TestConfigClassStore.test_register_direct_functionality",
        "test_register_direct_functionality",
        "TestConfigClassStore.test_get_class_method",
        "test_get_class_method",
        "TestConfigClassStore.test_get_all_classes_method",
        "test_get_all_classes_method",
        "TestConfigClassStore.test_clear_method",
        "test_clear_method",
        "TestConfigClassStore.test_register_many_method",
        "test_register_many_method",
        "TestConfigClassStore.test_registered_names_method",
        "test_registered_names_method",
        "TestConfigClassStore.test_class_name_collision_handling",
        "test_class_name_collision_handling",
        "TestConfigClassStore.test_registry_persistence_across_operations",
        "test_registry_persistence_across_operations",
        "TestConfigClassStore.test_build_complete_config_classes_function",
        "test_build_complete_config_classes_function",
        "TestConfigClassStore.test_registry_thread_safety_simulation",
        "test_registry_thread_safety_simulation",
        "TestConfigClassStore.test_edge_cases",
        "test_edge_cases",
        "setup_and_teardown",
        "test_register_decorator_functionality",
        "test_register_direct_functionality",
        "test_get_class_method",
        "test_get_all_classes_method",
        "test_clear_method",
        "test_register_many_method",
        "test_registered_names_method",
        "test_class_name_collision_handling",
        "test_registry_persistence_across_operations",
        "test_build_complete_config_classes_function",
        "test_registry_thread_safety_simulation",
        "test_edge_cases"
      ],
      "core/config_fields/test_integration.py": [
        "TestIntegration.setup_and_teardown",
        "setup_and_teardown",
        "TestIntegration.test_end_to_end_workflow",
        "test_end_to_end_workflow",
        "TestIntegration.test_job_type_variants",
        "test_job_type_variants",
        "TestIntegration.test_serialize_deserialize_with_nesting",
        "test_serialize_deserialize_with_nesting",
        "setup_and_teardown",
        "test_end_to_end_workflow",
        "test_job_type_variants",
        "test_serialize_deserialize_with_nesting"
      ],
      "core/config_fields/test_load_configs_correctness.py": [
        "TestLoadConfigsCorrectness.project_root",
        "project_root",
        "TestLoadConfigsCorrectness.config_file_path",
        "config_file_path",
        "TestLoadConfigsCorrectness.config_file_data",
        "config_file_data",
        "TestLoadConfigsCorrectness.expected_config_types",
        "expected_config_types",
        "TestLoadConfigsCorrectness.config_classes",
        "config_classes",
        "TestLoadConfigsCorrectness.test_config_file_exists",
        "test_config_file_exists",
        "TestLoadConfigsCorrectness.test_config_file_structure",
        "test_config_file_structure",
        "TestLoadConfigsCorrectness.test_expected_config_count",
        "test_expected_config_count",
        "TestLoadConfigsCorrectness.test_config_class_availability",
        "test_config_class_availability",
        "TestLoadConfigsCorrectness.test_load_configs_basic_functionality",
        "test_load_configs_basic_functionality",
        "TestLoadConfigsCorrectness.test_load_configs_return_structure",
        "test_load_configs_return_structure",
        "TestLoadConfigsCorrectness.test_load_configs_completeness",
        "test_load_configs_completeness",
        "TestLoadConfigsCorrectness.test_load_configs_object_types",
        "test_load_configs_object_types",
        "TestLoadConfigsCorrectness.test_load_configs_object_attributes",
        "test_load_configs_object_attributes",
        "TestLoadConfigsCorrectness.test_load_configs_data_integrity",
        "test_load_configs_data_integrity",
        "TestLoadConfigsCorrectness.test_load_configs_specific_data",
        "test_load_configs_specific_data",
        "TestLoadConfigsCorrectness.test_load_configs_error_handling",
        "test_load_configs_error_handling",
        "TestLoadConfigsCorrectness.test_load_configs_performance",
        "test_load_configs_performance",
        "project_root",
        "config_file_path",
        "config_file_data",
        "expected_config_types",
        "config_classes",
        "test_config_file_exists",
        "test_config_file_structure",
        "test_expected_config_count",
        "test_config_class_availability",
        "test_load_configs_basic_functionality",
        "test_load_configs_return_structure",
        "test_load_configs_completeness",
        "test_load_configs_object_types",
        "test_load_configs_object_attributes",
        "test_load_configs_data_integrity",
        "test_load_configs_specific_data",
        "test_load_configs_error_handling",
        "test_load_configs_performance"
      ],
      "core/config_fields/test_constants.py": [
        "TestConstants.test_special_fields_to_keep_specific_completeness",
        "test_special_fields_to_keep_specific_completeness",
        "TestConstants.test_non_static_field_patterns_accuracy",
        "test_non_static_field_patterns_accuracy",
        "TestConstants.test_non_static_field_exceptions_validity",
        "test_non_static_field_exceptions_validity",
        "TestConstants.test_pattern_exception_logic",
        "test_pattern_exception_logic",
        "TestConstants.test_category_type_enum",
        "test_category_type_enum",
        "TestConstants.test_merge_direction_enum",
        "test_merge_direction_enum",
        "TestConstants.test_serialization_mode_enum",
        "test_serialization_mode_enum",
        "TestConstants.test_type_mapping_completeness",
        "test_type_mapping_completeness",
        "TestConstants.test_type_mapping_consistency",
        "test_type_mapping_consistency",
        "TestConstants.test_constants_immutability",
        "test_constants_immutability",
        "TestConstants.test_field_pattern_matching_logic",
        "test_field_pattern_matching_logic",
        "TestConstants.test_special_fields_coverage",
        "test_special_fields_coverage",
        "TestConstants.test_enum_completeness",
        "test_enum_completeness",
        "TestConstants.test_constants_documentation_alignment",
        "test_constants_documentation_alignment",
        "test_special_fields_to_keep_specific_completeness",
        "test_non_static_field_patterns_accuracy",
        "test_non_static_field_exceptions_validity",
        "test_pattern_exception_logic",
        "test_category_type_enum",
        "test_merge_direction_enum",
        "test_serialization_mode_enum",
        "test_type_mapping_completeness",
        "test_type_mapping_consistency",
        "test_constants_immutability",
        "test_field_pattern_matching_logic",
        "test_special_fields_coverage",
        "test_enum_completeness",
        "test_constants_documentation_alignment"
      ],
      "core/compiler/test_validation.py": [
        "TestValidationResult.test_validation_result_valid",
        "test_validation_result_valid",
        "TestValidationResult.test_validation_result_invalid",
        "test_validation_result_invalid",
        "TestValidationResult.test_detailed_report_valid",
        "test_detailed_report_valid",
        "TestValidationResult.test_detailed_report_invalid_with_recommendations",
        "test_detailed_report_invalid_with_recommendations",
        "TestResolutionPreview.test_resolution_preview_display",
        "test_resolution_preview_display",
        "TestConversionReport.test_conversion_report_summary",
        "test_conversion_report_summary",
        "TestConversionReport.test_conversion_report_detailed_report",
        "test_conversion_report_detailed_report",
        "TestValidationEngine.engine",
        "engine",
        "TestValidationEngine.mock_config1",
        "mock_config1",
        "TestValidationEngine.mock_config2",
        "mock_config2",
        "TestValidationEngine.available_configs",
        "available_configs",
        "TestValidationEngine.config_map",
        "config_map",
        "TestValidationEngine.builder_registry",
        "builder_registry",
        "TestValidationEngine.test_validate_dag_compatibility_success",
        "test_validate_dag_compatibility_success",
        "TestValidationEngine.test_validate_dag_compatibility_missing_configs",
        "test_validate_dag_compatibility_missing_configs",
        "TestValidationEngine.test_validate_dag_compatibility_unresolvable_builders",
        "test_validate_dag_compatibility_unresolvable_builders",
        "TestValidationEngine.test_validate_dag_compatibility_config_errors",
        "test_validate_dag_compatibility_config_errors",
        "TestValidationEngine.test_validate_dag_compatibility_with_job_type_variants",
        "test_validate_dag_compatibility_with_job_type_variants",
        "TestValidationEngine.test_validate_dag_compatibility_with_legacy_aliases",
        "test_validate_dag_compatibility_with_legacy_aliases",
        "test_validation_result_valid",
        "test_validation_result_invalid",
        "test_detailed_report_valid",
        "test_detailed_report_invalid_with_recommendations",
        "test_resolution_preview_display",
        "test_conversion_report_summary",
        "test_conversion_report_detailed_report",
        "engine",
        "mock_config1",
        "mock_config2",
        "available_configs",
        "config_map",
        "builder_registry",
        "test_validate_dag_compatibility_success",
        "test_validate_dag_compatibility_missing_configs",
        "test_validate_dag_compatibility_unresolvable_builders",
        "test_validate_dag_compatibility_config_errors",
        "test_validate_dag_compatibility_with_job_type_variants",
        "test_validate_dag_compatibility_with_legacy_aliases"
      ],
      "core/compiler/test_config_resolver.py": [
        "TestConfigResolver.resolver",
        "resolver",
        "TestConfigResolver.base_config",
        "base_config",
        "TestConfigResolver.data_load_config",
        "data_load_config",
        "TestConfigResolver.preprocessing_config",
        "preprocessing_config",
        "TestConfigResolver.training_config",
        "training_config",
        "TestConfigResolver.eval_config",
        "eval_config",
        "TestConfigResolver.configs",
        "configs",
        "TestConfigResolver.dag_nodes",
        "dag_nodes",
        "TestConfigResolver.test_direct_name_matching",
        "test_direct_name_matching",
        "TestConfigResolver.test_job_type_matching",
        "test_job_type_matching",
        "TestConfigResolver.test_semantic_matching",
        "test_semantic_matching",
        "TestConfigResolver.test_pattern_matching",
        "test_pattern_matching",
        "TestConfigResolver.test_resolve_config_map",
        "test_resolve_config_map",
        "TestConfigResolver.test_resolve_single_node_direct_match",
        "test_resolve_single_node_direct_match",
        "TestConfigResolver.test_resolve_single_node_no_match",
        "test_resolve_single_node_no_match",
        "TestConfigResolver.test_resolve_single_node_ambiguity",
        "test_resolve_single_node_ambiguity",
        "TestConfigResolver.test_preview_resolution",
        "test_preview_resolution",
        "resolver",
        "base_config",
        "data_load_config",
        "preprocessing_config",
        "training_config",
        "eval_config",
        "configs",
        "dag_nodes",
        "test_direct_name_matching",
        "test_job_type_matching",
        "test_semantic_matching",
        "test_pattern_matching",
        "test_resolve_config_map",
        "test_resolve_single_node_direct_match",
        "test_resolve_single_node_no_match",
        "test_resolve_single_node_ambiguity",
        "test_preview_resolution",
        "mock_direct_match",
        "mock_direct_match",
        "mock_job_type_match",
        "mock_semantic_match",
        "mock_pattern_match",
        "mock_direct_match",
        "mock_job_type_match",
        "mock_semantic_match",
        "mock_pattern_match",
        "mock_resolve_candidates"
      ],
      "core/compiler/test_exceptions.py": [
        "TestPipelineAPIExceptions.test_pipeline_api_error_base",
        "test_pipeline_api_error_base",
        "TestPipelineAPIExceptions.test_configuration_error_basic",
        "test_configuration_error_basic",
        "TestPipelineAPIExceptions.test_configuration_error_with_details",
        "test_configuration_error_with_details",
        "TestPipelineAPIExceptions.test_ambiguity_error_basic",
        "test_ambiguity_error_basic",
        "TestPipelineAPIExceptions.test_ambiguity_error_with_tuple_candidates",
        "test_ambiguity_error_with_tuple_candidates",
        "TestPipelineAPIExceptions.test_ambiguity_error_with_dict_candidates",
        "test_ambiguity_error_with_dict_candidates",
        "TestPipelineAPIExceptions.test_validation_error_basic",
        "test_validation_error_basic",
        "TestPipelineAPIExceptions.test_validation_error_with_details",
        "test_validation_error_with_details",
        "TestPipelineAPIExceptions.test_resolution_error_basic",
        "test_resolution_error_basic",
        "TestPipelineAPIExceptions.test_resolution_error_with_details",
        "test_resolution_error_with_details",
        "TestPipelineAPIExceptions.test_exception_inheritance",
        "test_exception_inheritance",
        "test_pipeline_api_error_base",
        "test_configuration_error_basic",
        "test_configuration_error_with_details",
        "test_ambiguity_error_basic",
        "test_ambiguity_error_with_tuple_candidates",
        "test_ambiguity_error_with_dict_candidates",
        "test_validation_error_basic",
        "test_validation_error_with_details",
        "test_resolution_error_basic",
        "test_resolution_error_with_details",
        "test_exception_inheritance",
        "MockConfig.__init__",
        "__init__",
        "__init__"
      ],
      "core/compiler/test_name_generator.py": [
        "TestNameGenerator.test_generate_random_word_length",
        "test_generate_random_word_length",
        "TestNameGenerator.test_validate_pipeline_name",
        "test_validate_pipeline_name",
        "TestNameGenerator.test_sanitize_pipeline_name",
        "test_sanitize_pipeline_name",
        "TestNameGenerator.test_generate_pipeline_name",
        "test_generate_pipeline_name",
        "test_generate_random_word_length",
        "test_validate_pipeline_name",
        "test_sanitize_pipeline_name",
        "test_generate_pipeline_name"
      ],
      "core/compiler/test_dynamic_template.py": [
        "TestDynamicPipelineTemplate.setup_method",
        "setup_method",
        "TestDynamicPipelineTemplate.test_init_stores_config_path",
        "test_init_stores_config_path",
        "TestDynamicPipelineTemplate.test_detect_config_classes",
        "test_detect_config_classes",
        "TestDynamicPipelineTemplate.test_create_pipeline_dag",
        "test_create_pipeline_dag",
        "TestDynamicPipelineTemplate.test_create_config_map",
        "test_create_config_map",
        "TestDynamicPipelineTemplate.test_create_step_builder_map",
        "test_create_step_builder_map",
        "TestDynamicPipelineTemplate.test_get_resolution_preview",
        "test_get_resolution_preview",
        "TestDynamicPipelineTemplate.test_get_step_dependencies",
        "test_get_step_dependencies",
        "TestDynamicPipelineTemplate.test_get_pipeline_parameters",
        "test_get_pipeline_parameters",
        "TestDynamicPipelineTemplate.test_init_with_pipeline_parameters",
        "test_init_with_pipeline_parameters",
        "TestDynamicPipelineTemplate.test_get_pipeline_parameters_with_custom_params",
        "test_get_pipeline_parameters_with_custom_params",
        "TestDynamicPipelineTemplate.test_get_pipeline_parameters_fallback_to_standard",
        "test_get_pipeline_parameters_fallback_to_standard",
        "TestDynamicPipelineTemplate.test_parameter_inheritance_from_base_class",
        "test_parameter_inheritance_from_base_class",
        "setup_method",
        "test_init_stores_config_path",
        "test_detect_config_classes",
        "test_create_pipeline_dag",
        "test_create_config_map",
        "test_create_step_builder_map",
        "test_get_resolution_preview",
        "test_get_step_dependencies",
        "test_get_pipeline_parameters",
        "test_init_with_pipeline_parameters",
        "test_get_pipeline_parameters_with_custom_params",
        "test_get_pipeline_parameters_fallback_to_standard",
        "test_parameter_inheritance_from_base_class"
      ],
      "core/compiler/test_dag_compiler.py": [
        "TestDagCompiler.setup_method",
        "setup_method",
        "TestDagCompiler.test_compile_with_custom_pipeline_name",
        "test_compile_with_custom_pipeline_name",
        "TestCompileDagToPipeline.setup_method",
        "setup_method",
        "TestCompileDagToPipeline.test_compile_dag_to_pipeline_invalid_dag",
        "test_compile_dag_to_pipeline_invalid_dag",
        "TestCompileDagToPipeline.test_compile_dag_to_pipeline_empty_dag",
        "test_compile_dag_to_pipeline_empty_dag",
        "TestCompileDagToPipeline.test_compile_dag_to_pipeline_missing_config_file",
        "test_compile_dag_to_pipeline_missing_config_file",
        "TestCompileDagToPipeline.test_compile_dag_to_pipeline_success",
        "test_compile_dag_to_pipeline_success",
        "TestCompileDagToPipeline.test_compile_dag_to_pipeline_exception_handling",
        "test_compile_dag_to_pipeline_exception_handling",
        "TestPipelineDAGCompilerInit.setup_method",
        "setup_method",
        "TestPipelineDAGCompilerInit.test_compiler_init_success",
        "test_compiler_init_success",
        "TestPipelineDAGCompilerInit.test_compiler_init_missing_config_file",
        "test_compiler_init_missing_config_file",
        "TestPipelineDAGCompilerInit.test_compiler_init_with_custom_components",
        "test_compiler_init_with_custom_components",
        "TestPipelineDAGCompilerValidation.setup_method",
        "setup_method",
        "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_success",
        "test_validate_dag_compatibility_success",
        "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_config_resolution_failure",
        "test_validate_dag_compatibility_config_resolution_failure",
        "TestPipelineDAGCompilerValidation.test_preview_resolution_success",
        "test_preview_resolution_success",
        "TestPipelineDAGCompilerValidation.test_preview_resolution_exception_handling",
        "test_preview_resolution_exception_handling",
        "TestPipelineDAGCompilerCompilation.setup_method",
        "setup_method",
        "TestPipelineDAGCompilerCompilation.test_compile_success",
        "test_compile_success",
        "TestPipelineDAGCompilerCompilation.test_compile_with_custom_pipeline_name",
        "test_compile_with_custom_pipeline_name",
        "TestPipelineDAGCompilerCompilation.test_compile_exception_handling",
        "test_compile_exception_handling",
        "TestPipelineDAGCompilerCompilation.test_compile_with_report",
        "test_compile_with_report",
        "TestPipelineDAGCompilerUtilityMethods.setup_method",
        "setup_method",
        "TestPipelineDAGCompilerUtilityMethods.test_get_supported_step_types",
        "test_get_supported_step_types",
        "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_success",
        "test_validate_config_file_success",
        "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_failure",
        "test_validate_config_file_failure",
        "TestPipelineDAGCompilerUtilityMethods.test_get_last_template",
        "test_get_last_template",
        "TestPipelineDAGCompilerUtilityMethods.test_compiler_init_with_pipeline_parameters",
        "test_compiler_init_with_pipeline_parameters",
        "TestPipelineDAGCompilerUtilityMethods.test_compiler_init_with_default_parameters",
        "test_compiler_init_with_default_parameters",
        "TestPipelineDAGCompilerUtilityMethods.test_create_template_passes_parameters",
        "test_create_template_passes_parameters",
        "TestPipelineDAGCompilerUtilityMethods.test_parameter_fallback_import_handling",
        "test_parameter_fallback_import_handling",
        "setup_method",
        "test_compile_with_custom_pipeline_name",
        "setup_method",
        "test_compile_dag_to_pipeline_invalid_dag",
        "test_compile_dag_to_pipeline_empty_dag",
        "test_compile_dag_to_pipeline_missing_config_file",
        "test_compile_dag_to_pipeline_success",
        "test_compile_dag_to_pipeline_exception_handling",
        "setup_method",
        "test_compiler_init_success",
        "test_compiler_init_missing_config_file",
        "test_compiler_init_with_custom_components",
        "setup_method",
        "test_validate_dag_compatibility_success",
        "test_validate_dag_compatibility_config_resolution_failure",
        "test_preview_resolution_success",
        "test_preview_resolution_exception_handling",
        "setup_method",
        "test_compile_success",
        "test_compile_with_custom_pipeline_name",
        "test_compile_exception_handling",
        "test_compile_with_report",
        "setup_method",
        "test_get_supported_step_types",
        "test_validate_config_file_success",
        "test_validate_config_file_failure",
        "test_get_last_template",
        "test_compiler_init_with_pipeline_parameters",
        "test_compiler_init_with_default_parameters",
        "test_create_template_passes_parameters",
        "test_parameter_fallback_import_handling"
      ],
      "core/compiler/test_enhanced_config_resolver.py": [
        "TestEnhancedConfigResolver.setup_method",
        "setup_method",
        "TestEnhancedConfigResolver.test_parse_node_name",
        "test_parse_node_name",
        "TestEnhancedConfigResolver.test_direct_name_matching",
        "test_direct_name_matching",
        "TestEnhancedConfigResolver.test_direct_name_matching_with_metadata",
        "test_direct_name_matching_with_metadata",
        "TestEnhancedConfigResolver.test_job_type_matching_enhanced",
        "test_job_type_matching_enhanced",
        "TestEnhancedConfigResolver.test_resolve_config_map_exact_matches",
        "test_resolve_config_map_exact_matches",
        "TestEnhancedConfigResolver.test_resolve_config_map_with_metadata",
        "test_resolve_config_map_with_metadata",
        "TestEnhancedConfigResolver.test_resolve_single_node_prioritization",
        "test_resolve_single_node_prioritization",
        "TestEnhancedConfigResolver.test_preview_resolution",
        "test_preview_resolution",
        "TestEnhancedConfigResolver.test_ambiguity_detection",
        "test_ambiguity_detection",
        "setup_method",
        "test_parse_node_name",
        "test_direct_name_matching",
        "test_direct_name_matching_with_metadata",
        "test_job_type_matching_enhanced",
        "test_resolve_config_map_exact_matches",
        "test_resolve_config_map_with_metadata",
        "test_resolve_single_node_prioritization",
        "test_preview_resolution",
        "test_ambiguity_detection",
        "mock_job_type_enhanced"
      ],
      "core/base/test_hyperparameters_base.py": [
        "TestModelHyperparameters.valid_hyperparam_data",
        "valid_hyperparam_data",
        "TestModelHyperparameters.test_init_with_required_fields",
        "test_init_with_required_fields",
        "TestModelHyperparameters.test_init_with_all_fields",
        "test_init_with_all_fields",
        "TestModelHyperparameters.test_derived_properties",
        "test_derived_properties",
        "TestModelHyperparameters.test_binary_classification",
        "test_binary_classification",
        "TestModelHyperparameters.test_class_weights_default",
        "test_class_weights_default",
        "TestModelHyperparameters.test_class_weights_custom",
        "test_class_weights_custom",
        "TestModelHyperparameters.test_class_weights_validation_error",
        "test_class_weights_validation_error",
        "TestModelHyperparameters.test_batch_size_validation",
        "test_batch_size_validation",
        "TestModelHyperparameters.test_max_epochs_validation",
        "test_max_epochs_validation",
        "TestModelHyperparameters.test_categorize_fields",
        "test_categorize_fields",
        "TestModelHyperparameters.test_get_public_init_fields",
        "test_get_public_init_fields",
        "TestModelHyperparameters.test_from_base_hyperparam",
        "test_from_base_hyperparam",
        "TestModelHyperparameters.test_get_config",
        "test_get_config",
        "TestModelHyperparameters.test_serialize_config",
        "test_serialize_config",
        "TestModelHyperparameters.test_string_representation",
        "test_string_representation",
        "TestModelHyperparameters.test_print_hyperparam_method",
        "test_print_hyperparam_method",
        "TestModelHyperparameters.test_derived_fields_caching",
        "test_derived_fields_caching",
        "TestModelHyperparameters.test_extra_fields_allowed",
        "test_extra_fields_allowed",
        "TestModelHyperparameters.test_validate_assignment",
        "test_validate_assignment",
        "TestModelHyperparameters.test_empty_field_lists",
        "test_empty_field_lists",
        "TestModelHyperparameters.test_single_class_error",
        "test_single_class_error",
        "valid_hyperparam_data",
        "test_init_with_required_fields",
        "test_init_with_all_fields",
        "test_derived_properties",
        "test_binary_classification",
        "test_class_weights_default",
        "test_class_weights_custom",
        "test_class_weights_validation_error",
        "test_batch_size_validation",
        "test_max_epochs_validation",
        "test_categorize_fields",
        "test_get_public_init_fields",
        "test_from_base_hyperparam",
        "test_get_config",
        "test_serialize_config",
        "test_string_representation",
        "test_print_hyperparam_method",
        "test_derived_fields_caching",
        "test_extra_fields_allowed",
        "test_validate_assignment",
        "test_empty_field_lists",
        "test_single_class_error"
      ],
      "core/base/test_contract_base.py": [
        "TestValidationResult.test_init_valid",
        "test_init_valid",
        "TestValidationResult.test_init_invalid_with_errors",
        "test_init_invalid_with_errors",
        "TestValidationResult.test_success_class_method",
        "test_success_class_method",
        "TestValidationResult.test_error_class_method_with_list",
        "test_error_class_method_with_list",
        "TestValidationResult.test_error_class_method_with_string",
        "test_error_class_method_with_string",
        "TestValidationResult.test_combine_class_method",
        "test_combine_class_method",
        "TestValidationResult.test_combine_all_valid",
        "test_combine_all_valid",
        "TestScriptContract.valid_contract_data",
        "valid_contract_data",
        "TestScriptContract.test_init_with_valid_data",
        "test_init_with_valid_data",
        "TestScriptContract.test_init_with_minimal_data",
        "test_init_with_minimal_data",
        "TestScriptContract.test_validate_entry_point_invalid",
        "test_validate_entry_point_invalid",
        "TestScriptContract.test_validate_input_paths_invalid",
        "test_validate_input_paths_invalid",
        "TestScriptContract.test_validate_input_paths_generated_payload_samples",
        "test_validate_input_paths_generated_payload_samples",
        "TestScriptContract.test_validate_output_paths_invalid",
        "test_validate_output_paths_invalid",
        "TestScriptContract.test_validate_arguments_invalid_characters",
        "test_validate_arguments_invalid_characters",
        "TestScriptContract.test_validate_arguments_uppercase",
        "test_validate_arguments_uppercase",
        "TestScriptContract.test_validate_implementation_file_not_found",
        "test_validate_implementation_file_not_found",
        "TestScriptContract.test_validate_implementation_success",
        "test_validate_implementation_success",
        "TestScriptContract.test_validate_implementation_missing_paths",
        "test_validate_implementation_missing_paths",
        "TestScriptContract.test_validate_implementation_with_warnings",
        "test_validate_implementation_with_warnings",
        "TestScriptAnalyzer.sample_script",
        "sample_script",
        "TestScriptAnalyzer.test_get_input_paths",
        "test_get_input_paths",
        "TestScriptAnalyzer.test_get_output_paths",
        "test_get_output_paths",
        "TestScriptAnalyzer.test_get_env_var_usage",
        "test_get_env_var_usage",
        "TestScriptAnalyzer.test_get_argument_usage",
        "test_get_argument_usage",
        "TestScriptAnalyzer.test_ast_tree_lazy_loading",
        "test_ast_tree_lazy_loading",
        "TestScriptAnalyzer.test_caching_behavior",
        "test_caching_behavior",
        "test_init_valid",
        "test_init_invalid_with_errors",
        "test_success_class_method",
        "test_error_class_method_with_list",
        "test_error_class_method_with_string",
        "test_combine_class_method",
        "test_combine_all_valid",
        "valid_contract_data",
        "test_init_with_valid_data",
        "test_init_with_minimal_data",
        "test_validate_entry_point_invalid",
        "test_validate_input_paths_invalid",
        "test_validate_input_paths_generated_payload_samples",
        "test_validate_output_paths_invalid",
        "test_validate_arguments_invalid_characters",
        "test_validate_arguments_uppercase",
        "test_validate_implementation_file_not_found",
        "test_validate_implementation_success",
        "test_validate_implementation_missing_paths",
        "test_validate_implementation_with_warnings",
        "sample_script",
        "test_get_input_paths",
        "test_get_output_paths",
        "test_get_env_var_usage",
        "test_get_argument_usage",
        "test_ast_tree_lazy_loading",
        "test_caching_behavior"
      ],
      "core/base/test_config_base.py": [
        "TestBasePipelineConfig.valid_config_data",
        "valid_config_data",
        "TestBasePipelineConfig.test_init_with_required_fields",
        "test_init_with_required_fields",
        "TestBasePipelineConfig.test_init_with_optional_fields",
        "test_init_with_optional_fields",
        "TestBasePipelineConfig.test_derived_properties",
        "test_derived_properties",
        "TestBasePipelineConfig.test_region_validation",
        "test_region_validation",
        "TestBasePipelineConfig.test_source_dir_validation",
        "test_source_dir_validation",
        "TestBasePipelineConfig.test_model_dump_includes_derived_properties",
        "test_model_dump_includes_derived_properties",
        "TestBasePipelineConfig.test_categorize_fields",
        "test_categorize_fields",
        "TestBasePipelineConfig.test_get_public_init_fields",
        "test_get_public_init_fields",
        "TestBasePipelineConfig.test_from_base_config",
        "test_from_base_config",
        "TestBasePipelineConfig.test_get_step_name_class_method",
        "test_get_step_name_class_method",
        "TestBasePipelineConfig.test_get_config_class_name_class_method",
        "test_get_config_class_name_class_method",
        "TestBasePipelineConfig.test_get_script_contract_default",
        "test_get_script_contract_default",
        "TestBasePipelineConfig.test_get_script_path_default",
        "test_get_script_path_default",
        "TestBasePipelineConfig.test_string_representation",
        "test_string_representation",
        "TestBasePipelineConfig.test_print_config_method",
        "test_print_config_method",
        "TestBasePipelineConfig.test_region_mapping",
        "test_region_mapping",
        "TestBasePipelineConfig.test_derived_fields_caching",
        "test_derived_fields_caching",
        "TestBasePipelineConfig.test_extra_fields_allowed",
        "test_extra_fields_allowed",
        "valid_config_data",
        "test_init_with_required_fields",
        "test_init_with_optional_fields",
        "test_derived_properties",
        "test_region_validation",
        "test_source_dir_validation",
        "test_model_dump_includes_derived_properties",
        "test_categorize_fields",
        "test_get_public_init_fields",
        "test_from_base_config",
        "test_get_step_name_class_method",
        "test_get_config_class_name_class_method",
        "test_get_script_contract_default",
        "test_get_script_path_default",
        "test_string_representation",
        "test_print_config_method",
        "test_region_mapping",
        "test_derived_fields_caching",
        "test_extra_fields_allowed"
      ],
      "core/base/test_all_base.py": [
        "run_pytest_on_base_tests",
        "run_individual_test_modules",
        "run_with_coverage"
      ],
      "core/base/test_enums.py": [
        "TestDependencyType.test_enum_values",
        "test_enum_values",
        "TestDependencyType.test_enum_members",
        "test_enum_members",
        "TestDependencyType.test_enum_access_by_name",
        "test_enum_access_by_name",
        "TestDependencyType.test_enum_access_by_value",
        "test_enum_access_by_value",
        "TestDependencyType.test_equality_with_same_enum",
        "test_equality_with_same_enum",
        "TestDependencyType.test_equality_with_different_enum",
        "test_equality_with_different_enum",
        "TestDependencyType.test_equality_with_non_enum",
        "test_equality_with_non_enum",
        "TestDependencyType.test_hashability",
        "test_hashability",
        "TestDependencyType.test_hashability_in_set",
        "test_hashability_in_set",
        "TestDependencyType.test_hash_consistency",
        "test_hash_consistency",
        "TestDependencyType.test_string_representation",
        "test_string_representation",
        "TestDependencyType.test_iteration",
        "test_iteration",
        "TestNodeType.test_enum_values",
        "test_enum_values",
        "TestNodeType.test_enum_members",
        "test_enum_members",
        "TestNodeType.test_enum_access_by_name",
        "test_enum_access_by_name",
        "TestNodeType.test_enum_access_by_value",
        "test_enum_access_by_value",
        "TestNodeType.test_equality_with_same_enum",
        "test_equality_with_same_enum",
        "TestNodeType.test_equality_with_different_enum",
        "test_equality_with_different_enum",
        "TestNodeType.test_equality_with_non_enum",
        "test_equality_with_non_enum",
        "TestNodeType.test_hashability",
        "test_hashability",
        "TestNodeType.test_hashability_in_set",
        "test_hashability_in_set",
        "TestNodeType.test_hash_consistency",
        "test_hash_consistency",
        "TestNodeType.test_string_representation",
        "test_string_representation",
        "TestNodeType.test_iteration",
        "test_iteration",
        "TestNodeType.test_node_type_semantics",
        "test_node_type_semantics",
        "TestEnumInteraction.test_different_enums_not_equal",
        "test_different_enums_not_equal",
        "TestEnumInteraction.test_mixed_enum_dictionary",
        "test_mixed_enum_dictionary",
        "TestEnumInteraction.test_mixed_enum_set",
        "test_mixed_enum_set",
        "TestEnumInteraction.test_enum_type_checking",
        "test_enum_type_checking",
        "TestEnumEdgeCases.test_invalid_enum_value_dependency_type",
        "test_invalid_enum_value_dependency_type",
        "TestEnumEdgeCases.test_invalid_enum_value_node_type",
        "test_invalid_enum_value_node_type",
        "TestEnumEdgeCases.test_enum_comparison_with_none",
        "test_enum_comparison_with_none",
        "TestEnumEdgeCases.test_enum_boolean_context",
        "test_enum_boolean_context",
        "test_enum_values",
        "test_enum_members",
        "test_enum_access_by_name",
        "test_enum_access_by_value",
        "test_equality_with_same_enum",
        "test_equality_with_different_enum",
        "test_equality_with_non_enum",
        "test_hashability",
        "test_hashability_in_set",
        "test_hash_consistency",
        "test_string_representation",
        "test_iteration",
        "test_enum_values",
        "test_enum_members",
        "test_enum_access_by_name",
        "test_enum_access_by_value",
        "test_equality_with_same_enum",
        "test_equality_with_different_enum",
        "test_equality_with_non_enum",
        "test_hashability",
        "test_hashability_in_set",
        "test_hash_consistency",
        "test_string_representation",
        "test_iteration",
        "test_node_type_semantics",
        "test_different_enums_not_equal",
        "test_mixed_enum_dictionary",
        "test_mixed_enum_set",
        "test_enum_type_checking",
        "test_invalid_enum_value_dependency_type",
        "test_invalid_enum_value_node_type",
        "test_enum_comparison_with_none",
        "test_enum_boolean_context"
      ],
      "core/base/test_builder_base.py": [
        "MockConfig.__init__",
        "__init__",
        "ConcreteStepBuilder.validate_configuration",
        "validate_configuration",
        "ConcreteStepBuilder._get_inputs",
        "_get_inputs",
        "ConcreteStepBuilder._get_outputs",
        "_get_outputs",
        "ConcreteStepBuilder.create_step",
        "create_step",
        "TestStepBuilderBase.config",
        "config",
        "TestStepBuilderBase.mock_session",
        "mock_session",
        "TestStepBuilderBase.role",
        "role",
        "TestStepBuilderBase.mock_registry_manager",
        "mock_registry_manager",
        "TestStepBuilderBase.mock_dependency_resolver",
        "mock_dependency_resolver",
        "TestStepBuilderBase.mock_spec",
        "mock_spec",
        "TestStepBuilderBase.test_init_with_required_params",
        "test_init_with_required_params",
        "TestStepBuilderBase.test_init_with_optional_params",
        "test_init_with_optional_params",
        "TestStepBuilderBase.test_invalid_region_raises_error",
        "test_invalid_region_raises_error",
        "TestStepBuilderBase.test_sanitize_name_for_sagemaker",
        "test_sanitize_name_for_sagemaker",
        "TestStepBuilderBase.test_get_step_name",
        "test_get_step_name",
        "TestStepBuilderBase.test_generate_job_name",
        "test_generate_job_name",
        "TestStepBuilderBase.test_get_property_path",
        "test_get_property_path",
        "TestStepBuilderBase.test_get_all_property_paths",
        "test_get_all_property_paths",
        "TestStepBuilderBase.test_safe_logging_methods",
        "test_safe_logging_methods",
        "TestStepBuilderBase.test_get_cache_config",
        "test_get_cache_config",
        "TestStepBuilderBase.test_get_environment_variables_no_contract",
        "test_get_environment_variables_no_contract",
        "TestStepBuilderBase.test_get_environment_variables_with_contract",
        "test_get_environment_variables_with_contract",
        "TestStepBuilderBase.test_get_job_arguments_no_contract",
        "test_get_job_arguments_no_contract",
        "TestStepBuilderBase.test_get_job_arguments_with_contract",
        "test_get_job_arguments_with_contract",
        "TestStepBuilderBase.test_get_required_dependencies",
        "test_get_required_dependencies",
        "TestStepBuilderBase.test_get_optional_dependencies",
        "test_get_optional_dependencies",
        "TestStepBuilderBase.test_get_outputs",
        "test_get_outputs",
        "TestStepBuilderBase.test_get_context_name",
        "test_get_context_name",
        "TestStepBuilderBase.test_abstract_methods_must_be_implemented",
        "test_abstract_methods_must_be_implemented",
        "TestStepBuilderBase.test_region_mapping",
        "test_region_mapping",
        "TestStepBuilderBase.test_step_names_class_variable",
        "test_step_names_class_variable",
        "TestStepBuilderBase.test_common_properties_class_variable",
        "test_common_properties_class_variable",
        "TestStepBuilderBase.test_set_execution_prefix",
        "test_set_execution_prefix",
        "TestStepBuilderBase.test_get_base_output_path_with_execution_prefix",
        "test_get_base_output_path_with_execution_prefix",
        "TestStepBuilderBase.test_get_base_output_path_fallback_to_config",
        "test_get_base_output_path_fallback_to_config",
        "TestStepBuilderBase.test_execution_prefix_initialization",
        "test_execution_prefix_initialization",
        "__init__",
        "validate_configuration",
        "_get_inputs",
        "_get_outputs",
        "create_step",
        "config",
        "mock_session",
        "role",
        "mock_registry_manager",
        "mock_dependency_resolver",
        "mock_spec",
        "test_init_with_required_params",
        "test_init_with_optional_params",
        "test_invalid_region_raises_error",
        "test_sanitize_name_for_sagemaker",
        "test_get_step_name",
        "test_generate_job_name",
        "test_get_property_path",
        "test_get_all_property_paths",
        "test_safe_logging_methods",
        "test_get_cache_config",
        "test_get_environment_variables_no_contract",
        "test_get_environment_variables_with_contract",
        "test_get_job_arguments_no_contract",
        "test_get_job_arguments_with_contract",
        "test_get_required_dependencies",
        "test_get_optional_dependencies",
        "test_get_outputs",
        "test_get_context_name",
        "test_abstract_methods_must_be_implemented",
        "test_region_mapping",
        "test_step_names_class_variable",
        "test_common_properties_class_variable",
        "test_set_execution_prefix",
        "test_get_base_output_path_with_execution_prefix",
        "test_get_base_output_path_fallback_to_config",
        "test_execution_prefix_initialization"
      ],
      "core/base/test_specification_base.py": [
        "TestOutputSpec.test_init_with_required_fields",
        "test_init_with_required_fields",
        "TestOutputSpec.test_init_with_optional_fields",
        "test_init_with_optional_fields",
        "TestOutputSpec.test_matches_name_or_alias",
        "test_matches_name_or_alias",
        "TestDependencySpec.test_init_with_required_fields",
        "test_init_with_required_fields",
        "TestDependencySpec.test_init_with_optional_fields",
        "test_init_with_optional_fields",
        "TestDependencySpec.test_matches_name_or_alias",
        "test_matches_name_or_alias",
        "TestValidationResult.test_init_valid",
        "test_init_valid",
        "TestValidationResult.test_init_invalid_with_errors",
        "test_init_invalid_with_errors",
        "TestValidationResult.test_add_error",
        "test_add_error",
        "TestValidationResult.test_add_warning",
        "test_add_warning",
        "TestAlignmentResult.test_init_valid",
        "test_init_valid",
        "TestAlignmentResult.test_init_invalid_with_details",
        "test_init_invalid_with_details",
        "TestStepSpecification.output_spec",
        "output_spec",
        "TestStepSpecification.dependency_spec",
        "dependency_spec",
        "TestStepSpecification.spec_data",
        "spec_data",
        "TestStepSpecification.test_init_with_required_fields",
        "test_init_with_required_fields",
        "TestStepSpecification.test_init_with_script_contract",
        "test_init_with_script_contract",
        "TestStepSpecification.test_get_output_by_name_or_alias",
        "test_get_output_by_name_or_alias",
        "TestStepSpecification.test_get_dependency",
        "test_get_dependency",
        "TestStepSpecification.test_validate_basic",
        "test_validate_basic",
        "TestStepSpecification.test_validate_empty_step_type",
        "test_validate_empty_step_type",
        "TestStepSpecification.test_validate_duplicate_output_names",
        "test_validate_duplicate_output_names",
        "TestStepSpecification.test_validate_contract_alignment_no_contract",
        "test_validate_contract_alignment_no_contract",
        "TestStepSpecification.test_validate_contract_alignment_with_contract",
        "test_validate_contract_alignment_with_contract",
        "TestStepSpecification.test_validate_contract_alignment_missing_inputs",
        "test_validate_contract_alignment_missing_inputs",
        "TestStepSpecification.test_validate_contract_alignment_missing_outputs",
        "test_validate_contract_alignment_missing_outputs",
        "TestStepSpecification.test_list_required_dependencies",
        "test_list_required_dependencies",
        "TestStepSpecification.test_list_optional_dependencies",
        "test_list_optional_dependencies",
        "TestStepSpecification.test_list_all_output_names",
        "test_list_all_output_names",
        "test_init_with_required_fields",
        "test_init_with_optional_fields",
        "test_matches_name_or_alias",
        "test_init_with_required_fields",
        "test_init_with_optional_fields",
        "test_matches_name_or_alias",
        "test_init_valid",
        "test_init_invalid_with_errors",
        "test_add_error",
        "test_add_warning",
        "test_init_valid",
        "test_init_invalid_with_details",
        "output_spec",
        "dependency_spec",
        "spec_data",
        "test_init_with_required_fields",
        "test_init_with_script_contract",
        "test_get_output_by_name_or_alias",
        "test_get_dependency",
        "test_validate_basic",
        "test_validate_empty_step_type",
        "test_validate_duplicate_output_names",
        "test_validate_contract_alignment_no_contract",
        "test_validate_contract_alignment_with_contract",
        "test_validate_contract_alignment_missing_inputs",
        "test_validate_contract_alignment_missing_outputs",
        "test_list_required_dependencies",
        "test_list_optional_dependencies",
        "test_list_all_output_names"
      ],
      "core/base/test_get_script_contract_simple.py": [
        "test_step_name_derivation",
        "test_step_catalog_contract_discovery",
        "test_registry_integration",
        "main"
      ]
    },
    "likely_tested_functions": [
      "PipelineTemplateBase.__init__",
      "__init__",
      "PipelineTemplateBase._load_configs",
      "_load_configs",
      "PipelineTemplateBase._get_base_config",
      "_get_base_config",
      "PipelineTemplateBase._initialize_components",
      "_initialize_components",
      "PipelineTemplateBase._validate_configuration",
      "_validate_configuration",
      "PipelineTemplateBase._create_pipeline_dag",
      "_create_pipeline_dag",
      "PipelineTemplateBase._create_config_map",
      "_create_config_map",
      "PipelineTemplateBase._create_step_builder_map",
      "_create_step_builder_map",
      "PipelineTemplateBase.set_pipeline_parameters",
      "set_pipeline_parameters",
      "PipelineTemplateBase._get_pipeline_parameters",
      "_get_pipeline_parameters",
      "PipelineTemplateBase.generate_pipeline",
      "generate_pipeline",
      "PipelineTemplateBase._get_pipeline_name",
      "_get_pipeline_name",
      "PipelineTemplateBase._store_pipeline_metadata",
      "_store_pipeline_metadata",
      "PipelineTemplateBase.create_with_components",
      "create_with_components",
      "PipelineTemplateBase.build_with_context",
      "build_with_context",
      "PipelineTemplateBase.build_in_thread",
      "build_in_thread",
      "__init__",
      "_load_configs",
      "_get_base_config",
      "_initialize_components",
      "_validate_configuration",
      "_create_pipeline_dag",
      "_create_config_map",
      "_create_step_builder_map",
      "set_pipeline_parameters",
      "_get_pipeline_parameters",
      "generate_pipeline",
      "_get_pipeline_name",
      "_store_pipeline_metadata",
      "create_with_components",
      "build_with_context",
      "build_in_thread",
      "safe_value_for_logging",
      "PipelineAssembler.__init__",
      "__init__",
      "PipelineAssembler._initialize_step_builders",
      "_initialize_step_builders",
      "PipelineAssembler._propagate_messages",
      "_propagate_messages",
      "PipelineAssembler._generate_outputs",
      "_generate_outputs",
      "PipelineAssembler._instantiate_step",
      "_instantiate_step",
      "PipelineAssembler.create_with_components",
      "create_with_components",
      "PipelineAssembler._get_registry_manager",
      "_get_registry_manager",
      "PipelineAssembler._get_dependency_resolver",
      "_get_dependency_resolver",
      "PipelineAssembler.generate_pipeline",
      "generate_pipeline",
      "__init__",
      "_initialize_step_builders",
      "_propagate_messages",
      "_generate_outputs",
      "_instantiate_step",
      "create_with_components",
      "_get_registry_manager",
      "_get_dependency_resolver",
      "generate_pipeline",
      "HybridResolutionMetrics.__init__",
      "__init__",
      "HybridResolutionMetrics.record_strategy_1_success",
      "HybridResolutionMetrics.record_strategy_2_success",
      "HybridResolutionMetrics.record_failure",
      "HybridResolutionMetrics.get_metrics",
      "HybridResolutionConfig.is_hybrid_resolution_enabled",
      "HybridResolutionConfig.get_hybrid_resolution_mode",
      "HybridPathResolver.__init__",
      "__init__",
      "HybridPathResolver.resolve_path",
      "HybridPathResolver._package_location_discovery",
      "HybridPathResolver._working_directory_discovery",
      "_working_directory_discovery",
      "resolve_hybrid_path",
      "__init__",
      "__init__",
      "_working_directory_discovery",
      "SpecificationRegistry.__init__",
      "__init__",
      "SpecificationRegistry.register",
      "register",
      "SpecificationRegistry.get_specification",
      "get_specification",
      "SpecificationRegistry.get_specifications_by_type",
      "get_specifications_by_type",
      "SpecificationRegistry.list_step_names",
      "SpecificationRegistry.list_step_types",
      "SpecificationRegistry.find_compatible_outputs",
      "find_compatible_outputs",
      "SpecificationRegistry._are_compatible",
      "SpecificationRegistry._calculate_compatibility_score",
      "SpecificationRegistry.__repr__",
      "__init__",
      "register",
      "get_specification",
      "get_specifications_by_type",
      "find_compatible_outputs",
      "RegistryManager.__init__",
      "__init__",
      "RegistryManager._get_hybrid_manager",
      "RegistryManager._get_workspace_aware_context_name",
      "RegistryManager.get_registry",
      "get_registry",
      "RegistryManager.list_contexts",
      "list_contexts",
      "RegistryManager.clear_context",
      "clear_context",
      "RegistryManager.clear_all_contexts",
      "clear_all_contexts",
      "RegistryManager.get_context_stats",
      "get_context_stats",
      "RegistryManager.__repr__",
      "get_registry",
      "list_contexts",
      "clear_context",
      "get_context_stats",
      "get_pipeline_registry",
      "get_default_registry",
      "__init__",
      "get_registry",
      "list_contexts",
      "clear_context",
      "clear_all_contexts",
      "get_context_stats",
      "create_pipeline_components",
      "get_thread_components",
      "dependency_resolution_context",
      "UnifiedDependencyResolver.__init__",
      "__init__",
      "UnifiedDependencyResolver.register_specification",
      "register_specification",
      "__init__",
      "register_specification",
      "PropertyReference.validate_step_name",
      "PropertyReference.to_sagemaker_property",
      "to_sagemaker_property",
      "PropertyReference.to_runtime_property",
      "to_runtime_property",
      "PropertyReference._get_property_value",
      "_get_property_value",
      "PropertyReference._parse_property_path",
      "_parse_property_path",
      "PropertyReference.__str__",
      "__str__",
      "PropertyReference.__repr__",
      "to_sagemaker_property",
      "to_runtime_property",
      "_get_property_value",
      "_parse_property_path",
      "__str__",
      "SemanticMatcher.__init__",
      "__init__",
      "SemanticMatcher.calculate_similarity",
      "calculate_similarity",
      "SemanticMatcher.calculate_similarity_with_aliases",
      "calculate_similarity_with_aliases",
      "SemanticMatcher._normalize_name",
      "SemanticMatcher._calculate_string_similarity",
      "SemanticMatcher._calculate_token_similarity",
      "SemanticMatcher._calculate_semantic_similarity",
      "SemanticMatcher._calculate_substring_similarity",
      "SemanticMatcher._are_synonyms",
      "SemanticMatcher.find_best_matches",
      "find_best_matches",
      "SemanticMatcher.explain_similarity",
      "__init__",
      "calculate_similarity",
      "calculate_similarity_with_aliases",
      "find_best_matches",
      "ConfigFieldTierRegistryAdapter.get_tier",
      "get_tier",
      "ConfigFieldTierRegistryAdapter.register_field",
      "register_field",
      "ConfigFieldTierRegistryAdapter.register_fields",
      "register_fields",
      "ConfigFieldTierRegistryAdapter.get_fields_by_tier",
      "get_fields_by_tier",
      "ConfigFieldTierRegistryAdapter.reset_to_defaults",
      "reset_to_defaults",
      "get_tier",
      "register_field",
      "register_fields",
      "get_fields_by_tier",
      "reset_to_defaults",
      "StepCatalogAwareConfigFieldCategorizer.__init__",
      "__init__",
      "StepCatalogAwareConfigFieldCategorizer._categorize_field",
      "_categorize_field",
      "__init__",
      "_categorize_field",
      "ConfigMerger.__init__",
      "__init__",
      "ConfigMerger.merge",
      "merge",
      "ConfigMerger._verify_merged_output",
      "_verify_merged_output",
      "ConfigMerger._generate_step_name",
      "_generate_step_name",
      "ConfigMerger._check_mutual_exclusivity",
      "_check_mutual_exclusivity",
      "ConfigMerger._check_special_fields_placement",
      "_check_special_fields_placement",
      "ConfigMerger._check_required_fields",
      "ConfigMerger.save",
      "save",
      "ConfigMerger.load",
      "load",
      "ConfigMerger.merge_with_direction",
      "merge_with_direction",
      "load_configs",
      "__init__",
      "merge",
      "_verify_merged_output",
      "_generate_step_name",
      "_check_mutual_exclusivity",
      "_check_special_fields_placement",
      "save",
      "load",
      "merge_with_direction",
      "TypeAwareConfigSerializer.__init__",
      "__init__",
      "TypeAwareConfigSerializer.serialize",
      "serialize",
      "TypeAwareConfigSerializer.deserialize",
      "deserialize",
      "TypeAwareConfigSerializer.generate_step_name",
      "generate_step_name",
      "serialize_config",
      "__init__",
      "serialize",
      "deserialize",
      "generate_step_name",
      "build_complete_config_classes",
      "SimpleTierAwareTracker.__init__",
      "__init__",
      "SimpleTierAwareTracker.reset",
      "reset",
      "UnifiedConfigManager.__init__",
      "__init__",
      "UnifiedConfigManager.step_catalog",
      "step_catalog",
      "__init__",
      "reset",
      "__init__",
      "step_catalog",
      "ConfigClassDiscoveryCache.__init__",
      "__init__",
      "ConfigClassDiscoveryCache.get",
      "get",
      "ConfigClassDiscoveryCache.set",
      "set",
      "PerformanceOptimizer.__init__",
      "__init__",
      "__init__",
      "get",
      "set",
      "__init__",
      "decorator",
      "ConfigFieldCategorizer.__init__",
      "__init__",
      "ConfigFieldCategorizer._collect_field_info",
      "ConfigFieldCategorizer._is_special_field",
      "_is_special_field",
      "ConfigFieldCategorizer._is_likely_static",
      "_is_likely_static",
      "ConfigFieldCategorizer._categorize_fields",
      "_categorize_fields",
      "ConfigFieldCategorizer._categorize_field",
      "_categorize_field",
      "ConfigFieldCategorizer._place_field",
      "_place_field",
      "ConfigFieldCategorizer.get_category_for_field",
      "ConfigFieldCategorizer.get_categorized_fields",
      "get_categorized_fields",
      "ConfigFieldCategorizer.get_field_sources",
      "ConfigFieldCategorizer.print_categorization_stats",
      "__init__",
      "_is_special_field",
      "_is_likely_static",
      "_categorize_fields",
      "_categorize_field",
      "_place_field",
      "get_categorized_fields",
      "SimplifiedCircularReferenceTracker.__init__",
      "__init__",
      "SimplifiedCircularReferenceTracker.reset",
      "reset",
      "__init__",
      "reset",
      "generate_random_word",
      "validate_pipeline_name",
      "sanitize_pipeline_name",
      "generate_pipeline_name",
      "compile_dag_to_pipeline",
      "PipelineDAGCompiler.__init__",
      "__init__",
      "PipelineDAGCompiler.validate_dag_compatibility",
      "validate_dag_compatibility",
      "PipelineDAGCompiler.preview_resolution",
      "preview_resolution",
      "PipelineDAGCompiler.compile",
      "compile",
      "PipelineDAGCompiler.compile_with_report",
      "compile_with_report",
      "PipelineDAGCompiler.create_template",
      "create_template",
      "PipelineDAGCompiler.get_supported_step_types",
      "get_supported_step_types",
      "PipelineDAGCompiler.validate_config_file",
      "validate_config_file",
      "PipelineDAGCompiler.get_last_template",
      "get_last_template",
      "__init__",
      "validate_dag_compatibility",
      "preview_resolution",
      "compile",
      "compile_with_report",
      "create_template",
      "get_supported_step_types",
      "validate_config_file",
      "get_last_template",
      "DynamicPipelineTemplate.__init__",
      "__init__",
      "DynamicPipelineTemplate._detect_config_classes",
      "_detect_config_classes",
      "DynamicPipelineTemplate._create_pipeline_dag",
      "_create_pipeline_dag",
      "DynamicPipelineTemplate._create_config_map",
      "_create_config_map",
      "DynamicPipelineTemplate._create_step_builder_map",
      "_create_step_builder_map",
      "DynamicPipelineTemplate._validate_configuration",
      "_validate_configuration",
      "DynamicPipelineTemplate.get_resolution_preview",
      "get_resolution_preview",
      "DynamicPipelineTemplate._store_pipeline_metadata",
      "_store_pipeline_metadata",
      "DynamicPipelineTemplate.get_step_catalog_stats",
      "DynamicPipelineTemplate.validate_before_build",
      "DynamicPipelineTemplate.get_step_dependencies",
      "get_step_dependencies",
      "DynamicPipelineTemplate.get_execution_order",
      "__init__",
      "_detect_config_classes",
      "_create_pipeline_dag",
      "_create_config_map",
      "_create_step_builder_map",
      "_validate_configuration",
      "get_resolution_preview",
      "_store_pipeline_metadata",
      "get_step_dependencies",
      "ConfigurationError.__init__",
      "__init__",
      "ConfigurationError.__str__",
      "__str__",
      "AmbiguityError.__init__",
      "__init__",
      "AmbiguityError.__str__",
      "__str__",
      "ValidationError.__init__",
      "__init__",
      "ValidationError.__str__",
      "__str__",
      "ResolutionError.__init__",
      "__init__",
      "ResolutionError.__str__",
      "__str__",
      "__init__",
      "__str__",
      "__init__",
      "__str__",
      "__init__",
      "__str__",
      "__init__",
      "__str__",
      "ValidationResult.summary",
      "summary",
      "ValidationResult.detailed_report",
      "detailed_report",
      "ResolutionPreview.display",
      "display",
      "ConversionReport.summary",
      "summary",
      "ConversionReport.detailed_report",
      "detailed_report",
      "ValidationEngine.__init__",
      "__init__",
      "ValidationEngine.validate_dag_compatibility",
      "validate_dag_compatibility",
      "summary",
      "detailed_report",
      "display",
      "summary",
      "detailed_report",
      "__init__",
      "validate_dag_compatibility",
      "DependencyType.__eq__",
      "DependencyType.__hash__",
      "NodeType.__eq__",
      "NodeType.__hash__",
      "ValidationResult.success",
      "success",
      "ValidationResult.error",
      "error",
      "ValidationResult.combine",
      "combine",
      "ValidationResult.add_error",
      "add_error",
      "ValidationResult.add_warning",
      "add_warning",
      "AlignmentResult.success",
      "success",
      "AlignmentResult.error",
      "error",
      "ScriptContract.validate_entry_point",
      "validate_entry_point",
      "ScriptContract.validate_input_paths",
      "validate_input_paths",
      "ScriptContract.validate_output_paths",
      "validate_output_paths",
      "ScriptContract.validate_arguments",
      "validate_arguments",
      "ScriptContract.validate_implementation",
      "validate_implementation",
      "ScriptContract._validate_against_analysis",
      "ScriptAnalyzer.__init__",
      "__init__",
      "ScriptAnalyzer.ast_tree",
      "ast_tree",
      "ScriptAnalyzer.get_input_paths",
      "get_input_paths",
      "ScriptAnalyzer.get_output_paths",
      "get_output_paths",
      "ScriptAnalyzer.get_env_var_usage",
      "get_env_var_usage",
      "ScriptAnalyzer.get_argument_usage",
      "get_argument_usage",
      "success",
      "error",
      "combine",
      "add_error",
      "add_warning",
      "success",
      "error",
      "validate_entry_point",
      "validate_input_paths",
      "validate_output_paths",
      "validate_arguments",
      "validate_implementation",
      "__init__",
      "ast_tree",
      "get_input_paths",
      "get_output_paths",
      "get_env_var_usage",
      "get_argument_usage",
      "DependencySpec.validate_logical_name",
      "DependencySpec.validate_dependency_type",
      "DependencySpec.validate_compatible_sources",
      "DependencySpec.validate_semantic_keywords",
      "DependencySpec.matches_name_or_alias",
      "matches_name_or_alias",
      "OutputSpec.validate_logical_name",
      "OutputSpec.validate_output_type",
      "OutputSpec.validate_aliases",
      "OutputSpec.validate_property_path",
      "OutputSpec.validate_aliases_no_conflict",
      "OutputSpec.matches_name_or_alias",
      "matches_name_or_alias",
      "StepSpecification.__init__",
      "__init__",
      "StepSpecification.validate_step_type",
      "StepSpecification.validate_node_type",
      "StepSpecification.validate_node_type_constraints",
      "StepSpecification._validate_output_aliases",
      "StepSpecification.get_dependency",
      "get_dependency",
      "StepSpecification.get_output",
      "get_output",
      "StepSpecification.get_output_by_name_or_alias",
      "get_output_by_name_or_alias",
      "StepSpecification.list_all_output_names",
      "list_all_output_names",
      "StepSpecification.list_required_dependencies",
      "list_required_dependencies",
      "StepSpecification.list_optional_dependencies",
      "list_optional_dependencies",
      "StepSpecification.list_dependencies_by_type",
      "StepSpecification.list_outputs_by_type",
      "StepSpecification.validate_specification",
      "StepSpecification.validate_contract_alignment",
      "validate_contract_alignment",
      "StepSpecification.validate_script_compliance",
      "StepSpecification.__repr__",
      "StepSpecification.model_validate",
      "matches_name_or_alias",
      "matches_name_or_alias",
      "__init__",
      "get_dependency",
      "get_output",
      "get_output_by_name_or_alias",
      "list_all_output_names",
      "list_required_dependencies",
      "list_optional_dependencies",
      "validate_contract_alignment",
      "BasePipelineConfig.aws_region",
      "BasePipelineConfig.pipeline_name",
      "pipeline_name",
      "BasePipelineConfig.pipeline_description",
      "BasePipelineConfig.pipeline_s3_loc",
      "BasePipelineConfig.effective_source_dir",
      "effective_source_dir",
      "BasePipelineConfig.model_dump",
      "model_dump",
      "BasePipelineConfig.__str__",
      "__str__",
      "BasePipelineConfig._validate_custom_region",
      "BasePipelineConfig.initialize_derived_fields",
      "BasePipelineConfig.step_catalog",
      "step_catalog",
      "BasePipelineConfig._detect_workspace_dirs",
      "BasePipelineConfig._derive_step_name",
      "BasePipelineConfig.get_script_contract",
      "get_script_contract",
      "BasePipelineConfig.script_contract",
      "script_contract",
      "BasePipelineConfig.get_script_path",
      "get_script_path",
      "BasePipelineConfig.resolve_hybrid_path",
      "resolve_hybrid_path",
      "BasePipelineConfig.resolved_source_dir",
      "resolved_source_dir",
      "BasePipelineConfig.get_step_name",
      "get_step_name",
      "BasePipelineConfig.get_config_class_name",
      "get_config_class_name",
      "BasePipelineConfig._get_step_registry",
      "BasePipelineConfig.from_base_config",
      "from_base_config",
      "BasePipelineConfig.categorize_fields",
      "categorize_fields",
      "BasePipelineConfig.print_config",
      "print_config",
      "BasePipelineConfig.get_public_init_fields",
      "get_public_init_fields",
      "pipeline_name",
      "effective_source_dir",
      "model_dump",
      "__str__",
      "step_catalog",
      "get_script_contract",
      "script_contract",
      "get_script_path",
      "resolve_hybrid_path",
      "resolved_source_dir",
      "get_step_name",
      "get_config_class_name",
      "from_base_config",
      "categorize_fields",
      "print_config",
      "get_public_init_fields",
      "safe_value_for_logging",
      "StepBuilderBase.STEP_NAMES",
      "STEP_NAMES",
      "StepBuilderBase._get_workspace_context",
      "StepBuilderBase.__init__",
      "__init__",
      "StepBuilderBase._sanitize_name_for_sagemaker",
      "_sanitize_name_for_sagemaker",
      "StepBuilderBase._get_step_name",
      "_get_step_name",
      "StepBuilderBase._generate_job_name",
      "_generate_job_name",
      "StepBuilderBase.get_property_path",
      "get_property_path",
      "StepBuilderBase.get_all_property_paths",
      "get_all_property_paths",
      "StepBuilderBase.log_info",
      "StepBuilderBase.log_debug",
      "StepBuilderBase.log_warning",
      "StepBuilderBase.log_error",
      "StepBuilderBase._get_cache_config",
      "_get_cache_config",
      "StepBuilderBase._get_environment_variables",
      "_get_environment_variables",
      "StepBuilderBase._get_job_arguments",
      "_get_job_arguments",
      "StepBuilderBase.set_execution_prefix",
      "set_execution_prefix",
      "StepBuilderBase._get_base_output_path",
      "_get_base_output_path",
      "StepBuilderBase.validate_configuration",
      "validate_configuration",
      "StepBuilderBase.get_required_dependencies",
      "get_required_dependencies",
      "StepBuilderBase.get_optional_dependencies",
      "get_optional_dependencies",
      "StepBuilderBase.get_outputs",
      "get_outputs",
      "StepBuilderBase._get_inputs",
      "_get_inputs",
      "StepBuilderBase._get_outputs",
      "_get_outputs",
      "StepBuilderBase._get_context_name",
      "_get_context_name",
      "StepBuilderBase._get_registry_manager",
      "_get_registry_manager",
      "StepBuilderBase._get_registry",
      "_get_registry",
      "StepBuilderBase._get_dependency_resolver",
      "_get_dependency_resolver",
      "StepBuilderBase.extract_inputs_from_dependencies",
      "StepBuilderBase._enhance_dependency_steps_with_specs",
      "StepBuilderBase.create_step",
      "create_step",
      "STEP_NAMES",
      "__init__",
      "_sanitize_name_for_sagemaker",
      "_get_step_name",
      "_generate_job_name",
      "get_property_path",
      "get_all_property_paths",
      "_get_cache_config",
      "_get_environment_variables",
      "_get_job_arguments",
      "set_execution_prefix",
      "_get_base_output_path",
      "validate_configuration",
      "get_required_dependencies",
      "get_optional_dependencies",
      "get_outputs",
      "_get_inputs",
      "_get_outputs",
      "_get_context_name",
      "_get_registry_manager",
      "_get_registry",
      "_get_dependency_resolver",
      "create_step",
      "ModelHyperparameters.input_tab_dim",
      "ModelHyperparameters.num_classes",
      "ModelHyperparameters.is_binary",
      "ModelHyperparameters.validate_dimensions",
      "ModelHyperparameters.categorize_fields",
      "categorize_fields",
      "ModelHyperparameters.__str__",
      "__str__",
      "ModelHyperparameters.print_hyperparam",
      "print_hyperparam",
      "ModelHyperparameters.get_public_init_fields",
      "get_public_init_fields",
      "ModelHyperparameters.from_base_hyperparam",
      "from_base_hyperparam",
      "ModelHyperparameters.get_config",
      "get_config",
      "ModelHyperparameters.serialize_config",
      "serialize_config",
      "categorize_fields",
      "__str__",
      "print_hyperparam",
      "get_public_init_fields",
      "from_base_hyperparam",
      "get_config",
      "serialize_config"
    ],
    "likely_untested_functions": [
      "record_strategy_1_success",
      "record_strategy_2_success",
      "record_failure",
      "get_metrics",
      "is_hybrid_resolution_enabled",
      "get_hybrid_resolution_mode",
      "get_hybrid_resolution_metrics",
      "resolve_path",
      "_package_location_discovery",
      "record_strategy_1_success",
      "record_strategy_2_success",
      "record_failure",
      "get_metrics",
      "is_hybrid_resolution_enabled",
      "get_hybrid_resolution_mode",
      "resolve_path",
      "_package_location_discovery",
      "list_step_names",
      "list_step_types",
      "_are_compatible",
      "_calculate_compatibility_score",
      "__repr__",
      "list_step_names",
      "list_step_types",
      "_are_compatible",
      "_calculate_compatibility_score",
      "__repr__",
      "_get_hybrid_manager",
      "_get_workspace_aware_context_name",
      "__repr__",
      "integrate_with_pipeline_builder",
      "_get_hybrid_manager",
      "_get_workspace_aware_context_name",
      "__repr__",
      "new_init",
      "UnifiedDependencyResolver.resolve_all_dependencies",
      "resolve_all_dependencies",
      "UnifiedDependencyResolver.resolve_step_dependencies",
      "resolve_step_dependencies",
      "UnifiedDependencyResolver.resolve_with_scoring",
      "resolve_with_scoring",
      "UnifiedDependencyResolver._get_all_candidates_with_scores",
      "_get_all_candidates_with_scores",
      "UnifiedDependencyResolver._get_score_breakdown",
      "_get_score_breakdown",
      "UnifiedDependencyResolver._generate_resolution_details",
      "_generate_resolution_details",
      "UnifiedDependencyResolver._resolve_single_dependency",
      "_resolve_single_dependency",
      "UnifiedDependencyResolver._calculate_compatibility",
      "_calculate_compatibility",
      "UnifiedDependencyResolver._are_types_compatible",
      "_are_types_compatible",
      "UnifiedDependencyResolver._are_data_types_compatible",
      "_are_data_types_compatible",
      "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
      "_normalize_step_type_for_compatibility",
      "UnifiedDependencyResolver._calculate_keyword_match",
      "_calculate_keyword_match",
      "UnifiedDependencyResolver.get_resolution_report",
      "get_resolution_report",
      "UnifiedDependencyResolver.clear_cache",
      "clear_cache",
      "create_dependency_resolver",
      "resolve_all_dependencies",
      "resolve_step_dependencies",
      "resolve_with_scoring",
      "_get_all_candidates_with_scores",
      "_get_score_breakdown",
      "_generate_resolution_details",
      "_resolve_single_dependency",
      "_calculate_compatibility",
      "_are_types_compatible",
      "_are_data_types_compatible",
      "_normalize_step_type_for_compatibility",
      "_calculate_keyword_match",
      "get_resolution_report",
      "clear_cache",
      "validate_step_name",
      "__repr__",
      "validate_step_name",
      "__repr__",
      "_normalize_name",
      "_calculate_string_similarity",
      "_calculate_token_similarity",
      "_calculate_semantic_similarity",
      "_calculate_substring_similarity",
      "_are_synonyms",
      "explain_similarity",
      "_normalize_name",
      "_calculate_string_similarity",
      "_calculate_token_similarity",
      "_calculate_semantic_similarity",
      "_calculate_substring_similarity",
      "_are_synonyms",
      "explain_similarity",
      "StepCatalogAwareConfigFieldCategorizer._initialize_enhanced_mappings",
      "_initialize_enhanced_mappings",
      "StepCatalogAwareConfigFieldCategorizer._get_workspace_field_mappings",
      "_get_workspace_field_mappings",
      "StepCatalogAwareConfigFieldCategorizer._get_framework_field_mappings",
      "_get_framework_field_mappings",
      "StepCatalogAwareConfigFieldCategorizer._categorize_field_with_step_catalog_context",
      "_categorize_field_with_step_catalog_context",
      "StepCatalogAwareConfigFieldCategorizer.get_enhanced_categorization_info",
      "get_enhanced_categorization_info",
      "StepCatalogAwareConfigFieldCategorizer.categorize_with_enhanced_metadata",
      "categorize_with_enhanced_metadata",
      "create_step_catalog_aware_categorizer",
      "_initialize_enhanced_mappings",
      "_get_workspace_field_mappings",
      "_get_framework_field_mappings",
      "_categorize_field_with_step_catalog_context",
      "get_enhanced_categorization_info",
      "categorize_with_enhanced_metadata",
      "_check_required_fields",
      "merge_and_save_configs",
      "_check_required_fields",
      "TypeAwareConfigSerializer._deserialize_model",
      "_deserialize_model",
      "TypeAwareConfigSerializer._get_class_by_name",
      "_get_class_by_name",
      "TypeAwareConfigSerializer._generate_step_name_fallback",
      "_generate_step_name_fallback",
      "deserialize_config",
      "_deserialize_model",
      "_get_class_by_name",
      "_generate_step_name_fallback",
      "_map_region_to_aws_region",
      "_create_field_schema",
      "_format_edx_manifest_key",
      "_create_edx_manifest",
      "_create_edx_manifest_from_key",
      "_generate_transform_sql",
      "_get_all_fields",
      "create_cradle_data_load_config",
      "create_training_and_calibration_configs",
      "SimpleTierAwareTracker.enter_object",
      "enter_object",
      "SimpleTierAwareTracker.exit_object",
      "exit_object",
      "UnifiedConfigManager.get_config_classes",
      "get_config_classes",
      "UnifiedConfigManager.get_field_tiers",
      "get_field_tiers",
      "UnifiedConfigManager.serialize_with_tier_awareness",
      "serialize_with_tier_awareness",
      "UnifiedConfigManager._serialize_recursive",
      "_serialize_recursive",
      "UnifiedConfigManager._get_basic_config_classes",
      "_get_basic_config_classes",
      "UnifiedConfigManager._basic_field_categorization",
      "_basic_field_categorization",
      "get_unified_config_manager",
      "enter_object",
      "exit_object",
      "get_config_classes",
      "get_field_tiers",
      "serialize_with_tier_awareness",
      "_serialize_recursive",
      "_get_basic_config_classes",
      "_basic_field_categorization",
      "ConfigClassDiscoveryCache.invalidate",
      "invalidate",
      "ConfigClassDiscoveryCache.get_stats",
      "get_stats",
      "PerformanceOptimizer.cached_config_discovery",
      "cached_config_discovery",
      "PerformanceOptimizer.optimized_config_loading",
      "optimized_config_loading",
      "PerformanceOptimizer.optimized_serialization",
      "optimized_serialization",
      "PerformanceOptimizer.get_performance_stats",
      "get_performance_stats",
      "PerformanceOptimizer.clear_performance_stats",
      "clear_performance_stats",
      "PerformanceOptimizer.invalidate_cache",
      "invalidate_cache",
      "get_performance_optimizer",
      "performance_monitor",
      "cached_file_stat",
      "optimize_logging_for_production",
      "MemoryOptimizer.get_memory_usage",
      "get_memory_usage",
      "MemoryOptimizer.optimize_garbage_collection",
      "optimize_garbage_collection",
      "invalidate",
      "get_stats",
      "cached_config_discovery",
      "optimized_config_loading",
      "optimized_serialization",
      "get_performance_stats",
      "clear_performance_stats",
      "invalidate_cache",
      "get_memory_usage",
      "optimize_garbage_collection",
      "wrapper",
      "_collect_field_info",
      "get_category_for_field",
      "get_field_sources",
      "print_categorization_stats",
      "_collect_field_info",
      "get_category_for_field",
      "get_field_sources",
      "print_categorization_stats",
      "SimplifiedCircularReferenceTracker.enter_object",
      "enter_object",
      "SimplifiedCircularReferenceTracker.exit_object",
      "exit_object",
      "SimplifiedCircularReferenceTracker.get_current_path_str",
      "get_current_path_str",
      "SimplifiedCircularReferenceTracker._get_module_from_step_catalog",
      "_get_module_from_step_catalog",
      "SimplifiedCircularReferenceTracker._format_simple_cycle_error",
      "_format_simple_cycle_error",
      "enter_object",
      "exit_object",
      "get_current_path_str",
      "_get_module_from_step_catalog",
      "_format_simple_cycle_error",
      "get_step_catalog_stats",
      "validate_before_build",
      "get_execution_order",
      "get_step_catalog_stats",
      "validate_before_build",
      "get_execution_order",
      "__eq__",
      "__hash__",
      "__eq__",
      "__hash__",
      "__eq__",
      "__hash__",
      "__eq__",
      "__hash__",
      "_validate_against_analysis",
      "_validate_against_analysis",
      "validate_logical_name",
      "validate_dependency_type",
      "validate_compatible_sources",
      "validate_semantic_keywords",
      "validate_logical_name",
      "validate_output_type",
      "validate_aliases",
      "validate_property_path",
      "validate_aliases_no_conflict",
      "validate_step_type",
      "validate_node_type",
      "validate_node_type_constraints",
      "_validate_output_aliases",
      "list_dependencies_by_type",
      "list_outputs_by_type",
      "validate_specification",
      "validate_script_compliance",
      "__repr__",
      "model_validate",
      "validate_logical_name",
      "validate_dependency_type",
      "validate_compatible_sources",
      "validate_semantic_keywords",
      "validate_logical_name",
      "validate_output_type",
      "validate_aliases",
      "validate_property_path",
      "validate_aliases_no_conflict",
      "validate_step_type",
      "validate_node_type",
      "validate_node_type_constraints",
      "_validate_output_aliases",
      "list_dependencies_by_type",
      "list_outputs_by_type",
      "validate_specification",
      "validate_script_compliance",
      "__repr__",
      "model_validate",
      "aws_region",
      "pipeline_description",
      "pipeline_s3_loc",
      "_validate_custom_region",
      "initialize_derived_fields",
      "_detect_workspace_dirs",
      "_derive_step_name",
      "_get_step_registry",
      "aws_region",
      "pipeline_description",
      "pipeline_s3_loc",
      "_validate_custom_region",
      "initialize_derived_fields",
      "_detect_workspace_dirs",
      "_derive_step_name",
      "_get_step_registry",
      "_get_workspace_context",
      "log_info",
      "log_debug",
      "log_warning",
      "log_error",
      "extract_inputs_from_dependencies",
      "_enhance_dependency_steps_with_specs",
      "_get_workspace_context",
      "log_info",
      "log_debug",
      "log_warning",
      "log_error",
      "extract_inputs_from_dependencies",
      "_enhance_dependency_steps_with_specs",
      "input_tab_dim",
      "num_classes",
      "is_binary",
      "validate_dimensions",
      "input_tab_dim",
      "num_classes",
      "is_binary",
      "validate_dimensions"
    ]
  },
  "summary": {
    "component": "core",
    "coverage_percentage": 68.51664984863774,
    "total_functions": 991,
    "tested_functions": 679
  }
}