{
  "timestamp": "2025-09-07 20:13:58",
  "coverage_analysis": {
    "assembler": {
      "component": "assembler",
      "source_files": [
        "src/cursus/core/assembler/pipeline_template_base.py",
        "src/cursus/core/assembler/pipeline_assembler.py"
      ],
      "test_files": [
        "test/core/assembler/test_pipeline_builder_template.py",
        "test/core/assembler/test_pipeline_assembler.py"
      ],
      "total_source_functions": 75,
      "tested_functions": 67,
      "untested_functions": 8,
      "coverage_percentage": 89.33333333333333,
      "source_functions_by_file": {
        "src/cursus/core/assembler/pipeline_template_base.py": [
          "PipelineTemplateBase.__init__",
          "__init__",
          "PipelineTemplateBase._load_configs",
          "_load_configs",
          "PipelineTemplateBase._get_base_config",
          "_get_base_config",
          "PipelineTemplateBase._initialize_components",
          "_initialize_components",
          "PipelineTemplateBase._validate_configuration",
          "_validate_configuration",
          "PipelineTemplateBase._create_pipeline_dag",
          "_create_pipeline_dag",
          "PipelineTemplateBase._create_config_map",
          "_create_config_map",
          "PipelineTemplateBase._create_step_builder_map",
          "_create_step_builder_map",
          "PipelineTemplateBase._get_pipeline_parameters",
          "_get_pipeline_parameters",
          "PipelineTemplateBase.generate_pipeline",
          "generate_pipeline",
          "PipelineTemplateBase._get_pipeline_name",
          "_get_pipeline_name",
          "PipelineTemplateBase._store_pipeline_metadata",
          "_store_pipeline_metadata",
          "PipelineTemplateBase.create_with_components",
          "create_with_components",
          "PipelineTemplateBase.build_with_context",
          "build_with_context",
          "PipelineTemplateBase.build_in_thread",
          "build_in_thread",
          "PipelineTemplateBase.fill_execution_document",
          "fill_execution_document",
          "__init__",
          "_load_configs",
          "_get_base_config",
          "_initialize_components",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "_get_pipeline_parameters",
          "generate_pipeline",
          "_get_pipeline_name",
          "_store_pipeline_metadata",
          "create_with_components",
          "build_with_context",
          "build_in_thread",
          "fill_execution_document"
        ],
        "src/cursus/core/assembler/pipeline_assembler.py": [
          "PipelineAssembler.__init__",
          "__init__",
          "PipelineAssembler._initialize_step_builders",
          "_initialize_step_builders",
          "PipelineAssembler._propagate_messages",
          "_propagate_messages",
          "PipelineAssembler._generate_outputs",
          "_generate_outputs",
          "PipelineAssembler._instantiate_step",
          "_instantiate_step",
          "PipelineAssembler.create_with_components",
          "create_with_components",
          "PipelineAssembler._get_registry_manager",
          "_get_registry_manager",
          "PipelineAssembler._get_dependency_resolver",
          "_get_dependency_resolver",
          "PipelineAssembler.generate_pipeline",
          "generate_pipeline",
          "__init__",
          "_initialize_step_builders",
          "_propagate_messages",
          "_generate_outputs",
          "_instantiate_step",
          "create_with_components",
          "_get_registry_manager",
          "_get_dependency_resolver",
          "generate_pipeline"
        ]
      },
      "test_functions_by_file": {
        "test/core/assembler/test_pipeline_builder_template.py": [
          "MockBasePipelineConfig.get_step_name",
          "get_step_name",
          "ConcretePipelineTemplate._validate_configuration",
          "_validate_configuration",
          "ConcretePipelineTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "ConcretePipelineTemplate._create_config_map",
          "_create_config_map",
          "ConcretePipelineTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "TestPipelineTemplateBase.setUp",
          "setUp",
          "TestPipelineTemplateBase.tearDown",
          "tearDown",
          "TestPipelineTemplateBase.test_initialization",
          "test_initialization",
          "TestPipelineTemplateBase.test_initialization_with_provided_components",
          "test_initialization_with_provided_components",
          "TestPipelineTemplateBase.test_config_loading",
          "test_config_loading",
          "TestPipelineTemplateBase.test_base_config_validation",
          "test_base_config_validation",
          "TestPipelineTemplateBase.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineTemplateBase.test_pipeline_name_generation",
          "test_pipeline_name_generation",
          "TestPipelineTemplateBase.test_pipeline_name_explicit_override",
          "test_pipeline_name_explicit_override",
          "TestPipelineTemplateBase.test_store_pipeline_metadata",
          "test_store_pipeline_metadata",
          "TestPipelineTemplateBase.test_create_with_components_class_method",
          "test_create_with_components_class_method",
          "TestPipelineTemplateBase.test_build_with_context_class_method",
          "test_build_with_context_class_method",
          "TestPipelineTemplateBase.test_build_in_thread_class_method",
          "test_build_in_thread_class_method",
          "TestPipelineTemplateBase.test_fill_execution_document",
          "test_fill_execution_document",
          "TestPipelineTemplateBase.test_initialization_with_notebook_root",
          "test_initialization_with_notebook_root",
          "TestPipelineTemplateBase.test_initialization_default_notebook_root",
          "test_initialization_default_notebook_root",
          "TestPipelineTemplateBase.test_config_loading_error_handling",
          "test_config_loading_error_handling",
          "TestPipelineTemplateBase.test_pipeline_name_fallback_values",
          "test_pipeline_name_fallback_values",
          "TestPipelineTemplateBase.test_get_pipeline_parameters_default",
          "test_get_pipeline_parameters_default",
          "TestPipelineTemplateBase.test_store_pipeline_metadata_without_attributes",
          "test_store_pipeline_metadata_without_attributes",
          "TestPipelineTemplateBase.test_config_classes_validation",
          "test_config_classes_validation",
          "TestPipelineTemplateBase.test_initialization_partial_components",
          "test_initialization_partial_components",
          "TestPipelineAssembler.setUp",
          "setUp",
          "TestPipelineAssembler.tearDown",
          "tearDown",
          "TestPipelineAssembler.test_assembler_initialization",
          "test_assembler_initialization",
          "TestPipelineAssembler.test_assembler_validation_missing_configs",
          "test_assembler_validation_missing_configs",
          "TestPipelineAssembler.test_assembler_validation_missing_builders",
          "test_assembler_validation_missing_builders",
          "TestPipelineAssembler.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineAssembler.test_create_with_components_class_method",
          "test_create_with_components_class_method",
          "get_step_name",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "setUp",
          "tearDown",
          "test_initialization",
          "test_initialization_with_provided_components",
          "test_config_loading",
          "test_base_config_validation",
          "test_generate_pipeline",
          "test_pipeline_name_generation",
          "test_pipeline_name_explicit_override",
          "test_store_pipeline_metadata",
          "test_create_with_components_class_method",
          "test_build_with_context_class_method",
          "test_build_in_thread_class_method",
          "test_fill_execution_document",
          "test_initialization_with_notebook_root",
          "test_initialization_default_notebook_root",
          "test_config_loading_error_handling",
          "test_pipeline_name_fallback_values",
          "test_get_pipeline_parameters_default",
          "test_store_pipeline_metadata_without_attributes",
          "test_config_classes_validation",
          "test_initialization_partial_components",
          "setUp",
          "tearDown",
          "test_assembler_initialization",
          "test_assembler_validation_missing_configs",
          "test_assembler_validation_missing_builders",
          "test_generate_pipeline",
          "test_create_with_components_class_method",
          "InvalidTemplate._validate_configuration",
          "_validate_configuration",
          "InvalidTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "InvalidTemplate._create_config_map",
          "_create_config_map",
          "InvalidTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map"
        ],
        "test/core/assembler/test_pipeline_assembler.py": [
          "MockConfig.__init__",
          "__init__",
          "MockStepBuilder.__init__",
          "__init__",
          "MockStepBuilder.validate_configuration",
          "validate_configuration",
          "MockStepBuilder._get_inputs",
          "_get_inputs",
          "MockStepBuilder._get_outputs",
          "_get_outputs",
          "MockStepBuilder.create_step",
          "create_step",
          "TestPipelineAssembler.setUp",
          "setUp",
          "TestPipelineAssembler.test_init_success",
          "test_init_success",
          "TestPipelineAssembler.test_init_missing_configs",
          "test_init_missing_configs",
          "TestPipelineAssembler.test_init_missing_step_builders",
          "test_init_missing_step_builders",
          "TestPipelineAssembler.test_init_invalid_dag_edges",
          "test_init_invalid_dag_edges",
          "TestPipelineAssembler.test_initialize_step_builders",
          "test_initialize_step_builders",
          "TestPipelineAssembler.test_propagate_messages",
          "test_propagate_messages",
          "TestPipelineAssembler.test_generate_outputs",
          "test_generate_outputs",
          "TestPipelineAssembler.test_instantiate_step",
          "test_instantiate_step",
          "TestPipelineAssembler.test_generate_pipeline",
          "test_generate_pipeline",
          "TestPipelineAssembler.test_generate_pipeline_with_cycle",
          "test_generate_pipeline_with_cycle",
          "TestPipelineAssembler.test_create_with_components",
          "test_create_with_components",
          "TestPipelineAssembler.test_get_registry_manager",
          "test_get_registry_manager",
          "TestPipelineAssembler.test_get_dependency_resolver",
          "test_get_dependency_resolver",
          "TestPipelineAssembler.test_cradle_loading_requests_storage",
          "test_cradle_loading_requests_storage",
          "TestPipelineAssembler.test_pipeline_regeneration",
          "test_pipeline_regeneration",
          "TestPipelineAssembler.test_logging_integration",
          "test_logging_integration",
          "__init__",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "setUp",
          "test_init_success",
          "test_init_missing_configs",
          "test_init_missing_step_builders",
          "test_init_invalid_dag_edges",
          "test_initialize_step_builders",
          "test_propagate_messages",
          "test_generate_outputs",
          "test_instantiate_step",
          "test_generate_pipeline",
          "test_generate_pipeline_with_cycle",
          "test_create_with_components",
          "test_get_registry_manager",
          "test_get_dependency_resolver",
          "test_cradle_loading_requests_storage",
          "test_pipeline_regeneration",
          "test_logging_integration",
          "MockCradleBuilder.get_request_dict",
          "get_request_dict",
          "get_request_dict"
        ]
      },
      "likely_tested_functions": [
        "PipelineTemplateBase.__init__",
        "__init__",
        "PipelineTemplateBase._load_configs",
        "PipelineTemplateBase._get_base_config",
        "PipelineTemplateBase._initialize_components",
        "PipelineTemplateBase._validate_configuration",
        "_validate_configuration",
        "PipelineTemplateBase._create_pipeline_dag",
        "_create_pipeline_dag",
        "PipelineTemplateBase._create_config_map",
        "_create_config_map",
        "PipelineTemplateBase._create_step_builder_map",
        "_create_step_builder_map",
        "PipelineTemplateBase._get_pipeline_parameters",
        "_get_pipeline_parameters",
        "PipelineTemplateBase.generate_pipeline",
        "generate_pipeline",
        "PipelineTemplateBase._get_pipeline_name",
        "PipelineTemplateBase._store_pipeline_metadata",
        "_store_pipeline_metadata",
        "PipelineTemplateBase.create_with_components",
        "create_with_components",
        "PipelineTemplateBase.build_with_context",
        "build_with_context",
        "PipelineTemplateBase.build_in_thread",
        "build_in_thread",
        "PipelineTemplateBase.fill_execution_document",
        "fill_execution_document",
        "__init__",
        "_validate_configuration",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "_get_pipeline_parameters",
        "generate_pipeline",
        "_store_pipeline_metadata",
        "create_with_components",
        "build_with_context",
        "build_in_thread",
        "fill_execution_document",
        "PipelineAssembler.__init__",
        "__init__",
        "PipelineAssembler._initialize_step_builders",
        "_initialize_step_builders",
        "PipelineAssembler._propagate_messages",
        "_propagate_messages",
        "PipelineAssembler._generate_outputs",
        "_generate_outputs",
        "PipelineAssembler._instantiate_step",
        "_instantiate_step",
        "PipelineAssembler.create_with_components",
        "create_with_components",
        "PipelineAssembler._get_registry_manager",
        "_get_registry_manager",
        "PipelineAssembler._get_dependency_resolver",
        "_get_dependency_resolver",
        "PipelineAssembler.generate_pipeline",
        "generate_pipeline",
        "__init__",
        "_initialize_step_builders",
        "_propagate_messages",
        "_generate_outputs",
        "_instantiate_step",
        "create_with_components",
        "_get_registry_manager",
        "_get_dependency_resolver",
        "generate_pipeline"
      ],
      "likely_untested_functions": [
        "_load_configs",
        "_get_base_config",
        "_initialize_components",
        "_get_pipeline_name",
        "_load_configs",
        "_get_base_config",
        "_initialize_components",
        "_get_pipeline_name"
      ]
    },
    "base": {
      "component": "base",
      "source_files": [
        "src/cursus/core/base/enums.py",
        "src/cursus/core/base/contract_base.py",
        "src/cursus/core/base/specification_base.py",
        "src/cursus/core/base/config_base.py",
        "src/cursus/core/base/builder_base.py",
        "src/cursus/core/base/hyperparameters_base.py"
      ],
      "test_files": [
        "test/core/base/test_hyperparameters_base.py",
        "test/core/base/test_contract_base.py",
        "test/core/base/test_config_base.py",
        "test/core/base/test_all_base.py",
        "test/core/base/test_enums.py",
        "test/core/base/test_builder_base.py",
        "test/core/base/test_specification_base.py"
      ],
      "total_source_functions": 331,
      "tested_functions": 236,
      "untested_functions": 95,
      "coverage_percentage": 71.29909365558912,
      "source_functions_by_file": {
        "src/cursus/core/base/enums.py": [
          "DependencyType.__eq__",
          "__eq__",
          "DependencyType.__hash__",
          "__hash__",
          "NodeType.__eq__",
          "__eq__",
          "NodeType.__hash__",
          "__hash__",
          "__eq__",
          "__hash__",
          "__eq__",
          "__hash__"
        ],
        "src/cursus/core/base/contract_base.py": [
          "ValidationResult.success",
          "success",
          "ValidationResult.error",
          "error",
          "ValidationResult.combine",
          "combine",
          "ValidationResult.add_error",
          "add_error",
          "ValidationResult.add_warning",
          "add_warning",
          "AlignmentResult.success",
          "success",
          "AlignmentResult.error",
          "error",
          "ScriptContract.validate_entry_point",
          "validate_entry_point",
          "ScriptContract.validate_input_paths",
          "validate_input_paths",
          "ScriptContract.validate_output_paths",
          "validate_output_paths",
          "ScriptContract.validate_arguments",
          "validate_arguments",
          "ScriptContract.validate_implementation",
          "validate_implementation",
          "ScriptContract._validate_against_analysis",
          "_validate_against_analysis",
          "ScriptAnalyzer.__init__",
          "__init__",
          "ScriptAnalyzer.ast_tree",
          "ast_tree",
          "ScriptAnalyzer.get_input_paths",
          "get_input_paths",
          "ScriptAnalyzer.get_output_paths",
          "get_output_paths",
          "ScriptAnalyzer.get_env_var_usage",
          "get_env_var_usage",
          "ScriptAnalyzer.get_argument_usage",
          "get_argument_usage",
          "success",
          "error",
          "combine",
          "add_error",
          "add_warning",
          "success",
          "error",
          "validate_entry_point",
          "validate_input_paths",
          "validate_output_paths",
          "validate_arguments",
          "validate_implementation",
          "_validate_against_analysis",
          "__init__",
          "ast_tree",
          "get_input_paths",
          "get_output_paths",
          "get_env_var_usage",
          "get_argument_usage"
        ],
        "src/cursus/core/base/specification_base.py": [
          "DependencySpec.validate_logical_name",
          "validate_logical_name",
          "DependencySpec.validate_dependency_type",
          "validate_dependency_type",
          "DependencySpec.validate_compatible_sources",
          "validate_compatible_sources",
          "DependencySpec.validate_semantic_keywords",
          "validate_semantic_keywords",
          "DependencySpec.matches_name_or_alias",
          "matches_name_or_alias",
          "OutputSpec.validate_logical_name",
          "validate_logical_name",
          "OutputSpec.validate_output_type",
          "validate_output_type",
          "OutputSpec.validate_aliases",
          "validate_aliases",
          "OutputSpec.validate_property_path",
          "validate_property_path",
          "OutputSpec.validate_aliases_no_conflict",
          "validate_aliases_no_conflict",
          "OutputSpec.matches_name_or_alias",
          "matches_name_or_alias",
          "StepSpecification.__init__",
          "__init__",
          "StepSpecification.validate_step_type",
          "validate_step_type",
          "StepSpecification.validate_node_type",
          "validate_node_type",
          "StepSpecification.validate_node_type_constraints",
          "validate_node_type_constraints",
          "StepSpecification._validate_output_aliases",
          "_validate_output_aliases",
          "StepSpecification.get_dependency",
          "get_dependency",
          "StepSpecification.get_output",
          "get_output",
          "StepSpecification.get_output_by_name_or_alias",
          "get_output_by_name_or_alias",
          "StepSpecification.list_all_output_names",
          "list_all_output_names",
          "StepSpecification.list_required_dependencies",
          "list_required_dependencies",
          "StepSpecification.list_optional_dependencies",
          "list_optional_dependencies",
          "StepSpecification.list_dependencies_by_type",
          "list_dependencies_by_type",
          "StepSpecification.list_outputs_by_type",
          "list_outputs_by_type",
          "StepSpecification.validate",
          "validate",
          "StepSpecification.validate_contract_alignment",
          "validate_contract_alignment",
          "StepSpecification.validate_script_compliance",
          "validate_script_compliance",
          "StepSpecification.__repr__",
          "__repr__",
          "StepSpecification.model_validate",
          "model_validate",
          "validate_logical_name",
          "validate_dependency_type",
          "validate_compatible_sources",
          "validate_semantic_keywords",
          "matches_name_or_alias",
          "validate_logical_name",
          "validate_output_type",
          "validate_aliases",
          "validate_property_path",
          "validate_aliases_no_conflict",
          "matches_name_or_alias",
          "__init__",
          "validate_step_type",
          "validate_node_type",
          "validate_node_type_constraints",
          "_validate_output_aliases",
          "get_dependency",
          "get_output",
          "get_output_by_name_or_alias",
          "list_all_output_names",
          "list_required_dependencies",
          "list_optional_dependencies",
          "list_dependencies_by_type",
          "list_outputs_by_type",
          "validate",
          "validate_contract_alignment",
          "validate_script_compliance",
          "__repr__",
          "model_validate"
        ],
        "src/cursus/core/base/config_base.py": [
          "BasePipelineConfig.aws_region",
          "aws_region",
          "BasePipelineConfig.pipeline_name",
          "pipeline_name",
          "BasePipelineConfig.pipeline_description",
          "pipeline_description",
          "BasePipelineConfig.pipeline_s3_loc",
          "pipeline_s3_loc",
          "BasePipelineConfig.model_dump",
          "model_dump",
          "BasePipelineConfig.__str__",
          "__str__",
          "BasePipelineConfig._validate_custom_region",
          "_validate_custom_region",
          "BasePipelineConfig._validate_source_dir_exists",
          "_validate_source_dir_exists",
          "BasePipelineConfig.initialize_derived_fields",
          "initialize_derived_fields",
          "BasePipelineConfig.get_script_contract",
          "get_script_contract",
          "BasePipelineConfig.script_contract",
          "script_contract",
          "BasePipelineConfig.get_script_path",
          "get_script_path",
          "BasePipelineConfig.get_step_name",
          "get_step_name",
          "BasePipelineConfig.get_config_class_name",
          "get_config_class_name",
          "BasePipelineConfig._get_step_registry",
          "_get_step_registry",
          "BasePipelineConfig.from_base_config",
          "from_base_config",
          "BasePipelineConfig.categorize_fields",
          "categorize_fields",
          "BasePipelineConfig.print_config",
          "print_config",
          "BasePipelineConfig.get_public_init_fields",
          "get_public_init_fields",
          "aws_region",
          "pipeline_name",
          "pipeline_description",
          "pipeline_s3_loc",
          "model_dump",
          "__str__",
          "_validate_custom_region",
          "_validate_source_dir_exists",
          "initialize_derived_fields",
          "get_script_contract",
          "script_contract",
          "get_script_path",
          "get_step_name",
          "get_config_class_name",
          "_get_step_registry",
          "from_base_config",
          "categorize_fields",
          "print_config",
          "get_public_init_fields"
        ],
        "src/cursus/core/base/builder_base.py": [
          "safe_value_for_logging",
          "StepBuilderBase.STEP_NAMES",
          "STEP_NAMES",
          "StepBuilderBase._get_workspace_context",
          "_get_workspace_context",
          "StepBuilderBase.__init__",
          "__init__",
          "StepBuilderBase._sanitize_name_for_sagemaker",
          "_sanitize_name_for_sagemaker",
          "StepBuilderBase._get_step_name",
          "_get_step_name",
          "StepBuilderBase._generate_job_name",
          "_generate_job_name",
          "StepBuilderBase.get_property_path",
          "get_property_path",
          "StepBuilderBase.get_all_property_paths",
          "get_all_property_paths",
          "StepBuilderBase.log_info",
          "log_info",
          "StepBuilderBase.log_debug",
          "log_debug",
          "StepBuilderBase.log_warning",
          "log_warning",
          "StepBuilderBase.log_error",
          "log_error",
          "StepBuilderBase._get_cache_config",
          "_get_cache_config",
          "StepBuilderBase._get_environment_variables",
          "_get_environment_variables",
          "StepBuilderBase._get_job_arguments",
          "_get_job_arguments",
          "StepBuilderBase.validate_configuration",
          "validate_configuration",
          "StepBuilderBase.get_required_dependencies",
          "get_required_dependencies",
          "StepBuilderBase.get_optional_dependencies",
          "get_optional_dependencies",
          "StepBuilderBase.get_outputs",
          "get_outputs",
          "StepBuilderBase._get_inputs",
          "_get_inputs",
          "StepBuilderBase._get_outputs",
          "_get_outputs",
          "StepBuilderBase._get_context_name",
          "_get_context_name",
          "StepBuilderBase._get_registry_manager",
          "_get_registry_manager",
          "StepBuilderBase._get_registry",
          "_get_registry",
          "StepBuilderBase._get_dependency_resolver",
          "_get_dependency_resolver",
          "StepBuilderBase.extract_inputs_from_dependencies",
          "extract_inputs_from_dependencies",
          "StepBuilderBase._enhance_dependency_steps_with_specs",
          "_enhance_dependency_steps_with_specs",
          "StepBuilderBase.create_step",
          "create_step",
          "STEP_NAMES",
          "_get_workspace_context",
          "__init__",
          "_sanitize_name_for_sagemaker",
          "_get_step_name",
          "_generate_job_name",
          "get_property_path",
          "get_all_property_paths",
          "log_info",
          "log_debug",
          "log_warning",
          "log_error",
          "_get_cache_config",
          "_get_environment_variables",
          "_get_job_arguments",
          "validate_configuration",
          "get_required_dependencies",
          "get_optional_dependencies",
          "get_outputs",
          "_get_inputs",
          "_get_outputs",
          "_get_context_name",
          "_get_registry_manager",
          "_get_registry",
          "_get_dependency_resolver",
          "extract_inputs_from_dependencies",
          "_enhance_dependency_steps_with_specs",
          "create_step"
        ],
        "src/cursus/core/base/hyperparameters_base.py": [
          "ModelHyperparameters.input_tab_dim",
          "input_tab_dim",
          "ModelHyperparameters.num_classes",
          "num_classes",
          "ModelHyperparameters.is_binary",
          "is_binary",
          "ModelHyperparameters.validate_dimensions",
          "validate_dimensions",
          "ModelHyperparameters.categorize_fields",
          "categorize_fields",
          "ModelHyperparameters.__str__",
          "__str__",
          "ModelHyperparameters.print_hyperparam",
          "print_hyperparam",
          "ModelHyperparameters.get_public_init_fields",
          "get_public_init_fields",
          "ModelHyperparameters.from_base_hyperparam",
          "from_base_hyperparam",
          "ModelHyperparameters.get_config",
          "get_config",
          "ModelHyperparameters.serialize_config",
          "serialize_config",
          "input_tab_dim",
          "num_classes",
          "is_binary",
          "validate_dimensions",
          "categorize_fields",
          "__str__",
          "print_hyperparam",
          "get_public_init_fields",
          "from_base_hyperparam",
          "get_config",
          "serialize_config"
        ]
      },
      "test_functions_by_file": {
        "test/core/base/test_hyperparameters_base.py": [
          "TestModelHyperparameters.setUp",
          "setUp",
          "TestModelHyperparameters.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestModelHyperparameters.test_init_with_all_fields",
          "test_init_with_all_fields",
          "TestModelHyperparameters.test_derived_properties",
          "test_derived_properties",
          "TestModelHyperparameters.test_binary_classification",
          "test_binary_classification",
          "TestModelHyperparameters.test_class_weights_default",
          "test_class_weights_default",
          "TestModelHyperparameters.test_class_weights_custom",
          "test_class_weights_custom",
          "TestModelHyperparameters.test_class_weights_validation_error",
          "test_class_weights_validation_error",
          "TestModelHyperparameters.test_batch_size_validation",
          "test_batch_size_validation",
          "TestModelHyperparameters.test_max_epochs_validation",
          "test_max_epochs_validation",
          "TestModelHyperparameters.test_categorize_fields",
          "test_categorize_fields",
          "TestModelHyperparameters.test_get_public_init_fields",
          "test_get_public_init_fields",
          "TestModelHyperparameters.test_from_base_hyperparam",
          "test_from_base_hyperparam",
          "TestModelHyperparameters.test_get_config",
          "test_get_config",
          "TestModelHyperparameters.test_serialize_config",
          "test_serialize_config",
          "TestModelHyperparameters.test_string_representation",
          "test_string_representation",
          "TestModelHyperparameters.test_print_hyperparam_method",
          "test_print_hyperparam_method",
          "TestModelHyperparameters.test_derived_fields_caching",
          "test_derived_fields_caching",
          "TestModelHyperparameters.test_extra_fields_allowed",
          "test_extra_fields_allowed",
          "TestModelHyperparameters.test_validate_assignment",
          "test_validate_assignment",
          "TestModelHyperparameters.test_empty_field_lists",
          "test_empty_field_lists",
          "TestModelHyperparameters.test_single_class_error",
          "test_single_class_error",
          "setUp",
          "test_init_with_required_fields",
          "test_init_with_all_fields",
          "test_derived_properties",
          "test_binary_classification",
          "test_class_weights_default",
          "test_class_weights_custom",
          "test_class_weights_validation_error",
          "test_batch_size_validation",
          "test_max_epochs_validation",
          "test_categorize_fields",
          "test_get_public_init_fields",
          "test_from_base_hyperparam",
          "test_get_config",
          "test_serialize_config",
          "test_string_representation",
          "test_print_hyperparam_method",
          "test_derived_fields_caching",
          "test_extra_fields_allowed",
          "test_validate_assignment",
          "test_empty_field_lists",
          "test_single_class_error"
        ],
        "test/core/base/test_contract_base.py": [
          "TestValidationResult.test_init_valid",
          "test_init_valid",
          "TestValidationResult.test_init_invalid_with_errors",
          "test_init_invalid_with_errors",
          "TestValidationResult.test_success_class_method",
          "test_success_class_method",
          "TestValidationResult.test_error_class_method_with_list",
          "test_error_class_method_with_list",
          "TestValidationResult.test_error_class_method_with_string",
          "test_error_class_method_with_string",
          "TestValidationResult.test_combine_class_method",
          "test_combine_class_method",
          "TestValidationResult.test_combine_all_valid",
          "test_combine_all_valid",
          "TestScriptContract.setUp",
          "setUp",
          "TestScriptContract.test_init_with_valid_data",
          "test_init_with_valid_data",
          "TestScriptContract.test_init_with_minimal_data",
          "test_init_with_minimal_data",
          "TestScriptContract.test_validate_entry_point_invalid",
          "test_validate_entry_point_invalid",
          "TestScriptContract.test_validate_input_paths_invalid",
          "test_validate_input_paths_invalid",
          "TestScriptContract.test_validate_input_paths_generated_payload_samples",
          "test_validate_input_paths_generated_payload_samples",
          "TestScriptContract.test_validate_output_paths_invalid",
          "test_validate_output_paths_invalid",
          "TestScriptContract.test_validate_arguments_invalid_characters",
          "test_validate_arguments_invalid_characters",
          "TestScriptContract.test_validate_arguments_uppercase",
          "test_validate_arguments_uppercase",
          "TestScriptContract.test_validate_implementation_file_not_found",
          "test_validate_implementation_file_not_found",
          "TestScriptContract.test_validate_implementation_success",
          "test_validate_implementation_success",
          "TestScriptContract.test_validate_implementation_missing_paths",
          "test_validate_implementation_missing_paths",
          "TestScriptContract.test_validate_implementation_with_warnings",
          "test_validate_implementation_with_warnings",
          "TestScriptAnalyzer.setUp",
          "setUp",
          "TestScriptAnalyzer.test_get_input_paths",
          "test_get_input_paths",
          "TestScriptAnalyzer.test_get_output_paths",
          "test_get_output_paths",
          "TestScriptAnalyzer.test_get_env_var_usage",
          "test_get_env_var_usage",
          "TestScriptAnalyzer.test_get_argument_usage",
          "test_get_argument_usage",
          "TestScriptAnalyzer.test_ast_tree_lazy_loading",
          "test_ast_tree_lazy_loading",
          "TestScriptAnalyzer.test_caching_behavior",
          "test_caching_behavior",
          "test_init_valid",
          "test_init_invalid_with_errors",
          "test_success_class_method",
          "test_error_class_method_with_list",
          "test_error_class_method_with_string",
          "test_combine_class_method",
          "test_combine_all_valid",
          "setUp",
          "test_init_with_valid_data",
          "test_init_with_minimal_data",
          "test_validate_entry_point_invalid",
          "test_validate_input_paths_invalid",
          "test_validate_input_paths_generated_payload_samples",
          "test_validate_output_paths_invalid",
          "test_validate_arguments_invalid_characters",
          "test_validate_arguments_uppercase",
          "test_validate_implementation_file_not_found",
          "test_validate_implementation_success",
          "test_validate_implementation_missing_paths",
          "test_validate_implementation_with_warnings",
          "setUp",
          "test_get_input_paths",
          "test_get_output_paths",
          "test_get_env_var_usage",
          "test_get_argument_usage",
          "test_ast_tree_lazy_loading",
          "test_caching_behavior"
        ],
        "test/core/base/test_config_base.py": [
          "TestBasePipelineConfig.setUp",
          "setUp",
          "TestBasePipelineConfig.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestBasePipelineConfig.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestBasePipelineConfig.test_derived_properties",
          "test_derived_properties",
          "TestBasePipelineConfig.test_region_validation",
          "test_region_validation",
          "TestBasePipelineConfig.test_source_dir_validation",
          "test_source_dir_validation",
          "TestBasePipelineConfig.test_model_dump_includes_derived_properties",
          "test_model_dump_includes_derived_properties",
          "TestBasePipelineConfig.test_categorize_fields",
          "test_categorize_fields",
          "TestBasePipelineConfig.test_get_public_init_fields",
          "test_get_public_init_fields",
          "TestBasePipelineConfig.test_from_base_config",
          "test_from_base_config",
          "TestBasePipelineConfig.test_get_step_name_class_method",
          "test_get_step_name_class_method",
          "TestBasePipelineConfig.test_get_config_class_name_class_method",
          "test_get_config_class_name_class_method",
          "TestBasePipelineConfig.test_get_script_contract_default",
          "test_get_script_contract_default",
          "TestBasePipelineConfig.test_get_script_path_default",
          "test_get_script_path_default",
          "TestBasePipelineConfig.test_string_representation",
          "test_string_representation",
          "TestBasePipelineConfig.test_print_config_method",
          "test_print_config_method",
          "TestBasePipelineConfig.test_region_mapping",
          "test_region_mapping",
          "TestBasePipelineConfig.test_derived_fields_caching",
          "test_derived_fields_caching",
          "TestBasePipelineConfig.test_extra_fields_allowed",
          "test_extra_fields_allowed",
          "setUp",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_derived_properties",
          "test_region_validation",
          "test_source_dir_validation",
          "test_model_dump_includes_derived_properties",
          "test_categorize_fields",
          "test_get_public_init_fields",
          "test_from_base_config",
          "test_get_step_name_class_method",
          "test_get_config_class_name_class_method",
          "test_get_script_contract_default",
          "test_get_script_path_default",
          "test_string_representation",
          "test_print_config_method",
          "test_region_mapping",
          "test_derived_fields_caching",
          "test_extra_fields_allowed"
        ],
        "test/core/base/test_all_base.py": [
          "import_test_modules",
          "create_test_suite",
          "run_tests_with_summary",
          "run_individual_test_modules"
        ],
        "test/core/base/test_enums.py": [
          "TestDependencyType.test_enum_values",
          "test_enum_values",
          "TestDependencyType.test_enum_members",
          "test_enum_members",
          "TestDependencyType.test_enum_access_by_name",
          "test_enum_access_by_name",
          "TestDependencyType.test_enum_access_by_value",
          "test_enum_access_by_value",
          "TestDependencyType.test_equality_with_same_enum",
          "test_equality_with_same_enum",
          "TestDependencyType.test_equality_with_different_enum",
          "test_equality_with_different_enum",
          "TestDependencyType.test_equality_with_non_enum",
          "test_equality_with_non_enum",
          "TestDependencyType.test_hashability",
          "test_hashability",
          "TestDependencyType.test_hashability_in_set",
          "test_hashability_in_set",
          "TestDependencyType.test_hash_consistency",
          "test_hash_consistency",
          "TestDependencyType.test_string_representation",
          "test_string_representation",
          "TestDependencyType.test_iteration",
          "test_iteration",
          "TestNodeType.test_enum_values",
          "test_enum_values",
          "TestNodeType.test_enum_members",
          "test_enum_members",
          "TestNodeType.test_enum_access_by_name",
          "test_enum_access_by_name",
          "TestNodeType.test_enum_access_by_value",
          "test_enum_access_by_value",
          "TestNodeType.test_equality_with_same_enum",
          "test_equality_with_same_enum",
          "TestNodeType.test_equality_with_different_enum",
          "test_equality_with_different_enum",
          "TestNodeType.test_equality_with_non_enum",
          "test_equality_with_non_enum",
          "TestNodeType.test_hashability",
          "test_hashability",
          "TestNodeType.test_hashability_in_set",
          "test_hashability_in_set",
          "TestNodeType.test_hash_consistency",
          "test_hash_consistency",
          "TestNodeType.test_string_representation",
          "test_string_representation",
          "TestNodeType.test_iteration",
          "test_iteration",
          "TestNodeType.test_node_type_semantics",
          "test_node_type_semantics",
          "TestEnumInteraction.test_different_enums_not_equal",
          "test_different_enums_not_equal",
          "TestEnumInteraction.test_mixed_enum_dictionary",
          "test_mixed_enum_dictionary",
          "TestEnumInteraction.test_mixed_enum_set",
          "test_mixed_enum_set",
          "TestEnumInteraction.test_enum_type_checking",
          "test_enum_type_checking",
          "TestEnumEdgeCases.test_invalid_enum_value_dependency_type",
          "test_invalid_enum_value_dependency_type",
          "TestEnumEdgeCases.test_invalid_enum_value_node_type",
          "test_invalid_enum_value_node_type",
          "TestEnumEdgeCases.test_enum_comparison_with_none",
          "test_enum_comparison_with_none",
          "TestEnumEdgeCases.test_enum_boolean_context",
          "test_enum_boolean_context",
          "test_enum_values",
          "test_enum_members",
          "test_enum_access_by_name",
          "test_enum_access_by_value",
          "test_equality_with_same_enum",
          "test_equality_with_different_enum",
          "test_equality_with_non_enum",
          "test_hashability",
          "test_hashability_in_set",
          "test_hash_consistency",
          "test_string_representation",
          "test_iteration",
          "test_enum_values",
          "test_enum_members",
          "test_enum_access_by_name",
          "test_enum_access_by_value",
          "test_equality_with_same_enum",
          "test_equality_with_different_enum",
          "test_equality_with_non_enum",
          "test_hashability",
          "test_hashability_in_set",
          "test_hash_consistency",
          "test_string_representation",
          "test_iteration",
          "test_node_type_semantics",
          "test_different_enums_not_equal",
          "test_mixed_enum_dictionary",
          "test_mixed_enum_set",
          "test_enum_type_checking",
          "test_invalid_enum_value_dependency_type",
          "test_invalid_enum_value_node_type",
          "test_enum_comparison_with_none",
          "test_enum_boolean_context"
        ],
        "test/core/base/test_builder_base.py": [
          "MockConfig.__init__",
          "__init__",
          "ConcreteStepBuilder.validate_configuration",
          "validate_configuration",
          "ConcreteStepBuilder._get_inputs",
          "_get_inputs",
          "ConcreteStepBuilder._get_outputs",
          "_get_outputs",
          "ConcreteStepBuilder.create_step",
          "create_step",
          "TestStepBuilderBase.setUp",
          "setUp",
          "TestStepBuilderBase.test_init_with_required_params",
          "test_init_with_required_params",
          "TestStepBuilderBase.test_init_with_optional_params",
          "test_init_with_optional_params",
          "TestStepBuilderBase.test_invalid_region_raises_error",
          "test_invalid_region_raises_error",
          "TestStepBuilderBase.test_sanitize_name_for_sagemaker",
          "test_sanitize_name_for_sagemaker",
          "TestStepBuilderBase.test_get_step_name",
          "test_get_step_name",
          "TestStepBuilderBase.test_generate_job_name",
          "test_generate_job_name",
          "TestStepBuilderBase.test_get_property_path",
          "test_get_property_path",
          "TestStepBuilderBase.test_get_all_property_paths",
          "test_get_all_property_paths",
          "TestStepBuilderBase.test_safe_logging_methods",
          "test_safe_logging_methods",
          "TestStepBuilderBase.test_get_cache_config",
          "test_get_cache_config",
          "TestStepBuilderBase.test_get_environment_variables_no_contract",
          "test_get_environment_variables_no_contract",
          "TestStepBuilderBase.test_get_environment_variables_with_contract",
          "test_get_environment_variables_with_contract",
          "TestStepBuilderBase.test_get_job_arguments_no_contract",
          "test_get_job_arguments_no_contract",
          "TestStepBuilderBase.test_get_job_arguments_with_contract",
          "test_get_job_arguments_with_contract",
          "TestStepBuilderBase.test_get_required_dependencies",
          "test_get_required_dependencies",
          "TestStepBuilderBase.test_get_optional_dependencies",
          "test_get_optional_dependencies",
          "TestStepBuilderBase.test_get_outputs",
          "test_get_outputs",
          "TestStepBuilderBase.test_get_context_name",
          "test_get_context_name",
          "TestStepBuilderBase.test_abstract_methods_must_be_implemented",
          "test_abstract_methods_must_be_implemented",
          "TestStepBuilderBase.test_region_mapping",
          "test_region_mapping",
          "TestStepBuilderBase.test_step_names_class_variable",
          "test_step_names_class_variable",
          "TestStepBuilderBase.test_common_properties_class_variable",
          "test_common_properties_class_variable",
          "__init__",
          "validate_configuration",
          "_get_inputs",
          "_get_outputs",
          "create_step",
          "setUp",
          "test_init_with_required_params",
          "test_init_with_optional_params",
          "test_invalid_region_raises_error",
          "test_sanitize_name_for_sagemaker",
          "test_get_step_name",
          "test_generate_job_name",
          "test_get_property_path",
          "test_get_all_property_paths",
          "test_safe_logging_methods",
          "test_get_cache_config",
          "test_get_environment_variables_no_contract",
          "test_get_environment_variables_with_contract",
          "test_get_job_arguments_no_contract",
          "test_get_job_arguments_with_contract",
          "test_get_required_dependencies",
          "test_get_optional_dependencies",
          "test_get_outputs",
          "test_get_context_name",
          "test_abstract_methods_must_be_implemented",
          "test_region_mapping",
          "test_step_names_class_variable",
          "test_common_properties_class_variable"
        ],
        "test/core/base/test_specification_base.py": [
          "TestOutputSpec.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestOutputSpec.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestOutputSpec.test_matches_name_or_alias",
          "test_matches_name_or_alias",
          "TestDependencySpec.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestDependencySpec.test_init_with_optional_fields",
          "test_init_with_optional_fields",
          "TestDependencySpec.test_matches_name_or_alias",
          "test_matches_name_or_alias",
          "TestValidationResult.test_init_valid",
          "test_init_valid",
          "TestValidationResult.test_init_invalid_with_errors",
          "test_init_invalid_with_errors",
          "TestValidationResult.test_add_error",
          "test_add_error",
          "TestValidationResult.test_add_warning",
          "test_add_warning",
          "TestAlignmentResult.test_init_valid",
          "test_init_valid",
          "TestAlignmentResult.test_init_invalid_with_details",
          "test_init_invalid_with_details",
          "TestStepSpecification.setUp",
          "setUp",
          "TestStepSpecification.test_init_with_required_fields",
          "test_init_with_required_fields",
          "TestStepSpecification.test_init_with_script_contract",
          "test_init_with_script_contract",
          "TestStepSpecification.test_get_output_by_name_or_alias",
          "test_get_output_by_name_or_alias",
          "TestStepSpecification.test_get_dependency",
          "test_get_dependency",
          "TestStepSpecification.test_validate_basic",
          "test_validate_basic",
          "TestStepSpecification.test_validate_empty_step_type",
          "test_validate_empty_step_type",
          "TestStepSpecification.test_validate_duplicate_output_names",
          "test_validate_duplicate_output_names",
          "TestStepSpecification.test_validate_contract_alignment_no_contract",
          "test_validate_contract_alignment_no_contract",
          "TestStepSpecification.test_validate_contract_alignment_with_contract",
          "test_validate_contract_alignment_with_contract",
          "TestStepSpecification.test_validate_contract_alignment_missing_inputs",
          "test_validate_contract_alignment_missing_inputs",
          "TestStepSpecification.test_validate_contract_alignment_missing_outputs",
          "test_validate_contract_alignment_missing_outputs",
          "TestStepSpecification.test_list_required_dependencies",
          "test_list_required_dependencies",
          "TestStepSpecification.test_list_optional_dependencies",
          "test_list_optional_dependencies",
          "TestStepSpecification.test_list_all_output_names",
          "test_list_all_output_names",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_matches_name_or_alias",
          "test_init_with_required_fields",
          "test_init_with_optional_fields",
          "test_matches_name_or_alias",
          "test_init_valid",
          "test_init_invalid_with_errors",
          "test_add_error",
          "test_add_warning",
          "test_init_valid",
          "test_init_invalid_with_details",
          "setUp",
          "test_init_with_required_fields",
          "test_init_with_script_contract",
          "test_get_output_by_name_or_alias",
          "test_get_dependency",
          "test_validate_basic",
          "test_validate_empty_step_type",
          "test_validate_duplicate_output_names",
          "test_validate_contract_alignment_no_contract",
          "test_validate_contract_alignment_with_contract",
          "test_validate_contract_alignment_missing_inputs",
          "test_validate_contract_alignment_missing_outputs",
          "test_list_required_dependencies",
          "test_list_optional_dependencies",
          "test_list_all_output_names"
        ]
      },
      "likely_tested_functions": [
        "DependencyType.__eq__",
        "DependencyType.__hash__",
        "NodeType.__eq__",
        "NodeType.__hash__",
        "ValidationResult.success",
        "success",
        "ValidationResult.error",
        "error",
        "ValidationResult.combine",
        "combine",
        "ValidationResult.add_error",
        "add_error",
        "ValidationResult.add_warning",
        "add_warning",
        "AlignmentResult.success",
        "success",
        "AlignmentResult.error",
        "error",
        "ScriptContract.validate_entry_point",
        "validate_entry_point",
        "ScriptContract.validate_input_paths",
        "validate_input_paths",
        "ScriptContract.validate_output_paths",
        "validate_output_paths",
        "ScriptContract.validate_arguments",
        "validate_arguments",
        "ScriptContract.validate_implementation",
        "validate_implementation",
        "ScriptContract._validate_against_analysis",
        "ScriptAnalyzer.__init__",
        "__init__",
        "ScriptAnalyzer.ast_tree",
        "ast_tree",
        "ScriptAnalyzer.get_input_paths",
        "get_input_paths",
        "ScriptAnalyzer.get_output_paths",
        "get_output_paths",
        "ScriptAnalyzer.get_env_var_usage",
        "get_env_var_usage",
        "ScriptAnalyzer.get_argument_usage",
        "get_argument_usage",
        "success",
        "error",
        "combine",
        "add_error",
        "add_warning",
        "success",
        "error",
        "validate_entry_point",
        "validate_input_paths",
        "validate_output_paths",
        "validate_arguments",
        "validate_implementation",
        "__init__",
        "ast_tree",
        "get_input_paths",
        "get_output_paths",
        "get_env_var_usage",
        "get_argument_usage",
        "DependencySpec.validate_logical_name",
        "DependencySpec.validate_dependency_type",
        "DependencySpec.validate_compatible_sources",
        "DependencySpec.validate_semantic_keywords",
        "DependencySpec.matches_name_or_alias",
        "matches_name_or_alias",
        "OutputSpec.validate_logical_name",
        "OutputSpec.validate_output_type",
        "OutputSpec.validate_aliases",
        "OutputSpec.validate_property_path",
        "OutputSpec.validate_aliases_no_conflict",
        "OutputSpec.matches_name_or_alias",
        "matches_name_or_alias",
        "StepSpecification.__init__",
        "__init__",
        "StepSpecification.validate_step_type",
        "StepSpecification.validate_node_type",
        "StepSpecification.validate_node_type_constraints",
        "StepSpecification._validate_output_aliases",
        "StepSpecification.get_dependency",
        "get_dependency",
        "StepSpecification.get_output",
        "get_output",
        "StepSpecification.get_output_by_name_or_alias",
        "get_output_by_name_or_alias",
        "StepSpecification.list_all_output_names",
        "list_all_output_names",
        "StepSpecification.list_required_dependencies",
        "list_required_dependencies",
        "StepSpecification.list_optional_dependencies",
        "list_optional_dependencies",
        "StepSpecification.list_dependencies_by_type",
        "StepSpecification.list_outputs_by_type",
        "StepSpecification.validate",
        "validate",
        "StepSpecification.validate_contract_alignment",
        "validate_contract_alignment",
        "StepSpecification.validate_script_compliance",
        "StepSpecification.__repr__",
        "StepSpecification.model_validate",
        "matches_name_or_alias",
        "matches_name_or_alias",
        "__init__",
        "get_dependency",
        "get_output",
        "get_output_by_name_or_alias",
        "list_all_output_names",
        "list_required_dependencies",
        "list_optional_dependencies",
        "validate",
        "validate_contract_alignment",
        "BasePipelineConfig.aws_region",
        "BasePipelineConfig.pipeline_name",
        "BasePipelineConfig.pipeline_description",
        "BasePipelineConfig.pipeline_s3_loc",
        "BasePipelineConfig.model_dump",
        "model_dump",
        "BasePipelineConfig.__str__",
        "BasePipelineConfig._validate_custom_region",
        "BasePipelineConfig._validate_source_dir_exists",
        "BasePipelineConfig.initialize_derived_fields",
        "BasePipelineConfig.get_script_contract",
        "get_script_contract",
        "BasePipelineConfig.script_contract",
        "script_contract",
        "BasePipelineConfig.get_script_path",
        "get_script_path",
        "BasePipelineConfig.get_step_name",
        "get_step_name",
        "BasePipelineConfig.get_config_class_name",
        "get_config_class_name",
        "BasePipelineConfig._get_step_registry",
        "BasePipelineConfig.from_base_config",
        "from_base_config",
        "BasePipelineConfig.categorize_fields",
        "categorize_fields",
        "BasePipelineConfig.print_config",
        "print_config",
        "BasePipelineConfig.get_public_init_fields",
        "get_public_init_fields",
        "model_dump",
        "get_script_contract",
        "script_contract",
        "get_script_path",
        "get_step_name",
        "get_config_class_name",
        "from_base_config",
        "categorize_fields",
        "print_config",
        "get_public_init_fields",
        "StepBuilderBase.STEP_NAMES",
        "STEP_NAMES",
        "StepBuilderBase._get_workspace_context",
        "StepBuilderBase.__init__",
        "__init__",
        "StepBuilderBase._sanitize_name_for_sagemaker",
        "_sanitize_name_for_sagemaker",
        "StepBuilderBase._get_step_name",
        "_get_step_name",
        "StepBuilderBase._generate_job_name",
        "_generate_job_name",
        "StepBuilderBase.get_property_path",
        "get_property_path",
        "StepBuilderBase.get_all_property_paths",
        "get_all_property_paths",
        "StepBuilderBase.log_info",
        "StepBuilderBase.log_debug",
        "StepBuilderBase.log_warning",
        "StepBuilderBase.log_error",
        "StepBuilderBase._get_cache_config",
        "_get_cache_config",
        "StepBuilderBase._get_environment_variables",
        "_get_environment_variables",
        "StepBuilderBase._get_job_arguments",
        "_get_job_arguments",
        "StepBuilderBase.validate_configuration",
        "validate_configuration",
        "StepBuilderBase.get_required_dependencies",
        "get_required_dependencies",
        "StepBuilderBase.get_optional_dependencies",
        "get_optional_dependencies",
        "StepBuilderBase.get_outputs",
        "get_outputs",
        "StepBuilderBase._get_inputs",
        "_get_inputs",
        "StepBuilderBase._get_outputs",
        "_get_outputs",
        "StepBuilderBase._get_context_name",
        "_get_context_name",
        "StepBuilderBase._get_registry_manager",
        "StepBuilderBase._get_registry",
        "StepBuilderBase._get_dependency_resolver",
        "StepBuilderBase.extract_inputs_from_dependencies",
        "StepBuilderBase._enhance_dependency_steps_with_specs",
        "StepBuilderBase.create_step",
        "create_step",
        "STEP_NAMES",
        "__init__",
        "_sanitize_name_for_sagemaker",
        "_get_step_name",
        "_generate_job_name",
        "get_property_path",
        "get_all_property_paths",
        "_get_cache_config",
        "_get_environment_variables",
        "_get_job_arguments",
        "validate_configuration",
        "get_required_dependencies",
        "get_optional_dependencies",
        "get_outputs",
        "_get_inputs",
        "_get_outputs",
        "_get_context_name",
        "create_step",
        "ModelHyperparameters.input_tab_dim",
        "ModelHyperparameters.num_classes",
        "ModelHyperparameters.is_binary",
        "ModelHyperparameters.validate_dimensions",
        "ModelHyperparameters.categorize_fields",
        "categorize_fields",
        "ModelHyperparameters.__str__",
        "ModelHyperparameters.print_hyperparam",
        "print_hyperparam",
        "ModelHyperparameters.get_public_init_fields",
        "get_public_init_fields",
        "ModelHyperparameters.from_base_hyperparam",
        "from_base_hyperparam",
        "ModelHyperparameters.get_config",
        "get_config",
        "ModelHyperparameters.serialize_config",
        "serialize_config",
        "categorize_fields",
        "print_hyperparam",
        "get_public_init_fields",
        "from_base_hyperparam",
        "get_config",
        "serialize_config"
      ],
      "likely_untested_functions": [
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "__eq__",
        "__hash__",
        "_validate_against_analysis",
        "_validate_against_analysis",
        "validate_logical_name",
        "validate_dependency_type",
        "validate_compatible_sources",
        "validate_semantic_keywords",
        "validate_logical_name",
        "validate_output_type",
        "validate_aliases",
        "validate_property_path",
        "validate_aliases_no_conflict",
        "validate_step_type",
        "validate_node_type",
        "validate_node_type_constraints",
        "_validate_output_aliases",
        "list_dependencies_by_type",
        "list_outputs_by_type",
        "validate_script_compliance",
        "__repr__",
        "model_validate",
        "validate_logical_name",
        "validate_dependency_type",
        "validate_compatible_sources",
        "validate_semantic_keywords",
        "validate_logical_name",
        "validate_output_type",
        "validate_aliases",
        "validate_property_path",
        "validate_aliases_no_conflict",
        "validate_step_type",
        "validate_node_type",
        "validate_node_type_constraints",
        "_validate_output_aliases",
        "list_dependencies_by_type",
        "list_outputs_by_type",
        "validate_script_compliance",
        "__repr__",
        "model_validate",
        "aws_region",
        "pipeline_name",
        "pipeline_description",
        "pipeline_s3_loc",
        "__str__",
        "_validate_custom_region",
        "_validate_source_dir_exists",
        "initialize_derived_fields",
        "_get_step_registry",
        "aws_region",
        "pipeline_name",
        "pipeline_description",
        "pipeline_s3_loc",
        "__str__",
        "_validate_custom_region",
        "_validate_source_dir_exists",
        "initialize_derived_fields",
        "_get_step_registry",
        "safe_value_for_logging",
        "_get_workspace_context",
        "log_info",
        "log_debug",
        "log_warning",
        "log_error",
        "_get_registry_manager",
        "_get_registry",
        "_get_dependency_resolver",
        "extract_inputs_from_dependencies",
        "_enhance_dependency_steps_with_specs",
        "_get_workspace_context",
        "log_info",
        "log_debug",
        "log_warning",
        "log_error",
        "_get_registry_manager",
        "_get_registry",
        "_get_dependency_resolver",
        "extract_inputs_from_dependencies",
        "_enhance_dependency_steps_with_specs",
        "input_tab_dim",
        "num_classes",
        "is_binary",
        "validate_dimensions",
        "__str__",
        "input_tab_dim",
        "num_classes",
        "is_binary",
        "validate_dimensions",
        "__str__"
      ]
    },
    "compiler": {
      "component": "compiler",
      "source_files": [
        "src/cursus/core/compiler/name_generator.py",
        "src/cursus/core/compiler/dag_compiler.py",
        "src/cursus/core/compiler/dynamic_template.py",
        "src/cursus/core/compiler/config_resolver.py",
        "src/cursus/core/compiler/exceptions.py",
        "src/cursus/core/compiler/validation.py"
      ],
      "test_files": [
        "test/core/compiler/test_validation.py",
        "test/core/compiler/test_config_resolver.py",
        "test/core/compiler/test_exceptions.py",
        "test/core/compiler/test_name_generator.py",
        "test/core/compiler/test_dynamic_template.py",
        "test/core/compiler/test_dag_compiler.py",
        "test/core/compiler/test_fill_execution_document.py",
        "test/core/compiler/test_enhanced_config_resolver.py"
      ],
      "total_source_functions": 179,
      "tested_functions": 135,
      "untested_functions": 44,
      "coverage_percentage": 75.41899441340783,
      "source_functions_by_file": {
        "src/cursus/core/compiler/name_generator.py": [
          "generate_random_word",
          "validate_pipeline_name",
          "sanitize_pipeline_name",
          "generate_pipeline_name"
        ],
        "src/cursus/core/compiler/dag_compiler.py": [
          "compile_dag_to_pipeline",
          "PipelineDAGCompiler.__init__",
          "__init__",
          "PipelineDAGCompiler.validate_dag_compatibility",
          "validate_dag_compatibility",
          "PipelineDAGCompiler.preview_resolution",
          "preview_resolution",
          "PipelineDAGCompiler.compile",
          "compile",
          "PipelineDAGCompiler.compile_with_report",
          "compile_with_report",
          "PipelineDAGCompiler.create_template",
          "create_template",
          "PipelineDAGCompiler.get_supported_step_types",
          "get_supported_step_types",
          "PipelineDAGCompiler.validate_config_file",
          "validate_config_file",
          "PipelineDAGCompiler.get_last_template",
          "get_last_template",
          "PipelineDAGCompiler.compile_and_fill_execution_doc",
          "compile_and_fill_execution_doc",
          "__init__",
          "validate_dag_compatibility",
          "preview_resolution",
          "compile",
          "compile_with_report",
          "create_template",
          "get_supported_step_types",
          "validate_config_file",
          "get_last_template",
          "compile_and_fill_execution_doc"
        ],
        "src/cursus/core/compiler/dynamic_template.py": [
          "DynamicPipelineTemplate.__init__",
          "__init__",
          "DynamicPipelineTemplate._detect_config_classes",
          "_detect_config_classes",
          "DynamicPipelineTemplate._create_pipeline_dag",
          "_create_pipeline_dag",
          "DynamicPipelineTemplate._create_config_map",
          "_create_config_map",
          "DynamicPipelineTemplate._create_step_builder_map",
          "_create_step_builder_map",
          "DynamicPipelineTemplate._validate_configuration",
          "_validate_configuration",
          "DynamicPipelineTemplate.get_resolution_preview",
          "get_resolution_preview",
          "DynamicPipelineTemplate._store_pipeline_metadata",
          "_store_pipeline_metadata",
          "DynamicPipelineTemplate.get_builder_registry_stats",
          "get_builder_registry_stats",
          "DynamicPipelineTemplate.validate_before_build",
          "validate_before_build",
          "DynamicPipelineTemplate.get_step_dependencies",
          "get_step_dependencies",
          "DynamicPipelineTemplate.get_execution_order",
          "get_execution_order",
          "DynamicPipelineTemplate._get_pipeline_parameters",
          "_get_pipeline_parameters",
          "DynamicPipelineTemplate.fill_execution_document",
          "fill_execution_document",
          "DynamicPipelineTemplate._fill_cradle_configurations",
          "_fill_cradle_configurations",
          "DynamicPipelineTemplate._create_execution_doc_config",
          "_create_execution_doc_config",
          "DynamicPipelineTemplate._find_registration_step_nodes",
          "_find_registration_step_nodes",
          "DynamicPipelineTemplate._fill_registration_configurations",
          "_fill_registration_configurations",
          "DynamicPipelineTemplate._has_required_registration_fields",
          "_has_required_registration_fields",
          "__init__",
          "_detect_config_classes",
          "_create_pipeline_dag",
          "_create_config_map",
          "_create_step_builder_map",
          "_validate_configuration",
          "get_resolution_preview",
          "_store_pipeline_metadata",
          "get_builder_registry_stats",
          "validate_before_build",
          "get_step_dependencies",
          "get_execution_order",
          "_get_pipeline_parameters",
          "fill_execution_document",
          "_fill_cradle_configurations",
          "_create_execution_doc_config",
          "_find_registration_step_nodes",
          "_fill_registration_configurations",
          "_has_required_registration_fields"
        ],
        "src/cursus/core/compiler/config_resolver.py": [
          "StepConfigResolver.__init__",
          "__init__",
          "StepConfigResolver.resolve_config_map",
          "resolve_config_map",
          "StepConfigResolver._resolve_single_node",
          "_resolve_single_node",
          "StepConfigResolver._direct_name_matching",
          "_direct_name_matching",
          "StepConfigResolver._job_type_matching",
          "_job_type_matching",
          "StepConfigResolver._semantic_matching",
          "_semantic_matching",
          "StepConfigResolver._pattern_matching",
          "_pattern_matching",
          "StepConfigResolver._calculate_config_type_confidence",
          "_calculate_config_type_confidence",
          "StepConfigResolver._calculate_semantic_similarity",
          "_calculate_semantic_similarity",
          "StepConfigResolver._calculate_job_type_boost",
          "_calculate_job_type_boost",
          "StepConfigResolver._config_class_to_step_type",
          "_config_class_to_step_type",
          "StepConfigResolver._parse_node_name",
          "_parse_node_name",
          "StepConfigResolver._job_type_matching_enhanced",
          "_job_type_matching_enhanced",
          "StepConfigResolver.preview_resolution",
          "preview_resolution",
          "__init__",
          "resolve_config_map",
          "_resolve_single_node",
          "_direct_name_matching",
          "_job_type_matching",
          "_semantic_matching",
          "_pattern_matching",
          "_calculate_config_type_confidence",
          "_calculate_semantic_similarity",
          "_calculate_job_type_boost",
          "_config_class_to_step_type",
          "_parse_node_name",
          "_job_type_matching_enhanced",
          "preview_resolution"
        ],
        "src/cursus/core/compiler/exceptions.py": [
          "ConfigurationError.__init__",
          "__init__",
          "ConfigurationError.__str__",
          "__str__",
          "AmbiguityError.__init__",
          "__init__",
          "AmbiguityError.__str__",
          "__str__",
          "ValidationError.__init__",
          "__init__",
          "ValidationError.__str__",
          "__str__",
          "ResolutionError.__init__",
          "__init__",
          "ResolutionError.__str__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__"
        ],
        "src/cursus/core/compiler/validation.py": [
          "ValidationResult.summary",
          "summary",
          "ValidationResult.detailed_report",
          "detailed_report",
          "ResolutionPreview.display",
          "display",
          "ConversionReport.summary",
          "summary",
          "ConversionReport.detailed_report",
          "detailed_report",
          "ValidationEngine.__init__",
          "__init__",
          "ValidationEngine.validate_dag_compatibility",
          "validate_dag_compatibility",
          "summary",
          "detailed_report",
          "display",
          "summary",
          "detailed_report",
          "__init__",
          "validate_dag_compatibility"
        ]
      },
      "test_functions_by_file": {
        "test/core/compiler/test_validation.py": [
          "TestValidationResult.test_validation_result_valid",
          "test_validation_result_valid",
          "TestValidationResult.test_validation_result_invalid",
          "test_validation_result_invalid",
          "TestValidationResult.test_detailed_report_valid",
          "test_detailed_report_valid",
          "TestValidationResult.test_detailed_report_invalid_with_recommendations",
          "test_detailed_report_invalid_with_recommendations",
          "TestResolutionPreview.test_resolution_preview_display",
          "test_resolution_preview_display",
          "TestConversionReport.test_conversion_report_summary",
          "test_conversion_report_summary",
          "TestConversionReport.test_conversion_report_detailed_report",
          "test_conversion_report_detailed_report",
          "TestValidationEngine.setUp",
          "setUp",
          "TestValidationEngine.test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_success",
          "TestValidationEngine.test_validate_dag_compatibility_missing_configs",
          "test_validate_dag_compatibility_missing_configs",
          "TestValidationEngine.test_validate_dag_compatibility_unresolvable_builders",
          "test_validate_dag_compatibility_unresolvable_builders",
          "TestValidationEngine.test_validate_dag_compatibility_config_errors",
          "test_validate_dag_compatibility_config_errors",
          "TestValidationEngine.test_validate_dag_compatibility_with_job_type_variants",
          "test_validate_dag_compatibility_with_job_type_variants",
          "TestValidationEngine.test_validate_dag_compatibility_with_legacy_aliases",
          "test_validate_dag_compatibility_with_legacy_aliases",
          "test_validation_result_valid",
          "test_validation_result_invalid",
          "test_detailed_report_valid",
          "test_detailed_report_invalid_with_recommendations",
          "test_resolution_preview_display",
          "test_conversion_report_summary",
          "test_conversion_report_detailed_report",
          "setUp",
          "test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_missing_configs",
          "test_validate_dag_compatibility_unresolvable_builders",
          "test_validate_dag_compatibility_config_errors",
          "test_validate_dag_compatibility_with_job_type_variants",
          "test_validate_dag_compatibility_with_legacy_aliases"
        ],
        "test/core/compiler/test_config_resolver.py": [
          "TestConfigResolver.setUp",
          "setUp",
          "TestConfigResolver.test_direct_name_matching",
          "test_direct_name_matching",
          "TestConfigResolver.test_job_type_matching",
          "test_job_type_matching",
          "TestConfigResolver.test_semantic_matching",
          "test_semantic_matching",
          "TestConfigResolver.test_pattern_matching",
          "test_pattern_matching",
          "TestConfigResolver.test_resolve_config_map",
          "test_resolve_config_map",
          "TestConfigResolver.test_resolve_single_node_direct_match",
          "test_resolve_single_node_direct_match",
          "TestConfigResolver.test_resolve_single_node_no_match",
          "test_resolve_single_node_no_match",
          "TestConfigResolver.test_resolve_single_node_ambiguity",
          "test_resolve_single_node_ambiguity",
          "TestConfigResolver.test_preview_resolution",
          "test_preview_resolution",
          "setUp",
          "test_direct_name_matching",
          "test_job_type_matching",
          "test_semantic_matching",
          "test_pattern_matching",
          "test_resolve_config_map",
          "test_resolve_single_node_direct_match",
          "test_resolve_single_node_no_match",
          "test_resolve_single_node_ambiguity",
          "test_preview_resolution",
          "mock_direct_match",
          "mock_job_type_match",
          "mock_semantic_match",
          "mock_pattern_match",
          "mock_direct_match",
          "mock_direct_match",
          "mock_job_type_match",
          "mock_semantic_match",
          "mock_pattern_match",
          "mock_direct_match",
          "mock_job_type_match",
          "mock_semantic_match",
          "mock_pattern_match",
          "mock_resolve_candidates"
        ],
        "test/core/compiler/test_exceptions.py": [
          "TestPipelineAPIExceptions.test_pipeline_api_error_base",
          "test_pipeline_api_error_base",
          "TestPipelineAPIExceptions.test_configuration_error_basic",
          "test_configuration_error_basic",
          "TestPipelineAPIExceptions.test_configuration_error_with_details",
          "test_configuration_error_with_details",
          "TestPipelineAPIExceptions.test_ambiguity_error_basic",
          "test_ambiguity_error_basic",
          "TestPipelineAPIExceptions.test_ambiguity_error_with_tuple_candidates",
          "test_ambiguity_error_with_tuple_candidates",
          "TestPipelineAPIExceptions.test_ambiguity_error_with_dict_candidates",
          "test_ambiguity_error_with_dict_candidates",
          "TestPipelineAPIExceptions.test_validation_error_basic",
          "test_validation_error_basic",
          "TestPipelineAPIExceptions.test_validation_error_with_details",
          "test_validation_error_with_details",
          "TestPipelineAPIExceptions.test_resolution_error_basic",
          "test_resolution_error_basic",
          "TestPipelineAPIExceptions.test_resolution_error_with_details",
          "test_resolution_error_with_details",
          "TestPipelineAPIExceptions.test_exception_inheritance",
          "test_exception_inheritance",
          "test_pipeline_api_error_base",
          "test_configuration_error_basic",
          "test_configuration_error_with_details",
          "test_ambiguity_error_basic",
          "test_ambiguity_error_with_tuple_candidates",
          "test_ambiguity_error_with_dict_candidates",
          "test_validation_error_basic",
          "test_validation_error_with_details",
          "test_resolution_error_basic",
          "test_resolution_error_with_details",
          "test_exception_inheritance",
          "MockConfig.__init__",
          "__init__",
          "__init__"
        ],
        "test/core/compiler/test_name_generator.py": [
          "TestNameGenerator.test_generate_random_word_length",
          "test_generate_random_word_length",
          "TestNameGenerator.test_validate_pipeline_name",
          "test_validate_pipeline_name",
          "TestNameGenerator.test_sanitize_pipeline_name",
          "test_sanitize_pipeline_name",
          "TestNameGenerator.test_generate_pipeline_name",
          "test_generate_pipeline_name",
          "test_generate_random_word_length",
          "test_validate_pipeline_name",
          "test_sanitize_pipeline_name",
          "test_generate_pipeline_name"
        ],
        "test/core/compiler/test_dynamic_template.py": [
          "TestDynamicPipelineTemplate.setUp",
          "setUp",
          "TestDynamicPipelineTemplate.tearDown",
          "tearDown",
          "TestDynamicPipelineTemplate.test_init_stores_config_path",
          "test_init_stores_config_path",
          "TestDynamicPipelineTemplate.test_detect_config_classes",
          "test_detect_config_classes",
          "TestDynamicPipelineTemplate.test_create_pipeline_dag",
          "test_create_pipeline_dag",
          "TestDynamicPipelineTemplate.test_create_config_map",
          "test_create_config_map",
          "TestDynamicPipelineTemplate.test_create_step_builder_map",
          "test_create_step_builder_map",
          "TestDynamicPipelineTemplate.test_get_resolution_preview",
          "test_get_resolution_preview",
          "TestDynamicPipelineTemplate.test_get_step_dependencies",
          "test_get_step_dependencies",
          "TestDynamicPipelineTemplate.test_get_pipeline_parameters",
          "test_get_pipeline_parameters",
          "setUp",
          "tearDown",
          "test_init_stores_config_path",
          "test_detect_config_classes",
          "test_create_pipeline_dag",
          "test_create_config_map",
          "test_create_step_builder_map",
          "test_get_resolution_preview",
          "test_get_step_dependencies",
          "test_get_pipeline_parameters"
        ],
        "test/core/compiler/test_dag_compiler.py": [
          "TestDagCompiler.setUp",
          "setUp",
          "TestDagCompiler.test_compile_with_custom_pipeline_name",
          "test_compile_with_custom_pipeline_name",
          "TestCompileDagToPipeline.setUp",
          "setUp",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_invalid_dag",
          "test_compile_dag_to_pipeline_invalid_dag",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_empty_dag",
          "test_compile_dag_to_pipeline_empty_dag",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_missing_config_file",
          "test_compile_dag_to_pipeline_missing_config_file",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_success",
          "test_compile_dag_to_pipeline_success",
          "TestCompileDagToPipeline.test_compile_dag_to_pipeline_exception_handling",
          "test_compile_dag_to_pipeline_exception_handling",
          "TestPipelineDAGCompilerInit.setUp",
          "setUp",
          "TestPipelineDAGCompilerInit.test_compiler_init_success",
          "test_compiler_init_success",
          "TestPipelineDAGCompilerInit.test_compiler_init_missing_config_file",
          "test_compiler_init_missing_config_file",
          "TestPipelineDAGCompilerInit.test_compiler_init_with_custom_components",
          "test_compiler_init_with_custom_components",
          "TestPipelineDAGCompilerValidation.setUp",
          "setUp",
          "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_success",
          "TestPipelineDAGCompilerValidation.test_validate_dag_compatibility_config_resolution_failure",
          "test_validate_dag_compatibility_config_resolution_failure",
          "TestPipelineDAGCompilerValidation.test_preview_resolution_success",
          "test_preview_resolution_success",
          "TestPipelineDAGCompilerValidation.test_preview_resolution_exception_handling",
          "test_preview_resolution_exception_handling",
          "TestPipelineDAGCompilerCompilation.setUp",
          "setUp",
          "TestPipelineDAGCompilerCompilation.test_compile_success",
          "test_compile_success",
          "TestPipelineDAGCompilerCompilation.test_compile_with_custom_pipeline_name",
          "test_compile_with_custom_pipeline_name",
          "TestPipelineDAGCompilerCompilation.test_compile_exception_handling",
          "test_compile_exception_handling",
          "TestPipelineDAGCompilerCompilation.test_compile_with_report",
          "test_compile_with_report",
          "TestPipelineDAGCompilerUtilityMethods.setUp",
          "setUp",
          "TestPipelineDAGCompilerUtilityMethods.test_get_supported_step_types",
          "test_get_supported_step_types",
          "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_success",
          "test_validate_config_file_success",
          "TestPipelineDAGCompilerUtilityMethods.test_validate_config_file_failure",
          "test_validate_config_file_failure",
          "TestPipelineDAGCompilerUtilityMethods.test_get_last_template",
          "test_get_last_template",
          "TestPipelineDAGCompilerUtilityMethods.test_compile_and_fill_execution_doc",
          "test_compile_and_fill_execution_doc",
          "setUp",
          "test_compile_with_custom_pipeline_name",
          "setUp",
          "test_compile_dag_to_pipeline_invalid_dag",
          "test_compile_dag_to_pipeline_empty_dag",
          "test_compile_dag_to_pipeline_missing_config_file",
          "test_compile_dag_to_pipeline_success",
          "test_compile_dag_to_pipeline_exception_handling",
          "setUp",
          "test_compiler_init_success",
          "test_compiler_init_missing_config_file",
          "test_compiler_init_with_custom_components",
          "setUp",
          "test_validate_dag_compatibility_success",
          "test_validate_dag_compatibility_config_resolution_failure",
          "test_preview_resolution_success",
          "test_preview_resolution_exception_handling",
          "setUp",
          "test_compile_success",
          "test_compile_with_custom_pipeline_name",
          "test_compile_exception_handling",
          "test_compile_with_report",
          "setUp",
          "test_get_supported_step_types",
          "test_validate_config_file_success",
          "test_validate_config_file_failure",
          "test_get_last_template",
          "test_compile_and_fill_execution_doc"
        ],
        "test/core/compiler/test_fill_execution_document.py": [
          "TestFillExecutionDocument.setUp",
          "setUp",
          "TestFillExecutionDocument.mock_template",
          "mock_template",
          "TestFillExecutionDocument.test_fill_execution_document",
          "test_fill_execution_document",
          "TestFillExecutionDocument.test_fill_execution_document_with_missing_sections",
          "test_fill_execution_document_with_missing_sections",
          "TestFillExecutionDocument.test_fill_execution_document_with_missing_steps",
          "test_fill_execution_document_with_missing_steps",
          "TestFillExecutionDocument.test_find_registration_step_nodes",
          "test_find_registration_step_nodes",
          "setUp",
          "mock_template",
          "test_fill_execution_document",
          "test_fill_execution_document_with_missing_sections",
          "test_fill_execution_document_with_missing_steps",
          "test_find_registration_step_nodes"
        ],
        "test/core/compiler/test_enhanced_config_resolver.py": [
          "TestEnhancedConfigResolver.setUp",
          "setUp",
          "TestEnhancedConfigResolver.test_parse_node_name",
          "test_parse_node_name",
          "TestEnhancedConfigResolver.test_direct_name_matching",
          "test_direct_name_matching",
          "TestEnhancedConfigResolver.test_direct_name_matching_with_metadata",
          "test_direct_name_matching_with_metadata",
          "TestEnhancedConfigResolver.test_job_type_matching_enhanced",
          "test_job_type_matching_enhanced",
          "TestEnhancedConfigResolver.test_resolve_config_map_exact_matches",
          "test_resolve_config_map_exact_matches",
          "TestEnhancedConfigResolver.test_resolve_config_map_with_metadata",
          "test_resolve_config_map_with_metadata",
          "TestEnhancedConfigResolver.test_resolve_single_node_prioritization",
          "test_resolve_single_node_prioritization",
          "TestEnhancedConfigResolver.test_preview_resolution",
          "test_preview_resolution",
          "TestEnhancedConfigResolver.test_ambiguity_detection",
          "test_ambiguity_detection",
          "setUp",
          "test_parse_node_name",
          "test_direct_name_matching",
          "test_direct_name_matching_with_metadata",
          "test_job_type_matching_enhanced",
          "test_resolve_config_map_exact_matches",
          "test_resolve_config_map_with_metadata",
          "test_resolve_single_node_prioritization",
          "test_preview_resolution",
          "test_ambiguity_detection",
          "mock_job_type_enhanced"
        ]
      },
      "likely_tested_functions": [
        "generate_random_word",
        "validate_pipeline_name",
        "sanitize_pipeline_name",
        "generate_pipeline_name",
        "compile_dag_to_pipeline",
        "PipelineDAGCompiler.__init__",
        "__init__",
        "PipelineDAGCompiler.validate_dag_compatibility",
        "validate_dag_compatibility",
        "PipelineDAGCompiler.preview_resolution",
        "preview_resolution",
        "PipelineDAGCompiler.compile",
        "compile",
        "PipelineDAGCompiler.compile_with_report",
        "compile_with_report",
        "PipelineDAGCompiler.create_template",
        "PipelineDAGCompiler.get_supported_step_types",
        "get_supported_step_types",
        "PipelineDAGCompiler.validate_config_file",
        "validate_config_file",
        "PipelineDAGCompiler.get_last_template",
        "get_last_template",
        "PipelineDAGCompiler.compile_and_fill_execution_doc",
        "compile_and_fill_execution_doc",
        "__init__",
        "validate_dag_compatibility",
        "preview_resolution",
        "compile",
        "compile_with_report",
        "get_supported_step_types",
        "validate_config_file",
        "get_last_template",
        "compile_and_fill_execution_doc",
        "DynamicPipelineTemplate.__init__",
        "__init__",
        "DynamicPipelineTemplate._detect_config_classes",
        "_detect_config_classes",
        "DynamicPipelineTemplate._create_pipeline_dag",
        "_create_pipeline_dag",
        "DynamicPipelineTemplate._create_config_map",
        "_create_config_map",
        "DynamicPipelineTemplate._create_step_builder_map",
        "_create_step_builder_map",
        "DynamicPipelineTemplate._validate_configuration",
        "DynamicPipelineTemplate.get_resolution_preview",
        "get_resolution_preview",
        "DynamicPipelineTemplate._store_pipeline_metadata",
        "DynamicPipelineTemplate.get_builder_registry_stats",
        "DynamicPipelineTemplate.validate_before_build",
        "DynamicPipelineTemplate.get_step_dependencies",
        "get_step_dependencies",
        "DynamicPipelineTemplate.get_execution_order",
        "DynamicPipelineTemplate._get_pipeline_parameters",
        "_get_pipeline_parameters",
        "DynamicPipelineTemplate.fill_execution_document",
        "fill_execution_document",
        "DynamicPipelineTemplate._fill_cradle_configurations",
        "DynamicPipelineTemplate._create_execution_doc_config",
        "DynamicPipelineTemplate._find_registration_step_nodes",
        "_find_registration_step_nodes",
        "DynamicPipelineTemplate._fill_registration_configurations",
        "DynamicPipelineTemplate._has_required_registration_fields",
        "__init__",
        "_detect_config_classes",
        "_create_pipeline_dag",
        "_create_config_map",
        "_create_step_builder_map",
        "get_resolution_preview",
        "get_step_dependencies",
        "_get_pipeline_parameters",
        "fill_execution_document",
        "_find_registration_step_nodes",
        "StepConfigResolver.__init__",
        "__init__",
        "StepConfigResolver.resolve_config_map",
        "resolve_config_map",
        "StepConfigResolver._resolve_single_node",
        "_resolve_single_node",
        "StepConfigResolver._direct_name_matching",
        "_direct_name_matching",
        "StepConfigResolver._job_type_matching",
        "_job_type_matching",
        "StepConfigResolver._semantic_matching",
        "_semantic_matching",
        "StepConfigResolver._pattern_matching",
        "_pattern_matching",
        "StepConfigResolver._parse_node_name",
        "_parse_node_name",
        "StepConfigResolver._job_type_matching_enhanced",
        "_job_type_matching_enhanced",
        "StepConfigResolver.preview_resolution",
        "preview_resolution",
        "__init__",
        "resolve_config_map",
        "_resolve_single_node",
        "_direct_name_matching",
        "_job_type_matching",
        "_semantic_matching",
        "_pattern_matching",
        "_parse_node_name",
        "_job_type_matching_enhanced",
        "preview_resolution",
        "ConfigurationError.__init__",
        "__init__",
        "AmbiguityError.__init__",
        "__init__",
        "ValidationError.__init__",
        "__init__",
        "ResolutionError.__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "ValidationResult.summary",
        "summary",
        "ValidationResult.detailed_report",
        "detailed_report",
        "ResolutionPreview.display",
        "display",
        "ConversionReport.summary",
        "summary",
        "ConversionReport.detailed_report",
        "detailed_report",
        "ValidationEngine.__init__",
        "__init__",
        "ValidationEngine.validate_dag_compatibility",
        "validate_dag_compatibility",
        "summary",
        "detailed_report",
        "display",
        "summary",
        "detailed_report",
        "__init__",
        "validate_dag_compatibility"
      ],
      "likely_untested_functions": [
        "create_template",
        "create_template",
        "_validate_configuration",
        "_store_pipeline_metadata",
        "get_builder_registry_stats",
        "validate_before_build",
        "get_execution_order",
        "_fill_cradle_configurations",
        "_create_execution_doc_config",
        "_fill_registration_configurations",
        "_has_required_registration_fields",
        "_validate_configuration",
        "_store_pipeline_metadata",
        "get_builder_registry_stats",
        "validate_before_build",
        "get_execution_order",
        "_fill_cradle_configurations",
        "_create_execution_doc_config",
        "_fill_registration_configurations",
        "_has_required_registration_fields",
        "StepConfigResolver._calculate_config_type_confidence",
        "_calculate_config_type_confidence",
        "StepConfigResolver._calculate_semantic_similarity",
        "_calculate_semantic_similarity",
        "StepConfigResolver._calculate_job_type_boost",
        "_calculate_job_type_boost",
        "StepConfigResolver._config_class_to_step_type",
        "_config_class_to_step_type",
        "_calculate_config_type_confidence",
        "_calculate_semantic_similarity",
        "_calculate_job_type_boost",
        "_config_class_to_step_type",
        "ConfigurationError.__str__",
        "__str__",
        "AmbiguityError.__str__",
        "__str__",
        "ValidationError.__str__",
        "__str__",
        "ResolutionError.__str__",
        "__str__",
        "__str__",
        "__str__",
        "__str__",
        "__str__"
      ]
    },
    "config_fields": {
      "component": "config_fields",
      "source_files": [
        "src/cursus/core/config_fields/tier_registry.py",
        "src/cursus/core/config_fields/config_merger.py",
        "src/cursus/core/config_fields/constants.py",
        "src/cursus/core/config_fields/config_class_store.py",
        "src/cursus/core/config_fields/type_aware_config_serializer.py",
        "src/cursus/core/config_fields/cradle_config_factory.py",
        "src/cursus/core/config_fields/config_class_detector.py",
        "src/cursus/core/config_fields/config_field_categorizer.py",
        "src/cursus/core/config_fields/circular_reference_tracker.py"
      ],
      "test_files": [
        "test/core/config_fields/test_type_aware_serialization.py",
        "test/core/config_fields/test_circular_reference_tracker.py",
        "test/core/config_fields/test_config_field_categorizer.py",
        "test/core/config_fields/test_circular_reference_consolidated.py",
        "test/core/config_fields/test_bug_fixes_consolidated.py",
        "test/core/config_fields/test_config_class_detector.py",
        "test/core/config_fields/test_tier_registry.py",
        "test/core/config_fields/test_config_merger.py",
        "test/core/config_fields/test_type_aware_deserialization.py",
        "test/core/config_fields/test_config_class_store.py",
        "test/core/config_fields/test_integration.py",
        "test/core/config_fields/test_constants.py"
      ],
      "total_source_functions": 160,
      "tested_functions": 121,
      "untested_functions": 39,
      "coverage_percentage": 75.625,
      "source_functions_by_file": {
        "src/cursus/core/config_fields/tier_registry.py": [
          "ConfigFieldTierRegistry.get_tier",
          "get_tier",
          "ConfigFieldTierRegistry.register_field",
          "register_field",
          "ConfigFieldTierRegistry.register_fields",
          "register_fields",
          "ConfigFieldTierRegistry.get_fields_by_tier",
          "get_fields_by_tier",
          "ConfigFieldTierRegistry.reset_to_defaults",
          "reset_to_defaults",
          "get_tier",
          "register_field",
          "register_fields",
          "get_fields_by_tier",
          "reset_to_defaults"
        ],
        "src/cursus/core/config_fields/config_merger.py": [
          "ConfigMerger.__init__",
          "__init__",
          "ConfigMerger.merge",
          "merge",
          "ConfigMerger._verify_merged_output",
          "_verify_merged_output",
          "ConfigMerger._generate_step_name",
          "_generate_step_name",
          "ConfigMerger._check_mutual_exclusivity",
          "_check_mutual_exclusivity",
          "ConfigMerger._check_special_fields_placement",
          "_check_special_fields_placement",
          "ConfigMerger._check_required_fields",
          "_check_required_fields",
          "ConfigMerger.save",
          "save",
          "ConfigMerger.load",
          "load",
          "ConfigMerger.merge_with_direction",
          "merge_with_direction",
          "merge_and_save_configs",
          "load_configs",
          "__init__",
          "merge",
          "_verify_merged_output",
          "_generate_step_name",
          "_check_mutual_exclusivity",
          "_check_special_fields_placement",
          "_check_required_fields",
          "save",
          "load",
          "merge_with_direction"
        ],
        "src/cursus/core/config_fields/constants.py": [],
        "src/cursus/core/config_fields/config_class_store.py": [
          "ConfigClassStore.register",
          "register",
          "ConfigClassStore.get_class",
          "get_class",
          "ConfigClassStore.get_all_classes",
          "get_all_classes",
          "ConfigClassStore.register_many",
          "register_many",
          "ConfigClassStore.clear",
          "clear",
          "ConfigClassStore.registered_names",
          "registered_names",
          "build_complete_config_classes",
          "register",
          "get_class",
          "get_all_classes",
          "register_many",
          "clear",
          "registered_names",
          "_register"
        ],
        "src/cursus/core/config_fields/type_aware_config_serializer.py": [
          "TypeAwareConfigSerializer.__init__",
          "__init__",
          "TypeAwareConfigSerializer.serialize",
          "serialize",
          "TypeAwareConfigSerializer.deserialize",
          "deserialize",
          "TypeAwareConfigSerializer._deserialize_model",
          "_deserialize_model",
          "TypeAwareConfigSerializer._get_class_by_name",
          "_get_class_by_name",
          "TypeAwareConfigSerializer.generate_step_name",
          "generate_step_name",
          "TypeAwareConfigSerializer._generate_step_name_fallback",
          "_generate_step_name_fallback",
          "serialize_config",
          "deserialize_config",
          "__init__",
          "serialize",
          "deserialize",
          "_deserialize_model",
          "_get_class_by_name",
          "generate_step_name",
          "_generate_step_name_fallback"
        ],
        "src/cursus/core/config_fields/cradle_config_factory.py": [
          "_map_region_to_aws_region",
          "_create_field_schema",
          "_format_edx_manifest_key",
          "_create_edx_manifest",
          "_create_edx_manifest_from_key",
          "_generate_transform_sql",
          "_get_all_fields",
          "create_cradle_data_load_config",
          "create_training_and_calibration_configs"
        ],
        "src/cursus/core/config_fields/config_class_detector.py": [
          "ConfigClassDetector.detect_from_json",
          "detect_from_json",
          "ConfigClassDetector._extract_class_names",
          "_extract_class_names",
          "ConfigClassDetector.from_config_store",
          "from_config_store",
          "detect_config_classes_from_json",
          "detect_from_json",
          "_extract_class_names",
          "from_config_store"
        ],
        "src/cursus/core/config_fields/config_field_categorizer.py": [
          "ConfigFieldCategorizer.__init__",
          "__init__",
          "ConfigFieldCategorizer._collect_field_info",
          "_collect_field_info",
          "ConfigFieldCategorizer._is_special_field",
          "_is_special_field",
          "ConfigFieldCategorizer._is_likely_static",
          "_is_likely_static",
          "ConfigFieldCategorizer._categorize_fields",
          "_categorize_fields",
          "ConfigFieldCategorizer._categorize_field",
          "_categorize_field",
          "ConfigFieldCategorizer._place_field",
          "_place_field",
          "ConfigFieldCategorizer.get_category_for_field",
          "get_category_for_field",
          "ConfigFieldCategorizer.get_categorized_fields",
          "get_categorized_fields",
          "ConfigFieldCategorizer.print_categorization_stats",
          "print_categorization_stats",
          "__init__",
          "_collect_field_info",
          "_is_special_field",
          "_is_likely_static",
          "_categorize_fields",
          "_categorize_field",
          "_place_field",
          "get_category_for_field",
          "get_categorized_fields",
          "print_categorization_stats"
        ],
        "src/cursus/core/config_fields/circular_reference_tracker.py": [
          "CircularReferenceTracker.__init__",
          "__init__",
          "CircularReferenceTracker.enter_object",
          "enter_object",
          "CircularReferenceTracker.exit_object",
          "exit_object",
          "CircularReferenceTracker.get_current_path_str",
          "get_current_path_str",
          "CircularReferenceTracker._format_cycle_error",
          "_format_cycle_error",
          "CircularReferenceTracker._format_depth_error",
          "_format_depth_error",
          "CircularReferenceTracker._generate_object_id",
          "_generate_object_id",
          "__init__",
          "enter_object",
          "exit_object",
          "get_current_path_str",
          "_format_cycle_error",
          "_format_depth_error",
          "_generate_object_id"
        ]
      },
      "test_functions_by_file": {
        "test/core/config_fields/test_type_aware_serialization.py": [
          "TestTypeAwareSerialization.setUp",
          "setUp",
          "TestTypeAwareSerialization.test_basic_serialization",
          "test_basic_serialization",
          "TestTypeAwareSerialization.test_nested_serialization",
          "test_nested_serialization",
          "TestTypeAwareSerialization.test_generate_step_name_basic",
          "test_generate_step_name_basic",
          "TestTypeAwareSerialization.test_generate_step_name_job_type",
          "test_generate_step_name_job_type",
          "TestTypeAwareSerialization.test_generate_step_name_multiple_attributes",
          "test_generate_step_name_multiple_attributes",
          "TestTypeAwareSerialization.test_serialize_config_includes_step_name",
          "test_serialize_config_includes_step_name",
          "TestTypeAwareSerialization.test_serialize_deserialize_preserves_job_type",
          "test_serialize_deserialize_preserves_job_type",
          "TestTypeAwareSerialization.test_full_serialize_config_cycle",
          "test_full_serialize_config_cycle",
          "setUp",
          "test_basic_serialization",
          "test_nested_serialization",
          "test_generate_step_name_basic",
          "test_generate_step_name_job_type",
          "test_generate_step_name_multiple_attributes",
          "test_serialize_config_includes_step_name",
          "test_serialize_deserialize_preserves_job_type",
          "test_full_serialize_config_cycle"
        ],
        "test/core/config_fields/test_circular_reference_tracker.py": [
          "CircularReferenceTrackerTest.setUp",
          "setUp",
          "CircularReferenceTrackerTest.test_simple_object_tracking",
          "test_simple_object_tracking",
          "CircularReferenceTrackerTest.test_nested_object_tracking",
          "test_nested_object_tracking",
          "CircularReferenceTrackerTest.test_circular_reference_detection",
          "test_circular_reference_detection",
          "CircularReferenceTrackerTest.test_max_depth_detection",
          "test_max_depth_detection",
          "CircularReferenceTrackerTest.test_object_identification",
          "test_object_identification",
          "CircularReferenceTrackerTest.test_integration_with_serializer_simulation",
          "test_integration_with_serializer_simulation",
          "CircularReferenceTrackerTest.test_complex_nested_paths",
          "test_complex_nested_paths",
          "CircularReferenceTrackerTest.test_actual_integration_with_serializer",
          "test_actual_integration_with_serializer",
          "CircularReferenceTrackerTest.test_error_message_formatting",
          "test_error_message_formatting",
          "CircularReferenceTrackerTest._format_cycle_error_manual",
          "_format_cycle_error_manual",
          "setUp",
          "test_simple_object_tracking",
          "test_nested_object_tracking",
          "test_circular_reference_detection",
          "test_max_depth_detection",
          "test_object_identification",
          "test_integration_with_serializer_simulation",
          "test_complex_nested_paths",
          "test_actual_integration_with_serializer",
          "test_error_message_formatting",
          "_format_cycle_error_manual",
          "deserialize"
        ],
        "test/core/config_fields/test_config_field_categorizer.py": [
          "BaseTestConfig.__init__",
          "__init__",
          "TestConfigFieldCategorizer.setUp",
          "setUp",
          "TestConfigFieldCategorizer.test_init_categorizes_configs",
          "test_init_categorizes_configs",
          "TestConfigFieldCategorizer.test_is_special_field",
          "test_is_special_field",
          "TestConfigFieldCategorizer.test_is_likely_static",
          "test_is_likely_static",
          "TestConfigFieldCategorizer.test_categorize_field",
          "test_categorize_field",
          "TestConfigFieldCategorizer.test_categorize_fields_structure",
          "test_categorize_fields_structure",
          "TestConfigFieldCategorizer.test_place_field_shared",
          "test_place_field_shared",
          "TestConfigFieldCategorizer.test_place_field_specific",
          "test_place_field_specific",
          "TestConfigFieldCategorizer.test_get_categorized_fields",
          "test_get_categorized_fields",
          "TestConfigFieldCategorizer.test_end_to_end_categorization",
          "test_end_to_end_categorization",
          "__init__",
          "setUp",
          "test_init_categorizes_configs",
          "test_is_special_field",
          "test_is_likely_static",
          "test_categorize_field",
          "test_categorize_fields_structure",
          "test_place_field_shared",
          "test_place_field_specific",
          "test_get_categorized_fields",
          "test_end_to_end_categorization",
          "mock_serialize_impl",
          "mock_serialize_impl",
          "mock_serialize_impl",
          "mock_serialize_impl"
        ],
        "test/core/config_fields/test_circular_reference_consolidated.py": [
          "TestLogHandler.__init__",
          "__init__",
          "TestLogHandler.emit",
          "emit",
          "TestCircularReferenceConsolidated.setUp",
          "setUp",
          "TestCircularReferenceConsolidated.tearDown",
          "tearDown",
          "TestCircularReferenceConsolidated.test_enhanced_placeholders_for_circular_refs",
          "test_enhanced_placeholders_for_circular_refs",
          "TestCircularReferenceConsolidated.test_list_items_avoid_false_positives",
          "test_list_items_avoid_false_positives",
          "TestCircularReferenceConsolidated.test_nested_complex_structure",
          "test_nested_complex_structure",
          "TestCircularReferenceConsolidated.test_true_circular_references_still_detected",
          "test_true_circular_references_still_detected",
          "TestCircularReferenceConsolidated.test_special_list_format_handling",
          "test_special_list_format_handling",
          "TestCircularReferenceConsolidated.test_type_metadata_handling_with_circular_refs",
          "test_type_metadata_handling_with_circular_refs",
          "TestCircularReferenceConsolidated.test_deep_nesting_without_circularity",
          "test_deep_nesting_without_circularity",
          "TestCircularReferenceConsolidated.test_circular_reference_error_messages",
          "test_circular_reference_error_messages",
          "TestCircularReferenceConsolidated.test_performance_with_large_structures",
          "test_performance_with_large_structures",
          "__init__",
          "emit",
          "setUp",
          "tearDown",
          "test_enhanced_placeholders_for_circular_refs",
          "test_list_items_avoid_false_positives",
          "test_nested_complex_structure",
          "test_true_circular_references_still_detected",
          "test_special_list_format_handling",
          "test_type_metadata_handling_with_circular_refs",
          "test_deep_nesting_without_circularity",
          "test_circular_reference_error_messages",
          "test_performance_with_large_structures"
        ],
        "test/core/config_fields/test_bug_fixes_consolidated.py": [
          "TestBugFixesConsolidated.setUp",
          "setUp",
          "TestBugFixesConsolidated.tearDown",
          "tearDown",
          "TestBugFixesConsolidated.test_circular_reference_handling_in_data_sources",
          "test_circular_reference_handling_in_data_sources",
          "TestBugFixesConsolidated.test_special_list_format_handling",
          "test_special_list_format_handling",
          "TestBugFixesConsolidated.test_circular_reference_handling_in_hyperparameters",
          "test_circular_reference_handling_in_hyperparameters",
          "TestBugFixesConsolidated.test_payload_config_recursion_fix",
          "test_payload_config_recursion_fix",
          "TestBugFixesConsolidated.test_load_real_config_file",
          "test_load_real_config_file",
          "TestBugFixesConsolidated.test_additional_config_with_special_list",
          "test_additional_config_with_special_list",
          "TestBugFixesConsolidated.test_deep_recursion_prevention",
          "test_deep_recursion_prevention",
          "TestBugFixesConsolidated.test_memory_leak_prevention",
          "test_memory_leak_prevention",
          "TestBugFixesConsolidated.test_error_handling_improvements",
          "test_error_handling_improvements",
          "setUp",
          "tearDown",
          "test_circular_reference_handling_in_data_sources",
          "test_special_list_format_handling",
          "test_circular_reference_handling_in_hyperparameters",
          "test_payload_config_recursion_fix",
          "test_load_real_config_file",
          "test_additional_config_with_special_list",
          "test_deep_recursion_prevention",
          "test_memory_leak_prevention",
          "test_error_handling_improvements",
          "create_nested_config"
        ],
        "test/core/config_fields/test_config_class_detector.py": [
          "TestConfigClassDetector.setUp",
          "setUp",
          "TestConfigClassDetector.test_extract_class_names_from_metadata",
          "test_extract_class_names_from_metadata",
          "TestConfigClassDetector.test_extract_class_names_from_specific_configs",
          "test_extract_class_names_from_specific_configs",
          "TestConfigClassDetector.test_extract_class_names_empty_config",
          "test_extract_class_names_empty_config",
          "TestConfigClassDetector.test_extract_class_names_partial_config",
          "test_extract_class_names_partial_config",
          "TestConfigClassDetector.test_extract_class_names_invalid_specific_config",
          "test_extract_class_names_invalid_specific_config",
          "TestConfigClassDetector.test_detect_from_json_success",
          "test_detect_from_json_success",
          "TestConfigClassDetector.test_detect_from_json_file_not_found",
          "test_detect_from_json_file_not_found",
          "TestConfigClassDetector.test_detect_from_json_invalid_json",
          "test_detect_from_json_invalid_json",
          "TestConfigClassDetector.test_detect_from_json_no_class_names_found",
          "test_detect_from_json_no_class_names_found",
          "TestConfigClassDetector.test_detect_from_json_missing_classes",
          "test_detect_from_json_missing_classes",
          "TestConfigClassDetector.test_from_config_store_success",
          "test_from_config_store_success",
          "TestConfigClassDetector.test_from_config_store_io_error",
          "test_from_config_store_io_error",
          "TestConfigClassDetector.test_from_config_store_no_class_names",
          "test_from_config_store_no_class_names",
          "TestConfigClassDetector.test_essential_classes_constant",
          "test_essential_classes_constant",
          "TestConfigClassDetector.test_field_constants",
          "test_field_constants",
          "TestConfigClassDetector.test_detect_config_classes_from_json_function",
          "test_detect_config_classes_from_json_function",
          "TestConfigClassDetector.test_real_file_integration",
          "test_real_file_integration",
          "TestConfigClassDetector.test_edge_case_nested_specific_configs",
          "test_edge_case_nested_specific_configs",
          "TestConfigClassDetector.test_edge_case_malformed_metadata",
          "test_edge_case_malformed_metadata",
          "setUp",
          "test_extract_class_names_from_metadata",
          "test_extract_class_names_from_specific_configs",
          "test_extract_class_names_empty_config",
          "test_extract_class_names_partial_config",
          "test_extract_class_names_invalid_specific_config",
          "test_detect_from_json_success",
          "test_detect_from_json_file_not_found",
          "test_detect_from_json_invalid_json",
          "test_detect_from_json_no_class_names_found",
          "test_detect_from_json_missing_classes",
          "test_from_config_store_success",
          "test_from_config_store_io_error",
          "test_from_config_store_no_class_names",
          "test_essential_classes_constant",
          "test_field_constants",
          "test_detect_config_classes_from_json_function",
          "test_real_file_integration",
          "test_edge_case_nested_specific_configs",
          "test_edge_case_malformed_metadata"
        ],
        "test/core/config_fields/test_tier_registry.py": [
          "TestConfigFieldTierRegistry.setUp",
          "setUp",
          "TestConfigFieldTierRegistry.tearDown",
          "tearDown",
          "TestConfigFieldTierRegistry.test_get_tier_method",
          "test_get_tier_method",
          "TestConfigFieldTierRegistry.test_register_field_method",
          "test_register_field_method",
          "TestConfigFieldTierRegistry.test_register_field_validation",
          "test_register_field_validation",
          "TestConfigFieldTierRegistry.test_register_fields_method",
          "test_register_fields_method",
          "TestConfigFieldTierRegistry.test_register_fields_validation",
          "test_register_fields_validation",
          "TestConfigFieldTierRegistry.test_get_fields_by_tier_method",
          "test_get_fields_by_tier_method",
          "TestConfigFieldTierRegistry.test_get_fields_by_tier_validation",
          "test_get_fields_by_tier_validation",
          "TestConfigFieldTierRegistry.test_reset_to_defaults_method",
          "test_reset_to_defaults_method",
          "TestConfigFieldTierRegistry.test_default_tier_assignments_validation",
          "test_default_tier_assignments_validation",
          "TestConfigFieldTierRegistry.test_tier_distribution",
          "test_tier_distribution",
          "TestConfigFieldTierRegistry.test_field_name_consistency",
          "test_field_name_consistency",
          "TestConfigFieldTierRegistry.test_registry_immutability_during_get_operations",
          "test_registry_immutability_during_get_operations",
          "TestConfigFieldTierRegistry.test_comprehensive_field_coverage",
          "test_comprehensive_field_coverage",
          "setUp",
          "tearDown",
          "test_get_tier_method",
          "test_register_field_method",
          "test_register_field_validation",
          "test_register_fields_method",
          "test_register_fields_validation",
          "test_get_fields_by_tier_method",
          "test_get_fields_by_tier_validation",
          "test_reset_to_defaults_method",
          "test_default_tier_assignments_validation",
          "test_tier_distribution",
          "test_field_name_consistency",
          "test_registry_immutability_during_get_operations",
          "test_comprehensive_field_coverage"
        ],
        "test/core/config_fields/test_config_merger.py": [
          "TestConfig.__init__",
          "__init__",
          "TestConfigMerger.setUp",
          "setUp",
          "TestConfigMerger.tearDown",
          "tearDown",
          "TestConfigMerger.test_init_creates_categorizer",
          "test_init_creates_categorizer",
          "TestConfigMerger.test_merge_returns_simplified_structure",
          "test_merge_returns_simplified_structure",
          "TestConfigMerger.test_verify_merged_output_checks_structure",
          "test_verify_merged_output_checks_structure",
          "TestConfigMerger.test_check_mutual_exclusivity",
          "test_check_mutual_exclusivity",
          "TestConfigMerger.test_check_special_fields_placement",
          "test_check_special_fields_placement",
          "TestConfigMerger.test_config_types_format",
          "test_config_types_format",
          "TestConfigMerger.test_save_creates_correct_output_structure",
          "test_save_creates_correct_output_structure",
          "TestConfigMerger.test_load_from_simplified_structure",
          "test_load_from_simplified_structure",
          "TestConfigMerger.test_load_from_simplified_structure_with_legacy_data",
          "test_load_from_simplified_structure_with_legacy_data",
          "TestConfigMerger.test_merge_with_direction",
          "test_merge_with_direction",
          "__init__",
          "setUp",
          "tearDown",
          "test_init_creates_categorizer",
          "test_merge_returns_simplified_structure",
          "test_verify_merged_output_checks_structure",
          "test_check_mutual_exclusivity",
          "test_check_special_fields_placement",
          "test_config_types_format",
          "test_save_creates_correct_output_structure",
          "test_load_from_simplified_structure",
          "test_load_from_simplified_structure_with_legacy_data",
          "test_merge_with_direction"
        ],
        "test/core/config_fields/test_type_aware_deserialization.py": [
          "build_complete_config_classes",
          "TestBaseConfig.validate_config",
          "validate_config",
          "TestProcessingConfig.validate_config",
          "validate_config",
          "TestTrainingConfig.validate_config",
          "validate_config",
          "TestTypeAwareDeserialization.setUp",
          "setUp",
          "TestTypeAwareDeserialization.test_type_preservation",
          "test_type_preservation",
          "TestTypeAwareDeserialization.test_type_metadata_in_serialized_output",
          "test_type_metadata_in_serialized_output",
          "TestTypeAwareDeserialization.test_config_types_format",
          "test_config_types_format",
          "TestTypeAwareDeserialization.test_custom_config_with_hyperparameters",
          "test_custom_config_with_hyperparameters",
          "TestTypeAwareDeserialization.test_config_types_format_with_custom_configs",
          "test_config_types_format_with_custom_configs",
          "TestTypeAwareDeserialization.test_multiple_config_scenarios",
          "test_multiple_config_scenarios",
          "TestTypeAwareDeserialization.test_fallback_behavior",
          "test_fallback_behavior",
          "validate_config",
          "validate_config",
          "validate_config",
          "setUp",
          "test_type_preservation",
          "test_type_metadata_in_serialized_output",
          "test_config_types_format",
          "test_custom_config_with_hyperparameters",
          "test_config_types_format_with_custom_configs",
          "test_multiple_config_scenarios",
          "test_fallback_behavior"
        ],
        "test/core/config_fields/test_config_class_store.py": [
          "TestConfigClassStore.setUp",
          "setUp",
          "TestConfigClassStore.tearDown",
          "tearDown",
          "TestConfigClassStore.test_register_decorator_functionality",
          "test_register_decorator_functionality",
          "TestConfigClassStore.test_register_direct_functionality",
          "test_register_direct_functionality",
          "TestConfigClassStore.test_get_class_method",
          "test_get_class_method",
          "TestConfigClassStore.test_get_all_classes_method",
          "test_get_all_classes_method",
          "TestConfigClassStore.test_clear_method",
          "test_clear_method",
          "TestConfigClassStore.test_register_many_method",
          "test_register_many_method",
          "TestConfigClassStore.test_registered_names_method",
          "test_registered_names_method",
          "TestConfigClassStore.test_class_name_collision_handling",
          "test_class_name_collision_handling",
          "TestConfigClassStore.test_registry_persistence_across_operations",
          "test_registry_persistence_across_operations",
          "TestConfigClassStore.test_build_complete_config_classes_function",
          "test_build_complete_config_classes_function",
          "TestConfigClassStore.test_registry_thread_safety_simulation",
          "test_registry_thread_safety_simulation",
          "TestConfigClassStore.test_edge_cases",
          "test_edge_cases",
          "setUp",
          "tearDown",
          "test_register_decorator_functionality",
          "test_register_direct_functionality",
          "test_get_class_method",
          "test_get_all_classes_method",
          "test_clear_method",
          "test_register_many_method",
          "test_registered_names_method",
          "test_class_name_collision_handling",
          "test_registry_persistence_across_operations",
          "test_build_complete_config_classes_function",
          "test_registry_thread_safety_simulation",
          "test_edge_cases"
        ],
        "test/core/config_fields/test_integration.py": [
          "IntegrationTest.setUp",
          "setUp",
          "IntegrationTest.tearDown",
          "tearDown",
          "IntegrationTest.test_end_to_end_workflow",
          "test_end_to_end_workflow",
          "IntegrationTest.test_job_type_variants",
          "test_job_type_variants",
          "IntegrationTest.test_serialize_deserialize_with_nesting",
          "test_serialize_deserialize_with_nesting",
          "setUp",
          "tearDown",
          "test_end_to_end_workflow",
          "test_job_type_variants",
          "test_serialize_deserialize_with_nesting"
        ],
        "test/core/config_fields/test_constants.py": [
          "TestConstants.test_special_fields_to_keep_specific_completeness",
          "test_special_fields_to_keep_specific_completeness",
          "TestConstants.test_non_static_field_patterns_accuracy",
          "test_non_static_field_patterns_accuracy",
          "TestConstants.test_non_static_field_exceptions_validity",
          "test_non_static_field_exceptions_validity",
          "TestConstants.test_pattern_exception_logic",
          "test_pattern_exception_logic",
          "TestConstants.test_category_type_enum",
          "test_category_type_enum",
          "TestConstants.test_merge_direction_enum",
          "test_merge_direction_enum",
          "TestConstants.test_serialization_mode_enum",
          "test_serialization_mode_enum",
          "TestConstants.test_type_mapping_completeness",
          "test_type_mapping_completeness",
          "TestConstants.test_type_mapping_consistency",
          "test_type_mapping_consistency",
          "TestConstants.test_constants_immutability",
          "test_constants_immutability",
          "TestConstants.test_field_pattern_matching_logic",
          "test_field_pattern_matching_logic",
          "TestConstants.test_special_fields_coverage",
          "test_special_fields_coverage",
          "TestConstants.test_enum_completeness",
          "test_enum_completeness",
          "TestConstants.test_constants_documentation_alignment",
          "test_constants_documentation_alignment",
          "test_special_fields_to_keep_specific_completeness",
          "test_non_static_field_patterns_accuracy",
          "test_non_static_field_exceptions_validity",
          "test_pattern_exception_logic",
          "test_category_type_enum",
          "test_merge_direction_enum",
          "test_serialization_mode_enum",
          "test_type_mapping_completeness",
          "test_type_mapping_consistency",
          "test_constants_immutability",
          "test_field_pattern_matching_logic",
          "test_special_fields_coverage",
          "test_enum_completeness",
          "test_constants_documentation_alignment"
        ]
      },
      "likely_tested_functions": [
        "ConfigFieldTierRegistry.get_tier",
        "get_tier",
        "ConfigFieldTierRegistry.register_field",
        "register_field",
        "ConfigFieldTierRegistry.register_fields",
        "register_fields",
        "ConfigFieldTierRegistry.get_fields_by_tier",
        "get_fields_by_tier",
        "ConfigFieldTierRegistry.reset_to_defaults",
        "reset_to_defaults",
        "get_tier",
        "register_field",
        "register_fields",
        "get_fields_by_tier",
        "reset_to_defaults",
        "ConfigMerger.__init__",
        "__init__",
        "ConfigMerger.merge",
        "merge",
        "ConfigMerger._verify_merged_output",
        "_verify_merged_output",
        "ConfigMerger._generate_step_name",
        "_generate_step_name",
        "ConfigMerger._check_mutual_exclusivity",
        "_check_mutual_exclusivity",
        "ConfigMerger._check_special_fields_placement",
        "_check_special_fields_placement",
        "ConfigMerger._check_required_fields",
        "ConfigMerger.save",
        "save",
        "ConfigMerger.load",
        "load",
        "ConfigMerger.merge_with_direction",
        "merge_with_direction",
        "__init__",
        "merge",
        "_verify_merged_output",
        "_generate_step_name",
        "_check_mutual_exclusivity",
        "_check_special_fields_placement",
        "save",
        "load",
        "merge_with_direction",
        "ConfigClassStore.register",
        "register",
        "ConfigClassStore.get_class",
        "get_class",
        "ConfigClassStore.get_all_classes",
        "get_all_classes",
        "ConfigClassStore.register_many",
        "register_many",
        "ConfigClassStore.clear",
        "clear",
        "ConfigClassStore.registered_names",
        "registered_names",
        "build_complete_config_classes",
        "register",
        "get_class",
        "get_all_classes",
        "register_many",
        "clear",
        "registered_names",
        "_register",
        "TypeAwareConfigSerializer.__init__",
        "__init__",
        "TypeAwareConfigSerializer.serialize",
        "serialize",
        "TypeAwareConfigSerializer.deserialize",
        "deserialize",
        "TypeAwareConfigSerializer.generate_step_name",
        "generate_step_name",
        "serialize_config",
        "__init__",
        "serialize",
        "deserialize",
        "generate_step_name",
        "ConfigClassDetector.detect_from_json",
        "detect_from_json",
        "ConfigClassDetector._extract_class_names",
        "_extract_class_names",
        "ConfigClassDetector.from_config_store",
        "from_config_store",
        "detect_config_classes_from_json",
        "detect_from_json",
        "_extract_class_names",
        "from_config_store",
        "ConfigFieldCategorizer.__init__",
        "__init__",
        "ConfigFieldCategorizer._collect_field_info",
        "ConfigFieldCategorizer._is_special_field",
        "_is_special_field",
        "ConfigFieldCategorizer._is_likely_static",
        "_is_likely_static",
        "ConfigFieldCategorizer._categorize_fields",
        "_categorize_fields",
        "ConfigFieldCategorizer._categorize_field",
        "_categorize_field",
        "ConfigFieldCategorizer._place_field",
        "_place_field",
        "ConfigFieldCategorizer.get_category_for_field",
        "ConfigFieldCategorizer.get_categorized_fields",
        "get_categorized_fields",
        "ConfigFieldCategorizer.print_categorization_stats",
        "__init__",
        "_is_special_field",
        "_is_likely_static",
        "_categorize_fields",
        "_categorize_field",
        "_place_field",
        "get_categorized_fields",
        "CircularReferenceTracker.__init__",
        "__init__",
        "CircularReferenceTracker.enter_object",
        "CircularReferenceTracker.exit_object",
        "CircularReferenceTracker.get_current_path_str",
        "CircularReferenceTracker._format_cycle_error",
        "_format_cycle_error",
        "CircularReferenceTracker._format_depth_error",
        "CircularReferenceTracker._generate_object_id",
        "__init__",
        "_format_cycle_error"
      ],
      "likely_untested_functions": [
        "_check_required_fields",
        "merge_and_save_configs",
        "load_configs",
        "_check_required_fields",
        "TypeAwareConfigSerializer._deserialize_model",
        "_deserialize_model",
        "TypeAwareConfigSerializer._get_class_by_name",
        "_get_class_by_name",
        "TypeAwareConfigSerializer._generate_step_name_fallback",
        "_generate_step_name_fallback",
        "deserialize_config",
        "_deserialize_model",
        "_get_class_by_name",
        "_generate_step_name_fallback",
        "_map_region_to_aws_region",
        "_create_field_schema",
        "_format_edx_manifest_key",
        "_create_edx_manifest",
        "_create_edx_manifest_from_key",
        "_generate_transform_sql",
        "_get_all_fields",
        "create_cradle_data_load_config",
        "create_training_and_calibration_configs",
        "_collect_field_info",
        "get_category_for_field",
        "print_categorization_stats",
        "_collect_field_info",
        "get_category_for_field",
        "print_categorization_stats",
        "enter_object",
        "exit_object",
        "get_current_path_str",
        "_format_depth_error",
        "_generate_object_id",
        "enter_object",
        "exit_object",
        "get_current_path_str",
        "_format_depth_error",
        "_generate_object_id"
      ]
    },
    "deps": {
      "component": "deps",
      "source_files": [
        "src/cursus/core/deps/specification_registry.py",
        "src/cursus/core/deps/registry_manager.py",
        "src/cursus/core/deps/factory.py",
        "src/cursus/core/deps/dependency_resolver.py",
        "src/cursus/core/deps/property_reference.py",
        "src/cursus/core/deps/semantic_matcher.py"
      ],
      "test_files": [
        "test/core/deps/test_semantic_matcher.py",
        "test/core/deps/test_property_reference.py",
        "test/core/deps/test_global_state_isolation.py",
        "test/core/deps/test_factory.py",
        "test/core/deps/test_specification_registry.py",
        "test/core/deps/test_registry_manager.py",
        "test/core/deps/test_helpers.py",
        "test/core/deps/test_dependency_resolver.py"
      ],
      "total_source_functions": 171,
      "tested_functions": 81,
      "untested_functions": 90,
      "coverage_percentage": 47.368421052631575,
      "source_functions_by_file": {
        "src/cursus/core/deps/specification_registry.py": [
          "SpecificationRegistry.__init__",
          "__init__",
          "SpecificationRegistry.register",
          "register",
          "SpecificationRegistry.get_specification",
          "get_specification",
          "SpecificationRegistry.get_specifications_by_type",
          "get_specifications_by_type",
          "SpecificationRegistry.list_step_names",
          "list_step_names",
          "SpecificationRegistry.list_step_types",
          "list_step_types",
          "SpecificationRegistry.find_compatible_outputs",
          "find_compatible_outputs",
          "SpecificationRegistry._are_compatible",
          "_are_compatible",
          "SpecificationRegistry._calculate_compatibility_score",
          "_calculate_compatibility_score",
          "SpecificationRegistry.__repr__",
          "__repr__",
          "__init__",
          "register",
          "get_specification",
          "get_specifications_by_type",
          "list_step_names",
          "list_step_types",
          "find_compatible_outputs",
          "_are_compatible",
          "_calculate_compatibility_score",
          "__repr__"
        ],
        "src/cursus/core/deps/registry_manager.py": [
          "RegistryManager.__init__",
          "__init__",
          "RegistryManager._get_hybrid_manager",
          "_get_hybrid_manager",
          "RegistryManager._get_workspace_aware_context_name",
          "_get_workspace_aware_context_name",
          "RegistryManager.get_registry",
          "get_registry",
          "RegistryManager.list_contexts",
          "list_contexts",
          "RegistryManager.clear_context",
          "clear_context",
          "RegistryManager.clear_all_contexts",
          "clear_all_contexts",
          "RegistryManager.get_context_stats",
          "get_context_stats",
          "RegistryManager.__repr__",
          "__repr__",
          "get_registry",
          "list_contexts",
          "clear_context",
          "get_context_stats",
          "get_pipeline_registry",
          "get_default_registry",
          "integrate_with_pipeline_builder",
          "__init__",
          "_get_hybrid_manager",
          "_get_workspace_aware_context_name",
          "get_registry",
          "list_contexts",
          "clear_context",
          "clear_all_contexts",
          "get_context_stats",
          "__repr__",
          "new_init"
        ],
        "src/cursus/core/deps/factory.py": [
          "create_pipeline_components",
          "get_thread_components",
          "dependency_resolution_context"
        ],
        "src/cursus/core/deps/dependency_resolver.py": [
          "UnifiedDependencyResolver.__init__",
          "__init__",
          "UnifiedDependencyResolver.register_specification",
          "register_specification",
          "UnifiedDependencyResolver.resolve_all_dependencies",
          "resolve_all_dependencies",
          "UnifiedDependencyResolver.resolve_step_dependencies",
          "resolve_step_dependencies",
          "UnifiedDependencyResolver.resolve_with_scoring",
          "resolve_with_scoring",
          "UnifiedDependencyResolver._get_all_candidates_with_scores",
          "_get_all_candidates_with_scores",
          "UnifiedDependencyResolver._get_score_breakdown",
          "_get_score_breakdown",
          "UnifiedDependencyResolver._generate_resolution_details",
          "_generate_resolution_details",
          "UnifiedDependencyResolver._resolve_single_dependency",
          "_resolve_single_dependency",
          "UnifiedDependencyResolver._calculate_compatibility",
          "_calculate_compatibility",
          "UnifiedDependencyResolver._are_types_compatible",
          "_are_types_compatible",
          "UnifiedDependencyResolver._are_data_types_compatible",
          "_are_data_types_compatible",
          "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
          "_normalize_step_type_for_compatibility",
          "UnifiedDependencyResolver._calculate_keyword_match",
          "_calculate_keyword_match",
          "UnifiedDependencyResolver.get_resolution_report",
          "get_resolution_report",
          "UnifiedDependencyResolver.clear_cache",
          "clear_cache",
          "create_dependency_resolver",
          "__init__",
          "register_specification",
          "resolve_all_dependencies",
          "resolve_step_dependencies",
          "resolve_with_scoring",
          "_get_all_candidates_with_scores",
          "_get_score_breakdown",
          "_generate_resolution_details",
          "_resolve_single_dependency",
          "_calculate_compatibility",
          "_are_types_compatible",
          "_are_data_types_compatible",
          "_normalize_step_type_for_compatibility",
          "_calculate_keyword_match",
          "get_resolution_report",
          "clear_cache"
        ],
        "src/cursus/core/deps/property_reference.py": [
          "PropertyReference.validate_step_name",
          "validate_step_name",
          "PropertyReference.to_sagemaker_property",
          "to_sagemaker_property",
          "PropertyReference.to_runtime_property",
          "to_runtime_property",
          "PropertyReference._get_property_value",
          "_get_property_value",
          "PropertyReference._parse_property_path",
          "_parse_property_path",
          "PropertyReference.__str__",
          "__str__",
          "PropertyReference.__repr__",
          "__repr__",
          "validate_step_name",
          "to_sagemaker_property",
          "to_runtime_property",
          "_get_property_value",
          "_parse_property_path",
          "__str__",
          "__repr__"
        ],
        "src/cursus/core/deps/semantic_matcher.py": [
          "SemanticMatcher.__init__",
          "__init__",
          "SemanticMatcher.calculate_similarity",
          "calculate_similarity",
          "SemanticMatcher.calculate_similarity_with_aliases",
          "calculate_similarity_with_aliases",
          "SemanticMatcher._normalize_name",
          "_normalize_name",
          "SemanticMatcher._calculate_string_similarity",
          "_calculate_string_similarity",
          "SemanticMatcher._calculate_token_similarity",
          "_calculate_token_similarity",
          "SemanticMatcher._calculate_semantic_similarity",
          "_calculate_semantic_similarity",
          "SemanticMatcher._calculate_substring_similarity",
          "_calculate_substring_similarity",
          "SemanticMatcher._are_synonyms",
          "_are_synonyms",
          "SemanticMatcher.find_best_matches",
          "find_best_matches",
          "SemanticMatcher.explain_similarity",
          "explain_similarity",
          "__init__",
          "calculate_similarity",
          "calculate_similarity_with_aliases",
          "_normalize_name",
          "_calculate_string_similarity",
          "_calculate_token_similarity",
          "_calculate_semantic_similarity",
          "_calculate_substring_similarity",
          "_are_synonyms",
          "find_best_matches",
          "explain_similarity"
        ]
      },
      "test_functions_by_file": {
        "test/core/deps/test_semantic_matcher.py": [
          "TestSemanticMatcher.test_calculate_similarity_with_aliases",
          "test_calculate_similarity_with_aliases",
          "TestSemanticMatcher.test_weight_calculation",
          "test_weight_calculation",
          "TestSemanticMatcher.test_name_normalization",
          "test_name_normalization",
          "TestSemanticMatcher.test_individual_similarity_metrics",
          "test_individual_similarity_metrics",
          "TestSemanticMatcher.test_synonym_matching",
          "test_synonym_matching",
          "TestSemanticMatcher.test_find_best_matches",
          "test_find_best_matches",
          "TestSemanticMatcher.test_similarity_explanation",
          "test_similarity_explanation",
          "TestSemanticMatcher.test_edge_cases",
          "test_edge_cases",
          "TestSemanticMatcher.test_integration_with_dependency_resolver",
          "test_integration_with_dependency_resolver",
          "TestSemanticMatcher.test_direct_name_matching",
          "test_direct_name_matching",
          "TestSemanticMatcher.test_domain_specific_synonyms",
          "test_domain_specific_synonyms",
          "test_calculate_similarity_with_aliases",
          "test_weight_calculation",
          "test_name_normalization",
          "test_individual_similarity_metrics",
          "test_synonym_matching",
          "test_find_best_matches",
          "test_similarity_explanation",
          "test_edge_cases",
          "test_integration_with_dependency_resolver",
          "test_direct_name_matching",
          "test_domain_specific_synonyms"
        ],
        "test/core/deps/test_property_reference.py": [
          "TestPropertyReference.setUp",
          "setUp",
          "TestPropertyReference.test_init_and_validation",
          "test_init_and_validation",
          "TestPropertyReference.test_parse_property_path",
          "test_parse_property_path",
          "TestPropertyReference.test_to_sagemaker_property",
          "test_to_sagemaker_property",
          "TestPropertyReference.test_get_property_value",
          "test_get_property_value",
          "TestPropertyReference.test_to_runtime_property",
          "test_to_runtime_property",
          "TestPropertyReference.test_string_representation",
          "test_string_representation",
          "TestPropertyReference._create_mock_processing_step",
          "_create_mock_processing_step",
          "TestPropertyReference._create_mock_training_step",
          "_create_mock_training_step",
          "TestPropertyReference._create_mock_eval_step",
          "_create_mock_eval_step",
          "TestPropertyReference._create_mock_transform_step",
          "_create_mock_transform_step",
          "setUp",
          "test_init_and_validation",
          "test_parse_property_path",
          "test_to_sagemaker_property",
          "test_get_property_value",
          "test_to_runtime_property",
          "test_string_representation",
          "_create_mock_processing_step",
          "_create_mock_training_step",
          "_create_mock_eval_step",
          "_create_mock_transform_step"
        ],
        "test/core/deps/test_global_state_isolation.py": [
          "TestWithoutIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithoutIsolation.test_registry_state_2",
          "test_registry_state_2",
          "TestWithManualIsolation.setUp",
          "setUp",
          "TestWithManualIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithManualIsolation.test_registry_state_2",
          "test_registry_state_2",
          "TestWithHelperIsolation.setUp",
          "setUp",
          "TestWithHelperIsolation.test_registry_state_1",
          "test_registry_state_1",
          "TestWithHelperIsolation.test_registry_state_2",
          "test_registry_state_2",
          "run_tests_individually",
          "run_tests_together",
          "test_registry_state_1",
          "test_registry_state_2",
          "setUp",
          "test_registry_state_1",
          "test_registry_state_2",
          "setUp",
          "test_registry_state_1",
          "test_registry_state_2"
        ],
        "test/core/deps/test_factory.py": [
          "TestFactoryFunctions.setUp",
          "setUp",
          "TestFactoryFunctions.test_create_pipeline_components_default",
          "test_create_pipeline_components_default",
          "TestFactoryFunctions.test_create_pipeline_components_custom_context",
          "test_create_pipeline_components_custom_context",
          "TestFactoryFunctions.test_create_pipeline_components_wiring",
          "test_create_pipeline_components_wiring",
          "TestFactoryFunctions.test_create_pipeline_components_isolation",
          "test_create_pipeline_components_isolation",
          "TestThreadLocalComponents.setUp",
          "setUp",
          "TestThreadLocalComponents.test_get_thread_components_single_thread",
          "test_get_thread_components_single_thread",
          "TestThreadLocalComponents.test_get_thread_components_multi_thread",
          "test_get_thread_components_multi_thread",
          "TestThreadLocalComponents.test_thread_components_persistence",
          "test_thread_components_persistence",
          "TestDependencyResolutionContext.setUp",
          "setUp",
          "TestDependencyResolutionContext.test_dependency_resolution_context_basic",
          "test_dependency_resolution_context_basic",
          "TestDependencyResolutionContext.test_dependency_resolution_context_cleanup",
          "test_dependency_resolution_context_cleanup",
          "TestDependencyResolutionContext.test_dependency_resolution_context_no_cleanup",
          "test_dependency_resolution_context_no_cleanup",
          "TestDependencyResolutionContext.test_dependency_resolution_context_exception_handling",
          "test_dependency_resolution_context_exception_handling",
          "TestDependencyResolutionContext.test_dependency_resolution_context_nested",
          "test_dependency_resolution_context_nested",
          "TestFactoryIntegration.setUp",
          "setUp",
          "TestFactoryIntegration.test_end_to_end_pipeline_creation",
          "test_end_to_end_pipeline_creation",
          "TestFactoryIntegration.test_multi_context_pipeline_isolation",
          "test_multi_context_pipeline_isolation",
          "setUp",
          "test_create_pipeline_components_default",
          "test_create_pipeline_components_custom_context",
          "test_create_pipeline_components_wiring",
          "test_create_pipeline_components_isolation",
          "setUp",
          "test_get_thread_components_single_thread",
          "test_get_thread_components_multi_thread",
          "test_thread_components_persistence",
          "setUp",
          "test_dependency_resolution_context_basic",
          "test_dependency_resolution_context_cleanup",
          "test_dependency_resolution_context_no_cleanup",
          "test_dependency_resolution_context_exception_handling",
          "test_dependency_resolution_context_nested",
          "setUp",
          "test_end_to_end_pipeline_creation",
          "test_multi_context_pipeline_isolation",
          "thread_worker"
        ],
        "test/core/deps/test_specification_registry.py": [
          "TestSpecificationRegistry.setUp",
          "setUp",
          "TestSpecificationRegistry.tearDown",
          "tearDown",
          "TestSpecificationRegistry.test_registry_initialization",
          "test_registry_initialization",
          "TestSpecificationRegistry.test_register_specification",
          "test_register_specification",
          "TestSpecificationRegistry.test_register_invalid_specification",
          "test_register_invalid_specification",
          "TestSpecificationRegistry.test_get_specifications_by_type",
          "test_get_specifications_by_type",
          "TestSpecificationRegistry.test_find_compatible_outputs",
          "test_find_compatible_outputs",
          "TestSpecificationRegistry.test_compatibility_checking",
          "test_compatibility_checking",
          "TestSpecificationRegistry.test_context_isolation",
          "test_context_isolation",
          "TestSpecificationRegistry.test_registry_string_representation",
          "test_registry_string_representation",
          "TestSpecificationRegistry.test_empty_registry_operations",
          "test_empty_registry_operations",
          "TestSpecificationRegistry.test_compatibility_scoring_algorithm",
          "test_compatibility_scoring_algorithm",
          "TestSpecificationRegistry.test_complex_pipeline_compatibility",
          "test_complex_pipeline_compatibility",
          "TestSpecificationRegistry.test_multiple_compatible_outputs",
          "test_multiple_compatible_outputs",
          "TestSpecificationRegistry.test_data_type_compatibility",
          "test_data_type_compatibility",
          "TestSpecificationRegistry.test_register_multiple_specifications",
          "test_register_multiple_specifications",
          "TestSpecificationRegistry.test_get_specification_detailed",
          "test_get_specification_detailed",
          "TestSpecificationRegistry.test_get_specification_by_type_detailed",
          "test_get_specification_by_type_detailed",
          "TestSpecificationRegistry.test_list_operations_detailed",
          "test_list_operations_detailed",
          "TestSpecificationRegistry.test_find_compatible_outputs_detailed",
          "test_find_compatible_outputs_detailed",
          "setUp",
          "tearDown",
          "test_registry_initialization",
          "test_register_specification",
          "test_register_invalid_specification",
          "test_get_specifications_by_type",
          "test_find_compatible_outputs",
          "test_compatibility_checking",
          "test_context_isolation",
          "test_registry_string_representation",
          "test_empty_registry_operations",
          "test_compatibility_scoring_algorithm",
          "test_complex_pipeline_compatibility",
          "test_multiple_compatible_outputs",
          "test_data_type_compatibility",
          "test_register_multiple_specifications",
          "test_get_specification_detailed",
          "test_get_specification_by_type_detailed",
          "test_list_operations_detailed",
          "test_find_compatible_outputs_detailed"
        ],
        "test/core/deps/test_registry_manager.py": [
          "TestRegistryManagerCore.setUp",
          "setUp",
          "TestRegistryManagerCore.tearDown",
          "tearDown",
          "TestRegistryManagerCore.test_manager_initialization",
          "test_manager_initialization",
          "TestRegistryManagerCore.test_get_registry_creates_new",
          "test_get_registry_creates_new",
          "TestRegistryManagerCore.test_get_registry_returns_existing",
          "test_get_registry_returns_existing",
          "TestRegistryManagerCore.test_get_registry_no_create",
          "test_get_registry_no_create",
          "TestRegistryManagerCore.test_registry_isolation",
          "test_registry_isolation",
          "TestRegistryManagerCore.test_list_contexts",
          "test_list_contexts",
          "TestRegistryManagerCore.test_clear_context",
          "test_clear_context",
          "TestRegistryManagerCore.test_clear_all_contexts",
          "test_clear_all_contexts",
          "TestRegistryManagerCore.test_get_context_stats",
          "test_get_context_stats",
          "TestRegistryManagerCore.test_manager_string_representation",
          "test_manager_string_representation",
          "TestConvenienceFunctions.setUp",
          "setUp",
          "TestConvenienceFunctions.test_get_registry_function",
          "test_get_registry_function",
          "TestConvenienceFunctions.test_get_pipeline_registry_backward_compatibility",
          "test_get_pipeline_registry_backward_compatibility",
          "TestConvenienceFunctions.test_get_default_registry_backward_compatibility",
          "test_get_default_registry_backward_compatibility",
          "TestConvenienceFunctions.test_list_contexts_function",
          "test_list_contexts_function",
          "TestConvenienceFunctions.test_clear_context_function",
          "test_clear_context_function",
          "TestConvenienceFunctions.test_get_context_stats_function",
          "test_get_context_stats_function",
          "TestConvenienceFunctions.test_multiple_contexts_isolation",
          "test_multiple_contexts_isolation",
          "TestRegistryManagerErrorHandling.setUp",
          "setUp",
          "TestRegistryManagerErrorHandling.test_invalid_context_name_handling",
          "test_invalid_context_name_handling",
          "TestRegistryManagerErrorHandling.test_registry_operations_on_cleared_context",
          "test_registry_operations_on_cleared_context",
          "TestRegistryManagerErrorHandling.test_concurrent_access_safety",
          "test_concurrent_access_safety",
          "TestRegistryManagerMonitoring.setUp",
          "setUp",
          "TestRegistryManagerMonitoring.test_context_statistics_detailed",
          "test_context_statistics_detailed",
          "TestRegistryManagerMonitoring.test_memory_usage_monitoring",
          "test_memory_usage_monitoring",
          "setUp",
          "tearDown",
          "test_manager_initialization",
          "test_get_registry_creates_new",
          "test_get_registry_returns_existing",
          "test_get_registry_no_create",
          "test_registry_isolation",
          "test_list_contexts",
          "test_clear_context",
          "test_clear_all_contexts",
          "test_get_context_stats",
          "test_manager_string_representation",
          "setUp",
          "test_get_registry_function",
          "test_get_pipeline_registry_backward_compatibility",
          "test_get_default_registry_backward_compatibility",
          "test_list_contexts_function",
          "test_clear_context_function",
          "test_get_context_stats_function",
          "test_multiple_contexts_isolation",
          "setUp",
          "test_invalid_context_name_handling",
          "test_registry_operations_on_cleared_context",
          "test_concurrent_access_safety",
          "setUp",
          "test_context_statistics_detailed",
          "test_memory_usage_monitoring",
          "create_registry"
        ],
        "test/core/deps/test_helpers.py": [
          "reset_all_global_state",
          "IsolatedTestCase.setUp",
          "setUp",
          "IsolatedTestCase.tearDown",
          "tearDown",
          "setUp",
          "tearDown"
        ],
        "test/core/deps/test_dependency_resolver.py": [
          "TestDependencyResolver.test_dependency_resolution_with_aliases",
          "test_dependency_resolution_with_aliases",
          "TestDependencyResolver.test_weight_calculation",
          "test_weight_calculation",
          "TestDependencyResolver.test_multiple_competing_candidates",
          "test_multiple_competing_candidates",
          "TestDependencyResolver.test_type_compatibility_matrix",
          "test_type_compatibility_matrix",
          "TestDependencyResolver.test_data_type_compatibility",
          "test_data_type_compatibility",
          "TestDependencyResolver.test_semantic_matching",
          "test_semantic_matching",
          "TestDependencyResolver.test_required_vs_optional_dependencies",
          "test_required_vs_optional_dependencies",
          "TestDependencyResolver.test_unresolvable_dependencies",
          "test_unresolvable_dependencies",
          "TestDependencyResolver.test_registry_isolation",
          "test_registry_isolation",
          "TestDependencyResolver.test_property_reference_functionality",
          "test_property_reference_functionality",
          "TestDependencyResolver.test_end_to_end_resolution",
          "test_end_to_end_resolution",
          "TestDependencyResolver.test_job_type_normalization",
          "test_job_type_normalization",
          "test_dependency_resolution_with_aliases",
          "test_weight_calculation",
          "test_multiple_competing_candidates",
          "test_type_compatibility_matrix",
          "test_data_type_compatibility",
          "test_semantic_matching",
          "test_required_vs_optional_dependencies",
          "test_unresolvable_dependencies",
          "test_registry_isolation",
          "test_property_reference_functionality",
          "test_end_to_end_resolution",
          "test_job_type_normalization"
        ]
      },
      "likely_tested_functions": [
        "SpecificationRegistry.__init__",
        "SpecificationRegistry.register",
        "register",
        "SpecificationRegistry.get_specification",
        "get_specification",
        "SpecificationRegistry.get_specifications_by_type",
        "get_specifications_by_type",
        "SpecificationRegistry.list_step_names",
        "SpecificationRegistry.list_step_types",
        "SpecificationRegistry.find_compatible_outputs",
        "find_compatible_outputs",
        "SpecificationRegistry._are_compatible",
        "SpecificationRegistry._calculate_compatibility_score",
        "SpecificationRegistry.__repr__",
        "register",
        "get_specification",
        "get_specifications_by_type",
        "find_compatible_outputs",
        "RegistryManager.__init__",
        "RegistryManager._get_hybrid_manager",
        "RegistryManager._get_workspace_aware_context_name",
        "RegistryManager.get_registry",
        "get_registry",
        "RegistryManager.list_contexts",
        "list_contexts",
        "RegistryManager.clear_context",
        "clear_context",
        "RegistryManager.clear_all_contexts",
        "clear_all_contexts",
        "RegistryManager.get_context_stats",
        "get_context_stats",
        "RegistryManager.__repr__",
        "get_registry",
        "list_contexts",
        "clear_context",
        "get_context_stats",
        "get_pipeline_registry",
        "get_default_registry",
        "get_registry",
        "list_contexts",
        "clear_context",
        "clear_all_contexts",
        "get_context_stats",
        "create_pipeline_components",
        "get_thread_components",
        "dependency_resolution_context",
        "UnifiedDependencyResolver.register_specification",
        "register_specification",
        "register_specification",
        "PropertyReference.validate_step_name",
        "PropertyReference.to_sagemaker_property",
        "to_sagemaker_property",
        "PropertyReference.to_runtime_property",
        "to_runtime_property",
        "PropertyReference._get_property_value",
        "_get_property_value",
        "PropertyReference._parse_property_path",
        "_parse_property_path",
        "PropertyReference.__str__",
        "PropertyReference.__repr__",
        "to_sagemaker_property",
        "to_runtime_property",
        "_get_property_value",
        "_parse_property_path",
        "SemanticMatcher.__init__",
        "SemanticMatcher.calculate_similarity",
        "calculate_similarity",
        "SemanticMatcher.calculate_similarity_with_aliases",
        "calculate_similarity_with_aliases",
        "SemanticMatcher._normalize_name",
        "SemanticMatcher._calculate_string_similarity",
        "SemanticMatcher._calculate_token_similarity",
        "SemanticMatcher._calculate_semantic_similarity",
        "SemanticMatcher._calculate_substring_similarity",
        "SemanticMatcher._are_synonyms",
        "SemanticMatcher.find_best_matches",
        "find_best_matches",
        "SemanticMatcher.explain_similarity",
        "calculate_similarity",
        "calculate_similarity_with_aliases",
        "find_best_matches"
      ],
      "likely_untested_functions": [
        "__init__",
        "list_step_names",
        "list_step_types",
        "_are_compatible",
        "_calculate_compatibility_score",
        "__repr__",
        "__init__",
        "list_step_names",
        "list_step_types",
        "_are_compatible",
        "_calculate_compatibility_score",
        "__repr__",
        "__init__",
        "_get_hybrid_manager",
        "_get_workspace_aware_context_name",
        "__repr__",
        "integrate_with_pipeline_builder",
        "__init__",
        "_get_hybrid_manager",
        "_get_workspace_aware_context_name",
        "__repr__",
        "new_init",
        "UnifiedDependencyResolver.__init__",
        "__init__",
        "UnifiedDependencyResolver.resolve_all_dependencies",
        "resolve_all_dependencies",
        "UnifiedDependencyResolver.resolve_step_dependencies",
        "resolve_step_dependencies",
        "UnifiedDependencyResolver.resolve_with_scoring",
        "resolve_with_scoring",
        "UnifiedDependencyResolver._get_all_candidates_with_scores",
        "_get_all_candidates_with_scores",
        "UnifiedDependencyResolver._get_score_breakdown",
        "_get_score_breakdown",
        "UnifiedDependencyResolver._generate_resolution_details",
        "_generate_resolution_details",
        "UnifiedDependencyResolver._resolve_single_dependency",
        "_resolve_single_dependency",
        "UnifiedDependencyResolver._calculate_compatibility",
        "_calculate_compatibility",
        "UnifiedDependencyResolver._are_types_compatible",
        "_are_types_compatible",
        "UnifiedDependencyResolver._are_data_types_compatible",
        "_are_data_types_compatible",
        "UnifiedDependencyResolver._normalize_step_type_for_compatibility",
        "_normalize_step_type_for_compatibility",
        "UnifiedDependencyResolver._calculate_keyword_match",
        "_calculate_keyword_match",
        "UnifiedDependencyResolver.get_resolution_report",
        "get_resolution_report",
        "UnifiedDependencyResolver.clear_cache",
        "clear_cache",
        "create_dependency_resolver",
        "__init__",
        "resolve_all_dependencies",
        "resolve_step_dependencies",
        "resolve_with_scoring",
        "_get_all_candidates_with_scores",
        "_get_score_breakdown",
        "_generate_resolution_details",
        "_resolve_single_dependency",
        "_calculate_compatibility",
        "_are_types_compatible",
        "_are_data_types_compatible",
        "_normalize_step_type_for_compatibility",
        "_calculate_keyword_match",
        "get_resolution_report",
        "clear_cache",
        "validate_step_name",
        "__str__",
        "__repr__",
        "validate_step_name",
        "__str__",
        "__repr__",
        "__init__",
        "_normalize_name",
        "_calculate_string_similarity",
        "_calculate_token_similarity",
        "_calculate_semantic_similarity",
        "_calculate_substring_similarity",
        "_are_synonyms",
        "explain_similarity",
        "__init__",
        "_normalize_name",
        "_calculate_string_similarity",
        "_calculate_token_similarity",
        "_calculate_semantic_similarity",
        "_calculate_substring_similarity",
        "_are_synonyms",
        "explain_similarity"
      ]
    }
  },
  "redundancy_analysis": {
    "assembler": {
      "component": "assembler",
      "total_test_functions": 186,
      "unique_test_names": 111,
      "redundant_test_names": 53,
      "redundant_tests": {
        "get_step_name": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "_validate_configuration": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "_create_pipeline_dag": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "_create_config_map": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "_create_step_builder_map": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "setUp": {
          "count": 6,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "tearDown": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_initialization": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_initialization_with_provided_components": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_config_loading": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_base_config_validation": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_generate_pipeline": {
          "count": 6,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_pipeline_name_generation": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_pipeline_name_explicit_override": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_store_pipeline_metadata": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_create_with_components_class_method": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_build_with_context_class_method": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_build_in_thread_class_method": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_fill_execution_document": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_initialization_with_notebook_root": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_initialization_default_notebook_root": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_config_loading_error_handling": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_pipeline_name_fallback_values": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_get_pipeline_parameters_default": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_store_pipeline_metadata_without_attributes": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_config_classes_validation": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_initialization_partial_components": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "TestPipelineAssembler.setUp": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_assembler_initialization": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_assembler_validation_missing_configs": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "test_assembler_validation_missing_builders": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_builder_template.py"
          ]
        },
        "TestPipelineAssembler.test_generate_pipeline": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_builder_template.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "__init__": {
          "count": 4,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "validate_configuration": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "_get_inputs": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "_get_outputs": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "create_step": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_init_success": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_init_missing_configs": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_init_missing_step_builders": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_init_invalid_dag_edges": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_initialize_step_builders": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_propagate_messages": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_generate_outputs": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_instantiate_step": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_generate_pipeline_with_cycle": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_create_with_components": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_get_registry_manager": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_get_dependency_resolver": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_cradle_loading_requests_storage": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_pipeline_regeneration": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "test_logging_integration": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        },
        "get_request_dict": {
          "count": 2,
          "locations": [
            "test/core/assembler/test_pipeline_assembler.py",
            "test/core/assembler/test_pipeline_assembler.py"
          ]
        }
      },
      "pattern_analysis": {
        "get_step_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589af60>"
        ],
        "_validate_configuration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589b030>"
        ],
        "_create_pipeline_dag": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589b2a0>"
        ],
        "_create_config_map": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589b100>"
        ],
        "_create_step_builder_map": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589b1d0>"
        ],
        "setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930c70>"
        ],
        "tearDown": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059305f0>"
        ],
        "initialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930ee0>"
        ],
        "initialization_with_provided_components": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930ad0>"
        ],
        "config_loading": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930d40>"
        ],
        "base_config_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x10589b370>"
        ],
        "generate_pipeline": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930930>"
        ],
        "pipeline_name_generation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930860>"
        ],
        "pipeline_name_explicit_override": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930ba0>"
        ],
        "store_pipeline_metadata": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930a00>"
        ],
        "create_with_components_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930e10>"
        ],
        "build_with_context_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931150>"
        ],
        "build_in_thread_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105930fb0>"
        ],
        "fill_execution_document": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931490>"
        ],
        "initialization_with_notebook_root": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931220>"
        ],
        "initialization_default_notebook_root": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931630>"
        ],
        "config_loading_error_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931080>"
        ],
        "pipeline_name_fallback_values": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059313c0>"
        ],
        "get_pipeline_parameters_default": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931560>"
        ],
        "store_pipeline_metadata_without_attributes": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059318a0>"
        ],
        "config_classes_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059317d0>"
        ],
        "initialization_partial_components": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931700>"
        ],
        "TestPipelineAssembler.setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059312f0>"
        ],
        "assembler_initialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931970>"
        ],
        "assembler_validation_missing_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931a40>"
        ],
        "assembler_validation_missing_builders": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933780>"
        ],
        "TestPipelineAssembler.generate_pipeline": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931be0>"
        ],
        "__init__": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059320c0>"
        ],
        "validate_configuration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931b10>"
        ],
        "_get_inputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933b90>"
        ],
        "_get_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933d30>"
        ],
        "create_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059331d0>"
        ],
        "init_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932cf0>"
        ],
        "init_missing_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059335e0>"
        ],
        "init_missing_step_builders": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933100>"
        ],
        "init_invalid_dag_edges": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932190>"
        ],
        "initialize_step_builders": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933920>"
        ],
        "propagate_messages": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932260>"
        ],
        "generate_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931ff0>"
        ],
        "instantiate_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059328e0>"
        ],
        "generate_pipeline_with_cycle": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932330>"
        ],
        "create_with_components": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933c60>"
        ],
        "get_registry_manager": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933850>"
        ],
        "get_dependency_resolver": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932400>"
        ],
        "cradle_loading_requests_storage": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931e50>"
        ],
        "pipeline_regeneration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933510>"
        ],
        "logging_integration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932810>"
        ],
        "get_request_dict": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059332a0>"
        ]
      }
    },
    "base": {
      "component": "base",
      "total_test_functions": 472,
      "unique_test_names": 279,
      "redundant_test_names": 123,
      "redundant_tests": {
        "setUp": {
          "count": 12,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_with_required_fields": {
          "count": 10,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_with_all_fields": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_derived_properties": {
          "count": 4,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_binary_classification": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_class_weights_default": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_class_weights_custom": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_class_weights_validation_error": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_batch_size_validation": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_max_epochs_validation": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_categorize_fields": {
          "count": 4,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_get_public_init_fields": {
          "count": 4,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_from_base_hyperparam": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_get_config": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_serialize_config": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_string_representation": {
          "count": 8,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_print_hyperparam_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_derived_fields_caching": {
          "count": 4,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_extra_fields_allowed": {
          "count": 4,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_validate_assignment": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_empty_field_lists": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "test_single_class_error": {
          "count": 2,
          "locations": [
            "test/core/base/test_hyperparameters_base.py",
            "test/core/base/test_hyperparameters_base.py"
          ]
        },
        "TestValidationResult.test_init_valid": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_valid": {
          "count": 6,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "TestValidationResult.test_init_invalid_with_errors": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_invalid_with_errors": {
          "count": 4,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_success_class_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_error_class_method_with_list": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_error_class_method_with_string": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_combine_class_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_combine_all_valid": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_init_with_valid_data": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_init_with_minimal_data": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_entry_point_invalid": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_input_paths_invalid": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_input_paths_generated_payload_samples": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_output_paths_invalid": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_arguments_invalid_characters": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_arguments_uppercase": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_implementation_file_not_found": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_implementation_success": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_implementation_missing_paths": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_validate_implementation_with_warnings": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_get_input_paths": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_get_output_paths": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_get_env_var_usage": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_get_argument_usage": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_ast_tree_lazy_loading": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_caching_behavior": {
          "count": 2,
          "locations": [
            "test/core/base/test_contract_base.py",
            "test/core/base/test_contract_base.py"
          ]
        },
        "test_init_with_optional_fields": {
          "count": 6,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_region_validation": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_source_dir_validation": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_model_dump_includes_derived_properties": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_from_base_config": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_get_step_name_class_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_get_config_class_name_class_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_get_script_contract_default": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_get_script_path_default": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_print_config_method": {
          "count": 2,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py"
          ]
        },
        "test_region_mapping": {
          "count": 4,
          "locations": [
            "test/core/base/test_config_base.py",
            "test/core/base/test_config_base.py",
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_enum_values": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_members": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_access_by_name": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_access_by_value": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_equality_with_same_enum": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_equality_with_different_enum": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_equality_with_non_enum": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_hashability": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_hashability_in_set": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_hash_consistency": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_iteration": {
          "count": 4,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_node_type_semantics": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_different_enums_not_equal": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_mixed_enum_dictionary": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_mixed_enum_set": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_type_checking": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_invalid_enum_value_dependency_type": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_invalid_enum_value_node_type": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_comparison_with_none": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "test_enum_boolean_context": {
          "count": 2,
          "locations": [
            "test/core/base/test_enums.py",
            "test/core/base/test_enums.py"
          ]
        },
        "__init__": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "validate_configuration": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "_get_inputs": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "_get_outputs": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "create_step": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_init_with_required_params": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_init_with_optional_params": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_invalid_region_raises_error": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_sanitize_name_for_sagemaker": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_step_name": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_generate_job_name": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_property_path": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_all_property_paths": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_safe_logging_methods": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_cache_config": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_environment_variables_no_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_environment_variables_with_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_job_arguments_no_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_job_arguments_with_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_required_dependencies": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_optional_dependencies": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_outputs": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_get_context_name": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_abstract_methods_must_be_implemented": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_step_names_class_variable": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_common_properties_class_variable": {
          "count": 2,
          "locations": [
            "test/core/base/test_builder_base.py",
            "test/core/base/test_builder_base.py"
          ]
        },
        "test_matches_name_or_alias": {
          "count": 4,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_add_error": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_add_warning": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_invalid_with_details": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_init_with_script_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_get_output_by_name_or_alias": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_get_dependency": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_basic": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_empty_step_type": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_duplicate_output_names": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_contract_alignment_no_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_contract_alignment_with_contract": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_contract_alignment_missing_inputs": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_validate_contract_alignment_missing_outputs": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_list_required_dependencies": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_list_optional_dependencies": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        },
        "test_list_all_output_names": {
          "count": 2,
          "locations": [
            "test/core/base/test_specification_base.py",
            "test/core/base/test_specification_base.py"
          ]
        }
      },
      "pattern_analysis": {
        "setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059336b0>"
        ],
        "init_with_required_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932740>"
        ],
        "init_with_all_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933370>"
        ],
        "derived_properties": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933ed0>"
        ],
        "binary_classification": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059324d0>"
        ],
        "class_weights_default": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931d80>"
        ],
        "class_weights_custom": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933440>"
        ],
        "class_weights_validation_error": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932c20>"
        ],
        "batch_size_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931cb0>"
        ],
        "max_epochs_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932dc0>"
        ],
        "categorize_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059339f0>"
        ],
        "get_public_init_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933030>"
        ],
        "from_base_hyperparam": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933e00>"
        ],
        "get_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x1059329b0>"
        ],
        "serialize_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105933ac0>"
        ],
        "string_representation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105931f20>"
        ],
        "print_hyperparam_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932a80>"
        ],
        "derived_fields_caching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932670>"
        ],
        "extra_fields_allowed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105932f60>"
        ],
        "validate_assignment": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8040>"
        ],
        "empty_field_lists": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8110>"
        ],
        "single_class_error": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab81e0>"
        ],
        "TestValidationResult.init_valid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab82b0>"
        ],
        "init_valid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8380>"
        ],
        "TestValidationResult.init_invalid_with_errors": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8450>"
        ],
        "init_invalid_with_errors": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8520>"
        ],
        "success_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab85f0>"
        ],
        "error_class_method_with_list": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab86c0>"
        ],
        "error_class_method_with_string": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8790>"
        ],
        "combine_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8860>"
        ],
        "combine_all_valid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8930>"
        ],
        "init_with_valid_data": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8a00>"
        ],
        "init_with_minimal_data": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8ad0>"
        ],
        "validate_entry_point_invalid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8ba0>"
        ],
        "validate_input_paths_invalid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8c70>"
        ],
        "validate_input_paths_generated_payload_samples": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8d40>"
        ],
        "validate_output_paths_invalid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8e10>"
        ],
        "validate_arguments_invalid_characters": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8ee0>"
        ],
        "validate_arguments_uppercase": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab8fb0>"
        ],
        "validate_implementation_file_not_found": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9080>"
        ],
        "validate_implementation_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9150>"
        ],
        "validate_implementation_missing_paths": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9220>"
        ],
        "validate_implementation_with_warnings": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab92f0>"
        ],
        "get_input_paths": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab93c0>"
        ],
        "get_output_paths": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9490>"
        ],
        "get_env_var_usage": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9560>"
        ],
        "get_argument_usage": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9630>"
        ],
        "ast_tree_lazy_loading": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9700>"
        ],
        "caching_behavior": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab97d0>"
        ],
        "init_with_optional_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab98a0>"
        ],
        "region_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9970>"
        ],
        "source_dir_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9a40>"
        ],
        "model_dump_includes_derived_properties": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9b10>"
        ],
        "from_base_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9be0>"
        ],
        "get_step_name_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9cb0>"
        ],
        "get_config_class_name_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9d80>"
        ],
        "get_script_contract_default": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9e50>"
        ],
        "get_script_path_default": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9f20>"
        ],
        "print_config_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ab9ff0>"
        ],
        "region_mapping": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba0c0>"
        ],
        "enum_values": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba190>"
        ],
        "enum_members": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba260>"
        ],
        "enum_access_by_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba330>"
        ],
        "enum_access_by_value": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba400>"
        ],
        "equality_with_same_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba4d0>"
        ],
        "equality_with_different_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba5a0>"
        ],
        "equality_with_non_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba670>"
        ],
        "hashability": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba740>"
        ],
        "hashability_in_set": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba810>"
        ],
        "hash_consistency": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba8e0>"
        ],
        "iteration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aba9b0>"
        ],
        "node_type_semantics": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abaa80>"
        ],
        "different_enums_not_equal": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abab50>"
        ],
        "mixed_enum_dictionary": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abac20>"
        ],
        "mixed_enum_set": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abacf0>"
        ],
        "enum_type_checking": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abadc0>"
        ],
        "invalid_enum_value_dependency_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abae90>"
        ],
        "invalid_enum_value_node_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abaf60>"
        ],
        "enum_comparison_with_none": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb030>"
        ],
        "enum_boolean_context": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb100>"
        ],
        "__init__": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb1d0>"
        ],
        "validate_configuration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb2a0>"
        ],
        "_get_inputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb370>"
        ],
        "_get_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb440>"
        ],
        "create_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb510>"
        ],
        "init_with_required_params": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb5e0>"
        ],
        "init_with_optional_params": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb6b0>"
        ],
        "invalid_region_raises_error": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb780>"
        ],
        "sanitize_name_for_sagemaker": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb850>"
        ],
        "get_step_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb920>"
        ],
        "generate_job_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abb9f0>"
        ],
        "get_property_path": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbac0>"
        ],
        "get_all_property_paths": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbb90>"
        ],
        "safe_logging_methods": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbc60>"
        ],
        "get_cache_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbd30>"
        ],
        "get_environment_variables_no_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbe00>"
        ],
        "get_environment_variables_with_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105abbed0>"
        ],
        "get_job_arguments_no_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58040>"
        ],
        "get_job_arguments_with_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58110>"
        ],
        "get_required_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a581e0>"
        ],
        "get_optional_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a582b0>"
        ],
        "get_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58380>"
        ],
        "get_context_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58450>"
        ],
        "abstract_methods_must_be_implemented": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58520>"
        ],
        "step_names_class_variable": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a585f0>"
        ],
        "common_properties_class_variable": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a586c0>"
        ],
        "matches_name_or_alias": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58790>"
        ],
        "add_error": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58860>"
        ],
        "add_warning": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58930>"
        ],
        "init_invalid_with_details": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58a00>"
        ],
        "init_with_script_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58ad0>"
        ],
        "get_output_by_name_or_alias": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58ba0>"
        ],
        "get_dependency": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58c70>"
        ],
        "validate_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58d40>"
        ],
        "validate_empty_step_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58e10>"
        ],
        "validate_duplicate_output_names": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58ee0>"
        ],
        "validate_contract_alignment_no_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a58fb0>"
        ],
        "validate_contract_alignment_with_contract": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59080>"
        ],
        "validate_contract_alignment_missing_inputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59150>"
        ],
        "validate_contract_alignment_missing_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59220>"
        ],
        "list_required_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a592f0>"
        ],
        "list_optional_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a593c0>"
        ],
        "list_all_output_names": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59490>"
        ]
      }
    },
    "compiler": {
      "component": "compiler",
      "total_test_functions": 297,
      "unique_test_names": 180,
      "redundant_test_names": 84,
      "redundant_tests": {
        "test_validation_result_valid": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_validation_result_invalid": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_detailed_report_valid": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_detailed_report_invalid_with_recommendations": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_resolution_preview_display": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_conversion_report_summary": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_conversion_report_detailed_report": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "setUp": {
          "count": 22,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_validate_dag_compatibility_success": {
          "count": 4,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_validate_dag_compatibility_missing_configs": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_validate_dag_compatibility_unresolvable_builders": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_validate_dag_compatibility_config_errors": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_validate_dag_compatibility_with_job_type_variants": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_validate_dag_compatibility_with_legacy_aliases": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_validation.py",
            "test/core/compiler/test_validation.py"
          ]
        },
        "test_direct_name_matching": {
          "count": 4,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_job_type_matching": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_semantic_matching": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_pattern_matching": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_resolve_config_map": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_resolve_single_node_direct_match": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_resolve_single_node_no_match": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_resolve_single_node_ambiguity": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_preview_resolution": {
          "count": 4,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "mock_direct_match": {
          "count": 4,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "mock_job_type_match": {
          "count": 3,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "mock_semantic_match": {
          "count": 3,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "mock_pattern_match": {
          "count": 3,
          "locations": [
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py",
            "test/core/compiler/test_config_resolver.py"
          ]
        },
        "test_pipeline_api_error_base": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_configuration_error_basic": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_configuration_error_with_details": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_ambiguity_error_basic": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_ambiguity_error_with_tuple_candidates": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_ambiguity_error_with_dict_candidates": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_validation_error_basic": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_validation_error_with_details": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_resolution_error_basic": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_resolution_error_with_details": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_exception_inheritance": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "__init__": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_exceptions.py",
            "test/core/compiler/test_exceptions.py"
          ]
        },
        "test_generate_random_word_length": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_name_generator.py",
            "test/core/compiler/test_name_generator.py"
          ]
        },
        "test_validate_pipeline_name": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_name_generator.py",
            "test/core/compiler/test_name_generator.py"
          ]
        },
        "test_sanitize_pipeline_name": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_name_generator.py",
            "test/core/compiler/test_name_generator.py"
          ]
        },
        "test_generate_pipeline_name": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_name_generator.py",
            "test/core/compiler/test_name_generator.py"
          ]
        },
        "tearDown": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_init_stores_config_path": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_detect_config_classes": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_create_pipeline_dag": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_create_config_map": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_create_step_builder_map": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_get_resolution_preview": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_get_step_dependencies": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_get_pipeline_parameters": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dynamic_template.py",
            "test/core/compiler/test_dynamic_template.py"
          ]
        },
        "test_compile_with_custom_pipeline_name": {
          "count": 4,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_dag_to_pipeline_invalid_dag": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_dag_to_pipeline_empty_dag": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_dag_to_pipeline_missing_config_file": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_dag_to_pipeline_success": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_dag_to_pipeline_exception_handling": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compiler_init_success": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compiler_init_missing_config_file": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compiler_init_with_custom_components": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_validate_dag_compatibility_config_resolution_failure": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_preview_resolution_success": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_preview_resolution_exception_handling": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_success": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_exception_handling": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_with_report": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_get_supported_step_types": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_validate_config_file_success": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_validate_config_file_failure": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_get_last_template": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "test_compile_and_fill_execution_doc": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_dag_compiler.py",
            "test/core/compiler/test_dag_compiler.py"
          ]
        },
        "mock_template": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py"
          ]
        },
        "test_fill_execution_document": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py"
          ]
        },
        "test_fill_execution_document_with_missing_sections": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py"
          ]
        },
        "test_fill_execution_document_with_missing_steps": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py"
          ]
        },
        "test_find_registration_step_nodes": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_fill_execution_document.py",
            "test/core/compiler/test_fill_execution_document.py"
          ]
        },
        "test_parse_node_name": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_direct_name_matching_with_metadata": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_job_type_matching_enhanced": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_resolve_config_map_exact_matches": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_resolve_config_map_with_metadata": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_resolve_single_node_prioritization": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        },
        "test_ambiguity_detection": {
          "count": 2,
          "locations": [
            "test/core/compiler/test_enhanced_config_resolver.py",
            "test/core/compiler/test_enhanced_config_resolver.py"
          ]
        }
      },
      "pattern_analysis": {
        "validation_result_valid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59630>"
        ],
        "validation_result_invalid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59be0>"
        ],
        "detailed_report_valid": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5ab50>"
        ],
        "detailed_report_invalid_with_recommendations": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b850>"
        ],
        "resolution_preview_display": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5ae90>"
        ],
        "conversion_report_summary": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a5a0>"
        ],
        "conversion_report_detailed_report": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5af60>"
        ],
        "setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a9b0>"
        ],
        "validate_dag_compatibility_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b440>"
        ],
        "validate_dag_compatibility_missing_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b6b0>"
        ],
        "validate_dag_compatibility_unresolvable_builders": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59cb0>"
        ],
        "validate_dag_compatibility_config_errors": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59b10>"
        ],
        "validate_dag_compatibility_with_job_type_variants": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a4d0>"
        ],
        "validate_dag_compatibility_with_legacy_aliases": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5acf0>"
        ],
        "direct_name_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5ac20>"
        ],
        "job_type_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5aa80>"
        ],
        "semantic_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a597d0>"
        ],
        "pattern_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b370>"
        ],
        "resolve_config_map": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59ff0>"
        ],
        "resolve_single_node_direct_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b100>"
        ],
        "resolve_single_node_no_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b9f0>"
        ],
        "resolve_single_node_ambiguity": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5be00>"
        ],
        "preview_resolution": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b1d0>"
        ],
        "mock_direct_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b920>"
        ],
        "mock_job_type_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a190>"
        ],
        "mock_semantic_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a400>"
        ],
        "mock_pattern_match": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a670>"
        ],
        "pipeline_api_error_base": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a8e0>"
        ],
        "configuration_error_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a0c0>"
        ],
        "configuration_error_with_details": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5bd30>"
        ],
        "ambiguity_error_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a810>"
        ],
        "ambiguity_error_with_tuple_candidates": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a330>"
        ],
        "ambiguity_error_with_dict_candidates": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b030>"
        ],
        "validation_error_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b2a0>"
        ],
        "validation_error_with_details": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59970>"
        ],
        "resolution_error_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59f20>"
        ],
        "resolution_error_with_details": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59a40>"
        ],
        "exception_inheritance": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59700>"
        ],
        "__init__": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5bc60>"
        ],
        "generate_random_word_length": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b510>"
        ],
        "validate_pipeline_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b780>"
        ],
        "sanitize_pipeline_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a260>"
        ],
        "generate_pipeline_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a598a0>"
        ],
        "tearDown": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a59d80>"
        ],
        "init_stores_config_path": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5bb90>"
        ],
        "detect_config_classes": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5a740>"
        ],
        "create_pipeline_dag": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5bac0>"
        ],
        "create_config_map": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5b5e0>"
        ],
        "create_step_builder_map": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a5bed0>"
        ],
        "get_resolution_preview": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0040>"
        ],
        "get_step_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0110>"
        ],
        "get_pipeline_parameters": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa01e0>"
        ],
        "compile_with_custom_pipeline_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa02b0>"
        ],
        "compile_dag_to_pipeline_invalid_dag": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0380>"
        ],
        "compile_dag_to_pipeline_empty_dag": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0450>"
        ],
        "compile_dag_to_pipeline_missing_config_file": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0520>"
        ],
        "compile_dag_to_pipeline_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa05f0>"
        ],
        "compile_dag_to_pipeline_exception_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa06c0>"
        ],
        "compiler_init_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0790>"
        ],
        "compiler_init_missing_config_file": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0860>"
        ],
        "compiler_init_with_custom_components": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0930>"
        ],
        "validate_dag_compatibility_config_resolution_failure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0a00>"
        ],
        "preview_resolution_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0ad0>"
        ],
        "preview_resolution_exception_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0ba0>"
        ],
        "compile_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0c70>"
        ],
        "compile_exception_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0d40>"
        ],
        "compile_with_report": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0e10>"
        ],
        "get_supported_step_types": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0ee0>"
        ],
        "validate_config_file_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa0fb0>"
        ],
        "validate_config_file_failure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1080>"
        ],
        "get_last_template": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1150>"
        ],
        "compile_and_fill_execution_doc": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1220>"
        ],
        "mock_template": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa12f0>"
        ],
        "fill_execution_document": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa13c0>"
        ],
        "fill_execution_document_with_missing_sections": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1490>"
        ],
        "fill_execution_document_with_missing_steps": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1560>"
        ],
        "find_registration_step_nodes": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1630>"
        ],
        "parse_node_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1700>"
        ],
        "direct_name_matching_with_metadata": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa17d0>"
        ],
        "job_type_matching_enhanced": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa18a0>"
        ],
        "resolve_config_map_exact_matches": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1970>"
        ],
        "resolve_config_map_with_metadata": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1a40>"
        ],
        "resolve_single_node_prioritization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1b10>"
        ],
        "ambiguity_detection": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1be0>"
        ]
      }
    },
    "config_fields": {
      "component": "config_fields",
      "total_test_functions": 448,
      "unique_test_names": 277,
      "redundant_test_names": 127,
      "redundant_tests": {
        "setUp": {
          "count": 22,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_integration.py",
            "test/core/config_fields/test_integration.py"
          ]
        },
        "test_basic_serialization": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_nested_serialization": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_generate_step_name_basic": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_generate_step_name_job_type": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_generate_step_name_multiple_attributes": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_serialize_config_includes_step_name": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_serialize_deserialize_preserves_job_type": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_full_serialize_config_cycle": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_serialization.py",
            "test/core/config_fields/test_type_aware_serialization.py"
          ]
        },
        "test_simple_object_tracking": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_nested_object_tracking": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_circular_reference_detection": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_max_depth_detection": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_object_identification": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_integration_with_serializer_simulation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_complex_nested_paths": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_actual_integration_with_serializer": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "test_error_message_formatting": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "_format_cycle_error_manual": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_tracker.py",
            "test/core/config_fields/test_circular_reference_tracker.py"
          ]
        },
        "__init__": {
          "count": 6,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_init_categorizes_configs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_is_special_field": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_is_likely_static": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_categorize_field": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_categorize_fields_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_place_field_shared": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_place_field_specific": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_get_categorized_fields": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "test_end_to_end_categorization": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "mock_serialize_impl": {
          "count": 4,
          "locations": [
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py",
            "test/core/config_fields/test_config_field_categorizer.py"
          ]
        },
        "emit": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "tearDown": {
          "count": 12,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_integration.py",
            "test/core/config_fields/test_integration.py"
          ]
        },
        "test_enhanced_placeholders_for_circular_refs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_list_items_avoid_false_positives": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_nested_complex_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_true_circular_references_still_detected": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_special_list_format_handling": {
          "count": 4,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_type_metadata_handling_with_circular_refs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_deep_nesting_without_circularity": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_circular_reference_error_messages": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_performance_with_large_structures": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_circular_reference_consolidated.py",
            "test/core/config_fields/test_circular_reference_consolidated.py"
          ]
        },
        "test_circular_reference_handling_in_data_sources": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_circular_reference_handling_in_hyperparameters": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_payload_config_recursion_fix": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_load_real_config_file": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_additional_config_with_special_list": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_deep_recursion_prevention": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_memory_leak_prevention": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_error_handling_improvements": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_bug_fixes_consolidated.py",
            "test/core/config_fields/test_bug_fixes_consolidated.py"
          ]
        },
        "test_extract_class_names_from_metadata": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_extract_class_names_from_specific_configs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_extract_class_names_empty_config": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_extract_class_names_partial_config": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_extract_class_names_invalid_specific_config": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_from_json_success": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_from_json_file_not_found": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_from_json_invalid_json": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_from_json_no_class_names_found": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_from_json_missing_classes": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_from_config_store_success": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_from_config_store_io_error": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_from_config_store_no_class_names": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_essential_classes_constant": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_field_constants": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_detect_config_classes_from_json_function": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_real_file_integration": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_edge_case_nested_specific_configs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_edge_case_malformed_metadata": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_detector.py",
            "test/core/config_fields/test_config_class_detector.py"
          ]
        },
        "test_get_tier_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_register_field_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_register_field_validation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_register_fields_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_register_fields_validation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_get_fields_by_tier_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_get_fields_by_tier_validation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_reset_to_defaults_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_default_tier_assignments_validation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_tier_distribution": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_field_name_consistency": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_registry_immutability_during_get_operations": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_comprehensive_field_coverage": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_tier_registry.py",
            "test/core/config_fields/test_tier_registry.py"
          ]
        },
        "test_init_creates_categorizer": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_merge_returns_simplified_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_verify_merged_output_checks_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_check_mutual_exclusivity": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_check_special_fields_placement": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_config_types_format": {
          "count": 4,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_save_creates_correct_output_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_load_from_simplified_structure": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_load_from_simplified_structure_with_legacy_data": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "test_merge_with_direction": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_merger.py",
            "test/core/config_fields/test_config_merger.py"
          ]
        },
        "validate_config": {
          "count": 6,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_type_preservation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_type_metadata_in_serialized_output": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_custom_config_with_hyperparameters": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_config_types_format_with_custom_configs": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_multiple_config_scenarios": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_fallback_behavior": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_type_aware_deserialization.py",
            "test/core/config_fields/test_type_aware_deserialization.py"
          ]
        },
        "test_register_decorator_functionality": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_register_direct_functionality": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_get_class_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_get_all_classes_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_clear_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_register_many_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_registered_names_method": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_class_name_collision_handling": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_registry_persistence_across_operations": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_build_complete_config_classes_function": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_registry_thread_safety_simulation": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_edge_cases": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_config_class_store.py",
            "test/core/config_fields/test_config_class_store.py"
          ]
        },
        "test_end_to_end_workflow": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_integration.py",
            "test/core/config_fields/test_integration.py"
          ]
        },
        "test_job_type_variants": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_integration.py",
            "test/core/config_fields/test_integration.py"
          ]
        },
        "test_serialize_deserialize_with_nesting": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_integration.py",
            "test/core/config_fields/test_integration.py"
          ]
        },
        "test_special_fields_to_keep_specific_completeness": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_non_static_field_patterns_accuracy": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_non_static_field_exceptions_validity": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_pattern_exception_logic": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_category_type_enum": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_merge_direction_enum": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_serialization_mode_enum": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_type_mapping_completeness": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_type_mapping_consistency": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_constants_immutability": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_field_pattern_matching_logic": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_special_fields_coverage": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_enum_completeness": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        },
        "test_constants_documentation_alignment": {
          "count": 2,
          "locations": [
            "test/core/config_fields/test_constants.py",
            "test/core/config_fields/test_constants.py"
          ]
        }
      },
      "pattern_analysis": {
        "setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1d80>"
        ],
        "basic_serialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2190>"
        ],
        "nested_serialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2c20>"
        ],
        "generate_step_name_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3370>"
        ],
        "generate_step_name_job_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3ed0>"
        ],
        "generate_step_name_multiple_attributes": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2e90>"
        ],
        "serialize_config_includes_step_name": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3c60>"
        ],
        "serialize_deserialize_preserves_job_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3030>"
        ],
        "full_serialize_config_cycle": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa31d0>"
        ],
        "simple_object_tracking": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2cf0>"
        ],
        "nested_object_tracking": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3850>"
        ],
        "circular_reference_detection": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3780>"
        ],
        "max_depth_detection": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2330>"
        ],
        "object_identification": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa25a0>"
        ],
        "integration_with_serializer_simulation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3100>"
        ],
        "complex_nested_paths": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2810>"
        ],
        "actual_integration_with_serializer": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3e00>"
        ],
        "error_message_formatting": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1ff0>"
        ],
        "_format_cycle_error_manual": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3920>"
        ],
        "__init__": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2670>"
        ],
        "init_categorizes_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2400>"
        ],
        "is_special_field": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2260>"
        ],
        "is_likely_static": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3510>"
        ],
        "categorize_field": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3440>"
        ],
        "categorize_fields_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2b50>"
        ],
        "place_field_shared": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2f60>"
        ],
        "place_field_specific": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2dc0>"
        ],
        "get_categorized_fields": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa1f20>"
        ],
        "end_to_end_categorization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa28e0>"
        ],
        "mock_serialize_impl": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3ac0>"
        ],
        "emit": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa24d0>"
        ],
        "tearDown": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa36b0>"
        ],
        "enhanced_placeholders_for_circular_refs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2740>"
        ],
        "list_items_avoid_false_positives": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa29b0>"
        ],
        "nested_complex_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa20c0>"
        ],
        "true_circular_references_still_detected": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3d30>"
        ],
        "special_list_format_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa32a0>"
        ],
        "type_metadata_handling_with_circular_refs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa39f0>"
        ],
        "deep_nesting_without_circularity": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa3b90>"
        ],
        "circular_reference_error_messages": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa35e0>"
        ],
        "performance_with_large_structures": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aa2a80>"
        ],
        "circular_reference_handling_in_data_sources": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c040>"
        ],
        "circular_reference_handling_in_hyperparameters": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c110>"
        ],
        "payload_config_recursion_fix": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c1e0>"
        ],
        "load_real_config_file": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c2b0>"
        ],
        "additional_config_with_special_list": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c380>"
        ],
        "deep_recursion_prevention": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c450>"
        ],
        "memory_leak_prevention": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c520>"
        ],
        "error_handling_improvements": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c5f0>"
        ],
        "extract_class_names_from_metadata": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c6c0>"
        ],
        "extract_class_names_from_specific_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c790>"
        ],
        "extract_class_names_empty_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c860>"
        ],
        "extract_class_names_partial_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1c930>"
        ],
        "extract_class_names_invalid_specific_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ca00>"
        ],
        "detect_from_json_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cad0>"
        ],
        "detect_from_json_file_not_found": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cba0>"
        ],
        "detect_from_json_invalid_json": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cc70>"
        ],
        "detect_from_json_no_class_names_found": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cd40>"
        ],
        "detect_from_json_missing_classes": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ce10>"
        ],
        "from_config_store_success": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cee0>"
        ],
        "from_config_store_io_error": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1cfb0>"
        ],
        "from_config_store_no_class_names": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d080>"
        ],
        "essential_classes_constant": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d150>"
        ],
        "field_constants": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d220>"
        ],
        "detect_config_classes_from_json_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d2f0>"
        ],
        "real_file_integration": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d3c0>"
        ],
        "edge_case_nested_specific_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d490>"
        ],
        "edge_case_malformed_metadata": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d560>"
        ],
        "get_tier_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d630>"
        ],
        "register_field_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d700>"
        ],
        "register_field_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d7d0>"
        ],
        "register_fields_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d8a0>"
        ],
        "register_fields_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1d970>"
        ],
        "get_fields_by_tier_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1da40>"
        ],
        "get_fields_by_tier_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1db10>"
        ],
        "reset_to_defaults_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1dbe0>"
        ],
        "default_tier_assignments_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1dcb0>"
        ],
        "tier_distribution": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1dd80>"
        ],
        "field_name_consistency": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1de50>"
        ],
        "registry_immutability_during_get_operations": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1df20>"
        ],
        "comprehensive_field_coverage": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1dff0>"
        ],
        "init_creates_categorizer": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e0c0>"
        ],
        "merge_returns_simplified_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e190>"
        ],
        "verify_merged_output_checks_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e260>"
        ],
        "check_mutual_exclusivity": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e330>"
        ],
        "check_special_fields_placement": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e400>"
        ],
        "config_types_format": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e4d0>"
        ],
        "save_creates_correct_output_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e5a0>"
        ],
        "load_from_simplified_structure": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e670>"
        ],
        "load_from_simplified_structure_with_legacy_data": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e740>"
        ],
        "merge_with_direction": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e810>"
        ],
        "validate_config": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e8e0>"
        ],
        "type_preservation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1e9b0>"
        ],
        "type_metadata_in_serialized_output": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ea80>"
        ],
        "custom_config_with_hyperparameters": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1eb50>"
        ],
        "config_types_format_with_custom_configs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ec20>"
        ],
        "multiple_config_scenarios": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ecf0>"
        ],
        "fallback_behavior": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1edc0>"
        ],
        "register_decorator_functionality": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ee90>"
        ],
        "register_direct_functionality": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1ef60>"
        ],
        "get_class_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f030>"
        ],
        "get_all_classes_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f100>"
        ],
        "clear_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f1d0>"
        ],
        "register_many_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f2a0>"
        ],
        "registered_names_method": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f370>"
        ],
        "class_name_collision_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f440>"
        ],
        "registry_persistence_across_operations": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f510>"
        ],
        "build_complete_config_classes_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f5e0>"
        ],
        "registry_thread_safety_simulation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f6b0>"
        ],
        "edge_cases": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f780>"
        ],
        "end_to_end_workflow": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f850>"
        ],
        "job_type_variants": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f920>"
        ],
        "serialize_deserialize_with_nesting": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1f9f0>"
        ],
        "special_fields_to_keep_specific_completeness": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fac0>"
        ],
        "non_static_field_patterns_accuracy": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fb90>"
        ],
        "non_static_field_exceptions_validity": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fc60>"
        ],
        "pattern_exception_logic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fd30>"
        ],
        "category_type_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fe00>"
        ],
        "merge_direction_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a1fed0>"
        ],
        "serialization_mode_enum": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8040>"
        ],
        "type_mapping_completeness": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae81e0>"
        ],
        "type_mapping_consistency": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8110>"
        ],
        "constants_immutability": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae85f0>"
        ],
        "field_pattern_matching_logic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8520>"
        ],
        "special_fields_coverage": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8450>"
        ],
        "enum_completeness": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae82b0>"
        ],
        "constants_documentation_alignment": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8ba0>"
        ]
      }
    },
    "deps": {
      "component": "deps",
      "total_test_functions": 332,
      "unique_test_names": 202,
      "redundant_test_names": 88,
      "redundant_tests": {
        "test_calculate_similarity_with_aliases": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_weight_calculation": {
          "count": 4,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_name_normalization": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_individual_similarity_metrics": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_synonym_matching": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_find_best_matches": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_similarity_explanation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_edge_cases": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_integration_with_dependency_resolver": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_direct_name_matching": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "test_domain_specific_synonyms": {
          "count": 2,
          "locations": [
            "test/core/deps/test_semantic_matcher.py",
            "test/core/deps/test_semantic_matcher.py"
          ]
        },
        "setUp": {
          "count": 26,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py",
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_helpers.py",
            "test/core/deps/test_helpers.py"
          ]
        },
        "test_init_and_validation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_parse_property_path": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_to_sagemaker_property": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_get_property_value": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_to_runtime_property": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_string_representation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "_create_mock_processing_step": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "_create_mock_training_step": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "_create_mock_eval_step": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "_create_mock_transform_step": {
          "count": 2,
          "locations": [
            "test/core/deps/test_property_reference.py",
            "test/core/deps/test_property_reference.py"
          ]
        },
        "test_registry_state_1": {
          "count": 6,
          "locations": [
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py"
          ]
        },
        "test_registry_state_2": {
          "count": 6,
          "locations": [
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py",
            "test/core/deps/test_global_state_isolation.py"
          ]
        },
        "test_create_pipeline_components_default": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_create_pipeline_components_custom_context": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_create_pipeline_components_wiring": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_create_pipeline_components_isolation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_get_thread_components_single_thread": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_get_thread_components_multi_thread": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_thread_components_persistence": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_dependency_resolution_context_basic": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_dependency_resolution_context_cleanup": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_dependency_resolution_context_no_cleanup": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_dependency_resolution_context_exception_handling": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_dependency_resolution_context_nested": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_end_to_end_pipeline_creation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "test_multi_context_pipeline_isolation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_factory.py",
            "test/core/deps/test_factory.py"
          ]
        },
        "tearDown": {
          "count": 6,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_helpers.py",
            "test/core/deps/test_helpers.py"
          ]
        },
        "test_registry_initialization": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_register_specification": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_register_invalid_specification": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_get_specifications_by_type": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_find_compatible_outputs": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_compatibility_checking": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_context_isolation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_registry_string_representation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_empty_registry_operations": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_compatibility_scoring_algorithm": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_complex_pipeline_compatibility": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_multiple_compatible_outputs": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_data_type_compatibility": {
          "count": 4,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_register_multiple_specifications": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_get_specification_detailed": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_get_specification_by_type_detailed": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_list_operations_detailed": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_find_compatible_outputs_detailed": {
          "count": 2,
          "locations": [
            "test/core/deps/test_specification_registry.py",
            "test/core/deps/test_specification_registry.py"
          ]
        },
        "test_manager_initialization": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_registry_creates_new": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_registry_returns_existing": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_registry_no_create": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_registry_isolation": {
          "count": 4,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_list_contexts": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_clear_context": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_clear_all_contexts": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_context_stats": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_manager_string_representation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_registry_function": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_pipeline_registry_backward_compatibility": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_default_registry_backward_compatibility": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_list_contexts_function": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_clear_context_function": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_get_context_stats_function": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_multiple_contexts_isolation": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_invalid_context_name_handling": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_registry_operations_on_cleared_context": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_concurrent_access_safety": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_context_statistics_detailed": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_memory_usage_monitoring": {
          "count": 2,
          "locations": [
            "test/core/deps/test_registry_manager.py",
            "test/core/deps/test_registry_manager.py"
          ]
        },
        "test_dependency_resolution_with_aliases": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_multiple_competing_candidates": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_type_compatibility_matrix": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_semantic_matching": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_required_vs_optional_dependencies": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_unresolvable_dependencies": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_property_reference_functionality": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_end_to_end_resolution": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        },
        "test_job_type_normalization": {
          "count": 2,
          "locations": [
            "test/core/deps/test_dependency_resolver.py",
            "test/core/deps/test_dependency_resolver.py"
          ]
        }
      },
      "pattern_analysis": {
        "calculate_similarity_with_aliases": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8930>"
        ],
        "weight_calculation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb100>"
        ],
        "name_normalization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeae90>"
        ],
        "individual_similarity_metrics": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebc60>"
        ],
        "synonym_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9ff0>"
        ],
        "find_best_matches": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea260>"
        ],
        "similarity_explanation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea330>"
        ],
        "edge_cases": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea190>"
        ],
        "integration_with_dependency_resolver": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea8e0>"
        ],
        "direct_name_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9560>"
        ],
        "domain_specific_synonyms": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebd30>"
        ],
        "setUp": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8c70>"
        ],
        "init_and_validation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9150>"
        ],
        "parse_property_path": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9cb0>"
        ],
        "to_sagemaker_property": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9700>"
        ],
        "get_property_value": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb440>"
        ],
        "to_runtime_property": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9be0>"
        ],
        "string_representation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb2a0>"
        ],
        "_create_mock_processing_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea4d0>"
        ],
        "_create_mock_training_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebb90>"
        ],
        "_create_mock_eval_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9b10>"
        ],
        "_create_mock_transform_step": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb6b0>"
        ],
        "registry_state_1": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9f20>"
        ],
        "registry_state_2": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9970>"
        ],
        "create_pipeline_components_default": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea9b0>"
        ],
        "create_pipeline_components_custom_context": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeadc0>"
        ],
        "create_pipeline_components_wiring": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8860>"
        ],
        "create_pipeline_components_isolation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea670>"
        ],
        "get_thread_components_single_thread": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea740>"
        ],
        "get_thread_components_multi_thread": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9080>"
        ],
        "thread_components_persistence": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9490>"
        ],
        "dependency_resolution_context_basic": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8e10>"
        ],
        "dependency_resolution_context_cleanup": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea5a0>"
        ],
        "dependency_resolution_context_no_cleanup": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebed0>"
        ],
        "dependency_resolution_context_exception_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeaa80>"
        ],
        "dependency_resolution_context_nested": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeab50>"
        ],
        "end_to_end_pipeline_creation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeaf60>"
        ],
        "multi_context_pipeline_isolation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9630>"
        ],
        "tearDown": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea810>"
        ],
        "registry_initialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeac20>"
        ],
        "register_specification": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebac0>"
        ],
        "register_invalid_specification": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9a40>"
        ],
        "get_specifications_by_type": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb370>"
        ],
        "find_compatible_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb850>"
        ],
        "compatibility_checking": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb030>"
        ],
        "context_isolation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8d40>"
        ],
        "registry_string_representation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae97d0>"
        ],
        "empty_registry_operations": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9d80>"
        ],
        "compatibility_scoring_algorithm": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeacf0>"
        ],
        "complex_pipeline_compatibility": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea400>"
        ],
        "multiple_compatible_outputs": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9e50>"
        ],
        "data_type_compatibility": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb5e0>"
        ],
        "register_multiple_specifications": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8790>"
        ],
        "get_specification_detailed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae92f0>"
        ],
        "get_specification_by_type_detailed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb1d0>"
        ],
        "list_operations_detailed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae98a0>"
        ],
        "find_compatible_outputs_detailed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aebe00>"
        ],
        "manager_initialization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8ee0>"
        ],
        "get_registry_creates_new": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb510>"
        ],
        "get_registry_returns_existing": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb9f0>"
        ],
        "get_registry_no_create": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb780>"
        ],
        "registry_isolation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae9220>"
        ],
        "list_contexts": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8fb0>"
        ],
        "clear_context": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae8ad0>"
        ],
        "clear_all_contexts": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105ae93c0>"
        ],
        "get_context_stats": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aeb920>"
        ],
        "manager_string_representation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105aea0c0>"
        ],
        "get_registry_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3d490>"
        ],
        "get_pipeline_registry_backward_compatibility": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3d3c0>"
        ],
        "get_default_registry_backward_compatibility": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c040>"
        ],
        "list_contexts_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3cd40>"
        ],
        "clear_context_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3cc70>"
        ],
        "get_context_stats_function": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c520>"
        ],
        "multiple_contexts_isolation": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c450>"
        ],
        "invalid_context_name_handling": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c790>"
        ],
        "registry_operations_on_cleared_context": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c6c0>"
        ],
        "concurrent_access_safety": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3d700>"
        ],
        "context_statistics_detailed": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3d220>"
        ],
        "memory_usage_monitoring": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3ca00>"
        ],
        "dependency_resolution_with_aliases": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c5f0>"
        ],
        "multiple_competing_candidates": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c930>"
        ],
        "type_compatibility_matrix": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3d080>"
        ],
        "semantic_matching": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c2b0>"
        ],
        "required_vs_optional_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c110>"
        ],
        "unresolvable_dependencies": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3df20>"
        ],
        "property_reference_functionality": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3de50>"
        ],
        "end_to_end_resolution": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c380>"
        ],
        "job_type_normalization": [
          "<generator object TestCoverageAnalyzer.analyze_redundancy.<locals>.<genexpr> at 0x105a3c1e0>"
        ]
      }
    }
  },
  "summary": {
    "total_components": 5,
    "total_source_functions": 916,
    "total_tested_functions": 640,
    "overall_coverage": 69.86899563318777
  }
}