{
  "script_name": "risk_table_mapping",
  "level1": {
    "passed": true,
    "issues": [
      {
        "severity": "INFO",
        "category": "path_usage",
        "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams",
        "details": {
          "path": "/opt/ml/code/hyperparams",
          "script": "risk_table_mapping",
          "node_type": "internal",
          "path_type": "fallback_path"
        },
        "recommendation": "Fallback path /opt/ml/code/hyperparams allowed for robustness - consider providing via proper input channel"
      },
      {
        "severity": "INFO",
        "category": "path_usage",
        "message": "INTERNAL step uses fallback path: /opt/ml/code/hyperparams/hyperparameters.json",
        "details": {
          "path": "/opt/ml/code/hyperparams/hyperparameters.json",
          "script": "risk_table_mapping",
          "node_type": "internal",
          "path_type": "fallback_path"
        },
        "recommendation": "Fallback path /opt/ml/code/hyperparams/hyperparameters.json allowed for robustness - consider providing via proper input channel"
      },
      {
        "severity": "WARNING",
        "category": "path_usage",
        "message": "Contract declares path not used in script: /opt/ml/processing/input/config",
        "details": {
          "path": "/opt/ml/processing/input/config",
          "script": "risk_table_mapping"
        },
        "recommendation": "Either use path /opt/ml/processing/input/config in script or remove from contract"
      },
      {
        "severity": "INFO",
        "category": "arguments",
        "message": "Script defines config-driven argument provided by builder: --job-type (accessed as args.job_type)",
        "details": {
          "cli_argument": "job-type",
          "python_attribute": "job_type",
          "script": "risk_table_mapping",
          "source": "builder"
        },
        "recommendation": "Argument --job-type is provided by builder - no action needed"
      },
      {
        "severity": "INFO",
        "category": "file_operations",
        "message": "Contract declares input not read by script: /opt/ml/processing/input/config",
        "details": {
          "path": "/opt/ml/processing/input/config",
          "operation": "read",
          "script": "risk_table_mapping"
        },
        "recommendation": "Either read /opt/ml/processing/input/config in script or remove from contract inputs"
      },
      {
        "severity": "INFO",
        "category": "testability_compliance",
        "message": "Main function follows testability pattern with all required parameters",
        "details": {
          "script": "risk_table_mapping",
          "testability_parameters": [
            "job_args",
            "environ_vars",
            "output_paths",
            "input_paths"
          ]
        },
        "recommendation": "No action needed - script follows testability best practices"
      },
      {
        "severity": "WARNING",
        "category": "testability_entry_point",
        "message": "Main function expects environ_vars parameter but no environment collection found in entry point",
        "details": {
          "script": "risk_table_mapping"
        },
        "recommendation": "Add environment variable collection in __main__ block to pass to main function"
      },
      {
        "severity": "WARNING",
        "category": "testability_parameter_usage",
        "message": "Testability parameters defined but not used: environ_vars",
        "details": {
          "script": "risk_table_mapping",
          "unused_parameters": [
            "environ_vars"
          ],
          "used_parameters": [
            "job_args",
            "output_paths",
            "input_paths"
          ]
        },
        "recommendation": "Either use the testability parameters or remove them from function signature"
      },
      {
        "severity": "INFO",
        "category": "testability_parameter_access",
        "message": "Consider using dictionary-style access for job_args",
        "details": {
          "script": "risk_table_mapping",
          "parameter": "job_args",
          "current_pattern": "job_args.job_type",
          "line_number": 508
        },
        "recommendation": "Use job_args['key'] for accessing nested values"
      },
      {
        "severity": "INFO",
        "category": "testability_parameter_access",
        "message": "Consider using dictionary-style access for input_paths",
        "details": {
          "script": "risk_table_mapping",
          "parameter": "input_paths",
          "current_pattern": "input_paths.get",
          "line_number": 511
        },
        "recommendation": "Use input_paths['key'] for accessing nested values"
      },
      {
        "severity": "INFO",
        "category": "testability_parameter_access",
        "message": "Consider using dictionary-style access for input_paths",
        "details": {
          "script": "risk_table_mapping",
          "parameter": "input_paths",
          "current_pattern": "input_paths.get",
          "line_number": 516
        },
        "recommendation": "Use input_paths['key'] for accessing nested values"
      },
      {
        "severity": "INFO",
        "category": "testability_parameter_access",
        "message": "Consider using dictionary-style access for job_args",
        "details": {
          "script": "risk_table_mapping",
          "parameter": "job_args",
          "current_pattern": "args.job_type",
          "line_number": 590
        },
        "recommendation": "Use job_args['key'] for accessing nested values"
      },
      {
        "severity": "INFO",
        "category": "testability_container_support",
        "message": "No container detection found - consider adding hybrid mode support",
        "details": {
          "script": "risk_table_mapping"
        },
        "recommendation": "Add container detection to support both local and container execution"
      },
      {
        "severity": "INFO",
        "category": "framework_detected",
        "message": "Processing script uses sklearn framework",
        "details": {
          "script": "risk_table_mapping",
          "step_type": "Processing",
          "framework": "sklearn"
        },
        "recommendation": "Ensure sklearn dependencies are properly specified"
      }
    ],
    "script_analysis": {
      "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/risk_table_mapping.py",
      "path_references": [
        "path='\\nRisk Table Mapping Processing Script\\n\\nThis script creates and applies risk tables for categorical features based on \\ntarget variable correlation, and handles missing value imputation for numeric features.\\nIt supports both training mode (fit and transform) and inference mode (transform only).\\n' line_number=2 context='#!/usr/bin/env python\\n>>> \"\"\"\\nRisk Table Mapping Processing Script\\n' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/input/data' line_number=24 context='\\n# Default paths (will be overridden by parameters in main function)\\n>>> DEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\nDEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"' is_hardcoded=True construction_method=None",
        "path='/opt/ml/code/hyperparams' line_number=25 context='# Default paths (will be overridden by parameters in main function)\\nDEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\n>>> DEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/output' line_number=26 context='DEFAULT_INPUT_DIR = \"/opt/ml/processing/input/data\"\\nDEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\n>>> DEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\nDEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"\\n' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/input/risk_tables' line_number=27 context='DEFAULT_CONFIG_DIR = \"/opt/ml/code/hyperparams\"  # Source directory path\\nDEFAULT_OUTPUT_DIR = \"/opt/ml/processing/output\"\\n>>> DEFAULT_RISK_TABLE_DIR = \"/opt/ml/processing/input/risk_tables\"\\n\\n# Constants for file paths to ensure consistency between training and inference' is_hardcoded=True construction_method=None",
        "path='bin_mapping.pkl' line_number=32 context='# These constants ensure the same filenames are used across all job types,\\n# facilitating proper connections between training and non-training steps\\n>>> RISK_TABLE_FILENAME = \"bin_mapping.pkl\"  # Used by downstream steps as input dependency\\nHYPERPARAMS_FILENAME = (\\n    \"hyperparameters.json\"  # Expected by the script and generated by the builder' is_hardcoded=True construction_method=None",
        "path='hyperparameters.json' line_number=34 context='RISK_TABLE_FILENAME = \"bin_mapping.pkl\"  # Used by downstream steps as input dependency\\nHYPERPARAMS_FILENAME = (\\n>>>     \"hyperparameters.json\"  # Expected by the script and generated by the builder\\n)\\n' is_hardcoded=True construction_method=None",
        "path='\\n    A class to create risk tables for categorical features.\\n\\n    Risk tables map categorical values to numerical risk scores based on\\n    their correlation with the target variable.\\n    ' line_number=120 context='\\nclass OfflineBinning:\\n>>>     \"\"\"\\n    A class to create risk tables for categorical features.\\n' is_hardcoded=True construction_method=None",
        "path='Fits the risk tables based on the provided dataframe.' line_number=135 context='        self, df: pd.DataFrame, smooth_factor: float = 0, count_threshold: int = 0\\n    ) -> None:\\n>>>         \"\"\"Fits the risk tables based on the provided dataframe.\"\"\"\\n        # Drop any -1 or NaN target rows for fitting\\n        fit_df = df.loc[(df[self.target] != -1) & (~df[self.target].isnull())].copy()' is_hardcoded=True construction_method=None",
        "path='Helper to calculate the risk table for a single variable.' line_number=175 context='        count_threshold: int,\\n    ) -> Dict:\\n>>>         \"\"\"Helper to calculate the risk table for a single variable.\"\"\"\\n        cross_tab = pd.crosstab(\\n            df[variable],' is_hardcoded=True construction_method=None",
        "path='Transforms the dataframe using the fitted risk tables.' line_number=201 context='\\n    def transform(self, df: pd.DataFrame) -> pd.DataFrame:\\n>>>         \"\"\"Transforms the dataframe using the fitted risk tables.\"\"\"\\n        df_transformed = df.copy()\\n        for var, risk_table_info in self.risk_tables.items():' is_hardcoded=True construction_method=None",
        "path='Loads pre-existing risk tables.' line_number=211 context='\\n    def load_risk_tables(self, risk_tables: Dict) -> None:\\n>>>         \"\"\"Loads pre-existing risk tables.\"\"\"\\n        self.risk_tables = risk_tables\\n        logger.info(f\"Loaded {len(risk_tables)} risk tables\")' is_hardcoded=True construction_method=None",
        "path='train_processed_data.csv' line_number=227 context='    if job_type == \"training\":\\n        # For training, we expect data in train/test/val subdirectories\\n>>>         train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n        test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n        val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")' is_hardcoded=True construction_method=None",
        "path='test_processed_data.csv' line_number=228 context='        # For training, we expect data in train/test/val subdirectories\\n        train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n>>>         test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n        val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")\\n        logger.info(' is_hardcoded=True construction_method=None",
        "path='val_processed_data.csv' line_number=229 context='        train_df = pd.read_csv(input_path / \"train\" / \"train_processed_data.csv\")\\n        test_df = pd.read_csv(input_path / \"test\" / \"test_processed_data.csv\")\\n>>>         val_df = pd.read_csv(input_path / \"val\" / \"val_processed_data.csv\")\\n        logger.info(\\n            f\"Loaded training data splits: train={train_df.shape}, test={test_df.shape}, val={val_df.shape}\"' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=236 context='    else:\\n        # For other job types, we expect data in a single directory named after job_type\\n>>>         df = pd.read_csv(input_path / job_type / f\"{job_type}_processed_data.csv\")\\n        logger.info(f\"Loaded {job_type} data: {df.shape}\")\\n        return {job_type: df}' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=256 context='        split_output_dir.mkdir(exist_ok=True, parents=True)\\n\\n>>>         output_file = split_output_dir / f\"{split_name}_processed_data.csv\"\\n        df.to_csv(output_file, index=False)\\n        logger.info(f\"Saved {split_name} data to {output_file}, shape: {df.shape}\")' is_hardcoded=True construction_method=None",
        "path='No valid categorical fields found for risk mapping. Using original data.' line_number=296 context='        if not valid_cat_fields:\\n            logger.warning(\\n>>>                 \"No valid categorical fields found for risk mapping. Using original data.\"\\n            )\\n            transformed_data = data_dict' is_hardcoded=True construction_method=None",
        "path='Risk-table mapping complete.' line_number=473 context='    save_artifacts(binner, hyperparams, output_path)\\n\\n>>>     logger.info(\"Risk-table mapping complete.\")\\n    return transformed_data, binner\\n' is_hardcoded=True construction_method=None",
        "path='. ' line_number=519 context='            if not risk_table_input_dir:\\n                logger.warning(\\n>>>                     f\"No risk_table_input path provided for non-training job {job_type}. \"\\n                    + \"Risk table mapping may fail.\"\\n                )' is_hardcoded=True construction_method=None",
        "path='Risk table mapping may fail.' line_number=520 context='                logger.warning(\\n                    f\"No risk_table_input path provided for non-training job {job_type}. \"\\n>>>                     + \"Risk table mapping may fail.\"\\n                )\\n' is_hardcoded=True construction_method=None",
        "path='hyperparameters.json' line_number=536 context='        if \"hyperparameters_s3_uri\" in input_paths:\\n            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n>>>             if not hparam_path.endswith(\"hyperparameters.json\"):\\n                hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:' is_hardcoded=True construction_method=None",
        "path='hyperparameters.json' line_number=537 context='            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n            if not hparam_path.endswith(\"hyperparameters.json\"):\\n>>>                 hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:\\n            # Fallback to source directory if not provided' is_hardcoded=False construction_method='os.path.join'",
        "path='hyperparameters.json' line_number=537 context='            hparam_path = input_paths[\"hyperparameters_s3_uri\"]\\n            if not hparam_path.endswith(\"hyperparameters.json\"):\\n>>>                 hparam_path = os.path.join(hparam_path, \"hyperparameters.json\")\\n        else:\\n            # Fallback to source directory if not provided' is_hardcoded=True construction_method=None",
        "path='/opt/ml/code/hyperparams/hyperparameters.json' line_number=540 context='        else:\\n            # Fallback to source directory if not provided\\n>>>             hparam_path = \"/opt/ml/code/hyperparams/hyperparameters.json\"\\n\\n        logger.info(f\"Loading hyperparameters from {hparam_path}\")' is_hardcoded=True construction_method=None",
        "path='. Risk table mapping requires hyperparameters to be provided either via input channel or in source directory at /opt/ml/code/hyperparams/hyperparameters.json' line_number=549 context='            # FAIL with clear error instead of using arbitrary defaults\\n            raise FileNotFoundError(\\n>>>                 f\"Hyperparameters file not found at {hparam_path}. \"\\n                f\"Risk table mapping requires hyperparameters to be provided either via \"\\n                f\"input channel or in source directory at /opt/ml/code/hyperparams/hyperparameters.json\"' is_hardcoded=True construction_method=None"
      ],
      "env_var_accesses": [],
      "imports": [
        "module_name='argparse' import_alias=None line_number=10 is_from_import=False imported_items=[]",
        "module_name='os' import_alias=None line_number=11 is_from_import=False imported_items=[]",
        "module_name='sys' import_alias=None line_number=12 is_from_import=False imported_items=[]",
        "module_name='pandas' import_alias='pd' line_number=13 is_from_import=False imported_items=[]",
        "module_name='numpy' import_alias='np' line_number=14 is_from_import=False imported_items=[]",
        "module_name='json' import_alias=None line_number=15 is_from_import=False imported_items=[]",
        "module_name='pickle' import_alias='pkl' line_number=16 is_from_import=False imported_items=[]",
        "module_name='traceback' import_alias=None line_number=17 is_from_import=False imported_items=[]",
        "module_name='pathlib' import_alias=None line_number=18 is_from_import=True imported_items=['Path']",
        "module_name='sklearn.impute' import_alias=None line_number=19 is_from_import=True imported_items=['SimpleImputer']",
        "module_name='logging' import_alias=None line_number=20 is_from_import=False imported_items=[]",
        "module_name='typing' import_alias=None line_number=21 is_from_import=True imported_items=['Dict', 'List', 'Tuple', 'Any', 'Optional', 'Callable']"
      ],
      "argument_definitions": [
        "argument_name='job_type' line_number=572 is_required=True has_default=False default_value=None argument_type='str' choices=['training', 'validation', 'testing', 'calibration']"
      ],
      "file_operations": [
        "file_path='<file_object>' operation_type='read' line_number=64 context='    try:\\n        with open(config_path, \"r\") as file:\\n>>>             return json.load(file)\\n    except FileNotFoundError as e:\\n        logger.error(f\"Configuration file not found at {config_path}: {str(e)}\")' mode=None method='json.load'",
        "file_path='<file_object>' operation_type='write' line_number=372 context='    bin_output_path = output_path / RISK_TABLE_FILENAME\\n    with open(bin_output_path, \"wb\") as f:\\n>>>         pkl.dump(binner.risk_tables, f)\\n    logger.info(f\"Saved binning mapping to {bin_output_path}\")\\n    logger.info(f\"This file can be used as input for non-training jobs\")' mode=None method='pickle.dump'",
        "file_path='<file_object>' operation_type='write' line_number=379 context='    hyperparams_output_path = output_path / HYPERPARAMS_FILENAME\\n    with open(hyperparams_output_path, \"w\") as f:\\n>>>         json.dump(hyperparams, f, indent=2)\\n    logger.info(f\"Saved hyperparameters to {hyperparams_output_path}\")\\n' mode=None method='json.dump'",
        "file_path='<file_object>' operation_type='read' line_number=398 context='    logger.info(f\"Loading risk tables from {risk_table_path}\")\\n    with open(risk_table_path, \"rb\") as f:\\n>>>         risk_tables = pkl.load(f)\\n\\n    logger.info(f\"Successfully loaded risk tables with {len(risk_tables)} mappings\")' mode=None method='pickle.load'"
      ],
      "step_type": "Processing",
      "framework": "sklearn",
      "step_type_patterns": {}
    },
    "contract": {
      "entry_point": "risk_table_mapping.py",
      "inputs": {
        "data_input": {
          "path": "/opt/ml/processing/input/data"
        },
        "hyperparameters_s3_uri": {
          "path": "/opt/ml/processing/input/config"
        },
        "risk_tables": {
          "path": "/opt/ml/processing/input/risk_tables"
        }
      },
      "outputs": {
        "processed_data": {
          "path": "/opt/ml/processing/output"
        },
        "risk_tables": {
          "path": "/opt/ml/processing/output"
        }
      },
      "arguments": {},
      "environment_variables": {
        "required": [],
        "optional": {}
      },
      "description": "\n    Risk table mapping script that:\n    1. Creates risk tables for categorical features based on target variable correlation\n    2. Handles missing value imputation for numeric features\n    3. Supports both training mode (fit and transform) and inference mode (transform only)\n    4. Applies smoothing and count thresholds for robust risk estimation\n    5. Saves fitted artifacts for reuse in inference\n    \n    Input Structure:\n    - /opt/ml/processing/input/data: Data files from tabular preprocessing\n      - Training mode: train/, test/, val/ subdirectories with processed data\n      - Other modes: job_type/ subdirectory with processed data\n    - /opt/ml/processing/input/config: Configuration files\n      - config.json: Model configuration including category risk parameters\n      - metadata.csv: Variable metadata with types and imputation strategies\n      - job_type: Configuration parameter specifying job type (training, validation, testing, calibration)\n    - /opt/ml/processing/input/risk_tables: Pre-trained risk tables (for non-training modes)\n      - bin_mapping.pkl: Risk table mappings for categorical features\n      - missing_value_imputation.pkl: Imputation values for numeric features\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Transformed data by split\n    - /opt/ml/processing/output/bin_mapping.pkl: Risk table mappings for categorical features\n    - /opt/ml/processing/output/missing_value_imputation.pkl: Imputation values for numeric features\n    - /opt/ml/processing/output/config.pkl: Serialized configuration with metadata\n    \n    Job Types (from config):\n    - training: Fits risk tables on training data, transforms all splits\n    - validation/testing/calibration: Uses pre-trained risk tables, transforms single split\n    \n    Training Mode:\n    - Fits risk tables on training data\n    - Transforms train/test/val splits\n    - Saves risk tables and imputation models\n    \n    Non-Training Modes:\n    - Loads pre-trained risk tables and imputation models\n    - Transforms data using loaded artifacts\n    - Maintains the same output structure as training mode\n    ",
      "framework_requirements": {
        "pandas": ">=1.3.0",
        "numpy": ">=1.21.0",
        "scikit-learn": ">=1.0.0"
      }
    }
  },
  "level2": {
    "passed": true,
    "issues": [
      {
        "severity": "INFO",
        "category": "multi_variant_validation",
        "message": "Smart Specification Selection: validated against 4 variants",
        "details": {
          "contract": "risk_table_mapping_contract",
          "variants": [
            "training",
            "testing",
            "validation",
            "calibration"
          ],
          "total_dependencies": 3,
          "total_outputs": 2,
          "contract_inputs": 3,
          "contract_outputs": 2
        },
        "recommendation": "Multi-variant validation completed successfully"
      },
      {
        "severity": "INFO",
        "category": "step_type_resolution",
        "message": "Step type resolved via registry: RiskTableMapping_Training -> RiskTableMapping -> Processing",
        "details": {
          "contract": "risk_table_mapping_contract",
          "original_spec_type": "RiskTableMapping_Training",
          "canonical_name": "RiskTableMapping",
          "resolved_sagemaker_type": "Processing",
          "registry_available": true
        },
        "recommendation": "Using Processing step property paths for validation"
      },
      {
        "severity": "INFO",
        "category": "property_path_validation",
        "message": "Valid property path in output processed_data: properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
        "details": {
          "contract": "risk_table_mapping_contract",
          "logical_name": "processed_data",
          "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
          "step_type": "processing",
          "validation_source": "SageMaker Documentation v2.92.2",
          "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
        },
        "recommendation": "Property path is correctly formatted for the step type"
      },
      {
        "severity": "INFO",
        "category": "property_path_validation",
        "message": "Valid property path in output risk_tables: properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
        "details": {
          "contract": "risk_table_mapping_contract",
          "logical_name": "risk_tables",
          "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
          "step_type": "processing",
          "validation_source": "SageMaker Documentation v2.92.2",
          "documentation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference"
        },
        "recommendation": "Property path is correctly formatted for the step type"
      },
      {
        "severity": "INFO",
        "category": "property_path_validation_summary",
        "message": "Property path validation completed for risk_table_mapping_contract",
        "details": {
          "contract": "risk_table_mapping_contract",
          "step_type": "processing",
          "node_type": "internal",
          "total_outputs": 2,
          "outputs_with_property_paths": 2,
          "validation_reference": "https://sagemaker.readthedocs.io/en/v2.92.2/amazon_sagemaker_model_building_pipeline.html#data-dependency-property-reference",
          "documentation_version": "v2.92.2"
        },
        "recommendation": "Validated 2/2 outputs with property paths against SageMaker documentation"
      }
    ],
    "contract": {
      "entry_point": "risk_table_mapping.py",
      "inputs": {
        "data_input": {
          "path": "/opt/ml/processing/input/data"
        },
        "hyperparameters_s3_uri": {
          "path": "/opt/ml/processing/input/config"
        },
        "risk_tables": {
          "path": "/opt/ml/processing/input/risk_tables"
        }
      },
      "outputs": {
        "processed_data": {
          "path": "/opt/ml/processing/output"
        },
        "risk_tables": {
          "path": "/opt/ml/processing/output"
        }
      },
      "arguments": {},
      "environment_variables": {
        "required": [],
        "optional": {}
      },
      "description": "\n    Risk table mapping script that:\n    1. Creates risk tables for categorical features based on target variable correlation\n    2. Handles missing value imputation for numeric features\n    3. Supports both training mode (fit and transform) and inference mode (transform only)\n    4. Applies smoothing and count thresholds for robust risk estimation\n    5. Saves fitted artifacts for reuse in inference\n    \n    Input Structure:\n    - /opt/ml/processing/input/data: Data files from tabular preprocessing\n      - Training mode: train/, test/, val/ subdirectories with processed data\n      - Other modes: job_type/ subdirectory with processed data\n    - /opt/ml/processing/input/config: Configuration files\n      - config.json: Model configuration including category risk parameters\n      - metadata.csv: Variable metadata with types and imputation strategies\n      - job_type: Configuration parameter specifying job type (training, validation, testing, calibration)\n    - /opt/ml/processing/input/risk_tables: Pre-trained risk tables (for non-training modes)\n      - bin_mapping.pkl: Risk table mappings for categorical features\n      - missing_value_imputation.pkl: Imputation values for numeric features\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Transformed data by split\n    - /opt/ml/processing/output/bin_mapping.pkl: Risk table mappings for categorical features\n    - /opt/ml/processing/output/missing_value_imputation.pkl: Imputation values for numeric features\n    - /opt/ml/processing/output/config.pkl: Serialized configuration with metadata\n    \n    Job Types (from config):\n    - training: Fits risk tables on training data, transforms all splits\n    - validation/testing/calibration: Uses pre-trained risk tables, transforms single split\n    \n    Training Mode:\n    - Fits risk tables on training data\n    - Transforms train/test/val splits\n    - Saves risk tables and imputation models\n    \n    Non-Training Modes:\n    - Loads pre-trained risk tables and imputation models\n    - Transforms data using loaded artifacts\n    - Maintains the same output structure as training mode\n    ",
      "framework_requirements": {
        "pandas": ">=1.3.0",
        "numpy": ">=1.21.0",
        "scikit-learn": ">=1.0.0"
      }
    },
    "specifications": {
      "risk_table_mapping_testing_spec": {
        "step_type": "RiskTableMapping_Testing",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "TabularPreprocessing",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Preprocessed testing data from tabular preprocessing step"
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "DataPrep",
              "ConfigurationStep",
              "HyperparameterPrep",
              "ModelTraining",
              "ProcessingStep",
              "FeatureEngineering",
              "DataQuality"
            ],
            "data_type": "S3Uri",
            "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
          },
          {
            "logical_name": "risk_tables",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "RiskTableMapping_Training"
            ],
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models from training step"
          }
        ],
        "outputs": [
          {
            "logical_name": "processed_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Processed testing data with risk table mappings applied"
          },
          {
            "logical_name": "risk_tables",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models (passthrough from training)"
          }
        ]
      },
      "risk_table_mapping_calibration_spec": {
        "step_type": "RiskTableMapping_Calibration",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "TabularPreprocessing",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Preprocessed calibration data from tabular preprocessing step"
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "DataPrep",
              "ConfigurationStep",
              "HyperparameterPrep",
              "ModelTraining",
              "ProcessingStep",
              "FeatureEngineering",
              "DataQuality"
            ],
            "data_type": "S3Uri",
            "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
          },
          {
            "logical_name": "risk_tables",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "RiskTableMapping_Training"
            ],
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models from training step"
          }
        ],
        "outputs": [
          {
            "logical_name": "processed_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Processed calibration data with risk table mappings applied"
          },
          {
            "logical_name": "risk_tables",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models (passthrough from training)"
          }
        ]
      },
      "risk_table_mapping_validation_spec": {
        "step_type": "RiskTableMapping_Validation",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "TabularPreprocessing",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Preprocessed validation data from tabular preprocessing step"
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "DataPrep",
              "ConfigurationStep",
              "HyperparameterPrep",
              "ModelTraining",
              "ProcessingStep",
              "FeatureEngineering",
              "DataQuality"
            ],
            "data_type": "S3Uri",
            "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
          },
          {
            "logical_name": "risk_tables",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "RiskTableMapping_Training"
            ],
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models from training step"
          }
        ],
        "outputs": [
          {
            "logical_name": "processed_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Processed validation data with risk table mappings applied"
          },
          {
            "logical_name": "risk_tables",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models (passthrough from training)"
          }
        ]
      },
      "risk_table_mapping_training_spec": {
        "step_type": "RiskTableMapping_Training",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "TabularPreprocessing",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Preprocessed training data from tabular preprocessing step"
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "DataPrep",
              "ConfigurationStep",
              "HyperparameterPrep",
              "ModelTraining",
              "ProcessingStep",
              "FeatureEngineering",
              "DataQuality"
            ],
            "data_type": "S3Uri",
            "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
          },
          {
            "logical_name": "risk_tables",
            "dependency_type": "processing_output",
            "required": false,
            "compatible_sources": [
              "RiskTableMapping_Training",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
          }
        ],
        "outputs": [
          {
            "logical_name": "processed_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Processed data with risk table mappings applied"
          },
          {
            "logical_name": "risk_tables",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models for categorical features"
          }
        ]
      }
    },
    "unified_specification": {
      "primary_spec": {
        "step_type": "RiskTableMapping_Training",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "TabularPreprocessing",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Preprocessed training data from tabular preprocessing step"
          },
          {
            "logical_name": "hyperparameters_s3_uri",
            "dependency_type": "hyperparameters",
            "required": false,
            "compatible_sources": [
              "DataPrep",
              "ConfigurationStep",
              "HyperparameterPrep",
              "ModelTraining",
              "ProcessingStep",
              "FeatureEngineering",
              "DataQuality"
            ],
            "data_type": "S3Uri",
            "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
          },
          {
            "logical_name": "risk_tables",
            "dependency_type": "processing_output",
            "required": false,
            "compatible_sources": [
              "RiskTableMapping_Training",
              "ProcessingStep"
            ],
            "data_type": "S3Uri",
            "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
          }
        ],
        "outputs": [
          {
            "logical_name": "processed_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Processed data with risk table mappings applied"
          },
          {
            "logical_name": "risk_tables",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Risk tables and imputation models for categorical features"
          }
        ]
      },
      "variants": {
        "training": {
          "step_type": "RiskTableMapping_Training",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed training data from tabular preprocessing step"
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ConfigurationStep",
                "HyperparameterPrep",
                "ModelTraining",
                "ProcessingStep",
                "FeatureEngineering",
                "DataQuality"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": false,
              "compatible_sources": [
                "RiskTableMapping_Training",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
            }
          ],
          "outputs": [
            {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed data with risk table mappings applied"
            },
            {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models for categorical features"
            }
          ]
        },
        "testing": {
          "step_type": "RiskTableMapping_Testing",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed testing data from tabular preprocessing step"
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ConfigurationStep",
                "HyperparameterPrep",
                "ModelTraining",
                "ProcessingStep",
                "FeatureEngineering",
                "DataQuality"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "RiskTableMapping_Training"
              ],
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models from training step"
            }
          ],
          "outputs": [
            {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed testing data with risk table mappings applied"
            },
            {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models (passthrough from training)"
            }
          ]
        },
        "validation": {
          "step_type": "RiskTableMapping_Validation",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed validation data from tabular preprocessing step"
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ConfigurationStep",
                "HyperparameterPrep",
                "ModelTraining",
                "ProcessingStep",
                "FeatureEngineering",
                "DataQuality"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "RiskTableMapping_Training"
              ],
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models from training step"
            }
          ],
          "outputs": [
            {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed validation data with risk table mappings applied"
            },
            {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models (passthrough from training)"
            }
          ]
        },
        "calibration": {
          "step_type": "RiskTableMapping_Calibration",
          "node_type": "internal",
          "dependencies": [
            {
              "logical_name": "data_input",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "TabularPreprocessing",
                "ProcessingStep"
              ],
              "data_type": "S3Uri",
              "description": "Preprocessed calibration data from tabular preprocessing step"
            },
            {
              "logical_name": "hyperparameters_s3_uri",
              "dependency_type": "hyperparameters",
              "required": false,
              "compatible_sources": [
                "DataPrep",
                "ConfigurationStep",
                "HyperparameterPrep",
                "ModelTraining",
                "ProcessingStep",
                "FeatureEngineering",
                "DataQuality"
              ],
              "data_type": "S3Uri",
              "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
            },
            {
              "logical_name": "risk_tables",
              "dependency_type": "processing_output",
              "required": true,
              "compatible_sources": [
                "RiskTableMapping_Training"
              ],
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models from training step"
            }
          ],
          "outputs": [
            {
              "logical_name": "processed_data",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Processed calibration data with risk table mappings applied"
            },
            {
              "logical_name": "risk_tables",
              "output_type": "processing_output",
              "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
              "data_type": "S3Uri",
              "description": "Risk tables and imputation models (passthrough from training)"
            }
          ]
        }
      },
      "unified_dependencies": {
        "data_input": {
          "logical_name": "data_input",
          "dependency_type": "processing_output",
          "required": true,
          "compatible_sources": [
            "TabularPreprocessing",
            "ProcessingStep"
          ],
          "data_type": "S3Uri",
          "description": "Preprocessed calibration data from tabular preprocessing step"
        },
        "hyperparameters_s3_uri": {
          "logical_name": "hyperparameters_s3_uri",
          "dependency_type": "hyperparameters",
          "required": false,
          "compatible_sources": [
            "DataPrep",
            "ConfigurationStep",
            "HyperparameterPrep",
            "ModelTraining",
            "ProcessingStep",
            "FeatureEngineering",
            "DataQuality"
          ],
          "data_type": "S3Uri",
          "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
        },
        "risk_tables": {
          "logical_name": "risk_tables",
          "dependency_type": "processing_output",
          "required": true,
          "compatible_sources": [
            "RiskTableMapping_Training"
          ],
          "data_type": "S3Uri",
          "description": "Risk tables and imputation models from training step"
        }
      },
      "unified_outputs": {
        "processed_data": {
          "logical_name": "processed_data",
          "output_type": "processing_output",
          "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "Processed calibration data with risk table mappings applied"
        },
        "risk_tables": {
          "logical_name": "risk_tables",
          "output_type": "processing_output",
          "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "Risk tables and imputation models (passthrough from training)"
        }
      },
      "dependency_sources": {
        "data_input": [
          "training",
          "testing",
          "validation",
          "calibration"
        ],
        "hyperparameters_s3_uri": [
          "training",
          "testing",
          "validation",
          "calibration"
        ],
        "risk_tables": [
          "training",
          "testing",
          "validation",
          "calibration"
        ]
      },
      "output_sources": {
        "processed_data": [
          "training",
          "testing",
          "validation",
          "calibration"
        ],
        "risk_tables": [
          "training",
          "testing",
          "validation",
          "calibration"
        ]
      },
      "variant_count": 4
    }
  },
  "level3": {
    "passed": true,
    "issues": [
      {
        "severity": "WARNING",
        "category": "dependency_compatibility",
        "message": "Dependency hyperparameters_s3_uri has low compatibility score: 0.420",
        "details": {
          "logical_name": "hyperparameters_s3_uri",
          "specification": "risk_table_mapping",
          "best_match": {
            "provider": "BatchTransform",
            "output": "transform_output",
            "score": 0.4197368421052632
          },
          "required": false,
          "threshold_info": {
            "mode": "relaxed",
            "thresholds": {
              "pass": "\u2265 0.6",
              "warning": "0.4 - 0.59",
              "error": "0.2 - 0.39",
              "critical": "< 0.2"
            },
            "resolution_threshold": 0.5,
            "description": "Relaxed validation allowing reasonable compatibility matches"
          },
          "score_breakdown": {
            "type_compatibility": 0.2,
            "data_type_compatibility": 0.2,
            "semantic_similarity": 0.019736842105263157,
            "exact_match_bonus": 0.0,
            "source_compatibility": 0.0,
            "keyword_matching": 0.0
          },
          "all_candidates": [
            {
              "provider": "BatchTransform",
              "output": "transform_output",
              "score": 0.4197368421052632
            },
            {
              "provider": "PyTorchModel",
              "output": "model_name",
              "score": 0.31875000000000003
            },
            {
              "provider": "XGBoostModel",
              "output": "model_name",
              "score": 0.31875000000000003
            }
          ]
        },
        "recommendation": "Consider renaming 'hyperparameters_s3_uri' or adding aliases to improve semantic matching; Add 'BatchTransform' to compatible_sources for hyperparameters_s3_uri"
      }
    ],
    "specification": {
      "step_type": "RiskTableMapping_Training",
      "node_type": "internal",
      "dependencies": [
        {
          "logical_name": "data_input",
          "dependency_type": "processing_output",
          "required": true,
          "compatible_sources": [
            "TabularPreprocessing",
            "ProcessingStep"
          ],
          "data_type": "S3Uri",
          "description": "Preprocessed training data from tabular preprocessing step"
        },
        {
          "logical_name": "hyperparameters_s3_uri",
          "dependency_type": "hyperparameters",
          "required": false,
          "compatible_sources": [
            "DataPrep",
            "ConfigurationStep",
            "HyperparameterPrep",
            "ModelTraining",
            "ProcessingStep",
            "FeatureEngineering",
            "DataQuality"
          ],
          "data_type": "S3Uri",
          "description": "Optional external hyperparameters configuration file (will be overridden by internal generation)"
        },
        {
          "logical_name": "risk_tables",
          "dependency_type": "processing_output",
          "required": false,
          "compatible_sources": [
            "RiskTableMapping_Training",
            "ProcessingStep"
          ],
          "data_type": "S3Uri",
          "description": "Optional pre-existing risk tables (training mode creates new ones if not provided)"
        }
      ],
      "outputs": [
        {
          "logical_name": "processed_data",
          "output_type": "processing_output",
          "property_path": "properties.ProcessingOutputConfig.Outputs['processed_data'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "Processed data with risk table mappings applied"
        },
        {
          "logical_name": "risk_tables",
          "output_type": "processing_output",
          "property_path": "properties.ProcessingOutputConfig.Outputs['risk_tables'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "Risk tables and imputation models for categorical features"
        }
      ]
    }
  },
  "level4": {
    "passed": true,
    "issues": [
      {
        "severity": "WARNING",
        "category": "configuration_fields",
        "message": "Required configuration field not accessed in builder: project_root_folder",
        "details": {
          "field_name": "project_root_folder",
          "builder": "risk_table_mapping"
        },
        "recommendation": "Access required field project_root_folder in builder or make it optional"
      },
      {
        "severity": "INFO",
        "category": "required_field_validation",
        "message": "Builder has required fields but no explicit validation logic detected",
        "details": {
          "required_fields": [
            "region",
            "author",
            "pipeline_version",
            "service_name",
            "project_root_folder",
            "role",
            "bucket"
          ],
          "builder": "risk_table_mapping"
        },
        "recommendation": "Consider adding explicit validation logic for required configuration fields"
      }
    ],
    "builder_analysis": {
      "config_accesses": [
        {
          "field_name": "job_type",
          "line_number": 79,
          "context": "line_79"
        },
        {
          "field_name": "job_type",
          "line_number": 148,
          "context": "line_148"
        },
        {
          "field_name": "job_type",
          "line_number": 154,
          "context": "line_154"
        },
        {
          "field_name": "label_name",
          "line_number": 157,
          "context": "line_157"
        },
        {
          "field_name": "job_type",
          "line_number": 161,
          "context": "line_161"
        },
        {
          "field_name": "cat_field_list",
          "line_number": 161,
          "context": "line_161"
        },
        {
          "field_name": "use_large_processing_instance",
          "line_number": 175,
          "context": "line_175"
        },
        {
          "field_name": "processing_instance_type_large",
          "line_number": 174,
          "context": "line_174"
        },
        {
          "field_name": "processing_instance_type_small",
          "line_number": 176,
          "context": "line_176"
        },
        {
          "field_name": "processing_framework_version",
          "line_number": 180,
          "context": "line_180"
        },
        {
          "field_name": "processing_instance_count",
          "line_number": 183,
          "context": "line_183"
        },
        {
          "field_name": "processing_volume_size",
          "line_number": 184,
          "context": "line_184"
        },
        {
          "field_name": "env",
          "line_number": 205,
          "context": "line_205"
        },
        {
          "field_name": "env",
          "line_number": 206,
          "context": "line_206"
        },
        {
          "field_name": "job_type",
          "line_number": 311,
          "context": "line_311"
        },
        {
          "field_name": "job_type",
          "line_number": 338,
          "context": "line_338"
        },
        {
          "field_name": "processing_entry_point",
          "line_number": 399,
          "context": "line_399"
        },
        {
          "field_name": "effective_source_dir",
          "line_number": 401,
          "context": "line_401"
        }
      ],
      "validation_calls": [],
      "default_assignments": [],
      "class_definitions": [
        {
          "class_name": "RiskTableMappingStepBuilder",
          "line_number": 44,
          "base_classes": [
            "StepBuilderBase"
          ],
          "decorators": []
        }
      ],
      "method_definitions": [
        {
          "method_name": "__init__",
          "line_number": 53,
          "args": [
            "self",
            "config",
            "sagemaker_session",
            "role",
            "registry_manager",
            "dependency_resolver"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "validate_configuration",
          "line_number": 125,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_create_processor",
          "line_number": 166,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_environment_variables",
          "line_number": 190,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_inputs",
          "line_number": 212,
          "args": [
            "self",
            "inputs"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_outputs",
          "line_number": 270,
          "args": [
            "self",
            "outputs"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "_get_job_arguments",
          "line_number": 328,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        },
        {
          "method_name": "create_step",
          "line_number": 344,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false
        }
      ],
      "import_statements": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line_number": 1
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line_number": 1
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line_number": 1
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line_number": 1
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line_number": 2
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line_number": 3
        },
        {
          "type": "import",
          "module": "importlib",
          "alias": null,
          "line_number": 4
        },
        {
          "type": "import",
          "module": "tempfile",
          "alias": null,
          "line_number": 5
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line_number": 6
        },
        {
          "type": "import",
          "module": "shutil",
          "alias": null,
          "line_number": 7
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line_number": 8
        },
        {
          "type": "import",
          "module": "boto3",
          "alias": null,
          "line_number": 9
        },
        {
          "type": "from_import",
          "module": "botocore.exceptions",
          "name": "ClientError",
          "alias": null,
          "line_number": 10
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.steps",
          "name": "ProcessingStep",
          "alias": null,
          "line_number": 12
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.steps",
          "name": "Step",
          "alias": null,
          "line_number": 12
        },
        {
          "type": "from_import",
          "module": "sagemaker.processing",
          "name": "ProcessingInput",
          "alias": null,
          "line_number": 13
        },
        {
          "type": "from_import",
          "module": "sagemaker.processing",
          "name": "ProcessingOutput",
          "alias": null,
          "line_number": 13
        },
        {
          "type": "from_import",
          "module": "sagemaker.sklearn",
          "name": "SKLearnProcessor",
          "alias": null,
          "line_number": 14
        },
        {
          "type": "from_import",
          "module": "sagemaker.s3",
          "name": "S3Uploader",
          "alias": null,
          "line_number": 15
        },
        {
          "type": "from_import",
          "module": "configs.config_risk_table_mapping_step",
          "name": "RiskTableMappingConfig",
          "alias": null,
          "line_number": 17
        },
        {
          "type": "from_import",
          "module": "core.base.builder_base",
          "name": "StepBuilderBase",
          "alias": null,
          "line_number": 18
        },
        {
          "type": "from_import",
          "module": "s3_utils",
          "name": "S3PathHandler",
          "alias": null,
          "line_number": 19
        },
        {
          "type": "from_import",
          "module": "specs.risk_table_mapping_training_spec",
          "name": "RISK_TABLE_MAPPING_TRAINING_SPEC",
          "alias": null,
          "line_number": 23
        },
        {
          "type": "from_import",
          "module": "specs.risk_table_mapping_validation_spec",
          "name": "RISK_TABLE_MAPPING_VALIDATION_SPEC",
          "alias": null,
          "line_number": 26
        },
        {
          "type": "from_import",
          "module": "specs.risk_table_mapping_testing_spec",
          "name": "RISK_TABLE_MAPPING_TESTING_SPEC",
          "alias": null,
          "line_number": 29
        },
        {
          "type": "from_import",
          "module": "specs.risk_table_mapping_calibration_spec",
          "name": "RISK_TABLE_MAPPING_CALIBRATION_SPEC",
          "alias": null,
          "line_number": 30
        },
        {
          "type": "from_import",
          "module": "sagemaker.workflow.functions",
          "name": "Join",
          "alias": null,
          "line_number": 309
        },
        {
          "type": "import",
          "module": "traceback",
          "alias": null,
          "line_number": 429
        }
      ],
      "config_class_usage": []
    },
    "config_analysis": {
      "class_name": "RiskTableMappingConfig",
      "fields": {
        "author": {
          "type": "<class 'str'>",
          "required": true
        },
        "bucket": {
          "type": "<class 'str'>",
          "required": true
        },
        "role": {
          "type": "<class 'str'>",
          "required": true
        },
        "region": {
          "type": "<class 'str'>",
          "required": true
        },
        "service_name": {
          "type": "<class 'str'>",
          "required": true
        },
        "pipeline_version": {
          "type": "<class 'str'>",
          "required": true
        },
        "model_class": {
          "type": "<class 'str'>",
          "required": false
        },
        "current_date": {
          "type": "<class 'str'>",
          "required": false
        },
        "framework_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "py_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "source_dir": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "project_root_folder": {
          "type": "<class 'str'>",
          "required": true
        },
        "processing_instance_count": {
          "type": "<class 'int'>",
          "required": false
        },
        "processing_volume_size": {
          "type": "<class 'int'>",
          "required": false
        },
        "processing_instance_type_large": {
          "type": "<class 'str'>",
          "required": false
        },
        "processing_instance_type_small": {
          "type": "<class 'str'>",
          "required": false
        },
        "use_large_processing_instance": {
          "type": "<class 'bool'>",
          "required": false
        },
        "processing_source_dir": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "processing_entry_point": {
          "type": "<class 'str'>",
          "required": false
        },
        "processing_script_arguments": {
          "type": "typing.Optional[typing.List[str]]",
          "required": false
        },
        "processing_framework_version": {
          "type": "<class 'str'>",
          "required": false
        },
        "job_type": {
          "type": "<class 'str'>",
          "required": false
        },
        "cat_field_list": {
          "type": "typing.List[str]",
          "required": false
        },
        "label_name": {
          "type": "<class 'str'>",
          "required": false
        },
        "smooth_factor": {
          "type": "<class 'float'>",
          "required": false
        },
        "count_threshold": {
          "type": "<class 'int'>",
          "required": false
        },
        "aws_region": {
          "type": "property",
          "required": false
        },
        "effective_instance_type": {
          "type": "property",
          "required": false
        },
        "effective_source_dir": {
          "type": "property",
          "required": false
        },
        "model_extra": {
          "type": "property",
          "required": false
        },
        "model_fields_set": {
          "type": "property",
          "required": false
        },
        "pipeline_description": {
          "type": "property",
          "required": false
        },
        "pipeline_name": {
          "type": "property",
          "required": false
        },
        "pipeline_s3_loc": {
          "type": "property",
          "required": false
        },
        "resolved_processing_source_dir": {
          "type": "property",
          "required": false
        },
        "resolved_source_dir": {
          "type": "property",
          "required": false
        },
        "script_contract": {
          "type": "property",
          "required": false
        },
        "script_path": {
          "type": "property",
          "required": false
        },
        "step_catalog": {
          "type": "property",
          "required": false
        }
      },
      "required_fields": [
        "author",
        "bucket",
        "role",
        "region",
        "service_name",
        "pipeline_version",
        "project_root_folder"
      ],
      "optional_fields": [
        "model_class",
        "current_date",
        "framework_version",
        "py_version",
        "source_dir",
        "processing_instance_count",
        "processing_volume_size",
        "processing_instance_type_large",
        "processing_instance_type_small",
        "use_large_processing_instance",
        "processing_source_dir",
        "processing_entry_point",
        "processing_script_arguments",
        "processing_framework_version",
        "job_type",
        "cat_field_list",
        "label_name",
        "smooth_factor",
        "count_threshold",
        "aws_region",
        "effective_instance_type",
        "effective_source_dir",
        "model_extra",
        "model_fields_set",
        "pipeline_description",
        "pipeline_name",
        "pipeline_s3_loc",
        "resolved_processing_source_dir",
        "resolved_source_dir",
        "script_contract",
        "script_path",
        "step_catalog"
      ],
      "default_values": {
        "author": "PydanticUndefined",
        "bucket": "PydanticUndefined",
        "role": "PydanticUndefined",
        "region": "PydanticUndefined",
        "service_name": "PydanticUndefined",
        "pipeline_version": "PydanticUndefined",
        "model_class": "xgboost",
        "current_date": "PydanticUndefined",
        "framework_version": "2.1.0",
        "py_version": "py310",
        "source_dir": null,
        "project_root_folder": "PydanticUndefined",
        "processing_instance_count": 1,
        "processing_volume_size": 500,
        "processing_instance_type_large": "ml.m5.4xlarge",
        "processing_instance_type_small": "ml.m5.2xlarge",
        "use_large_processing_instance": false,
        "processing_source_dir": null,
        "processing_entry_point": "risk_table_mapping.py",
        "processing_script_arguments": null,
        "processing_framework_version": "1.2-1",
        "job_type": "training",
        "cat_field_list": [],
        "label_name": "target",
        "smooth_factor": 0.01,
        "count_threshold": 5
      }
    }
  },
  "overall_status": "PASSING",
  "scoring": {
    "overall_score": 100.0,
    "quality_rating": "Excellent",
    "level_scores": {
      "level1_script_contract": 100.0,
      "level2_contract_spec": 100.0,
      "level3_spec_dependencies": 100.0,
      "level4_builder_config": 100.0
    }
  },
  "metadata": {
    "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/risk_table_mapping.py",
    "validation_timestamp": "2025-09-29T22:16:23.177522",
    "validator_version": "1.0.0"
  }
}